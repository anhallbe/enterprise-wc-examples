"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkids_enterprise_wc"] = self["webpackChunkids_enterprise_wc"] || []).push([["src_core_ids-data-source_ts"],{

/***/ "./src/core/ids-data-source.ts":
/*!*************************************!*\
  !*** ./src/core/ids-data-source.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ids_data_source_default)\n/* harmony export */ });\n/* harmony import */ var _utils_ids_deep_clone_utils_ids_deep_clone_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/ids-deep-clone-utils/ids-deep-clone-utils */ \"./src/utils/ids-deep-clone-utils/ids-deep-clone-utils.ts\");\n\nclass IdsDataSource {\n  /**\n   * Holds a reference to the original data\n   * @private\n   */\n  #originalData = [];\n  /**\n   * Holds the data in its current state\n   * @private\n   */\n  #currentData = [];\n  /**\n   * Holds the current data to use with filter\n   * @private\n   */\n  #currentFilterData = null;\n  /**\n   * Page-number used for pagination\n   * @private\n   */\n  #pageNumber = 1;\n  /**\n   * Page-size used for pagination\n   * @private\n   */\n  #pageSize;\n  /**\n   * An override for the total number of items in data\n   * @private\n   */\n  #total;\n  /**\n   * If true use a flattened data representation\n   * @private\n   */\n  #flatten = false;\n  /**\n   * If true use a filtered data representation\n   * @private\n   */\n  #filtered = false;\n  /**\n   * Return all the currently used data, without paging or filter\n   * @returns {Array | null} All the currently used data\n   */\n  get allData() {\n    if (this.#currentFilterData) {\n      return this.flatten ? this.#flattenData(this.#currentFilterData) : this.#currentFilterData;\n    }\n    return this.#currentData;\n  }\n  /**\n   * Sets the data array on the data source object\n   * @param {Array | null} value The array to attach\n   */\n  set data(value) {\n    this.#currentData = this.#flattenData((0,_utils_ids_deep_clone_utils_ids_deep_clone_utils__WEBPACK_IMPORTED_MODULE_0__.deepClone)(value));\n    this.#originalData = value;\n    this.#total = this.#currentData?.length || 0;\n  }\n  /**\n   * Return the currently used data in its current state\n   * @returns {Array | null} The attached array of data in its current state\n   */\n  get data() {\n    if (this.pageSize && this.pageSize < this.total) {\n      return this.paginate(this.pageNumber, this.pageSize);\n    }\n    return this.#currentData;\n  }\n  get currentData() {\n    return this.#unFlattenData(this.#currentData);\n  }\n  /* Provides ability to set the current data */\n  set currentData(value) {\n    this.#currentData = value;\n  }\n  /* Provides ability to get the original data */\n  get originalData() {\n    return this.#originalData;\n  }\n  /* If true a flattened data model is used */\n  get flatten() {\n    return this.#flatten;\n  }\n  /* If true a flattened data model is used */\n  set flatten(value) {\n    this.#flatten = value;\n  }\n  /* If true data is currently filtered */\n  get filtered() {\n    return this.#filtered;\n  }\n  /* Set filtered value */\n  set filtered(value) {\n    this.#filtered = value;\n  }\n  /**\n   * Flatten tree data internally\n   * @param {Record<string, unknown>} data The data array\n   * @returns {Record<string, unknown>} The flattened data\n   */\n  #flattenData(data) {\n    if (!this.#flatten)\n      return data;\n    const newData = [];\n    const addRows = (subData, length, depth, parentElement) => {\n      subData.map((row, index) => {\n        row.ariaLevel = depth;\n        row.ariaSetSize = length;\n        row.ariaPosinset = index + 1;\n        if (depth === 1) {\n          row.originalElement = index;\n          if (this.pageNumber > 1) {\n            row.originalElement = index + (this.pageNumber - 1) * this.pageSize;\n          }\n        }\n        if (depth > 1)\n          row.parentElement = parentElement;\n        newData.push(row);\n        if (row.children) {\n          if (this.pageNumber > 1) {\n            index += (this.pageNumber - 1) * this.pageSize;\n          }\n          addRows(row.children, row.children.length, depth + 1, `${row.parentElement ? `${row.parentElement} ` : \"\"}${row.id}`);\n        }\n      });\n    };\n    addRows(data, data.length, 1, \"\");\n    return newData;\n  }\n  /**\n   * Flatten tree data internally\n   * @param {Record<string, unknown>} data The data array\n   * @returns {Record<string, unknown>} The flattened data\n   */\n  #unFlattenData(data) {\n    if (!this.#flatten)\n      return data;\n    const newData = data.filter((row) => {\n      delete row.ariaSetSize;\n      delete row.ariaPosinset;\n      const level = row.ariaLevel;\n      delete row.ariaLevel;\n      return level === 1;\n    });\n    return newData;\n  }\n  /**\n   * Get the total number of items in data\n   * @returns {number} - the current page-total\n   */\n  get total() {\n    return this.#total;\n  }\n  /**\n   * Override the total number of items in data\n   * @param {number} value - the new page-total\n   */\n  set total(value) {\n    this.#total = value;\n  }\n  /**\n   * Set the current page-number\n   * @param {number} value - new the page-number\n   */\n  set pageNumber(value) {\n    this.#pageNumber = value;\n  }\n  /**\n   * Get the curret page-number\n   * @returns {number} - the current page-number\n   */\n  get pageNumber() {\n    return this.#pageNumber;\n  }\n  /**\n   * Set the current page-size\n   * @param {number} value - new the page-size\n   */\n  set pageSize(value) {\n    this.#pageSize = value;\n  }\n  /**\n   * Get the current page-size\n   * @returns {number} - the current page-size\n   */\n  get pageSize() {\n    return this.#pageSize;\n  }\n  /**\n   * Prevent running more than once with pagination\n   * @private\n   */\n  #prevState = { pageNumber: -1, pageSize: -1, data: null };\n  /**\n   * Reset previous state\n   * @private\n   * @returns {void}\n   */\n  #resetPrevState() {\n    this.#prevState = { pageNumber: -1, pageSize: -1, data: null };\n  }\n  /**\n   * Ckeck previous state\n   * @private\n   * @param {number|string} num Page number\n   * @param {number|string} size Page size\n   * @returns {boolean} True, if previous state\n   */\n  #isPrevState(num, size) {\n    const { pageNumber, pageSize } = this.#prevState;\n    return pageNumber === Number(num) && pageSize === Number(size);\n  }\n  /**\n   * @param {number} pageNumber - a page number to start with\n   * @param {number} pageSize - number of items to return\n   * @returns {Array} the paginated data\n   */\n  paginate(pageNumber = 1, pageSize = 10) {\n    if (this.#isPrevState(pageNumber, pageSize))\n      return this.#prevState.data;\n    this.#prevState.pageNumber = Number(pageNumber);\n    this.#prevState.pageSize = Number(pageSize);\n    pageNumber = Math.max(pageNumber || 1, 1);\n    pageSize = pageSize || 1;\n    const last = pageNumber * pageSize;\n    const start = last - pageSize;\n    let data;\n    if (this.flatten) {\n      const unFlattenData = this.#unFlattenData((0,_utils_ids_deep_clone_utils_ids_deep_clone_utils__WEBPACK_IMPORTED_MODULE_0__.deepClone)(this.#currentData));\n      data = this.#flattenData(unFlattenData.slice(start, start + pageSize));\n    } else {\n      data = this.#currentData.slice(start, start + pageSize);\n    }\n    this.#prevState.data = data;\n    return data;\n  }\n  /**\n   * Executes a provided function once for each array element in the current data\n   * @param {Function} fn An optional function to iterate the array\n   */\n  forEach(fn) {\n    this.#currentData.forEach(fn);\n  }\n  /**\n   * Sort the dataset\n   * @param {string} field The dataset field\n   * @param {boolean} reverse Sort ascending or descending\n   */\n  sort(field, reverse) {\n    const sort = this.sortFunction(field, reverse);\n    this.#resetPrevState();\n    if (this.flatten) {\n      const unFlattenData = this.#unFlattenData(this.#currentData);\n      unFlattenData.sort(sort);\n      this.#currentData = this.#flattenData(unFlattenData);\n      return;\n    }\n    this.#currentData.sort(sort);\n    this.#originalData.sort(sort);\n  }\n  /**\n   * An overridable array sort function\n   * @param {string} field The dataset field\n   * @param {any} ascending Sort ascending or descending\n   * @returns {object} The sorted dataset\n   */\n  sortFunction(field, ascending) {\n    const primer = (a) => {\n      a = a === void 0 || a === null ? \"\" : a;\n      if (typeof a === \"string\") {\n        a = a.toUpperCase();\n        const numeric = Number(a);\n        if (a !== \"\" && !Number.isNaN(numeric) && Number.isFinite(numeric)) {\n          a = numeric;\n        }\n      }\n      return a;\n    };\n    const key = (x) => primer(x[field]);\n    ascending = !ascending ? -1 : 1;\n    return (a, b) => {\n      a = key(a);\n      b = key(b);\n      if (typeof a === \"number\" && typeof b === \"string\" && b !== \"\")\n        return ascending * -1;\n      if (typeof a === \"string\" && typeof b === \"number\" && a !== \"\")\n        return ascending;\n      if (a === \"\")\n        return b === \"\" ? 0 : 1;\n      if (b === \"\")\n        return a === \"\" ? 0 : -1;\n      if (typeof a !== typeof b) {\n        a = a.toString().toLowerCase();\n        b = b.toString().toLowerCase();\n      }\n      return ascending * (Number(a > b) - Number(b > a));\n    };\n  }\n  /**\n   * Filter current data with given callback\n   * will reset filter data, if given callback not found\n   * @param {Function} filterFunction User filter function\n   * @returns {void}\n   */\n  filter(filterFunction) {\n    const updateCurrentData = (data) => {\n      this.#currentData = this.flatten ? this.#flattenData(data) : data;\n      this.total = this.#currentData.length;\n      this.pageNumber = 1;\n    };\n    const resetCurrentData = () => {\n      updateCurrentData(this.#currentFilterData);\n      this.#currentFilterData = null;\n      this.#resetPrevState();\n      this.filtered = false;\n    };\n    if (typeof filterFunction === \"function\") {\n      const useData = this.flatten ? this.#unFlattenData(this.#currentData) : this.#currentData;\n      this.#currentFilterData = this.#currentFilterData || useData;\n      this.#currentFilterData.forEach((row, index) => {\n        row.isFilteredOut = filterFunction(row, index);\n      });\n      if (this.#currentFilterData.some((row) => row.isFilteredOut)) {\n        const data = this.#currentFilterData.filter((row) => {\n          const r = !row.isFilteredOut;\n          delete row.isFilteredOut;\n          return r;\n        });\n        updateCurrentData(data);\n        this.#resetPrevState();\n        this.filtered = true;\n      } else {\n        resetCurrentData();\n      }\n    } else if (this.#currentFilterData) {\n      resetCurrentData();\n    }\n  }\n}\nvar ids_data_source_default = IdsDataSource;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/core/ids-data-source.ts\n");

/***/ }),

/***/ "./src/utils/ids-deep-clone-utils/ids-deep-clone-utils.ts":
/*!****************************************************************!*\
  !*** ./src/utils/ids-deep-clone-utils/ids-deep-clone-utils.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"deepClone\": () => (/* binding */ deepClone),\n/* harmony export */   \"deepCloneArray\": () => (/* binding */ deepCloneArray)\n/* harmony export */ });\nconst refs = [];\nconst refsNew = [];\nfunction deepCloneArray(arr, fn) {\n  const keys = Object.keys(arr);\n  const arrClone = new Array(keys.length);\n  for (let i = 0; i < keys.length; i += 1) {\n    const k = keys[i];\n    const cur = arr[k];\n    if (typeof cur !== \"object\" || cur === null) {\n      arrClone[k] = cur;\n    } else if (cur instanceof Date) {\n      arrClone[k] = new Date(cur);\n    } else {\n      const index = refs.indexOf(cur);\n      if (index !== -1) {\n        arrClone[k] = refsNew[index];\n      } else {\n        arrClone[k] = fn.call(this, cur);\n      }\n    }\n  }\n  return arrClone;\n}\nfunction deepClone(obj) {\n  if (typeof obj !== \"object\" || obj === null) {\n    return obj;\n  }\n  if (obj instanceof Date) {\n    return new Date(obj);\n  }\n  if (Array.isArray(obj)) {\n    return deepCloneArray(obj, deepClone);\n  }\n  const objClone = {};\n  refs.push(obj);\n  refsNew.push(objClone);\n  for (const k in obj) {\n    if (Object.hasOwnProperty.call(obj, k) === false) {\n      continue;\n    }\n    const cur = obj[k];\n    if (typeof cur !== \"object\" || cur === null) {\n      objClone[k] = cur;\n    } else if (cur instanceof Date) {\n      objClone[k] = new Date(cur);\n    } else {\n      const i = refs.indexOf(cur);\n      if (i !== -1) {\n        objClone[k] = refsNew[i];\n      } else {\n        objClone[k] = deepClone(cur);\n      }\n    }\n  }\n  refs.pop();\n  refsNew.pop();\n  return objClone;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvaWRzLWRlZXAtY2xvbmUtdXRpbHMvaWRzLWRlZXAtY2xvbmUtdXRpbHMudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxNQUFNLE9BQW1CLENBQUM7QUFDMUIsTUFBTSxVQUFzQixDQUFDO0FBU3RCLFNBQVMsZUFBMEIsS0FBVSxJQUFVO0FBQzVELFFBQU0sT0FBTyxPQUFPLEtBQUssR0FBRztBQUM1QixRQUFNLFdBQVcsSUFBSSxNQUFNLEtBQUssTUFBTTtBQUV0QyxXQUFTLElBQUksR0FBRyxJQUFJLEtBQUssUUFBUSxLQUFLLEdBQUc7QUFDdkMsVUFBTSxJQUFTLEtBQUssQ0FBQztBQUNyQixVQUFNLE1BQU0sSUFBSSxDQUFDO0FBRWpCLFFBQUksT0FBTyxRQUFRLFlBQVksUUFBUSxNQUFNO0FBQzNDLGVBQVMsQ0FBQyxJQUFJO0FBQUEsSUFDaEIsV0FBVyxlQUFlLE1BQU07QUFDOUIsZUFBUyxDQUFDLElBQUksSUFBSSxLQUFLLEdBQUc7QUFBQSxJQUM1QixPQUFPO0FBQ0wsWUFBTSxRQUFRLEtBQUssUUFBUSxHQUFHO0FBQzlCLFVBQUksVUFBVSxJQUFJO0FBQ2hCLGlCQUFTLENBQUMsSUFBSSxRQUFRLEtBQUs7QUFBQSxNQUM3QixPQUFPO0FBQ0wsaUJBQVMsQ0FBQyxJQUFJLEdBQUcsS0FBSyxNQUFNLEdBQUc7QUFBQSxNQUNqQztBQUFBLElBQ0Y7QUFBQSxFQUNGO0FBQ0EsU0FBTztBQUNUO0FBT08sU0FBUyxVQUFVLEtBQVU7QUFDbEMsTUFBSSxPQUFPLFFBQVEsWUFBWSxRQUFRLE1BQU07QUFDM0MsV0FBTztBQUFBLEVBQ1Q7QUFFQSxNQUFJLGVBQWUsTUFBTTtBQUN2QixXQUFPLElBQUksS0FBSyxHQUFHO0FBQUEsRUFDckI7QUFFQSxNQUFJLE1BQU0sUUFBUSxHQUFHLEdBQUc7QUFDdEIsV0FBTyxlQUFlLEtBQUssU0FBUztBQUFBLEVBQ3RDO0FBRUEsUUFBTSxXQUFnQixDQUFDO0FBQ3ZCLE9BQUssS0FBSyxHQUFHO0FBQ2IsVUFBUSxLQUFLLFFBQVE7QUFFckIsYUFBVyxLQUFLLEtBQUs7QUFDbkIsUUFBSSxPQUFPLGVBQWUsS0FBSyxLQUFLLENBQUMsTUFBTSxPQUFPO0FBQ2hEO0FBQUEsSUFDRjtBQUVBLFVBQU0sTUFBTSxJQUFJLENBQUM7QUFDakIsUUFBSSxPQUFPLFFBQVEsWUFBWSxRQUFRLE1BQU07QUFDM0MsZUFBUyxDQUFDLElBQUk7QUFBQSxJQUNoQixXQUFXLGVBQWUsTUFBTTtBQUM5QixlQUFTLENBQUMsSUFBSSxJQUFJLEtBQUssR0FBRztBQUFBLElBQzVCLE9BQU87QUFDTCxZQUFNLElBQUksS0FBSyxRQUFRLEdBQUc7QUFDMUIsVUFBSSxNQUFNLElBQUk7QUFDWixpQkFBUyxDQUFDLElBQUksUUFBUSxDQUFDO0FBQUEsTUFDekIsT0FBTztBQUNMLGlCQUFTLENBQUMsSUFBSSxVQUFVLEdBQUc7QUFBQSxNQUM3QjtBQUFBLElBQ0Y7QUFBQSxFQUNGO0FBQ0EsT0FBSyxJQUFJO0FBQ1QsVUFBUSxJQUFJO0FBQ1osU0FBTztBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaWRzLWVudGVycHJpc2Utd2MvLi9zcmMvdXRpbHMvaWRzLWRlZXAtY2xvbmUtdXRpbHMvaWRzLWRlZXAtY2xvbmUtdXRpbHMudHM/YjlhZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTdG9yZSB0aGUgcmVmZXJlbmNlcyB0byBhdm9pZCBjaXJjdWxhciByZWZlcmVuY2UgcHJvYmxlbXNcbmNvbnN0IHJlZnM6IEFycmF5PGFueT4gPSBbXTtcbmNvbnN0IHJlZnNOZXc6IEFycmF5PGFueT4gPSBbXTtcblxuLyoqXG4gKiBEZWVwIGNsb25lIGFuIGFycmF5IGNyZWF0aW5nIGEgbmV3IGFycmF5XG4gKiBAcGFyYW0ge2FueX0gdGhpcyBUaGUgYXJyYXkgdG8gY2xvbmVcbiAqIEBwYXJhbSB7QXJyYXl9IGFyciBUaGUgYXJyYXkgdG8gY2xvbmVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbmFsIGNhbGwgYmFjayB1c2VkIGZvciByZWN1cnNpb25cbiAqIEByZXR1cm5zIHtBcnJheX0gVGhlIGFycmF5J3MgY2xvbmVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlZXBDbG9uZUFycmF5KHRoaXM6IGFueSwgYXJyOiBhbnksIGZuPzogYW55KSB7XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhhcnIpO1xuICBjb25zdCBhcnJDbG9uZSA9IG5ldyBBcnJheShrZXlzLmxlbmd0aCk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3QgazogYW55ID0ga2V5c1tpXTtcbiAgICBjb25zdCBjdXIgPSBhcnJba107XG5cbiAgICBpZiAodHlwZW9mIGN1ciAhPT0gJ29iamVjdCcgfHwgY3VyID09PSBudWxsKSB7XG4gICAgICBhcnJDbG9uZVtrXSA9IGN1cjtcbiAgICB9IGVsc2UgaWYgKGN1ciBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgIGFyckNsb25lW2tdID0gbmV3IERhdGUoY3VyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgaW5kZXggPSByZWZzLmluZGV4T2YoY3VyKTtcbiAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgYXJyQ2xvbmVba10gPSByZWZzTmV3W2luZGV4XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFyckNsb25lW2tdID0gZm4uY2FsbCh0aGlzLCBjdXIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gYXJyQ2xvbmU7XG59XG5cbi8qKlxuICogRGVlcCBjbG9uZSBhbiBvYmplY3QgY3JlYXRpbmcgYSBuZXcgb2JqZWN0XG4gKiBAcGFyYW0ge29iamVjdHxBcnJheX0gb2JqIFRoZSBvYmplY3Qgb3IgYXJyYXkgdG8gY2xvbmVcbiAqIEByZXR1cm5zIHtvYmplY3R8QXJyYXl9IFRoZSBvYmplY3QvYXJyYXkncyBjbG9uZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVlcENsb25lKG9iajogYW55KSB7XG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwpIHtcbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgaWYgKG9iaiBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICByZXR1cm4gbmV3IERhdGUob2JqKTtcbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICByZXR1cm4gZGVlcENsb25lQXJyYXkob2JqLCBkZWVwQ2xvbmUpO1xuICB9XG5cbiAgY29uc3Qgb2JqQ2xvbmU6IGFueSA9IHt9O1xuICByZWZzLnB1c2gob2JqKTtcbiAgcmVmc05ldy5wdXNoKG9iakNsb25lKTtcblxuICBmb3IgKGNvbnN0IGsgaW4gb2JqKSB7XG4gICAgaWYgKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaykgPT09IGZhbHNlKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBjb25zdCBjdXIgPSBvYmpba107XG4gICAgaWYgKHR5cGVvZiBjdXIgIT09ICdvYmplY3QnIHx8IGN1ciA9PT0gbnVsbCkge1xuICAgICAgb2JqQ2xvbmVba10gPSBjdXI7XG4gICAgfSBlbHNlIGlmIChjdXIgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICBvYmpDbG9uZVtrXSA9IG5ldyBEYXRlKGN1cik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGkgPSByZWZzLmluZGV4T2YoY3VyKTtcbiAgICAgIGlmIChpICE9PSAtMSkge1xuICAgICAgICBvYmpDbG9uZVtrXSA9IHJlZnNOZXdbaV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvYmpDbG9uZVtrXSA9IGRlZXBDbG9uZShjdXIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZWZzLnBvcCgpO1xuICByZWZzTmV3LnBvcCgpO1xuICByZXR1cm4gb2JqQ2xvbmU7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/utils/ids-deep-clone-utils/ids-deep-clone-utils.ts\n");

/***/ })

}]);