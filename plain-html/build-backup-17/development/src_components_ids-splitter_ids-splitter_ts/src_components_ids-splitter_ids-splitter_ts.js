"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkids_enterprise_wc"] = self["webpackChunkids_enterprise_wc"] || []).push([["src_components_ids-splitter_ids-splitter_ts"],{

/***/ "./src/components/ids-splitter/ids-splitter-local-storage.ts":
/*!*******************************************************************!*\
  !*** ./src/components/ids-splitter/ids-splitter-local-storage.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ IdsSplitterLocalStorage)\n/* harmony export */ });\n/* harmony import */ var _ids_splitter_pane__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ids-splitter-pane */ \"./src/components/ids-splitter/ids-splitter-pane.ts\");\n\nclass IdsSplitterLocalStorage {\n  constructor(root) {\n    this.root = root;\n  }\n  root;\n  /**\n   * Returns true if local storage may be used / is available\n   * @private\n   * @returns {boolean} If it can be used.\n   */\n  #canUseLocalStorage() {\n    try {\n      if (typeof localStorage?.getItem === \"function\")\n        return true;\n    } catch (exception) {\n      return false;\n    }\n    return false;\n  }\n  /**\n   * Check if save position, is valid.\n   * @private\n   * @returns {boolean} true if is valid.\n   */\n  #canSavePosition() {\n    return this.root.savePosition && this.#canUseLocalStorage();\n  }\n  /**\n   * Save position.\n   * @private\n   * @returns {void}\n   */\n  savePosition() {\n    if (this.#canSavePosition()) {\n      const saveObj = { sizes: [...this.root.sizes()] };\n      [\"align\", \"axis\", \"disabled\"].forEach((key) => {\n        saveObj[key] = this.root[key];\n      });\n      localStorage.setItem(this.idTobeUse(this.root.uniqueId), JSON.stringify(saveObj));\n      this.root.triggerEvent(\"save-position\", this.root, {\n        detail: { elem: this.root, uniqueId: this.root.uniqueId, value: saveObj }\n      });\n    }\n  }\n  /**\n   * Restore the saved position from local storage\n   * @private\n   * @returns {IdsSplitterSaved|null} The position\n   */\n  restorePosition() {\n    if (!this.#canSavePosition())\n      return null;\n    let saveObj = {};\n    const savedStr = localStorage.getItem(this.idTobeUse(this.root.uniqueId));\n    if (typeof savedStr === \"string\" && savedStr !== \"\") {\n      saveObj = { ...JSON.parse(savedStr), canRestore: false };\n      const len = saveObj?.sizes?.length;\n      const panes = [...this.root.childNodes].filter((n) => n instanceof _ids_splitter_pane__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n      if (len && len === panes?.length) {\n        saveObj.canRestore = true;\n        [\"align\", \"axis\", \"disabled\"].forEach((key) => {\n          if (saveObj[key] !== this.root[key])\n            saveObj.canRestore = false;\n        });\n      }\n    }\n    return saveObj?.canRestore ? saveObj : null;\n  }\n  /**\n   * Clear the saved position from local storage\n   * @param {string} uniqueId If undefined, will use Internal attached.\n   * @returns {void}\n   */\n  clearPosition(uniqueId) {\n    const clearIds = [];\n    if (this.#canUseLocalStorage()) {\n      const removeId = uniqueId || this.root.uniqueId;\n      const savedKay = this.idTobeUse(removeId);\n      const found = Object.keys(localStorage).some((key) => key === savedKay);\n      if (found) {\n        localStorage.removeItem(savedKay);\n        clearIds.push(removeId);\n      }\n    }\n    this.root.triggerEvent(\"clear-position\", this.root, {\n      detail: { elem: this.root, clearIds }\n    });\n  }\n  /**\n   * Clear all related saved position from local storage\n   * @returns {void}\n   */\n  clearPositionAll() {\n    const clearIds = [];\n    if (this.#canUseLocalStorage()) {\n      const keys = Object.keys(localStorage);\n      keys.forEach((key) => {\n        const temp = \"{idstempclearstorage}\";\n        const tempId = this.idTobeUse(temp);\n        const regexFound = new RegExp(`^${tempId.replace(temp, \"(.+)\")}$`, \"g\");\n        if (regexFound.test(key)) {\n          const parts = tempId.split(temp);\n          const regexExtract = new RegExp(`^${parts.join(\"|\")}$`, \"g\");\n          const removeId = key.replace(regexExtract, \"\");\n          localStorage.removeItem(key);\n          clearIds.push(removeId);\n        }\n      });\n    }\n    this.root.triggerEvent(\"clear-position\", this.root, {\n      detail: { elem: this.root, clearIds }\n    });\n  }\n  /**\n   * Get the id to be use.\n   * @param {string} uniqueId The uniqueId.\n   * @param {string} suffix Optional suffix string to make the id more unique.\n   * @param {string} prefix Optional prefix string to make the id more unique.\n   * @returns {string} The id.\n   */\n  idTobeUse(uniqueId, suffix, prefix) {\n    const defaults = { uniqueId: \"\", prefix: \"ids-splitter\", suffix: \"usersettings-position\" };\n    const hasValue = [uniqueId, suffix, prefix].some((x) => x !== void 0 && x !== null);\n    let returnId = defaults.prefix;\n    if (hasValue) {\n      const use = (key, val) => val ?? defaults[key];\n      returnId = `${use(\"prefix\", prefix)}-${use(\"uniqueId\", uniqueId)}-${use(\"suffix\", suffix)}`;\n    }\n    return returnId;\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9pZHMtc3BsaXR0ZXIvaWRzLXNwbGl0dGVyLWxvY2FsLXN0b3JhZ2UudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBNEI7QUEyQjVCLE1BQU8sd0JBQXNDO0FBQUEsRUFDM0MsWUFBWSxNQUFXO0FBQ3JCLFNBQUssT0FBTztBQUFBLEVBQ2Q7QUFBQSxFQUVBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBT0Esc0JBQStCO0FBQzdCLFFBQUk7QUFDRixVQUFJLE9BQU8sY0FBYyxZQUFZO0FBQVksZUFBTztBQUFBLElBQzFELFNBQVMsV0FBUDtBQUNBLGFBQU87QUFBQSxJQUNUO0FBQ0EsV0FBTztBQUFBLEVBQ1Q7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFPQSxtQkFBNEI7QUFDMUIsV0FBTyxLQUFLLEtBQUssZ0JBQWdCLEtBQUssb0JBQW9CO0FBQUEsRUFDNUQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFPQSxlQUFxQjtBQUNuQixRQUFJLEtBQUssaUJBQWlCLEdBQUc7QUFDM0IsWUFBTSxVQUE0QixFQUFFLE9BQU8sQ0FBQyxHQUFHLEtBQUssS0FBSyxNQUFNLENBQUMsRUFBRTtBQUNsRSxPQUFDLFNBQVMsUUFBUSxVQUFVLEVBQUUsUUFBUSxDQUFDLFFBQVE7QUFDN0MsZ0JBQVEsR0FBZ0MsSUFBSSxLQUFLLEtBQUssR0FBRztBQUFBLE1BQzNELENBQUM7QUFHRCxtQkFBYSxRQUFRLEtBQUssVUFBVSxLQUFLLEtBQUssUUFBUSxHQUFHLEtBQUssVUFBVSxPQUFPLENBQUM7QUFDaEYsV0FBSyxLQUFLLGFBQWEsaUJBQWlCLEtBQUssTUFBTTtBQUFBLFFBQ2pELFFBQVEsRUFBRSxNQUFNLEtBQUssTUFBTSxVQUFVLEtBQUssS0FBSyxVQUFVLE9BQU8sUUFBUTtBQUFBLE1BQzFFLENBQUM7QUFBQSxJQUNIO0FBQUEsRUFDRjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU9BLGtCQUEyQztBQUN6QyxRQUFJLENBQUMsS0FBSyxpQkFBaUI7QUFBRyxhQUFPO0FBRXJDLFFBQUksVUFBNEIsQ0FBQztBQUNqQyxVQUFNLFdBQVcsYUFBYSxRQUFRLEtBQUssVUFBVSxLQUFLLEtBQUssUUFBUSxDQUFDO0FBQ3hFLFFBQUksT0FBTyxhQUFhLFlBQVksYUFBYSxJQUFJO0FBQ25ELGdCQUFVLEVBQUUsR0FBRyxLQUFLLE1BQU0sUUFBUSxHQUFHLFlBQVksTUFBTTtBQUN2RCxZQUFNLE1BQU0sU0FBUyxPQUFPO0FBQzVCLFlBQU0sUUFBUSxDQUFDLEdBQUcsS0FBSyxLQUFLLFVBQVUsRUFBRSxPQUFPLENBQUMsTUFBTSxhQUFhLDBEQUFlO0FBQ2xGLFVBQUksT0FBTyxRQUFRLE9BQU8sUUFBUTtBQUNoQyxnQkFBUSxhQUFhO0FBQ3JCLFNBQUMsU0FBUyxRQUFRLFVBQVUsRUFBRSxRQUFRLENBQUMsUUFBUTtBQUM3QyxjQUFJLFFBQVEsR0FBZ0MsTUFBTSxLQUFLLEtBQUssR0FBRztBQUFHLG9CQUFRLGFBQWE7QUFBQSxRQUN6RixDQUFDO0FBQUEsTUFDSDtBQUFBLElBQ0Y7QUFDQSxXQUFPLFNBQVMsYUFBYSxVQUFVO0FBQUEsRUFDekM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFPQSxjQUFjLFVBQXlCO0FBQ3JDLFVBQU0sV0FBVyxDQUFDO0FBQ2xCLFFBQUksS0FBSyxvQkFBb0IsR0FBRztBQUM5QixZQUFNLFdBQVcsWUFBWSxLQUFLLEtBQUs7QUFDdkMsWUFBTSxXQUFXLEtBQUssVUFBVSxRQUFRO0FBQ3hDLFlBQU0sUUFBUSxPQUFPLEtBQUssWUFBWSxFQUFFLEtBQUssQ0FBQyxRQUFRLFFBQVEsUUFBUTtBQUN0RSxVQUFJLE9BQU87QUFDVCxxQkFBYSxXQUFXLFFBQVE7QUFDaEMsaUJBQVMsS0FBSyxRQUFRO0FBQUEsTUFDeEI7QUFBQSxJQUNGO0FBQ0EsU0FBSyxLQUFLLGFBQWEsa0JBQWtCLEtBQUssTUFBTTtBQUFBLE1BQ2xELFFBQVEsRUFBRSxNQUFNLEtBQUssTUFBTSxTQUFTO0FBQUEsSUFDdEMsQ0FBQztBQUFBLEVBQ0g7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsbUJBQXlCO0FBQ3ZCLFVBQU0sV0FBcUIsQ0FBQztBQUM1QixRQUFJLEtBQUssb0JBQW9CLEdBQUc7QUFDOUIsWUFBTSxPQUFPLE9BQU8sS0FBSyxZQUFZO0FBQ3JDLFdBQUssUUFBUSxDQUFDLFFBQVE7QUFDcEIsY0FBTSxPQUFPO0FBQ2IsY0FBTSxTQUFTLEtBQUssVUFBVSxJQUFJO0FBR2xDLGNBQU0sYUFBYSxJQUFJLE9BQU8sSUFBSSxPQUFPLFFBQVEsTUFBTSxNQUFNLE1BQU0sR0FBRztBQUN0RSxZQUFJLFdBQVcsS0FBSyxHQUFHLEdBQUc7QUFDeEIsZ0JBQU0sUUFBUSxPQUFPLE1BQU0sSUFBSTtBQUcvQixnQkFBTSxlQUFlLElBQUksT0FBTyxJQUFJLE1BQU0sS0FBSyxHQUFHLE1BQU0sR0FBRztBQUMzRCxnQkFBTSxXQUFXLElBQUksUUFBUSxjQUFjLEVBQUU7QUFDN0MsdUJBQWEsV0FBVyxHQUFHO0FBQzNCLG1CQUFTLEtBQUssUUFBUTtBQUFBLFFBQ3hCO0FBQUEsTUFDRixDQUFDO0FBQUEsSUFDSDtBQUNBLFNBQUssS0FBSyxhQUFhLGtCQUFrQixLQUFLLE1BQU07QUFBQSxNQUNsRCxRQUFRLEVBQUUsTUFBTSxLQUFLLE1BQU0sU0FBUztBQUFBLElBQ3RDLENBQUM7QUFBQSxFQUNIO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVNBLFVBQVUsVUFBZ0IsUUFBaUIsUUFBeUI7QUFDbEUsVUFBTSxXQUFnQixFQUFFLFVBQVUsSUFBSSxRQUFRLGdCQUFnQixRQUFRLHdCQUF3QjtBQUM5RixVQUFNLFdBQVcsQ0FBQyxVQUFVLFFBQVEsTUFBTSxFQUFFLEtBQUssQ0FBQyxNQUFPLE1BQU0sVUFBYSxNQUFNLElBQUs7QUFDdkYsUUFBSSxXQUFXLFNBQVM7QUFDeEIsUUFBSSxVQUFVO0FBQ1osWUFBTSxNQUFNLENBQUMsS0FBYSxRQUFrQixPQUFPLFNBQVMsR0FBRztBQUMvRCxpQkFBVyxHQUFHLElBQUksVUFBVSxNQUFNLEtBQUssSUFBSSxZQUFZLFFBQVEsS0FBSyxJQUFJLFVBQVUsTUFBTTtBQUFBLElBQzFGO0FBQ0EsV0FBTztBQUFBLEVBQ1Q7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2lkcy1lbnRlcnByaXNlLXdjLy4vc3JjL2NvbXBvbmVudHMvaWRzLXNwbGl0dGVyL2lkcy1zcGxpdHRlci1sb2NhbC1zdG9yYWdlLnRzPzFiZjUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IElkc1NwbGl0dGVyUGFuZSBmcm9tICcuL2lkcy1zcGxpdHRlci1wYW5lJztcblxuLyoqXG4gKiBTYXZlZCBvYmplY3QgdHlwZVxuICovXG5leHBvcnQgdHlwZSBJZHNTcGxpdHRlclNhdmVkSG9zdFByb3BzID0gJ2FsaWduJyB8ICdheGlzJyB8ICdkaXNhYmxlZCc7XG5cbi8qKlxuICogU2F2ZWQgb2JqZWN0IGludGVyZmFjZVxuICovXG5leHBvcnQgaW50ZXJmYWNlIElkc1NwbGl0dGVyU2F2ZWQge1xuICAvKiogRmxhZyBmb3Igc2F2ZWQgdmFsdWVzLCBjYW4gYmUgdXNlIG9yIG5vdCAqL1xuICBjYW5SZXN0b3JlPzogYm9vbGVhbjtcbiAgLyoqIFRoZSBzcGxpdHRlciBhbGlnbiAqL1xuICBhbGlnbj86IHN0cmluZztcbiAgLyoqIFRoZSBheGlzIHVzZWQgKi9cbiAgYXhpcz86IHN0cmluZztcbiAgLyoqIFRoZSBkaXNhYmxlZCBzdGF0ZSAqL1xuICBkaXNhYmxlZD86IGJvb2xlYW47XG4gIC8qKiBMaXN0IG9mIHBhbmUgc2l6ZXMgKi9cbiAgc2l6ZXM/OiBudW1iZXJbXTtcbn1cblxuLyoqXG4gKiBJRFMgU3BsaXR0ZXIgTG9jYWwgU3RvcmFnZVxuICogQHR5cGUge29iamVjdH1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSWRzU3BsaXR0ZXJMb2NhbFN0b3JhZ2Uge1xuICBjb25zdHJ1Y3Rvcihyb290OiBhbnkpIHtcbiAgICB0aGlzLnJvb3QgPSByb290O1xuICB9XG5cbiAgcm9vdDogYW55O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgbG9jYWwgc3RvcmFnZSBtYXkgYmUgdXNlZCAvIGlzIGF2YWlsYWJsZVxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gSWYgaXQgY2FuIGJlIHVzZWQuXG4gICAqL1xuICAjY2FuVXNlTG9jYWxTdG9yYWdlKCk6IGJvb2xlYW4ge1xuICAgIHRyeSB7XG4gICAgICBpZiAodHlwZW9mIGxvY2FsU3RvcmFnZT8uZ2V0SXRlbSA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZXhjZXB0aW9uKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBzYXZlIHBvc2l0aW9uLCBpcyB2YWxpZC5cbiAgICogQHByaXZhdGVcbiAgICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgaXMgdmFsaWQuXG4gICAqL1xuICAjY2FuU2F2ZVBvc2l0aW9uKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnJvb3Quc2F2ZVBvc2l0aW9uICYmIHRoaXMuI2NhblVzZUxvY2FsU3RvcmFnZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNhdmUgcG9zaXRpb24uXG4gICAqIEBwcml2YXRlXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgc2F2ZVBvc2l0aW9uKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLiNjYW5TYXZlUG9zaXRpb24oKSkge1xuICAgICAgY29uc3Qgc2F2ZU9iajogSWRzU3BsaXR0ZXJTYXZlZCA9IHsgc2l6ZXM6IFsuLi50aGlzLnJvb3Quc2l6ZXMoKV0gfTtcbiAgICAgIFsnYWxpZ24nLCAnYXhpcycsICdkaXNhYmxlZCddLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICBzYXZlT2JqW2tleSBhcyBJZHNTcGxpdHRlclNhdmVkSG9zdFByb3BzXSA9IHRoaXMucm9vdFtrZXldO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIFNhdmUgdG8gbG9jYWwgc3RvcmFnZVxuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0odGhpcy5pZFRvYmVVc2UodGhpcy5yb290LnVuaXF1ZUlkKSwgSlNPTi5zdHJpbmdpZnkoc2F2ZU9iaikpO1xuICAgICAgdGhpcy5yb290LnRyaWdnZXJFdmVudCgnc2F2ZS1wb3NpdGlvbicsIHRoaXMucm9vdCwge1xuICAgICAgICBkZXRhaWw6IHsgZWxlbTogdGhpcy5yb290LCB1bmlxdWVJZDogdGhpcy5yb290LnVuaXF1ZUlkLCB2YWx1ZTogc2F2ZU9iaiB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVzdG9yZSB0aGUgc2F2ZWQgcG9zaXRpb24gZnJvbSBsb2NhbCBzdG9yYWdlXG4gICAqIEBwcml2YXRlXG4gICAqIEByZXR1cm5zIHtJZHNTcGxpdHRlclNhdmVkfG51bGx9IFRoZSBwb3NpdGlvblxuICAgKi9cbiAgcmVzdG9yZVBvc2l0aW9uKCk6IElkc1NwbGl0dGVyU2F2ZWQgfCBudWxsIHtcbiAgICBpZiAoIXRoaXMuI2NhblNhdmVQb3NpdGlvbigpKSByZXR1cm4gbnVsbDtcblxuICAgIGxldCBzYXZlT2JqOiBJZHNTcGxpdHRlclNhdmVkID0ge307XG4gICAgY29uc3Qgc2F2ZWRTdHIgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSh0aGlzLmlkVG9iZVVzZSh0aGlzLnJvb3QudW5pcXVlSWQpKTtcbiAgICBpZiAodHlwZW9mIHNhdmVkU3RyID09PSAnc3RyaW5nJyAmJiBzYXZlZFN0ciAhPT0gJycpIHtcbiAgICAgIHNhdmVPYmogPSB7IC4uLkpTT04ucGFyc2Uoc2F2ZWRTdHIpLCBjYW5SZXN0b3JlOiBmYWxzZSB9O1xuICAgICAgY29uc3QgbGVuID0gc2F2ZU9iaj8uc2l6ZXM/Lmxlbmd0aDtcbiAgICAgIGNvbnN0IHBhbmVzID0gWy4uLnRoaXMucm9vdC5jaGlsZE5vZGVzXS5maWx0ZXIoKG4pID0+IG4gaW5zdGFuY2VvZiBJZHNTcGxpdHRlclBhbmUpO1xuICAgICAgaWYgKGxlbiAmJiBsZW4gPT09IHBhbmVzPy5sZW5ndGgpIHtcbiAgICAgICAgc2F2ZU9iai5jYW5SZXN0b3JlID0gdHJ1ZTtcbiAgICAgICAgWydhbGlnbicsICdheGlzJywgJ2Rpc2FibGVkJ10uZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgaWYgKHNhdmVPYmpba2V5IGFzIElkc1NwbGl0dGVyU2F2ZWRIb3N0UHJvcHNdICE9PSB0aGlzLnJvb3Rba2V5XSkgc2F2ZU9iai5jYW5SZXN0b3JlID0gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc2F2ZU9iaj8uY2FuUmVzdG9yZSA/IHNhdmVPYmogOiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIENsZWFyIHRoZSBzYXZlZCBwb3NpdGlvbiBmcm9tIGxvY2FsIHN0b3JhZ2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVuaXF1ZUlkIElmIHVuZGVmaW5lZCwgd2lsbCB1c2UgSW50ZXJuYWwgYXR0YWNoZWQuXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgY2xlYXJQb3NpdGlvbih1bmlxdWVJZD86IHN0cmluZyk6IHZvaWQge1xuICAgIGNvbnN0IGNsZWFySWRzID0gW107XG4gICAgaWYgKHRoaXMuI2NhblVzZUxvY2FsU3RvcmFnZSgpKSB7XG4gICAgICBjb25zdCByZW1vdmVJZCA9IHVuaXF1ZUlkIHx8IHRoaXMucm9vdC51bmlxdWVJZDtcbiAgICAgIGNvbnN0IHNhdmVkS2F5ID0gdGhpcy5pZFRvYmVVc2UocmVtb3ZlSWQpO1xuICAgICAgY29uc3QgZm91bmQgPSBPYmplY3Qua2V5cyhsb2NhbFN0b3JhZ2UpLnNvbWUoKGtleSkgPT4ga2V5ID09PSBzYXZlZEtheSk7XG4gICAgICBpZiAoZm91bmQpIHtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oc2F2ZWRLYXkpO1xuICAgICAgICBjbGVhcklkcy5wdXNoKHJlbW92ZUlkKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5yb290LnRyaWdnZXJFdmVudCgnY2xlYXItcG9zaXRpb24nLCB0aGlzLnJvb3QsIHtcbiAgICAgIGRldGFpbDogeyBlbGVtOiB0aGlzLnJvb3QsIGNsZWFySWRzIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhciBhbGwgcmVsYXRlZCBzYXZlZCBwb3NpdGlvbiBmcm9tIGxvY2FsIHN0b3JhZ2VcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBjbGVhclBvc2l0aW9uQWxsKCk6IHZvaWQge1xuICAgIGNvbnN0IGNsZWFySWRzOiBzdHJpbmdbXSA9IFtdO1xuICAgIGlmICh0aGlzLiNjYW5Vc2VMb2NhbFN0b3JhZ2UoKSkge1xuICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGxvY2FsU3RvcmFnZSk7XG4gICAgICBrZXlzLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICBjb25zdCB0ZW1wID0gJ3tpZHN0ZW1wY2xlYXJzdG9yYWdlfSc7XG4gICAgICAgIGNvbnN0IHRlbXBJZCA9IHRoaXMuaWRUb2JlVXNlKHRlbXApO1xuICAgICAgICAvLyBmcm9tOiAnaWRzLXNwbGl0dGVyLXtpZHN0ZW1wY2xlYXJzdG9yYWdlfS11c2Vyc2V0dGluZ3MtcG9zaXRpb24nXG4gICAgICAgIC8vIHRvOiAnXmlkcy1zcGxpdHRlci0oLispLXVzZXJzZXR0aW5ncy1wb3NpdGlvbiQnXG4gICAgICAgIGNvbnN0IHJlZ2V4Rm91bmQgPSBuZXcgUmVnRXhwKGBeJHt0ZW1wSWQucmVwbGFjZSh0ZW1wLCAnKC4rKScpfSRgLCAnZycpO1xuICAgICAgICBpZiAocmVnZXhGb3VuZC50ZXN0KGtleSkpIHtcbiAgICAgICAgICBjb25zdCBwYXJ0cyA9IHRlbXBJZC5zcGxpdCh0ZW1wKTtcbiAgICAgICAgICAvLyBmcm9tOiBbJ2lkcy1zcGxpdHRlci0nLCAnLXVzZXJzZXR0aW5ncy1wb3NpdGlvbiddXG4gICAgICAgICAgLy8gdG86ICdeaWRzLXNwbGl0dGVyLXwtdXNlcnNldHRpbmdzLXBvc2l0aW9uJCdcbiAgICAgICAgICBjb25zdCByZWdleEV4dHJhY3QgPSBuZXcgUmVnRXhwKGBeJHtwYXJ0cy5qb2luKCd8Jyl9JGAsICdnJyk7XG4gICAgICAgICAgY29uc3QgcmVtb3ZlSWQgPSBrZXkucmVwbGFjZShyZWdleEV4dHJhY3QsICcnKTtcbiAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpO1xuICAgICAgICAgIGNsZWFySWRzLnB1c2gocmVtb3ZlSWQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhpcy5yb290LnRyaWdnZXJFdmVudCgnY2xlYXItcG9zaXRpb24nLCB0aGlzLnJvb3QsIHtcbiAgICAgIGRldGFpbDogeyBlbGVtOiB0aGlzLnJvb3QsIGNsZWFySWRzIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGlkIHRvIGJlIHVzZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHVuaXF1ZUlkIFRoZSB1bmlxdWVJZC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHN1ZmZpeCBPcHRpb25hbCBzdWZmaXggc3RyaW5nIHRvIG1ha2UgdGhlIGlkIG1vcmUgdW5pcXVlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcHJlZml4IE9wdGlvbmFsIHByZWZpeCBzdHJpbmcgdG8gbWFrZSB0aGUgaWQgbW9yZSB1bmlxdWUuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBpZC5cbiAgICovXG4gIGlkVG9iZVVzZSh1bmlxdWVJZD86IGFueSwgc3VmZml4Pzogc3RyaW5nLCBwcmVmaXg/OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGNvbnN0IGRlZmF1bHRzOiBhbnkgPSB7IHVuaXF1ZUlkOiAnJywgcHJlZml4OiAnaWRzLXNwbGl0dGVyJywgc3VmZml4OiAndXNlcnNldHRpbmdzLXBvc2l0aW9uJyB9O1xuICAgIGNvbnN0IGhhc1ZhbHVlID0gW3VuaXF1ZUlkLCBzdWZmaXgsIHByZWZpeF0uc29tZSgoeCkgPT4gKHggIT09IHVuZGVmaW5lZCAmJiB4ICE9PSBudWxsKSk7XG4gICAgbGV0IHJldHVybklkID0gZGVmYXVsdHMucHJlZml4O1xuICAgIGlmIChoYXNWYWx1ZSkge1xuICAgICAgY29uc3QgdXNlID0gKGtleTogc3RyaW5nLCB2YWw/OiBzdHJpbmcpID0+ICh2YWwgPz8gZGVmYXVsdHNba2V5XSk7XG4gICAgICByZXR1cm5JZCA9IGAke3VzZSgncHJlZml4JywgcHJlZml4KX0tJHt1c2UoJ3VuaXF1ZUlkJywgdW5pcXVlSWQpfS0ke3VzZSgnc3VmZml4Jywgc3VmZml4KX1gO1xuICAgIH1cbiAgICByZXR1cm4gcmV0dXJuSWQ7XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/components/ids-splitter/ids-splitter-local-storage.ts\n");

/***/ }),

/***/ "./src/components/ids-splitter/ids-splitter-pane.ts":
/*!**********************************************************!*\
  !*** ./src/components/ids-splitter/ids-splitter-pane.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ IdsSplitterPane)\n/* harmony export */ });\n/* harmony import */ var _core_ids_decorators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/ids-decorators */ \"./src/core/ids-decorators.ts\");\n/* harmony import */ var _mixins_ids_events_mixin_ids_events_mixin__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../mixins/ids-events-mixin/ids-events-mixin */ \"./src/mixins/ids-events-mixin/ids-events-mixin.ts\");\n/* harmony import */ var _mixins_ids_theme_mixin_ids_theme_mixin__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../mixins/ids-theme-mixin/ids-theme-mixin */ \"./src/mixins/ids-theme-mixin/ids-theme-mixin.ts\");\n/* harmony import */ var _mixins_ids_locale_mixin_ids_locale_mixin__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../mixins/ids-locale-mixin/ids-locale-mixin */ \"./src/mixins/ids-locale-mixin/ids-locale-mixin.ts\");\n/* harmony import */ var _core_ids_element__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/ids-element */ \"./src/core/ids-element.ts\");\n/* harmony import */ var _ids_splitter_pane_scss__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ids-splitter-pane.scss */ \"./src/components/ids-splitter/ids-splitter-pane.scss\");\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result)\n    __defProp(target, key, result);\n  return result;\n};\n\n\n\n\n\n\nconst Base = (0,_mixins_ids_locale_mixin_ids_locale_mixin__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(\n  (0,_mixins_ids_theme_mixin_ids_theme_mixin__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\n    (0,_mixins_ids_events_mixin_ids_events_mixin__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\n      _core_ids_element__WEBPACK_IMPORTED_MODULE_4__[\"default\"]\n    )\n  )\n);\nlet IdsSplitterPane = class extends Base {\n  constructor() {\n    super();\n  }\n  /**\n   * Return the attributes we handle as getters/setters\n   * @returns {Array} The attributes in an array\n   */\n  static get attributes() {\n    return [...super.attributes];\n  }\n  /**\n   * Create the Template for the contents\n   * @returns {string} The template\n   */\n  template() {\n    return `<div class=\"ids-splitter-pane\" part=\"pane\"><slot></slot></div>`;\n  }\n  /**\n   * Invoked each time the custom element is appended into a document-connected element.\n   */\n  connectedCallback() {\n    super.connectedCallback();\n  }\n};\nIdsSplitterPane = __decorateClass([\n  (0,_core_ids_decorators__WEBPACK_IMPORTED_MODULE_0__.customElement)(\"ids-splitter-pane\"),\n  (0,_core_ids_decorators__WEBPACK_IMPORTED_MODULE_0__.scss)(_ids_splitter_pane_scss__WEBPACK_IMPORTED_MODULE_5__[\"default\"])\n], IdsSplitterPane);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9pZHMtc3BsaXR0ZXIvaWRzLXNwbGl0dGVyLXBhbmUudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQW9DO0FBQ1Q7QUFDRDtBQUNDO0FBQ0o7QUFFSjtBQUVuQixNQUFNLE9BQU8scUZBQWM7QUFBZCxFQUNYLG1GQUFhO0FBQWIsSUFDRSxxRkFBYztBQUFkLE1BQ0UseURBQVU7QUFBVixJQUNGO0FBQUEsRUFDRjtBQUNGO0FBYUEsSUFBcUIsa0JBQXJCLGNBQTZDLEtBQUs7QUFBQSxFQUNoRCxjQUFjO0FBQ1osVUFBTTtBQUFBLEVBQ1I7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsV0FBVyxhQUE0QjtBQUNyQyxXQUFPLENBQUMsR0FBRyxNQUFNLFVBQVU7QUFBQSxFQUM3QjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNQSxXQUFtQjtBQUNqQixXQUFPO0FBQUEsRUFDVDtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS0Esb0JBQW9CO0FBQ2xCLFVBQU0sa0JBQWtCO0FBQUEsRUFDMUI7QUFDRjtBQTNCcUIsa0JBQXJCO0FBQUEsRUFGQyxtRUFBYSxDQUFDLG1CQUFtQjtBQUFBLEVBQ2pDLDBEQUFJLENBQUMsK0RBQU07QUFBQSxHQUNTIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaWRzLWVudGVycHJpc2Utd2MvLi9zcmMvY29tcG9uZW50cy9pZHMtc3BsaXR0ZXIvaWRzLXNwbGl0dGVyLXBhbmUudHM/MDcyNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjdXN0b21FbGVtZW50LCBzY3NzIH0gZnJvbSAnLi4vLi4vY29yZS9pZHMtZGVjb3JhdG9ycyc7XG5pbXBvcnQgSWRzRXZlbnRzTWl4aW4gZnJvbSAnLi4vLi4vbWl4aW5zL2lkcy1ldmVudHMtbWl4aW4vaWRzLWV2ZW50cy1taXhpbic7XG5pbXBvcnQgSWRzVGhlbWVNaXhpbiBmcm9tICcuLi8uLi9taXhpbnMvaWRzLXRoZW1lLW1peGluL2lkcy10aGVtZS1taXhpbic7XG5pbXBvcnQgSWRzTG9jYWxlTWl4aW4gZnJvbSAnLi4vLi4vbWl4aW5zL2lkcy1sb2NhbGUtbWl4aW4vaWRzLWxvY2FsZS1taXhpbic7XG5pbXBvcnQgSWRzRWxlbWVudCBmcm9tICcuLi8uLi9jb3JlL2lkcy1lbGVtZW50JztcblxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL2lkcy1zcGxpdHRlci1wYW5lLnNjc3MnO1xuXG5jb25zdCBCYXNlID0gSWRzTG9jYWxlTWl4aW4oXG4gIElkc1RoZW1lTWl4aW4oXG4gICAgSWRzRXZlbnRzTWl4aW4oXG4gICAgICBJZHNFbGVtZW50XG4gICAgKVxuICApXG4pO1xuXG4vKipcbiAqIElEUyBTcGxpdHRlclBhbmUgQ29tcG9uZW50XG4gKiBAdHlwZSB7SWRzU3BsaXR0ZXJQYW5lfVxuICogQGluaGVyaXRzIElkc0VsZW1lbnRcbiAqIEBtaXhlcyBJZHNFdmVudHNNaXhpblxuICogQG1peGVzIElkc0xvY2FsZU1peGluXG4gKiBAbWl4ZXMgSWRzVGhlbWVNaXhpblxuICogQHBhcnQgcGFuZSAtIHRoZSBzcGxpdHRlciBwYW5lIGNvbnRhaW5lciBlbGVtZW50XG4gKi9cbkBjdXN0b21FbGVtZW50KCdpZHMtc3BsaXR0ZXItcGFuZScpXG5Ac2NzcyhzdHlsZXMpXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJZHNTcGxpdHRlclBhbmUgZXh0ZW5kcyBCYXNlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIGF0dHJpYnV0ZXMgd2UgaGFuZGxlIGFzIGdldHRlcnMvc2V0dGVyc1xuICAgKiBAcmV0dXJucyB7QXJyYXl9IFRoZSBhdHRyaWJ1dGVzIGluIGFuIGFycmF5XG4gICAqL1xuICBzdGF0aWMgZ2V0IGF0dHJpYnV0ZXMoKTogQXJyYXk8c3RyaW5nPiB7XG4gICAgcmV0dXJuIFsuLi5zdXBlci5hdHRyaWJ1dGVzXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIFRlbXBsYXRlIGZvciB0aGUgY29udGVudHNcbiAgICogQHJldHVybnMge3N0cmluZ30gVGhlIHRlbXBsYXRlXG4gICAqL1xuICB0ZW1wbGF0ZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiBgPGRpdiBjbGFzcz1cImlkcy1zcGxpdHRlci1wYW5lXCIgcGFydD1cInBhbmVcIj48c2xvdD48L3Nsb3Q+PC9kaXY+YDtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIGVhY2ggdGltZSB0aGUgY3VzdG9tIGVsZW1lbnQgaXMgYXBwZW5kZWQgaW50byBhIGRvY3VtZW50LWNvbm5lY3RlZCBlbGVtZW50LlxuICAgKi9cbiAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/components/ids-splitter/ids-splitter-pane.ts\n");

/***/ }),

/***/ "./src/components/ids-splitter/ids-splitter.ts":
/*!*****************************************************!*\
  !*** ./src/components/ids-splitter/ids-splitter.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ IdsSplitter)\n/* harmony export */ });\n/* harmony import */ var _core_ids_decorators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/ids-decorators */ \"./src/core/ids-decorators.ts\");\n/* harmony import */ var _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/ids-attributes */ \"./src/core/ids-attributes.ts\");\n/* harmony import */ var _mixins_ids_events_mixin_ids_events_mixin__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../mixins/ids-events-mixin/ids-events-mixin */ \"./src/mixins/ids-events-mixin/ids-events-mixin.ts\");\n/* harmony import */ var _mixins_ids_theme_mixin_ids_theme_mixin__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../mixins/ids-theme-mixin/ids-theme-mixin */ \"./src/mixins/ids-theme-mixin/ids-theme-mixin.ts\");\n/* harmony import */ var _mixins_ids_locale_mixin_ids_locale_mixin__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../mixins/ids-locale-mixin/ids-locale-mixin */ \"./src/mixins/ids-locale-mixin/ids-locale-mixin.ts\");\n/* harmony import */ var _core_ids_element__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/ids-element */ \"./src/core/ids-element.ts\");\n/* harmony import */ var _utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utils/ids-string-utils/ids-string-utils */ \"./src/utils/ids-string-utils/ids-string-utils.ts\");\n/* harmony import */ var _ids_splitter_local_storage__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ids-splitter-local-storage */ \"./src/components/ids-splitter/ids-splitter-local-storage.ts\");\n/* harmony import */ var _ids_splitter_pane__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./ids-splitter-pane */ \"./src/components/ids-splitter/ids-splitter-pane.ts\");\n/* harmony import */ var _ids_draggable_ids_draggable__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../ids-draggable/ids-draggable */ \"./src/components/ids-draggable/ids-draggable.ts\");\n/* harmony import */ var _ids_splitter_scss__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./ids-splitter.scss */ \"./src/components/ids-splitter/ids-splitter.scss\");\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result)\n    __defProp(target, key, result);\n  return result;\n};\n\n\n\n\n\n\n\n\n\n\n\nconst Base = (0,_mixins_ids_locale_mixin_ids_locale_mixin__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(\n  (0,_mixins_ids_theme_mixin_ids_theme_mixin__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(\n    (0,_mixins_ids_events_mixin_ids_events_mixin__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\n      _core_ids_element__WEBPACK_IMPORTED_MODULE_5__[\"default\"]\n    )\n  )\n);\nconst SPLITTER_DEFAULTS = {\n  align: \"start\",\n  axis: \"x\",\n  disabled: false,\n  label: \"Resize\",\n  resizeOnDragEnd: false,\n  savePosition: false,\n  uniqueId: null\n};\nconst ALIGN = [\"start\", \"end\"];\nconst AXIS = [\"x\", \"y\"];\nconst EVENTS = {\n  beforecollapsed: \"beforecollapsed\",\n  collapsed: \"collapsed\",\n  beforeexpanded: \"beforeexpanded\",\n  expanded: \"expanded\",\n  beforesizechanged: \"beforesizechanged\",\n  sizechanged: \"sizechanged\"\n};\nconst COLLAPSED = \"collapsed\";\nlet IdsSplitter = class extends Base {\n  constructor() {\n    super();\n    this.state = {\n      ...this.state,\n      ...SPLITTER_DEFAULTS\n    };\n  }\n  /**\n   * Return the attributes we handle as getters/setters\n   * @returns {Array} The attributes in an array\n   */\n  static get attributes() {\n    return [\n      ...super.attributes,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ALIGN,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.AXIS,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.LABEL,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.RESIZE_ON_DRAG_END,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SAVE_POSITION,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.UNIQUE_ID\n    ];\n  }\n  /**\n   * Create the Template for the contents\n   * @returns {string} The template\n   */\n  template() {\n    const cssClass = ` class=\"ids-splitter axis-${this.axis} align-${this.align}\"`;\n    const disabled = this.disabled ? \" disabled\" : \"\";\n    return `\n      <div part=\"splitter\" role=\"presentation\"${cssClass}${disabled}>\n        <slot></slot>\n      </div>`;\n  }\n  /**\n   * Invoked each time the custom element is appended into a document-connected element.\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    this.#init();\n  }\n  /**\n   * Get list of current pane sizes.\n   * @returns {Array} The list of current pane sizes.\n   */\n  sizes() {\n    return this.#sizes;\n  }\n  /**\n   * Get list of current pane minimum sizes.\n   * @returns {Array} The list of current pane minimum sizes.\n   */\n  minSizes() {\n    return this.#minSizes;\n  }\n  /**\n   * Get list of current pane maximum sizes, limited to single split.\n   * @returns {Array} The list of current pane maximum sizes.\n   */\n  maxSizes() {\n    return this.#maxSizes;\n  }\n  /**\n   * Collapse start pane size for given start/end panes or panes css selector.\n   * @param {object} [options] The collapse options.\n   * @param {HTMLElement|string} [options.startPane] The start pane.\n   * @param {HTMLElement|string} [options.endPane] The end pane.\n   * @param {object} [options.pair] The pair.\n   * @returns {void}\n   */\n  collapse(options = {}) {\n    if (this.disabled) {\n      if (!options.initial)\n        return;\n    }\n    const pair = options.pair || this.getPair(options);\n    if (pair && pair.start) {\n      let canProceed = true;\n      const response = (veto) => {\n        canProceed = !!(0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_6__.stringToBool)(veto);\n      };\n      this.#triggerEvent(EVENTS.beforecollapsed, pair, response);\n      if (!canProceed) {\n        return;\n      }\n      const { pane, idx } = pair.start;\n      const before = this.#sizes[idx];\n      const hasSize = this.#sizes[idx] > this.#minSizes[idx];\n      this.#expandSizes[idx] = hasSize ? this.#sizes[idx] : this.#defaultsSize;\n      if (hasSize) {\n        const diff = this.#minSizes[idx] - this.#sizes[idx];\n        const pixelDiff = this.#toPixel(diff);\n        this.#move({ ...pair, diff: pixelDiff, initial: options.initial });\n      }\n      if (before !== this.#sizes[idx]) {\n        pane.setAttribute(COLLAPSED, \"\");\n        this.#triggerEvent(EVENTS.collapsed, pair);\n      }\n    }\n  }\n  /**\n   * Expand start pane size for given start/end panes or panes css selector.\n   * @param {object} [options] The expand options.\n   * @param {HTMLElement|string} [options.startPane] The start pane.\n   * @param {HTMLElement|string} [options.endPane] The end pane.\n   * @param {object} [options.pair] The pair.\n   * @returns {void}\n   */\n  expand(options = {}) {\n    if (this.disabled) {\n      return;\n    }\n    const pair = options.pair || this.getPair(options);\n    if (pair && pair.start) {\n      let canProceed = true;\n      const response = (veto) => {\n        canProceed = !!(0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_6__.stringToBool)(veto);\n      };\n      this.#triggerEvent(EVENTS.beforeexpanded, pair, response);\n      if (!canProceed) {\n        return;\n      }\n      const { pane, idx } = pair.start;\n      const before = this.#sizes[idx];\n      const collapsed = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_6__.stringToBool)(pane.getAttribute(COLLAPSED));\n      if (collapsed) {\n        const diff = this.#expandSizes[idx] - this.#minSizes[idx];\n        this.#move({ ...pair, diff: this.#toPixel(diff) });\n      }\n      if (before !== this.#sizes[idx]) {\n        pane.removeAttribute(COLLAPSED);\n        this.#triggerEvent(EVENTS.expanded, pair);\n      }\n    }\n  }\n  /**\n   * Get list of all pairs.\n   * @returns {Array} The pair.\n   */\n  getAllPairs() {\n    return this.#pairs;\n  }\n  /**\n   * Get pair for given start/end panes or panes css selector.\n   * @param {object} [options] The expand options.\n   * @param {HTMLElement|string} [options.startPane] The start pane.\n   * @param {HTMLElement|string} [options.endPane] The end pane.\n   * @returns {object|undefined} The pair.\n   */\n  getPair(options = {}) {\n    const { startPane, endPane } = options;\n    let pair;\n    const isValid = (el) => typeof el === \"string\" || el instanceof _ids_splitter_pane__WEBPACK_IMPORTED_MODULE_8__[\"default\"];\n    if (isValid(startPane) && isValid(endPane)) {\n      const elem = (sel) => typeof sel === \"string\" ? this.querySelector(sel) : sel;\n      const startElem = elem(startPane);\n      const endElem = elem(endPane);\n      this.#pairs.forEach((p) => {\n        if (p.start.pane === startElem || p.end.pane === endElem) {\n          pair = p;\n        }\n      });\n    }\n    return pair;\n  }\n  /**\n   * Container width.\n   * @private\n   */\n  #container = { size: 0 };\n  /**\n   * Store some properties based on current axis.\n   * @private\n   */\n  #prop = {};\n  /**\n   * Track while moving.\n   * @private\n   */\n  #moving = {};\n  /**\n   * List of pane elements attached.\n   * @private\n   */\n  #panes = [];\n  /**\n   * List of pair elements attached.\n   * @private\n   */\n  #pairs = [];\n  /**\n   * Defaults pane size.\n   * @private\n   */\n  #defaultsSize = 0;\n  /**\n   * List of pane expand sizes.\n   * @private\n   */\n  #expandSizes = [];\n  /**\n   * List of pane sizes.\n   * @private\n   */\n  #sizes = [];\n  /**\n   * List of pane minimun sizes.\n   * @private\n   */\n  #minSizes = [];\n  /**\n   * List of pane maximum sizes.\n   * @private\n   */\n  #maxSizes = [];\n  /**\n   * Attach the resize observer.\n   * @private\n   */\n  #resizeObserver = new ResizeObserver(() => this.#resize());\n  /**\n   * Attach the initialize observer.\n   * @private\n   */\n  #initObserverCallback() {\n    this.#destroy();\n    this.#setProp();\n    this.#setContainer();\n    this.#initialSizes();\n    this.#addSplitBars();\n    this.#setPairs();\n    this.#positionSplitBars();\n    this.#attachEventHandlers();\n    this.#setInitialCollapsed();\n  }\n  /**\n   * Attach the initialize observer.\n   * @private\n   */\n  #initObserver = \"IntersectionObserver\" in window ? new IntersectionObserver((entries) => {\n    entries.forEach((entry) => {\n      if (entry.isIntersecting) {\n        this.#initObserver?.disconnect();\n        this.#initObserverCallback();\n      }\n    });\n  }) : null;\n  /**\n   * Local storage instance attached to component.\n   * @private\n   */\n  #ls = new _ids_splitter_local_storage__WEBPACK_IMPORTED_MODULE_7__[\"default\"](this);\n  /**\n   * Clear the saved position from local storage\n   * @param {string} uniqueId If undefined, will use Internal attached.\n   * @returns {void}\n   */\n  clearPosition = this.#ls.clearPosition.bind(this.#ls);\n  /**\n   * Clear all related saved position from local storage\n   * @returns {void}\n   */\n  clearPositionAll = this.#ls.clearPositionAll.bind(this.#ls);\n  /**\n   * Get the id to be use.\n   * @param {string} uniqueId The uniqueId.\n   * @param {string} suffix Optional suffix string to make the id more unique.\n   * @param {string} prefix Optional prefix string to make the id more unique.\n   * @returns {string} The id.\n   */\n  idTobeUse = this.#ls.idTobeUse.bind(this.#ls);\n  /**\n   * Initialize the component\n   * @private\n   * @returns {void}\n   */\n  #init() {\n    if (this.#initObserver && this.container)\n      this.#initObserver.observe(this.container);\n    else\n      this.#initObserverCallback();\n  }\n  /**\n   * Resize the component\n   * @private\n   * @returns {void}\n   */\n  #resize() {\n    this.#setProp();\n    window.requestAnimationFrame(() => {\n      this.#setContainer();\n      this.#positionSplitBars();\n      this.#setInitialCollapsed();\n    });\n  }\n  /**\n   * Set to store properties based on current axis.\n   * @private\n   * @returns {object} This API object for chaining\n   */\n  #setProp() {\n    let prop = {};\n    if (this.axis === \"y\") {\n      prop = {\n        orientation: \"vertical\",\n        dimension: \"height\",\n        posStart: \"top\",\n        posEnd: \"bottom\",\n        delta: \"dragDeltaY\",\n        translate: \"translateY\",\n        minTransform: \"minTransformY\",\n        maxTransform: \"maxTransformY\",\n        useRTL: false\n      };\n    } else {\n      prop = {\n        orientation: \"horizontal\",\n        dimension: \"width\",\n        posStart: \"left\",\n        posEnd: \"right\",\n        delta: \"dragDeltaX\",\n        translate: \"translateX\",\n        minTransform: \"minTransformX\",\n        maxTransform: \"maxTransformX\",\n        useRTL: this.localeAPI?.isRTL()\n      };\n    }\n    this.#prop = { ...prop, barPixel: 22, barPercentage: this.#toPercentage(22) };\n    return this;\n  }\n  /**\n   * Set container size width/height value based on current axis.\n   * @private\n   * @returns {object} This API object for chaining\n   */\n  #setContainer() {\n    if (!this.#container)\n      return this;\n    this.#container.rect = this.container?.getBoundingClientRect() || {};\n    this.#container.posStart = this.#container.rect[this.#prop.posStart];\n    this.#container.size = this.#container.rect[this.#prop.dimension];\n    return this;\n  }\n  /**\n   * Set initial sizes, min-sizes and pane elements\n   * @private\n   * @returns {object} This API object for chaining\n   */\n  #initialSizes() {\n    const panes = [...this.childNodes].filter((n) => n instanceof _ids_splitter_pane__WEBPACK_IMPORTED_MODULE_8__[\"default\"]);\n    const defaults = { minSize: 0, size: 100 / panes.length };\n    const initial = {\n      adjustable: { minSizes: [], sizes: [] },\n      sum: { minSizes: 0, sizes: 0 }\n    };\n    panes.forEach((elem, i) => {\n      let minSize = elem.getAttribute(\"min-size\");\n      let size = elem.getAttribute(\"size\");\n      if (size !== null && minSize === null) {\n        size = this.#percentageVal(size);\n        initial.sum.sizes += size;\n        initial.adjustable.sizes.push({ elem, idx: i, size });\n      } else if (size === null && minSize !== null) {\n        minSize = this.#percentageVal(minSize);\n        initial.sum.minSizes += minSize;\n        initial.adjustable.minSizes.push({ elem, idx: i, minSize });\n      } else if (size !== null && minSize !== null) {\n        size = this.#percentageVal(size);\n        minSize = this.#percentageVal(minSize);\n        size = minSize > size ? minSize : size;\n        initial.sum.minSizes += minSize;\n        initial.sum.sizes += size;\n        initial.adjustable.minSizes.push({ elem, idx: i, minSize });\n        initial.adjustable.sizes.push({ elem, idx: i, size });\n      }\n    });\n    const total = 100;\n    if (panes.length === 2) {\n      let maxSize = panes[0].getAttribute(\"max-size\");\n      if (maxSize !== null) {\n        maxSize = this.#percentageVal(maxSize);\n        maxSize = maxSize > total ? total : maxSize;\n        const sizes = initial.adjustable.sizes;\n        const minSizes = initial.adjustable.minSizes;\n        const len = { sizes: sizes.length, minSizes: minSizes.length };\n        const args = { idx: 0, elem: panes[0] };\n        if (len.sizes && !len.minSizes && sizes[0].idx === 0 && sizes[0].size >= maxSize) {\n          initial.sum.sizes -= sizes[0].size - maxSize;\n          sizes[0].size = maxSize;\n        } else if (!len.sizes && len.minSizes && minSizes[0].idx === 0 && minSizes[0].minSize >= maxSize) {\n          maxSize = minSizes[0].minSize;\n          initial.sum.sizes += maxSize;\n          initial.adjustable.sizes.push({ ...args, size: maxSize });\n        } else if (len.sizes && len.minSizes && sizes[0].idx === 0 && minSizes[0].idx === 0 && minSizes[0].minSize >= maxSize) {\n          maxSize = minSizes[0].minSize;\n          initial.sum.sizes -= sizes[0].size - maxSize;\n          sizes[0].size = maxSize;\n        } else if (!len.sizes && !len.minSizes) {\n          initial.sum.sizes += maxSize;\n          initial.adjustable.sizes.push({ ...args, size: maxSize });\n        }\n        this.#maxSizes = [maxSize];\n      }\n    }\n    const adjustExcessSizes = () => {\n      if (initial.sum.minSizes >= total) {\n        const extra = initial.sum.minSizes - total;\n        const maxToMin = initial.adjustable.minSizes.sort(\n          (a, b) => b.minSize - a.minSize\n        );\n        for (let i = 0, l = maxToMin.length, ext = extra; i < l && ext > 0; i++) {\n          if (maxToMin[i].minSize >= ext) {\n            maxToMin[i].minSize -= ext;\n            ext = 0;\n          } else {\n            ext -= maxToMin[i].minSize;\n            maxToMin[i].minSize = 0;\n          }\n        }\n        initial.adjustable.minSizes = maxToMin.sort((a, b) => a.idx - b.idx);\n      }\n      if (initial.sum.sizes >= total) {\n        const extra = initial.sum.sizes - total;\n        const maxToMin = initial.adjustable.sizes.sort(\n          (a, b) => b.size - a.size\n        );\n        for (let i = 0, l = maxToMin.length, ext = extra; i < l && ext > 0; i++) {\n          if (maxToMin[i].size >= ext) {\n            maxToMin[i].size -= ext;\n            ext = 0;\n          } else {\n            ext -= maxToMin[i].size;\n            maxToMin[i].size = 0;\n          }\n        }\n        initial.sum.sizes = total;\n        initial.adjustable.sizes = maxToMin.sort((a, b) => a.idx - b.idx);\n      }\n    };\n    adjustExcessSizes();\n    const adjustDefaultSizes = () => {\n      if (initial.sum.sizes > 0) {\n        const len = panes.length - initial.adjustable.sizes.length;\n        if (len > 0) {\n          defaults.size = (total - initial.sum.sizes) / len;\n        }\n      }\n    };\n    adjustDefaultSizes();\n    if (initial.sum.minSizes > 0) {\n      let found = false;\n      initial.adjustable.minSizes.forEach((elem, i) => {\n        const size = initial.adjustable.sizes[elem.idx]?.size;\n        if (size && elem.minSize > size) {\n          initial.adjustable.sizes[i].size = elem.minSize;\n          found = true;\n        } else if (!size && elem.minSize > defaults.size) {\n          initial.adjustable.sizes.push({ elem, idx: elem.idx, size: elem.minSize });\n          initial.sum.sizes += elem.minSize;\n          found = true;\n        }\n        if (found) {\n          adjustDefaultSizes();\n          adjustExcessSizes();\n        }\n      });\n    }\n    const saved = this.#ls.restorePosition();\n    if (saved) {\n      initial.adjustable.sizes = panes.map((elem, i) => ({ elem, idx: i, size: saved?.sizes?.[i] }));\n    }\n    this.#minSizes = [];\n    this.#sizes = [];\n    this.#panes = panes.map((elem, i) => {\n      const minSizeObj = initial.adjustable.minSizes.find((x) => x.idx === i);\n      const sizeObj = initial.adjustable.sizes.find((x) => x.idx === i);\n      const minSize = minSizeObj ? minSizeObj.minSize : defaults.minSize;\n      const size = sizeObj ? sizeObj.size : defaults.size;\n      elem.style[this.#prop.dimension] = `${size}%`;\n      this.#minSizes.push(minSize);\n      this.#sizes.push(size);\n      return elem;\n    });\n    this.#defaultsSize = defaults.size;\n    this.#expandSizes = [...this.#sizes];\n    return this;\n  }\n  /**\n   * Get splitId prefix with given value, use for each split bar element.\n   * @private\n   * @param {number} value The value to be use as id.\n   * @returns {string} prefix with given value.\n   */\n  #splitId(value) {\n    return `split-${value}`;\n  }\n  /**\n   * Add split bar elements.\n   * @private\n   * @returns {object} This API object for chaining.\n   */\n  #addSplitBars() {\n    const cssClass = ` class=\"ids-splitter-split-bar align-${this.align}\"`;\n    const disabled = this.disabled ? ' disabled aria-disabled=\"true\"' : \"\";\n    this.#panes.forEach((pane, i) => {\n      if (i > 0) {\n        const template = document.createElement(\"template\");\n        template.innerHTML = `\n          <ids-draggable axis=${this.axis} id=\"${this.#splitId(i)}\"\n            aria-orientation=\"${this.#prop.orientation}\"\n            role=\"separator\" aria-label=\"${this.label}\" tabindex=\"0\"${cssClass}${disabled}>\n            <div class=\"split-bar\" part=\"split-bar\" role=\"presentation\">\n              <ids-icon icon=\"drag\" size=\"large\" part=\"split-bar-icon\"></ids-icon>\n            </div>\n          <ids-draggable>`;\n        this.container?.appendChild(template.content.cloneNode(true));\n      }\n    });\n    return this;\n  }\n  /**\n   * Each pair has reference to start/end panes and each split bar.\n   * @private\n   * @returns {object} This API object for chaining.\n   */\n  #setPairs() {\n    this.shadowRoot?.host.setAttribute(\"role\", \"group\");\n    this.#panes.forEach((pane, i) => {\n      if (i > 0) {\n        const splitBar = this.container?.querySelector(`#${this.#splitId(i)}`);\n        const zIdx = i - 1;\n        const start = {\n          pane: this.#panes[zIdx],\n          idx: zIdx,\n          size: this.#sizes[zIdx],\n          minSize: this.#minSizes[zIdx]\n        };\n        const end = {\n          pane,\n          idx: i,\n          size: this.#sizes[i],\n          minSize: this.#minSizes[i]\n        };\n        start.id = start.pane.getAttribute(\"id\");\n        if (!start.id) {\n          start.id = this.#uniquePaneId();\n          start.pane.setAttribute(\"id\", start.id);\n        }\n        end.id = end.pane.getAttribute(\"id\");\n        if (!end.id) {\n          end.id = this.#uniquePaneId();\n          end.pane.setAttribute(\"id\", end.id);\n        }\n        this.#pairs.push({ splitBar, start, end, idx: zIdx });\n      }\n    });\n    return this;\n  }\n  /**\n   * Adjust split bars position\n   * @private\n   * @returns {object} This API object for chaining\n   */\n  #positionSplitBars() {\n    const s = { min: 0, mid: 0, max: 0 };\n    const { minTransform, maxTransform, translate, useRTL } = this.#prop;\n    const last = this.#panes.length - 1;\n    const single = this.#maxSizes.length === 1;\n    this.#panes.forEach((pane, i) => {\n      const size = this.#toPixel(this.#sizes[i]);\n      s.min = s.mid;\n      s.mid = s.max;\n      s.max += size;\n      if (i > 0) {\n        let extra = {};\n        if (this.align === \"start\") {\n          extra = {\n            min: i > 1 ? this.#prop.barPixel : 0,\n            max: this.#prop.barPixel\n          };\n        } else {\n          extra = {\n            min: i === 1 && this.#minSizes[0] > this.#prop.barPercentage ? 0 : this.#prop.barPixel,\n            max: i < last ? this.#prop.barPixel : 0\n          };\n        }\n        const pair = this.#pairs[i - 1];\n        const sb = pair.splitBar;\n        const minTransVal = s.min + this.#toPixel(this.#minSizes[pair.start.idx]) + extra.min;\n        let maxTransVal = s.max - this.#toPixel(this.#minSizes[pair.end.idx]) - extra.max;\n        if (single) {\n          maxTransVal = this.#toPixel(this.#maxSizes[0]) - extra.max;\n        }\n        if (useRTL) {\n          const min = maxTransVal * -1;\n          const max = minTransVal * -1;\n          const mid = s.mid * -1;\n          if (sb) {\n            sb.style.setProperty(\"transform\", `${translate}(${mid}px)`);\n            sb[minTransform] = `${min}px`;\n            sb[maxTransform] = `${max}px`;\n          }\n        } else if (sb) {\n          sb.style.setProperty(\"transform\", `${translate}(${s.mid}px)`);\n          sb[minTransform] = `${minTransVal}px`;\n          sb[maxTransform] = `${maxTransVal}px`;\n        }\n      }\n    });\n    return this;\n  }\n  /**\n   * Set initial collapsed panes.\n   * @private\n   * @returns {object} This API object for chaining\n   */\n  #setInitialCollapsed() {\n    this.#pairs.forEach((pair) => {\n      const collapsed = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_6__.stringToBool)(pair.start.pane.getAttribute(COLLAPSED));\n      if (collapsed) {\n        this.collapse({ pair, initial: true });\n      }\n    });\n    return this;\n  }\n  /**\n   * Set collapsed attribute to given start pane based start pane size.\n   * @private\n   * @param {any} pair The pair object.\n   * @returns {object} This API object for chaining\n   */\n  #setCollapsedAttribute(pair) {\n    const { start, initial } = pair;\n    window.requestAnimationFrame(() => {\n      const bar = start.idx === 0 && this.align === \"start\" ? 0 : this.#prop.barPercentage;\n      if (this.#sizes[start.idx] > this.#minSizes[start.idx] + bar) {\n        start.pane.removeAttribute(COLLAPSED);\n      } else if (!start.pane.hasAttribute(COLLAPSED) || initial) {\n        this.#expandSizes[start.idx] = this.#defaultsSize;\n        start.pane.setAttribute(COLLAPSED, \"\");\n      }\n    });\n    return this;\n  }\n  /**\n   * Set disabled state to container and for each split bars.\n   * @private\n   * @returns {object} This API object for chaining\n   */\n  #setDisabled() {\n    const toggleAttribute = (el, attr = _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED, val = \"\") => {\n      if (this.disabled)\n        el.setAttribute(attr, val);\n      else\n        el.removeAttribute(attr);\n    };\n    if (this.container)\n      toggleAttribute(this.container);\n    this.#pairs.forEach((pair) => {\n      toggleAttribute(pair.splitBar);\n      toggleAttribute(pair.splitBar, \"aria-disabled\", \"true\");\n    });\n    return this;\n  }\n  /**\n   * Set pair and moving values to go with move.\n   * @private\n   * @param {any} pair The pair object.\n   * @returns {void}\n   */\n  #moveStart(pair) {\n    if (!this.#moving.isMoving) {\n      let canProceed = true;\n      const response = (veto) => {\n        canProceed = !!(0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_6__.stringToBool)(veto);\n      };\n      this.#triggerEvent(EVENTS.beforesizechanged, pair, response);\n      if (!canProceed) {\n        pair.splitBar.isDragging = false;\n        return;\n      }\n      const single = this.#maxSizes.length === 1;\n      const { start, end } = pair;\n      start.size = this.#sizes[start.idx];\n      end.size = this.#sizes[end.idx];\n      this.#moving = {\n        isMoving: true,\n        startSize: start.size * -1,\n        endSize: end.size,\n        pad: 1\n      };\n      if (single) {\n        this.#moving.max = this.#maxSizes[start.idx] - this.#sizes[start.idx] + this.#minSizes[end.idx];\n      }\n    }\n  }\n  /**\n   * Adjust moving difference to apply with pair.\n   * @private\n   * @param {object} pair The pair object.\n   * @returns {void}\n   */\n  #moveEnd(pair) {\n    if (this.#moving.isMoving) {\n      this.#updateSizeAndSplitBar(pair);\n      this.#setCollapsedAttribute(pair);\n      this.#triggerEvent(EVENTS.sizechanged, pair);\n      this.#ls.savePosition();\n    }\n    this.#moving = {};\n  }\n  /**\n   * Move split bar and adjust panes for given difference.\n   * @private\n   * @param {object} pair The pair object.\n   * @returns {void}\n   */\n  #move(pair) {\n    this.#moveStart(pair);\n    if (this.#moving.isMoving) {\n      let diff = this.#adjustDiff({ ...pair, diff: this.#toPercentage(pair.diff) });\n      diff *= this.#prop.useRTL ? -1 : 1;\n      this.#moveEnd({ ...pair, diff });\n      if (diff) {\n        const sb = pair.splitBar;\n        const matrix = window.getComputedStyle(sb).getPropertyValue(\"transform\")?.replace(/^matrix\\((.+)\\)$/g, \"$1\").split(\",\");\n        const translate = { x: +matrix[4], y: +matrix[5] };\n        const trans = translate[this.axis] + this.#toPixel(diff);\n        sb?.style.setProperty(\"transform\", `${this.#prop.translate}(${trans}px)`);\n      }\n    }\n  }\n  /**\n   * Adjust given difference and ignore out of bound value.\n   * @private\n   * @param {object} pair The start object in pair.\n   * @returns {number} The adjusted difference.\n   */\n  #adjustDiff(pair) {\n    const { startSize, endSize, pad, max, isMoving } = this.#moving;\n    const { useRTL, barPercentage } = this.#prop;\n    const { start, end, diff } = pair;\n    const useEndSize = typeof max !== \"undefined\" ? max : endSize;\n    const extra = {};\n    if (this.align === \"start\") {\n      extra.min = start.idx === 0 ? 0 : barPercentage;\n      extra.max = barPercentage;\n    } else {\n      extra.min = start.idx === 0 && this.#minSizes[0] > barPercentage ? 0 : barPercentage;\n      extra.max = end.idx === this.#pairs.length ? 0 : barPercentage;\n    }\n    let newDiff = diff * (useRTL ? -1 : 1);\n    if (isMoving) {\n      if (useRTL && (newDiff < 0 && newDiff < startSize + start.minSize + pad)) {\n        newDiff = startSize + start.minSize + extra.min;\n      } else if (useRTL && (newDiff > 0 && newDiff > useEndSize - end.minSize - pad)) {\n        newDiff = useEndSize - end.minSize - extra.max;\n      } else if (!useRTL && (diff > 0 && diff > useEndSize - end.minSize - pad - extra.max)) {\n        newDiff = useEndSize - end.minSize - extra.max;\n      } else if (!useRTL && (diff < 0 && diff < startSize + start.minSize + pad + extra.min)) {\n        newDiff = startSize + start.minSize + extra.min;\n      }\n    }\n    return newDiff === Infinity ? 0 : newDiff;\n  }\n  /**\n   * Update pair size with given difference percentages value.\n   * @private\n   * @param {object} pair The pair.\n   * @returns {object} new updated size\n   */\n  #updateSize(pair) {\n    const { start, end } = pair;\n    const newSize = { diff: this.#adjustDiff(pair) };\n    newSize.start = start.size + newSize.diff;\n    newSize.end = end.size - newSize.diff;\n    start.pane.style[this.#prop.dimension] = `${newSize.start}%`;\n    end.pane.style[this.#prop.dimension] = `${newSize.end}%`;\n    start.pane.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SIZE, `${newSize.start}%`);\n    end.pane.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SIZE, `${newSize.end}%`);\n    return newSize;\n  }\n  /**\n   * Trigger given event with current params.\n   * @private\n   * @param {string} evt The event to be trigger.\n   * @param {object} pair The pair.\n   * @param {object} res The veto response method.\n   * @returns {void}\n   */\n  #triggerEvent(evt, pair, res) {\n    const { start, end, splitBar } = pair;\n    const args = {\n      detail: {\n        elem: this,\n        start,\n        end,\n        splitBar,\n        sizes: this.sizes(),\n        minSizes: this.minSizes(),\n        maxSizes: this.maxSizes()\n      }\n    };\n    if (typeof res === \"function\") {\n      args.detail.response = res;\n    }\n    this.triggerEvent(evt, this, args);\n  }\n  /**\n   * Update given pair size and adjust split bars min/max positions.\n   * @private\n   * @param {object} pair The pair.\n   * @returns {void}\n   */\n  #updateSizeAndSplitBar(pair) {\n    const { start, end, idx, diff } = pair;\n    const newSize = this.#updateSize({ start, end, diff });\n    this.#sizes[start.idx] = newSize.start;\n    this.#sizes[end.idx] = newSize.end;\n    start.size = newSize.start;\n    end.size = newSize.end;\n    const { minTransform, maxTransform, useRTL } = this.#prop;\n    const last = this.#pairs.length - 1;\n    if (last > 0) {\n      const pixelDeff = this.#toPixel(newSize.diff);\n      const sb = {\n        prev: this.#pairs[idx - 1]?.splitBar,\n        next: this.#pairs[idx + 1]?.splitBar\n      };\n      if (idx === 0) {\n        if (useRTL)\n          sb.next[maxTransform] -= pixelDeff;\n        else\n          sb.next[minTransform] += pixelDeff;\n      } else if (idx === last) {\n        if (useRTL)\n          sb.prev[minTransform] -= pixelDeff;\n        else\n          sb.prev[maxTransform] += pixelDeff;\n      } else {\n        if (useRTL)\n          sb.prev[minTransform] -= pixelDeff;\n        else\n          sb.prev[maxTransform] += pixelDeff;\n        if (useRTL)\n          sb.next[maxTransform] -= pixelDeff;\n        else\n          sb.next[minTransform] += pixelDeff;\n      }\n    }\n  }\n  /**\n   * Get given value as percentages\n   * @private\n   * @param {string|number|null} value The value\n   * @returns {number} The percentage value\n   */\n  #percentageVal(value) {\n    return /%$/i.test(`${value}`) ? parseInt(`${value}`, 10) : this.#toPercentage(value);\n  }\n  /**\n   * Convert given value to percentages\n   * @private\n   * @param {string|number|null} value The value\n   * @returns {number} The percentage value\n   */\n  #toPercentage(value) {\n    const doPercentage = (v) => {\n      const isNegative = v < 0;\n      v = Math.abs(v);\n      return v / this.#container.size * 100 * (isNegative ? -1 : 1);\n    };\n    let r = 0;\n    if (typeof value === \"number\") {\n      r = doPercentage(value);\n    } else {\n      const val = parseInt(`${value}`, 10);\n      if (!Number.isNaN(val) && /px$/i.test(`${value}`)) {\n        r = doPercentage(val);\n      }\n    }\n    return r;\n  }\n  /**\n   * Convert given value to pixels\n   * @private\n   * @param {string|number|null} value The value\n   * @returns {number} The pixels value\n   */\n  #toPixel(value) {\n    const doPixel = (v) => {\n      const isNegative = v < 0;\n      v = Math.abs(v);\n      return this.#container.size * (v / 100) * (isNegative ? -1 : 1);\n    };\n    let r = 0;\n    if (typeof value === \"number\") {\n      r = doPixel(value);\n    } else {\n      const val = parseInt(`${value}`, 10);\n      if (!Number.isNaN(val) && /%$/i.test(`${value}`)) {\n        r = doPixel(val);\n      }\n    }\n    return r;\n  }\n  /**\n   * Generate unique pane id.\n   * @private\n   * @returns {string} The genrated id.\n   */\n  #uniquePaneId() {\n    return `splitter-pane-${Math.floor(Math.random() * Date.now())}`;\n  }\n  /**\n   * Establish Internal Event Handlers\n   * @private\n   * @returns {object} This API object for chaining\n   */\n  #attachEventHandlers() {\n    const slot = this.shadowRoot?.querySelector(\"slot\");\n    this.offEvent(\"slotchange.splitter\", slot);\n    this.onEvent(\"slotchange.splitter\", slot, () => {\n      this.#init();\n    });\n    this.#pairs.forEach((pair, i) => {\n      const sb = pair.splitBar;\n      const namespace = `splitter${i}`;\n      this.offEvent(`ids-dragstart.${namespace}`, sb);\n      this.onEvent(`ids-dragstart.${namespace}`, sb, () => {\n        if (!this.disabled)\n          this.#moveStart(pair);\n      });\n      this.offEvent(`ids-drag.${namespace}`, sb);\n      this.onEvent(`ids-drag.${namespace}`, sb, (e) => {\n        if (!this.disabled && !this.resizeOnDragEnd && this.#moving.isMoving) {\n          const diff = this.#toPercentage(e.detail[this.#prop.delta]);\n          this.#updateSize({ ...pair, diff });\n        }\n      });\n      this.offEvent(`ids-dragend.${namespace}`, sb);\n      this.onEvent(`ids-dragend.${namespace}`, sb, (e) => {\n        if (!this.disabled) {\n          const diff = this.#toPercentage(e.detail[this.#prop.delta]);\n          this.#moveEnd({ ...pair, diff });\n        }\n      });\n      this.offEvent(`click.${namespace}`, sb);\n      this.onEvent(`click.${namespace}`, sb, () => {\n        sb.focus();\n      });\n      this.offEvent(`keydown.${namespace}`, sb);\n      this.onEvent(`keydown.${namespace}`, sb, (e) => {\n        if (!this.disabled) {\n          const allow = [\"ArrowDown\", \"ArrowRight\", \"ArrowUp\", \"ArrowLeft\", \"Space\"];\n          const key = e.code;\n          if (allow.indexOf(key) > -1) {\n            if (key !== \"Space\") {\n              const useRTL = this.#prop.useRTL;\n              let move = 10;\n              if (key === \"ArrowDown\" || key === \"ArrowLeft\") {\n                move *= useRTL || !this.isHorizontal ? 1 : -1;\n              } else if (key === \"ArrowUp\" || key === \"ArrowRight\") {\n                move *= useRTL || !this.isHorizontal ? -1 : 1;\n              }\n              this.#move({ ...pair, diff: move });\n            }\n            e.preventDefault();\n            e.stopPropagation();\n          }\n        }\n      });\n    });\n    this.#resizeObserver.disconnect();\n    if (this.container)\n      this.#resizeObserver.observe(this.container);\n    return this;\n  }\n  /** Handle Languages Changes */\n  onLanguageChange = () => {\n    this.#resize();\n  };\n  /**\n   * Destroy added elements and unbind events.\n   * @returns {object} This API object for chaining\n   */\n  #destroy() {\n    const slot = this.shadowRoot?.querySelector(\"slot\");\n    this.offEvent(\"slotchange.splitter\", slot);\n    this.#resizeObserver.disconnect();\n    this.#initObserver?.disconnect();\n    this.#pairs.forEach((pair, i) => {\n      const { start, end, splitBar } = pair;\n      const namespace = `splitter${i}`;\n      start.pane.removeAttribute(\"style\");\n      end.pane.removeAttribute(\"style\");\n      this.offEvent(`ids-dragstart.${namespace}`, splitBar);\n      this.offEvent(`ids-drag.${namespace}`, splitBar);\n      this.offEvent(`ids-dragend.${namespace}`, splitBar);\n      this.offEvent(`click.${namespace}`, splitBar);\n      this.offEvent(`keydown.${namespace}`, splitBar);\n      splitBar?.remove?.();\n    });\n    this.#container = { size: 0 };\n    this.#prop = {};\n    this.#moving = {};\n    this.#panes = [];\n    this.#pairs = [];\n    this.#defaultsSize = 0;\n    this.#expandSizes = [];\n    this.#sizes = [];\n    this.#minSizes = [];\n    return this;\n  }\n  /**\n   * Check if current orientation is horizontal\n   * @returns {boolean} True if, orientation is horizontal\n   */\n  get isHorizontal() {\n    return this.#prop.orientation === \"horizontal\";\n  }\n  /**\n   * Set the split bar align direction start/end\n   * @param {string} value of the align start, end\n   */\n  set align(value) {\n    if (value !== this.state.align) {\n      const prefixed = (v) => `align-${v}`;\n      this.container?.classList.remove(...ALIGN.map((v) => prefixed(v)));\n      if (ALIGN.indexOf(value) > -1) {\n        this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ALIGN, value);\n        this.state.align = value;\n      } else {\n        this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ALIGN);\n        this.state.align = SPLITTER_DEFAULTS.align;\n      }\n      this.container?.classList.add(prefixed(this.state.align));\n      this.#init();\n    }\n  }\n  get align() {\n    return this.state.align;\n  }\n  /**\n   * Set the splitter axis direction x: horizontal or y: vertical\n   * @param {string} value of the axis x or y\n   */\n  set axis(value) {\n    if (value !== this.state.axis) {\n      const prefixed = (v) => `axis-${v}`;\n      this.container?.classList.remove(...AXIS.map((v) => prefixed(v)));\n      if (AXIS.indexOf(value) > -1) {\n        this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.AXIS, value);\n        this.state.axis = value;\n      } else {\n        this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.AXIS);\n        this.state.axis = SPLITTER_DEFAULTS.axis;\n      }\n      this.container?.classList.add(prefixed(this.state.axis));\n      this.#init();\n    }\n  }\n  get axis() {\n    return this.state.axis;\n  }\n  /**\n   * Sets the splitter to disabled\n   * @param {boolean|string} value If true will set disabled attribute\n   */\n  set disabled(value) {\n    const val = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_6__.stringToBool)(value);\n    if (val !== this.state.disabled) {\n      this.state.disabled = val;\n      if (val) {\n        this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED, \"\");\n      } else {\n        this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED);\n      }\n      this.#setDisabled();\n    }\n  }\n  get disabled() {\n    return this.state.disabled;\n  }\n  /**\n   * Set the aria-label text for each split bar.\n   * @param {string} value of the label text.\n   */\n  set label(value) {\n    if (value !== this.state.label) {\n      if (value) {\n        this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.LABEL, value);\n        this.state.label = value;\n      } else {\n        this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.LABEL);\n        this.state.label = SPLITTER_DEFAULTS.label;\n      }\n    }\n  }\n  get label() {\n    return this.state.label;\n  }\n  /**\n   * Sets the splitter to resize on drag end\n   * @param {boolean|string} value If true will set to resize on drag end\n   */\n  set resizeOnDragEnd(value) {\n    const val = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_6__.stringToBool)(value);\n    if (val !== this.state.resizeOnDragEnd) {\n      this.state.resizeOnDragEnd = val;\n      if (val) {\n        this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.RESIZE_ON_DRAG_END, \"\");\n      } else {\n        this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.RESIZE_ON_DRAG_END);\n      }\n    }\n  }\n  get resizeOnDragEnd() {\n    return this.state.resizeOnDragEnd;\n  }\n  /**\n   *  Set splitter save position to local storage.\n   * @param {boolean|string} value if true, will allow to save position to local storage.\n   */\n  set savePosition(value) {\n    const val = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_6__.stringToBool)(value);\n    if (val !== this.state.savePosition) {\n      this.state.savePosition = val;\n      if (val) {\n        this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SAVE_POSITION, \"\");\n      } else {\n        this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SAVE_POSITION);\n      }\n    }\n  }\n  get savePosition() {\n    return this.state.savePosition;\n  }\n  /**\n   * Set uniqueId to save to local storage.\n   * @param {number|string|null} value A uniqueId use to save to local storage.\n   */\n  set uniqueId(value) {\n    const val = /number|string/g.test(typeof value) ? `${value}` : null;\n    if (typeof val === \"string\" && val !== \"\") {\n      if (val !== this.state.uniqueId) {\n        this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.UNIQUE_ID, val);\n        this.state.uniqueId = val;\n      }\n      return;\n    }\n    this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.UNIQUE_ID);\n    this.state.uniqueId = SPLITTER_DEFAULTS.uniqueId;\n  }\n  get uniqueId() {\n    return this.state.uniqueId;\n  }\n};\nIdsSplitter = __decorateClass([\n  (0,_core_ids_decorators__WEBPACK_IMPORTED_MODULE_0__.customElement)(\"ids-splitter\"),\n  (0,_core_ids_decorators__WEBPACK_IMPORTED_MODULE_0__.scss)(_ids_splitter_scss__WEBPACK_IMPORTED_MODULE_10__[\"default\"])\n], IdsSplitter);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/ids-splitter/ids-splitter.ts\n");

/***/ }),

/***/ "./src/mixins/ids-locale-mixin/ids-locale-mixin.ts":
/*!*********************************************************!*\
  !*** ./src/mixins/ids-locale-mixin/ids-locale-mixin.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ids_locale_mixin_default)\n/* harmony export */ });\n/* harmony import */ var _components_ids_locale_ids_locale__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../components/ids-locale/ids-locale */ \"./src/components/ids-locale/ids-locale.ts\");\n/* harmony import */ var _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/ids-attributes */ \"./src/core/ids-attributes.ts\");\n\n\nconst IdsLocaleMixin = (superclass) => class extends superclass {\n  localeAPI = new _components_ids_locale_ids_locale__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n  constructor(...args) {\n    super(...args);\n  }\n  connectedCallback() {\n    super.connectedCallback?.();\n    if (this.localeAPI.state.language !== \"en\")\n      this.setAttribute(\"language\", this.localeAPI.state.language);\n    if (this.localeAPI.state.localeName !== \"en-US\")\n      this.setAttribute(\"locale\", this.localeAPI.state.localeName);\n  }\n  static get attributes() {\n    return [\n      ...superclass.attributes,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.LANGUAGE,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.LOCALE\n    ];\n  }\n  /**\n   * Set the language for a component and wait for it to finish (async)\n   * @param {string} value The language string value\n   */\n  async setLanguage(value) {\n    await this.localeAPI.setLanguage(value);\n    if (this.nodeName === \"IDS-CONTAINER\")\n      this.localeAPI.setDocumentLangAttribute(this, value);\n    this.setAttribute(\"language\", value);\n    if (typeof this.onLanguageChange === \"function\" && this.previousLanguage !== value) {\n      this.onLanguageChange(this.localeAPI);\n    }\n    if (this.previousLanguage !== value) {\n      this.triggerEvent(\"languagechange\", this, { detail: { elem: this, language: this.language, locale: this.state?.locale } });\n    }\n    const previous = this.previousLanguage;\n    if (this.children.length > 0) {\n      this.#notifyChildrenLanguage(this.querySelectorAll(\"*\"), value, previous);\n    }\n    if (this.shadowRoot && this.shadowRoot?.children?.length > 0) {\n      this.#notifyChildrenLanguage(this.shadowRoot.querySelectorAll(\"*\"), value, previous);\n    }\n    this.localeAPI.updateDirectionAttribute(this, value);\n    this.setDirection();\n    this.previousLanguage = value;\n  }\n  /** Holds the last set language */\n  previousLanguage = \"en\";\n  /**\n   * Set the language for a component\n   * @param {string} value The language string value\n   */\n  set language(value) {\n    if (value && value !== this.language.name) {\n      this.setLanguage(value);\n    }\n  }\n  /**\n   * Get the language data keys and message for the current language\n   * @returns {object} The language data object\n   */\n  get language() {\n    return {\n      name: this.getAttribute(\"language\") || \"en\",\n      messages: this?.localeAPI?.language.messages\n    };\n  }\n  /**\n   * Set the setter on all children\n   * @param {NodeListOf<HTMLElement>} children the children to set\n   * @param {string} language The language string value\n   * @param {string} previousLanguage The previous language string value\n   */\n  #notifyChildrenLanguage(children, language, previousLanguage) {\n    children.forEach((element) => {\n      if (element.language && element.language.name === previousLanguage) {\n        element.language = language;\n      }\n    });\n  }\n  /** Holds the last set locale */\n  previousLocale = \"en-US\";\n  /**\n   * Set the locale for a component and wait for it to finish (async)\n   * @param {string} value The locale string value\n   */\n  async setLocale(value) {\n    if (value) {\n      await this.localeAPI.setLocale(value);\n      const lang = this.localeAPI.correctLanguage(value);\n      this.setAttribute(\"locale\", value);\n      if (this.nodeName === \"IDS-CONTAINER\")\n        this.localeAPI.setDocumentLangAttribute(this, lang);\n      await this.setLanguage(lang);\n      if (typeof this.onLocaleChange === \"function\" && this.previousLocale !== value) {\n        this.onLocaleChange(this.localeAPI);\n      }\n      if (this.previousLocale !== value) {\n        this.triggerEvent(\"localechange\", this, { detail: { elem: this, language: this.language, locale: this.state?.locale } });\n      }\n      if (this.children.length > 0) {\n        const previous = this.previousLocale;\n        requestAnimationFrame(() => {\n          this.#notifyChildrenLocale(this.querySelectorAll(\"*\"), value, previous);\n        });\n      }\n    }\n    this.previousLocale = value;\n  }\n  /**\n   * Set the locale for a component\n   * @param {string} value The locale string value\n   */\n  set locale(value) {\n    if (value && value !== this.locale && typeof value === \"string\") {\n      this.setLocale(value);\n    }\n  }\n  get locale() {\n    return this.localeAPI.state.localeName;\n  }\n  /**\n   * Set the setter on all children\n   * @param {NodeListOf<HTMLElement>} children the children to set\n   * @param {string} locale The locale string value\n   * @param {string} previousLocale The previous locale string value\n   */\n  #notifyChildrenLocale(children, locale, previousLocale) {\n    children.forEach((element) => {\n      if (element.locale && element.locale === previousLocale) {\n        element.locale = locale;\n      }\n    });\n  }\n  /**\n   * Set the direction attribute\n   */\n  setDirection() {\n    if (this.localeAPI?.isRTL()) {\n      this.setAttribute(\"dir\", \"rtl\");\n      this.container?.classList.add(\"rtl\");\n    } else {\n      this.removeAttribute(\"dir\");\n      this.container?.classList.remove(\"rtl\");\n    }\n  }\n};\nvar ids_locale_mixin_default = IdsLocaleMixin;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/mixins/ids-locale-mixin/ids-locale-mixin.ts\n");

/***/ }),

/***/ "./src/mixins/ids-theme-mixin/ids-theme-mixin.ts":
/*!*******************************************************!*\
  !*** ./src/mixins/ids-theme-mixin/ids-theme-mixin.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"THEME_MODES\": () => (/* binding */ THEME_MODES),\n/* harmony export */   \"default\": () => (/* binding */ ids_theme_mixin_default)\n/* harmony export */ });\n/* harmony import */ var _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/ids-attributes */ \"./src/core/ids-attributes.ts\");\n\nconst THEME_MODES = [\"light\", \"dark\", \"contrast\"];\nconst IdsThemeMixin = (superclass) => class extends superclass {\n  switcher = null;\n  constructor(...args) {\n    super(...args);\n  }\n  static get attributes() {\n    return [\n      ...superclass.attributes,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.MODE\n    ];\n  }\n  connectedCallback() {\n    super.connectedCallback?.();\n    this.initThemeHandlers();\n  }\n  disconnectedCallback() {\n    this.offEvent(\"themechanged\");\n    this.switcher = null;\n    super.disconnectedCallback?.();\n  }\n  /**\n   * Init the mixin events and states\n   * @private\n   */\n  initThemeHandlers() {\n    this.switcher = document.querySelector(\"ids-theme-switcher\");\n    if (!this.switcher) {\n      return;\n    }\n    this.mode = this.switcher.mode;\n    this.onEvent(\"themechanged\", this.switcher, (e) => {\n      this.mode = e.detail.mode;\n    });\n  }\n  /**\n   * Set the mode of the current theme\n   * @param {string} value The mode value for example: light, dark, or contrast\n   */\n  set mode(value) {\n    if (!THEME_MODES.includes(value))\n      value = \"light\";\n    this.setAttribute(\"mode\", value);\n    this.container?.setAttribute(\"mode\", value);\n  }\n  /**\n   * Get the mode of the current theme\n   * @returns {string} light, dark, or contrast\n   */\n  get mode() {\n    return this.getAttribute(\"mode\") || \"light\";\n  }\n};\nvar ids_theme_mixin_default = IdsThemeMixin;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbWl4aW5zL2lkcy10aGVtZS1taXhpbi9pZHMtdGhlbWUtbWl4aW4udHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTJCO0FBT3BCLE1BQU0sY0FBYyxDQUFDLFNBQVMsUUFBUSxVQUFVO0FBT3ZELE1BQU0sZ0JBQWdCLENBQXdCLGVBQWtCLGNBQWMsV0FBVztBQUFBLEVBQ3ZGLFdBQW9DO0FBQUEsRUFFcEMsZUFBZSxNQUFhO0FBQzFCLFVBQU0sR0FBRyxJQUFJO0FBQUEsRUFDZjtBQUFBLEVBRUEsV0FBVyxhQUFhO0FBQ3RCLFdBQU87QUFBQSxNQUNMLEdBQUksV0FBbUI7QUFBQSxNQUN2QixpRUFBZTtBQUFKLElBQ2I7QUFBQSxFQUNGO0FBQUEsRUFFQSxvQkFBb0I7QUFDbEIsVUFBTSxvQkFBb0I7QUFDMUIsU0FBSyxrQkFBa0I7QUFBQSxFQUN6QjtBQUFBLEVBRUEsdUJBQXVCO0FBQ3JCLFNBQUssU0FBUyxjQUFjO0FBQzVCLFNBQUssV0FBVztBQUNoQixVQUFNLHVCQUF1QjtBQUFBLEVBQy9CO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU1BLG9CQUFvQjtBQUNsQixTQUFLLFdBQVcsU0FBUyxjQUFnQyxvQkFBb0I7QUFDN0UsUUFBSSxDQUFDLEtBQUssVUFBVTtBQUNsQjtBQUFBLElBQ0Y7QUFFQSxTQUFLLE9BQU8sS0FBSyxTQUFTO0FBRTFCLFNBQUssUUFBUSxnQkFBZ0IsS0FBSyxVQUFVLENBQUMsTUFBbUI7QUFDOUQsV0FBSyxPQUFPLEVBQUUsT0FBTztBQUFBLElBQ3ZCLENBQUM7QUFBQSxFQUNIO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU1BLElBQUksS0FBSyxPQUFlO0FBQ3RCLFFBQUksQ0FBQyxZQUFZLFNBQVMsS0FBSztBQUFHLGNBQVE7QUFDMUMsU0FBSyxhQUFhLFFBQVEsS0FBSztBQUMvQixTQUFLLFdBQVcsYUFBYSxRQUFRLEtBQUs7QUFBQSxFQUM1QztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNQSxJQUFJLE9BQWU7QUFDakIsV0FBTyxLQUFLLGFBQWEsTUFBTSxLQUFLO0FBQUEsRUFDdEM7QUFDRjtBQUVBLElBQU8sMEJBQVEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pZHMtZW50ZXJwcmlzZS13Yy8uL3NyYy9taXhpbnMvaWRzLXRoZW1lLW1peGluL2lkcy10aGVtZS1taXhpbi50cz8yZGIyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGF0dHJpYnV0ZXMgfSBmcm9tICcuLi8uLi9jb3JlL2lkcy1hdHRyaWJ1dGVzJztcbmltcG9ydCB7IEV2ZW50c01peGluSW50ZXJmYWNlIH0gZnJvbSAnLi4vaWRzLWV2ZW50cy1taXhpbi9pZHMtZXZlbnRzLW1peGluJztcbmltcG9ydCB7IElkc0NvbnN0cnVjdG9yIH0gZnJvbSAnLi4vLi4vY29yZS9pZHMtZWxlbWVudCc7XG5pbXBvcnQgdHlwZSBJZHNUaGVtZVN3aXRjaGVyIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvaWRzLXRoZW1lLXN3aXRjaGVyL2lkcy10aGVtZS1zd2l0Y2hlcic7XG5cbnR5cGUgQ29uc3RyYWludHMgPSBJZHNDb25zdHJ1Y3RvcjxFdmVudHNNaXhpbkludGVyZmFjZT47XG5cbmV4cG9ydCBjb25zdCBUSEVNRV9NT0RFUyA9IFsnbGlnaHQnLCAnZGFyaycsICdjb250cmFzdCddO1xuXG4vKipcbiAqIEEgbWl4aW4gdGhhdCBhZGRzIHRoZW1pbmcgZnVuY3Rpb25hbGl0eSB0byBjb21wb25lbnRzXG4gKiBAcGFyYW0ge2FueX0gc3VwZXJjbGFzcyBBY2NlcHRzIGEgc3VwZXJjbGFzcyBhbmQgY3JlYXRlcyBhIG5ldyBzdWJjbGFzcyBmcm9tIGl0XG4gKiBAcmV0dXJucyB7YW55fSBUaGUgZXh0ZW5kZWQgb2JqZWN0XG4gKi9cbmNvbnN0IElkc1RoZW1lTWl4aW4gPSA8VCBleHRlbmRzIENvbnN0cmFpbnRzPihzdXBlcmNsYXNzOiBUKSA9PiBjbGFzcyBleHRlbmRzIHN1cGVyY2xhc3Mge1xuICBzd2l0Y2hlcjogSWRzVGhlbWVTd2l0Y2hlciB8IG51bGwgPSBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKC4uLmFyZ3M6IGFueVtdKSB7XG4gICAgc3VwZXIoLi4uYXJncyk7XG4gIH1cblxuICBzdGF0aWMgZ2V0IGF0dHJpYnV0ZXMoKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIC4uLihzdXBlcmNsYXNzIGFzIGFueSkuYXR0cmlidXRlcyxcbiAgICAgIGF0dHJpYnV0ZXMuTU9ERVxuICAgIF07XG4gIH1cblxuICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaz8uKCk7XG4gICAgdGhpcy5pbml0VGhlbWVIYW5kbGVycygpO1xuICB9XG5cbiAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgdGhpcy5vZmZFdmVudCgndGhlbWVjaGFuZ2VkJyk7XG4gICAgdGhpcy5zd2l0Y2hlciA9IG51bGw7XG4gICAgc3VwZXIuZGlzY29ubmVjdGVkQ2FsbGJhY2s/LigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXQgdGhlIG1peGluIGV2ZW50cyBhbmQgc3RhdGVzXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBpbml0VGhlbWVIYW5kbGVycygpIHtcbiAgICB0aGlzLnN3aXRjaGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcjxJZHNUaGVtZVN3aXRjaGVyPignaWRzLXRoZW1lLXN3aXRjaGVyJyk7XG4gICAgaWYgKCF0aGlzLnN3aXRjaGVyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5tb2RlID0gdGhpcy5zd2l0Y2hlci5tb2RlO1xuXG4gICAgdGhpcy5vbkV2ZW50KCd0aGVtZWNoYW5nZWQnLCB0aGlzLnN3aXRjaGVyLCAoZTogQ3VzdG9tRXZlbnQpID0+IHtcbiAgICAgIHRoaXMubW9kZSA9IGUuZGV0YWlsLm1vZGU7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBtb2RlIG9mIHRoZSBjdXJyZW50IHRoZW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSBUaGUgbW9kZSB2YWx1ZSBmb3IgZXhhbXBsZTogbGlnaHQsIGRhcmssIG9yIGNvbnRyYXN0XG4gICAqL1xuICBzZXQgbW9kZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgaWYgKCFUSEVNRV9NT0RFUy5pbmNsdWRlcyh2YWx1ZSkpIHZhbHVlID0gJ2xpZ2h0JztcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnbW9kZScsIHZhbHVlKTtcbiAgICB0aGlzLmNvbnRhaW5lcj8uc2V0QXR0cmlidXRlKCdtb2RlJywgdmFsdWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgbW9kZSBvZiB0aGUgY3VycmVudCB0aGVtZVxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBsaWdodCwgZGFyaywgb3IgY29udHJhc3RcbiAgICovXG4gIGdldCBtb2RlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlKCdtb2RlJykgfHwgJ2xpZ2h0JztcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgSWRzVGhlbWVNaXhpbjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/mixins/ids-theme-mixin/ids-theme-mixin.ts\n");

/***/ }),

/***/ "./src/components/ids-splitter/ids-splitter-pane.scss":
/*!************************************************************!*\
  !*** ./src/components/ids-splitter/ids-splitter-pane.scss ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n\n        const styles = `/* Ids SplitterPane Component */`;\n        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (styles);\n    //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9pZHMtc3BsaXR0ZXIvaWRzLXNwbGl0dGVyLXBhbmUuc2Nzcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pZHMtZW50ZXJwcmlzZS13Yy8uL3NyYy9jb21wb25lbnRzL2lkcy1zcGxpdHRlci9pZHMtc3BsaXR0ZXItcGFuZS5zY3NzP2ExNTkiXSwic291cmNlc0NvbnRlbnQiOlsiLyogSWRzIFNwbGl0dGVyUGFuZSBDb21wb25lbnQgKi9cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/components/ids-splitter/ids-splitter-pane.scss\n");

/***/ }),

/***/ "./src/components/ids-splitter/ids-splitter.scss":
/*!*******************************************************!*\
  !*** ./src/components/ids-splitter/ids-splitter.scss ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n\n        const styles = `/* Ids Splitter Component */ /* Sass scss styles. Keep Base very small */\n/* Global variables (might want these to become tokens) */\n.ids-splitter {\n  display: flex;\n  position: relative;\n  height: 100%;\n  width: 100%;\n}\n.ids-splitter.axis-x {\n  flex-direction: row;\n}\n.ids-splitter.axis-y {\n  flex-direction: column;\n}\n.ids-splitter .ids-splitter-split-bar {\n  position: absolute;\n}\n.ids-splitter .ids-splitter-split-bar .split-bar {\n  -webkit-transition: background-color 300ms cubic-bezier(0.17, 0.04, 0.03, 0.94);\n  -moz-transition: background-color 300ms cubic-bezier(0.17, 0.04, 0.03, 0.94);\n  -o-transition: background-color 300ms cubic-bezier(0.17, 0.04, 0.03, 0.94);\n  -ms-transition: background-color 300ms cubic-bezier(0.17, 0.04, 0.03, 0.94);\n  transition: background-color 300ms cubic-bezier(0.17, 0.04, 0.03, 0.94);\n  position: relative;\n  display: flex;\n  height: 100%;\n  width: 100%;\n  align-items: center;\n  justify-content: center;\n}\n.ids-splitter .ids-splitter-split-bar .split-bar:hover {\n  background-color: var(--ids-color-palette-slate-20);\n}\n.ids-splitter .ids-splitter-split-bar[axis=x] {\n  height: 100%;\n  width: 21px;\n  top: 0;\n}\n.ids-splitter .ids-splitter-split-bar[axis=x].align-start {\n  border-inline-start: 1px solid var(--ids-color-palette-slate-30);\n}\n.ids-splitter .ids-splitter-split-bar[axis=x].align-end {\n  border-inline-end: 1px solid var(--ids-color-palette-slate-30);\n  margin-inline-start: -21px;\n}\n.ids-splitter .ids-splitter-split-bar[axis=y] {\n  width: 100%;\n  height: 21px;\n  left: 0;\n}\n.ids-splitter .ids-splitter-split-bar[axis=y].align-start {\n  border-block-start: 1px solid var(--ids-color-palette-slate-30);\n}\n.ids-splitter .ids-splitter-split-bar[axis=y].align-end {\n  border-block-end: 1px solid var(--ids-color-palette-slate-30);\n  margin-block-start: -21px;\n}\n.ids-splitter .ids-splitter-split-bar[axis=y] ids-icon {\n  transform: rotate(-90deg);\n}\n.ids-splitter .ids-splitter-split-bar[is-dragging], .ids-splitter .ids-splitter-split-bar:focus {\n  outline: 0;\n  background-color: var(--ids-color-palette-slate-20);\n}\n.ids-splitter .ids-splitter-split-bar[is-dragging][axis=x].align-start, .ids-splitter .ids-splitter-split-bar[is-dragging][axis=x].align-end, .ids-splitter .ids-splitter-split-bar[is-dragging][axis=y].align-start, .ids-splitter .ids-splitter-split-bar[is-dragging][axis=y].align-end, .ids-splitter .ids-splitter-split-bar:focus[axis=x].align-start, .ids-splitter .ids-splitter-split-bar:focus[axis=x].align-end, .ids-splitter .ids-splitter-split-bar:focus[axis=y].align-start, .ids-splitter .ids-splitter-split-bar:focus[axis=y].align-end {\n  border-color: var(--ids-color-palette-azure-70);\n  box-shadow: 0 0 3px 2px rgba(54, 138, 192, 0.3);\n}\n.ids-splitter .ids-splitter-split-bar[disabled] {\n  display: none;\n}\n.ids-splitter[mode=dark] .ids-splitter-split-bar {\n  border-color: var(--ids-color-palette-slate-70);\n}\n.ids-splitter[mode=dark] .ids-splitter-split-bar .split-bar:hover {\n  background-color: var(--ids-color-palette-slate-70);\n}\n.ids-splitter[mode=dark] .ids-splitter-split-bar[is-dragging] .split-bar, .ids-splitter[mode=dark] .ids-splitter-split-bar:focus .split-bar {\n  background-color: var(--ids-color-palette-slate-70);\n}\n.ids-splitter[mode=contrast] .ids-splitter-split-bar {\n  border-color: var(--ids-color-palette-slate-40);\n}\n.ids-splitter[mode=contrast] .ids-splitter-split-bar .split-bar:hover {\n  background-color: var(--ids-color-palette-slate-20);\n}\n.ids-splitter[mode=contrast] .ids-splitter-split-bar[is-dragging] .split-bar, .ids-splitter[mode=contrast] .ids-splitter-split-bar:focus .split-bar {\n  background-color: var(--ids-color-palette-slate-20);\n}\n\n::slotted(ids-splitter-pane) {\n  display: grid;\n  overflow: auto;\n}`;\n        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (styles);\n    //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/ids-splitter/ids-splitter.scss\n");

/***/ })

}]);