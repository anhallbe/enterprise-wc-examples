"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkids_enterprise_wc"] = self["webpackChunkids_enterprise_wc"] || []).push([["src_components_ids-tree_ids-tree_ts-src_mixins_ids-color-variant-mixin_ids-color-variant-mixi-035ec1"],{

/***/ "./src/components/ids-badge/ids-badge.ts":
/*!***********************************************!*\
  !*** ./src/components/ids-badge/ids-badge.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ IdsBadge)\n/* harmony export */ });\n/* harmony import */ var _core_ids_decorators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/ids-decorators */ \"./src/core/ids-decorators.ts\");\n/* harmony import */ var _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/ids-attributes */ \"./src/core/ids-attributes.ts\");\n/* harmony import */ var _mixins_ids_events_mixin_ids_events_mixin__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../mixins/ids-events-mixin/ids-events-mixin */ \"./src/mixins/ids-events-mixin/ids-events-mixin.ts\");\n/* harmony import */ var _mixins_ids_theme_mixin_ids_theme_mixin__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../mixins/ids-theme-mixin/ids-theme-mixin */ \"./src/mixins/ids-theme-mixin/ids-theme-mixin.ts\");\n/* harmony import */ var _core_ids_element__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/ids-element */ \"./src/core/ids-element.ts\");\n/* harmony import */ var _ids_badge_scss__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ids-badge.scss */ \"./src/components/ids-badge/ids-badge.scss\");\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result)\n    __defProp(target, key, result);\n  return result;\n};\n\n\n\n\n\n\nconst Base = (0,_mixins_ids_theme_mixin_ids_theme_mixin__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(\n  (0,_mixins_ids_events_mixin_ids_events_mixin__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\n    _core_ids_element__WEBPACK_IMPORTED_MODULE_4__[\"default\"]\n  )\n);\nlet IdsBadge = class extends Base {\n  constructor() {\n    super();\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    if (this.color)\n      this.color = this.getAttribute(\"color\");\n  }\n  /**\n   * Return the attributes we handle as getters/setters\n   * @returns {Array} The attribute in an array\n   */\n  static get attributes() {\n    return [\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.COLOR,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.MODE,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SHAPE\n    ];\n  }\n  /**\n   * Create the Template for the contents\n   * @returns {string} The Template\n   */\n  template() {\n    return `<span class=\"ids-badge ${this.shape}\" part=\"badge\"><slot></slot></span>`;\n  }\n  /**\n   * Return the badge shape between normal and round\n   * @returns {string} The path data\n   */\n  get shape() {\n    return this.getAttribute(\"shape\") || \"normal\";\n  }\n  /**\n   * Set the shape of the badge\n   * @param {string} value The Badge Shape\n   */\n  set shape(value) {\n    if (value) {\n      this.setAttribute(\"shape\", value.toString());\n    } else {\n      this.removeAttribute(\"shape\");\n    }\n    this.container?.classList.remove(\"normal\", \"round\");\n    this.container?.classList.add(this.shape);\n  }\n  /**\n   * Return the badge color\n   * @returns {string | null} the path data\n   */\n  get color() {\n    return this.getAttribute(\"color\");\n  }\n  /**\n   * Set the color\n   * @param {string | null} value The Badge Color [base, error, info, success and warning]\n   */\n  set color(value) {\n    if (value) {\n      this.setAttribute(\"color\", value);\n      this.container?.setAttribute(\"color\", value);\n      if (value === \"error\" || value === \"info\" || value === \"warning\") {\n        this.container?.classList.add(\"ids-white\");\n      }\n    } else {\n      this.removeAttribute(\"color\");\n      if (this.container) {\n        this.container?.removeAttribute(\"color\");\n        this.container.style.backgroundColor = \"\";\n        this.container.style.borderColor = \"\";\n        this.container.style.color = \"\";\n        this.container.style.position = \"\";\n      }\n    }\n  }\n};\nIdsBadge = __decorateClass([\n  (0,_core_ids_decorators__WEBPACK_IMPORTED_MODULE_0__.customElement)(\"ids-badge\"),\n  (0,_core_ids_decorators__WEBPACK_IMPORTED_MODULE_0__.scss)(_ids_badge_scss__WEBPACK_IMPORTED_MODULE_5__[\"default\"])\n], IdsBadge);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9pZHMtYmFkZ2UvaWRzLWJhZGdlLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFvQztBQUNUO0FBQ0E7QUFDRDtBQUNIO0FBRUo7QUFFbkIsTUFBTSxPQUFPLG1GQUFhO0FBQWIsRUFDWCxxRkFBYztBQUFkLElBQ0UseURBQVU7QUFBVixFQUNGO0FBQ0Y7QUFZQSxJQUFxQixXQUFyQixjQUFzQyxLQUFLO0FBQUEsRUFDekMsY0FBYztBQUNaLFVBQU07QUFBQSxFQUNSO0FBQUEsRUFFQSxvQkFBb0I7QUFDbEIsVUFBTSxrQkFBa0I7QUFDeEIsUUFBSSxLQUFLO0FBQU8sV0FBSyxRQUFRLEtBQUssYUFBYSxPQUFPO0FBQUEsRUFDeEQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsV0FBVyxhQUF1QjtBQUNoQyxXQUFPO0FBQUEsTUFDTCxrRUFBZ0I7QUFBTCxNQUNYLGlFQUFlO0FBQUosTUFDWCxrRUFBZ0I7QUFBTCxJQUNiO0FBQUEsRUFDRjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNQSxXQUFXO0FBQ1QsV0FBTywwQkFBMEIsS0FBSztBQUFBLEVBQ3hDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU1BLElBQUksUUFBZ0I7QUFDbEIsV0FBTyxLQUFLLGFBQWEsT0FBTyxLQUFLO0FBQUEsRUFDdkM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsSUFBSSxNQUFNLE9BQXNCO0FBQzlCLFFBQUksT0FBTztBQUNULFdBQUssYUFBYSxTQUFTLE1BQU0sU0FBUyxDQUFDO0FBQUEsSUFDN0MsT0FBTztBQUNMLFdBQUssZ0JBQWdCLE9BQU87QUFBQSxJQUM5QjtBQUNBLFNBQUssV0FBVyxVQUFVLE9BQU8sVUFBVSxPQUFPO0FBQ2xELFNBQUssV0FBVyxVQUFVLElBQUksS0FBSyxLQUFLO0FBQUEsRUFDMUM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsSUFBSSxRQUF1QjtBQUN6QixXQUFPLEtBQUssYUFBYSxPQUFPO0FBQUEsRUFDbEM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsSUFBSSxNQUFNLE9BQXNCO0FBQzlCLFFBQUksT0FBTztBQUNULFdBQUssYUFBYSxTQUFTLEtBQUs7QUFDaEMsV0FBSyxXQUFXLGFBQWEsU0FBUyxLQUFLO0FBQzNDLFVBQUksVUFBVSxXQUFXLFVBQVUsVUFBVSxVQUFVLFdBQVc7QUFDaEUsYUFBSyxXQUFXLFVBQVUsSUFBSSxXQUFXO0FBQUEsTUFDM0M7QUFBQSxJQUNGLE9BQU87QUFDTCxXQUFLLGdCQUFnQixPQUFPO0FBQzVCLFVBQUksS0FBSyxXQUFXO0FBQ2xCLGFBQUssV0FBVyxnQkFBZ0IsT0FBTztBQUN2QyxhQUFLLFVBQVUsTUFBTSxrQkFBa0I7QUFDdkMsYUFBSyxVQUFVLE1BQU0sY0FBYztBQUNuQyxhQUFLLFVBQVUsTUFBTSxRQUFRO0FBQzdCLGFBQUssVUFBVSxNQUFNLFdBQVc7QUFBQSxNQUNsQztBQUFBLElBQ0Y7QUFBQSxFQUNGO0FBQ0Y7QUFsRnFCLFdBQXJCO0FBQUEsRUFGQyxtRUFBYSxDQUFDLFdBQVc7QUFBQSxFQUN6QiwwREFBSSxDQUFDLHVEQUFNO0FBQUEsR0FDUyIsInNvdXJjZXMiOlsid2VicGFjazovL2lkcy1lbnRlcnByaXNlLXdjLy4vc3JjL2NvbXBvbmVudHMvaWRzLWJhZGdlL2lkcy1iYWRnZS50cz9jMzg4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGN1c3RvbUVsZW1lbnQsIHNjc3MgfSBmcm9tICcuLi8uLi9jb3JlL2lkcy1kZWNvcmF0b3JzJztcbmltcG9ydCB7IGF0dHJpYnV0ZXMgfSBmcm9tICcuLi8uLi9jb3JlL2lkcy1hdHRyaWJ1dGVzJztcbmltcG9ydCBJZHNFdmVudHNNaXhpbiBmcm9tICcuLi8uLi9taXhpbnMvaWRzLWV2ZW50cy1taXhpbi9pZHMtZXZlbnRzLW1peGluJztcbmltcG9ydCBJZHNUaGVtZU1peGluIGZyb20gJy4uLy4uL21peGlucy9pZHMtdGhlbWUtbWl4aW4vaWRzLXRoZW1lLW1peGluJztcbmltcG9ydCBJZHNFbGVtZW50IGZyb20gJy4uLy4uL2NvcmUvaWRzLWVsZW1lbnQnO1xuXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vaWRzLWJhZGdlLnNjc3MnO1xuXG5jb25zdCBCYXNlID0gSWRzVGhlbWVNaXhpbihcbiAgSWRzRXZlbnRzTWl4aW4oXG4gICAgSWRzRWxlbWVudFxuICApXG4pO1xuXG4vKipcbiAqIElEUyBCYWRnZSBDb21wb25lbnRcbiAqIEB0eXBlIHtJZHNCYWRnZX1cbiAqIEBpbmhlcml0cyBJZHNFbGVtZW50XG4gKiBAbWl4ZXMgSWRzRXZlbnRzTWl4aW5cbiAqIEBtaXhlcyBJZHNUaGVtZU1peGluXG4gKiBAcGFydCBiYWRnZSAtIHRoZSBiYWRnZSBlbGVtZW50XG4gKi9cbkBjdXN0b21FbGVtZW50KCdpZHMtYmFkZ2UnKVxuQHNjc3Moc3R5bGVzKVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSWRzQmFkZ2UgZXh0ZW5kcyBCYXNlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgaWYgKHRoaXMuY29sb3IpIHRoaXMuY29sb3IgPSB0aGlzLmdldEF0dHJpYnV0ZSgnY29sb3InKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIGF0dHJpYnV0ZXMgd2UgaGFuZGxlIGFzIGdldHRlcnMvc2V0dGVyc1xuICAgKiBAcmV0dXJucyB7QXJyYXl9IFRoZSBhdHRyaWJ1dGUgaW4gYW4gYXJyYXlcbiAgICovXG4gIHN0YXRpYyBnZXQgYXR0cmlidXRlcygpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIGF0dHJpYnV0ZXMuQ09MT1IsXG4gICAgICBhdHRyaWJ1dGVzLk1PREUsXG4gICAgICBhdHRyaWJ1dGVzLlNIQVBFXG4gICAgXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIFRlbXBsYXRlIGZvciB0aGUgY29udGVudHNcbiAgICogQHJldHVybnMge3N0cmluZ30gVGhlIFRlbXBsYXRlXG4gICAqL1xuICB0ZW1wbGF0ZSgpIHtcbiAgICByZXR1cm4gYDxzcGFuIGNsYXNzPVwiaWRzLWJhZGdlICR7dGhpcy5zaGFwZX1cIiBwYXJ0PVwiYmFkZ2VcIj48c2xvdD48L3Nsb3Q+PC9zcGFuPmA7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBiYWRnZSBzaGFwZSBiZXR3ZWVuIG5vcm1hbCBhbmQgcm91bmRcbiAgICogQHJldHVybnMge3N0cmluZ30gVGhlIHBhdGggZGF0YVxuICAgKi9cbiAgZ2V0IHNoYXBlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlKCdzaGFwZScpIHx8ICdub3JtYWwnO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgc2hhcGUgb2YgdGhlIGJhZGdlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSBUaGUgQmFkZ2UgU2hhcGVcbiAgICovXG4gIHNldCBzaGFwZSh2YWx1ZTogc3RyaW5nIHwgbnVsbCkge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ3NoYXBlJywgdmFsdWUudG9TdHJpbmcoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKCdzaGFwZScpO1xuICAgIH1cbiAgICB0aGlzLmNvbnRhaW5lcj8uY2xhc3NMaXN0LnJlbW92ZSgnbm9ybWFsJywgJ3JvdW5kJyk7XG4gICAgdGhpcy5jb250YWluZXI/LmNsYXNzTGlzdC5hZGQodGhpcy5zaGFwZSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBiYWRnZSBjb2xvclxuICAgKiBAcmV0dXJucyB7c3RyaW5nIHwgbnVsbH0gdGhlIHBhdGggZGF0YVxuICAgKi9cbiAgZ2V0IGNvbG9yKCk6IHN0cmluZyB8IG51bGwge1xuICAgIHJldHVybiB0aGlzLmdldEF0dHJpYnV0ZSgnY29sb3InKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIGNvbG9yXG4gICAqIEBwYXJhbSB7c3RyaW5nIHwgbnVsbH0gdmFsdWUgVGhlIEJhZGdlIENvbG9yIFtiYXNlLCBlcnJvciwgaW5mbywgc3VjY2VzcyBhbmQgd2FybmluZ11cbiAgICovXG4gIHNldCBjb2xvcih2YWx1ZTogc3RyaW5nIHwgbnVsbCkge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2NvbG9yJywgdmFsdWUpO1xuICAgICAgdGhpcy5jb250YWluZXI/LnNldEF0dHJpYnV0ZSgnY29sb3InLCB2YWx1ZSk7XG4gICAgICBpZiAodmFsdWUgPT09ICdlcnJvcicgfHwgdmFsdWUgPT09ICdpbmZvJyB8fCB2YWx1ZSA9PT0gJ3dhcm5pbmcnKSB7XG4gICAgICAgIHRoaXMuY29udGFpbmVyPy5jbGFzc0xpc3QuYWRkKCdpZHMtd2hpdGUnKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUoJ2NvbG9yJyk7XG4gICAgICBpZiAodGhpcy5jb250YWluZXIpIHtcbiAgICAgICAgdGhpcy5jb250YWluZXI/LnJlbW92ZUF0dHJpYnV0ZSgnY29sb3InKTtcbiAgICAgICAgdGhpcy5jb250YWluZXIuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJyc7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLnN0eWxlLmJvcmRlckNvbG9yID0gJyc7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLnN0eWxlLmNvbG9yID0gJyc7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLnN0eWxlLnBvc2l0aW9uID0gJyc7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/components/ids-badge/ids-badge.ts\n");

/***/ }),

/***/ "./src/components/ids-tree/ids-tree-node.ts":
/*!**************************************************!*\
  !*** ./src/components/ids-tree/ids-tree-node.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ IdsTreeNode)\n/* harmony export */ });\n/* harmony import */ var _core_ids_decorators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/ids-decorators */ \"./src/core/ids-decorators.ts\");\n/* harmony import */ var _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/ids-attributes */ \"./src/core/ids-attributes.ts\");\n/* harmony import */ var _utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/ids-string-utils/ids-string-utils */ \"./src/utils/ids-string-utils/ids-string-utils.ts\");\n/* harmony import */ var _mixins_ids_events_mixin_ids_events_mixin__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../mixins/ids-events-mixin/ids-events-mixin */ \"./src/mixins/ids-events-mixin/ids-events-mixin.ts\");\n/* harmony import */ var _mixins_ids_theme_mixin_ids_theme_mixin__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../mixins/ids-theme-mixin/ids-theme-mixin */ \"./src/mixins/ids-theme-mixin/ids-theme-mixin.ts\");\n/* harmony import */ var _mixins_ids_locale_mixin_ids_locale_mixin__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../mixins/ids-locale-mixin/ids-locale-mixin */ \"./src/mixins/ids-locale-mixin/ids-locale-mixin.ts\");\n/* harmony import */ var _core_ids_element__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/ids-element */ \"./src/core/ids-element.ts\");\n/* harmony import */ var _ids_tree_shared__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ids-tree-shared */ \"./src/components/ids-tree/ids-tree-shared.ts\");\n/* harmony import */ var _ids_badge_ids_badge__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../ids-badge/ids-badge */ \"./src/components/ids-badge/ids-badge.ts\");\n/* harmony import */ var _ids_text_ids_text__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../ids-text/ids-text */ \"./src/components/ids-text/ids-text.ts\");\n/* harmony import */ var _ids_checkbox_ids_checkbox__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../ids-checkbox/ids-checkbox */ \"./src/components/ids-checkbox/ids-checkbox.ts\");\n/* harmony import */ var _ids_tree_node_scss__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./ids-tree-node.scss */ \"./src/components/ids-tree/ids-tree-node.scss\");\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result)\n    __defProp(target, key, result);\n  return result;\n};\n\n\n\n\n\n\n\n\n\n\n\n\nconst Base = (0,_mixins_ids_theme_mixin_ids_theme_mixin__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(\n  (0,_mixins_ids_locale_mixin_ids_locale_mixin__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(\n    (0,_mixins_ids_events_mixin_ids_events_mixin__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(\n      _core_ids_element__WEBPACK_IMPORTED_MODULE_6__[\"default\"]\n    )\n  )\n);\nlet IdsTreeNode = class extends Base {\n  /**\n   * Main node container\n   */\n  nodeContainer = null;\n  groupNodesEl = null;\n  tree = null;\n  isGroup = false;\n  constructor() {\n    super();\n  }\n  /**\n   * Invoked each time the custom element is appended into a document-connected element.\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    this.nodeContainer = this.shadowRoot?.querySelector(\".node-container\");\n    this.groupNodesEl = this.shadowRoot?.querySelector(\".group-nodes\");\n    this.#attachEventListeners();\n  }\n  /**\n   * Return the attributes we handle as getters/setters\n   * @returns {Array} The attributes in an array\n   */\n  static get attributes() {\n    return [\n      ...super.attributes,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.COLLAPSE_ICON,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.EXPAND_ICON,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.EXPANDED,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ICON,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.LABEL,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SELECTABLE,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SELECTED,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.TABBABLE,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.USE_TOGGLE_TARGET\n    ];\n  }\n  /**\n   * Create the Template for the contents\n   * @returns {string} The template\n   */\n  template() {\n    this.tree = this.tree || this.closestElement(\"ids-tree\");\n    const isNodeEl = (el) => /^ids-tree-node$/i.test(el.nodeName);\n    this.isGroup = [...this.childNodes].some((el) => isNodeEl(el));\n    if (this.isGroup) {\n      let childNodesHTML = \"\";\n      for (let i = 0; i < this.childNodes.length; i++) {\n        const node = this.childNodes[i];\n        if (isNodeEl(node)) {\n          childNodesHTML += node.outerHTML;\n        }\n      }\n      const templ = this.getTemplate(true);\n      return templ.replace(\"{group-nodes}\", childNodesHTML);\n    }\n    return this.getTemplate();\n  }\n  /**\n   * Select node\n   * @private\n   * @param {boolean|undefined} isGroup If true node type is group\n   * @returns {string} The html template\n   */\n  getTemplate(isGroup) {\n    const disabled = `${this.disabled ? \" disabled\" : \"\"}`;\n    const selected = `${this.isSelected ? \" selected\" : \"\"}`;\n    const ariaDisabled = ` aria-disabled=\"${this.disabled}\"`;\n    const ariaSelected = ` aria-selected=\"${this.isSelected}\"`;\n    const tabindex = ` tabindex=\"${this.isTabbable ? \"0\" : \"-1\"}\"`;\n    if (isGroup) {\n      const ariaExpanded = ` aria-expanded=\"${this.expanded}\"`;\n      const cssClass = `class=\"ids-tree-node ${this.toggleClass}\"`;\n      return `\n        <li ${cssClass} part=\"group-node\" role=\"none\"${disabled}${selected}>\n          <span class=\"node-container\" part=\"node-container\" role=\"treeitem\"${tabindex}${disabled}${selected}${ariaDisabled}${ariaSelected}${ariaExpanded}>\n            <ids-icon class=\"icon\" icon=\"${this.nodeIcon}\" part=\"icon\"></ids-icon>\n            ${this.toggleIconHtml}\n            ${this.isMultiSelect ? `<ids-checkbox label=\"${this.label}\" ${disabled}></ids-checkbox>` : \"\"}\n            <slot name=\"badge\" class=\"badge\"></slot>\n            <ids-text class=\"text\" part=\"text\" ${this.isMultiSelect ? \"hidden\" : \"\"}>${this.label}</ids-text>\n          </span>\n          <ul class=\"group-nodes\" role=\"group\">{group-nodes}</ul>\n        </li>`;\n    }\n    return `\n      <li class=\"ids-tree-node\" part=\"node\" role=\"none\"${disabled}${selected}>\n        <span class=\"node-container\" part=\"node-container\" role=\"treeitem\"${tabindex}${disabled}${selected}${ariaDisabled}${ariaSelected}>\n          <ids-icon class=\"icon\" part=\"icon\" icon=\"${this.nodeIcon}\"></ids-icon>\n          ${this.isMultiSelect ? `<ids-checkbox label=\"${this.label}\" ${disabled}></ids-checkbox>` : \"\"}\n          <slot name=\"badge\" class=\"badge\"></slot>\n          <ids-text class=\"text\" part=\"text\" ${this.isMultiSelect ? \"hidden\" : \"\"}><slot></slot></ids-text>\n        </span>\n      </li>`;\n  }\n  /**\n   * Get the closest element for given selector.\n   * @private\n   * @param {string} selector The selector string\n   * @param {HTMLElement} base The base element\n   * @returns {HTMLElement|null} the closest found element\n   */\n  closestElement(selector, base = this) {\n    const closestFrom = (el) => {\n      if (!el || el === document || el === window) {\n        return null;\n      }\n      if (el.assignedSlot) {\n        el = el.assignedSlot;\n      }\n      return el.closest(selector) || closestFrom(el.getRootNode().host);\n    };\n    return closestFrom(base);\n  }\n  /**\n   * Get tree attribute value for given selector\n   * @private\n   * @param {string} selector The selector string\n   * @returns {string|null} The tree attribute value\n   */\n  treeAttribute(selector) {\n    return this.tree?.getAttribute(selector);\n  }\n  /**\n   * Set focus to node container\n   * @returns {void}\n   */\n  setFocus() {\n    this.nodeContainer.focus();\n  }\n  /**\n   * Set the node to be expanded/collapsed\n   * @private\n   * @returns {void}\n   */\n  #setExpandCollapse() {\n    const iconEl = this.shadowRoot?.querySelector(\".icon\");\n    iconEl?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ICON, this.nodeIcon);\n    this.container?.classList.remove(...Object.values(_ids_tree_shared__WEBPACK_IMPORTED_MODULE_7__[\"default\"].TOGGLE_CLASSES));\n    this.container?.classList.add(this.toggleClass);\n    this.nodeContainer?.setAttribute(\"aria-expanded\", this.expanded.toString());\n    if (this.useToggleTarget) {\n      const toggleIconEl = this.shadowRoot?.querySelector(\".toggle-icon\");\n      toggleIconEl?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ICON, this.toggleIcon);\n      this.#rotatePlusminus({\n        elem: toggleIconEl,\n        rotateClass: `rotate-${this.expanded ? \"forward\" : \"backward\"}`\n      });\n    }\n    if (this.groupNodesEl) {\n      if (this.expanded) {\n        this.groupNodesEl.style.visibility = \"\";\n        this.groupNodesEl.style.maxHeight = `${this.groupNodesEl.scrollHeight}px`;\n        this.offEvent(\"transitionend.expanded.tree\", this.groupNodesEl);\n        this.onEvent(\"transitionend.expanded.tree\", this.groupNodesEl, () => {\n          this.groupNodesEl?.style.removeProperty(\"max-height\");\n        });\n      } else {\n        this.offEvent(\"transitionend.expanded.tree\", this.groupNodesEl);\n        this.groupNodesEl.style.transition = \"none\";\n        this.groupNodesEl.style.maxHeight = `${this.groupNodesEl.scrollHeight}px`;\n        this.groupNodesEl.style.transition = \"\";\n        requestAnimationFrame(() => {\n          this.groupNodesEl?.style.setProperty(\"max-height\", \"0\");\n          this.groupNodesEl?.style.setProperty(\"visibility\", \"hidden\");\n        });\n      }\n    }\n  }\n  /**\n   * Rotate class for plusminus icons.\n   * @private\n   * @param {object} target to set values.\n   * @returns {void}\n   */\n  #rotatePlusminus(target) {\n    if (this.tree?.toggleIconRotate && this.useToggleTarget && target?.elem) {\n      target.elem.classList.add(target.rotateClass);\n      const events = [\"webkitAnimationEnd\", \"oAnimationEnd\", \"msAnimationEnd\", \"animationend\"];\n      events.forEach((evt) => {\n        this.onEvent(`${evt}.tree`, target.elem, () => {\n          target.elem.classList.remove(target.rotateClass);\n          events.forEach((rmEvt) => {\n            this.offEvent(`${rmEvt}.tree`, target.elem);\n          });\n        });\n      });\n    }\n  }\n  /**\n   * Set the node icon\n   * @private\n   * @returns {void}\n   */\n  #setNodeIcon() {\n    const iconEl = this.shadowRoot?.querySelector(\".icon\");\n    iconEl?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ICON, this.nodeIcon);\n  }\n  /**\n   * Set toggle icon element\n   * @private\n   * @returns {void}\n   */\n  #setToggleIconElement() {\n    const toggleIconEl = this.nodeContainer?.querySelector(\".toggle-icon\");\n    if (this.isGroup && this.useToggleTarget && !toggleIconEl) {\n      const refEl = this.shadowRoot?.querySelector(\"slot.badge\");\n      const template = document.createElement(\"template\");\n      template.innerHTML = this.toggleIconHtml;\n      this.nodeContainer?.insertBefore(template.content.cloneNode(true), refEl);\n      return;\n    }\n    toggleIconEl?.remove();\n  }\n  /**\n   * Set node selection\n   * @private\n   * @returns {void}\n   */\n  #setSelection() {\n    const checkboxElem = this.container?.querySelector(\"ids-checkbox\");\n    if (!!this.selectable && this.isSelected) {\n      this.container?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SELECTED, \"\");\n      this.nodeContainer?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SELECTED, \"\");\n      this.nodeContainer?.setAttribute(\"aria-selected\", \"true\");\n      if (checkboxElem)\n        checkboxElem.checked = true;\n    } else {\n      this.container?.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SELECTED);\n      this.nodeContainer?.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SELECTED);\n      this.nodeContainer?.setAttribute(\"aria-selected\", \"false\");\n      if (checkboxElem)\n        checkboxElem.checked = false;\n    }\n  }\n  /**\n   * Set node as tabbable or not\n   * @private\n   * @returns {void}\n   */\n  #setTabbable() {\n    this.nodeContainer?.setAttribute(\"tabindex\", this.isTabbable ? \"0\" : \"-1\");\n  }\n  /**\n   * Attach event listeners\n   */\n  #attachEventListeners() {\n    this.onEvent(\"click\", this.checkbox, (e) => {\n      e.preventDefault();\n    });\n  }\n  /**\n   * Gets toggle icon html\n   * @returns {HTMLElement} the toggle icon html\n   */\n  get toggleIconHtml() {\n    return this.useToggleTarget ? `<ids-icon class=\"toggle-icon\" icon=\"${this.toggleIcon}\" part=\"toggle-icon\"></ids-icon>` : \"\";\n  }\n  /**\n   * Gets the current node icon or expand/collapse icon\n   * @returns {HTMLElement} the current icon\n   */\n  get nodeIcon() {\n    if (this.isGroup) {\n      return this.expanded ? this.expandIcon : this.collapseIcon;\n    }\n    return this.icon;\n  }\n  /**\n   * Gets the current state is selected or not\n   * @returns {boolean} the state is selected or not\n   */\n  get isSelected() {\n    return !!this.selectable && this.selected;\n  }\n  get checkbox() {\n    return this.shadowRoot?.querySelector(\"ids-checkbox\");\n  }\n  /**\n   * Gets the current state is tabbable or not\n   * @returns {boolean} the state is tabbable or not\n   */\n  get isTabbable() {\n    return !this.disabled && this.tabbable;\n  }\n  get isMultiSelect() {\n    return this.tree?.selectable === \"multiple\";\n  }\n  /**\n   * Gets the current toggle css class name\n   * @returns {string} the toggle css class name\n   */\n  get toggleClass() {\n    return this.expanded ? _ids_tree_shared__WEBPACK_IMPORTED_MODULE_7__[\"default\"].TOGGLE_CLASSES.expanded : _ids_tree_shared__WEBPACK_IMPORTED_MODULE_7__[\"default\"].TOGGLE_CLASSES.collapsed;\n  }\n  /**\n   * Sets the tree group toggle icon\n   * @returns {string} The toggle icon\n   */\n  get toggleIcon() {\n    if (this.useToggleTarget) {\n      return this.expanded ? this.treeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.TOGGLE_EXPAND_ICON) || _ids_tree_shared__WEBPACK_IMPORTED_MODULE_7__[\"default\"].DEFAULTS.toggleExpandIcon : this.treeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.TOGGLE_COLLAPSE_ICON) || _ids_tree_shared__WEBPACK_IMPORTED_MODULE_7__[\"default\"].DEFAULTS.toggleCollapseIcon;\n    }\n    return \"\";\n  }\n  /**\n   * Sets the tree group collapse icon\n   * @param {string|null} value The icon name\n   */\n  set collapseIcon(value) {\n    if (value) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.COLLAPSE_ICON, value.toString());\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.COLLAPSE_ICON);\n    }\n    this.#setNodeIcon();\n  }\n  get collapseIcon() {\n    return _ids_tree_shared__WEBPACK_IMPORTED_MODULE_7__[\"default\"].getVal(this, _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.COLLAPSE_ICON);\n  }\n  /**\n   * Sets the tree node to disabled\n   * @param {boolean|string} value If true will set disabled attribute\n   */\n  set disabled(value) {\n    const val = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(value);\n    if (val) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED, \"\");\n      this.container?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED, \"\");\n      this.nodeContainer?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED, \"\");\n      this.nodeContainer?.setAttribute(\"aria-disabled\", \"true\");\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED);\n      this.container?.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED);\n      this.nodeContainer?.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED);\n      this.nodeContainer?.setAttribute(\"aria-disabled\", \"false\");\n    }\n    this.#setTabbable();\n  }\n  get disabled() {\n    return (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED));\n  }\n  /**\n   * Sets the tree group expand icon\n   * @param {string|null} value The icon name\n   */\n  set expandIcon(value) {\n    if (value) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.EXPAND_ICON, value.toString());\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.EXPAND_ICON);\n    }\n    this.#setNodeIcon();\n  }\n  get expandIcon() {\n    return _ids_tree_shared__WEBPACK_IMPORTED_MODULE_7__[\"default\"].getVal(this, _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.EXPAND_ICON);\n  }\n  /**\n   * Sets the tree group to be expanded\n   * @param {boolean|string} value If true will set expanded attribute\n   */\n  set expanded(value) {\n    if (_ids_tree_shared__WEBPACK_IMPORTED_MODULE_7__[\"default\"].isBool(value)) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.EXPANDED, `${value}`);\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.EXPANDED);\n    }\n    this.#setExpandCollapse();\n  }\n  get expanded() {\n    return _ids_tree_shared__WEBPACK_IMPORTED_MODULE_7__[\"default\"].getBoolVal(this, _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.EXPANDED);\n  }\n  /**\n   * Sets the tree node icon\n   * @param {string|null} value The icon name\n   */\n  set icon(value) {\n    if (value) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ICON, value.toString());\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ICON);\n    }\n    this.#setNodeIcon();\n  }\n  get icon() {\n    return _ids_tree_shared__WEBPACK_IMPORTED_MODULE_7__[\"default\"].getVal(this, _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ICON);\n  }\n  /**\n   * Set the node label text\n   * @param {string} value of the label text\n   */\n  set label(value) {\n    if (value) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.LABEL, value.toString());\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.LABEL);\n    }\n    const textElem = this.shadowRoot?.querySelector(\".text\");\n    if (this.isGroup && textElem) {\n      textElem.textContent = `${value}`;\n    }\n  }\n  get label() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.LABEL) || \"\";\n  }\n  /**\n   * Sets the tree node to be selectable 'single', 'multiple'\n   * @param {string | null | boolean} value The icon name\n   */\n  set selectable(value) {\n    const val = `${value}`;\n    const isValid = _ids_tree_shared__WEBPACK_IMPORTED_MODULE_7__[\"default\"].SELECTABLE.indexOf(val) > -1;\n    if (isValid) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SELECTABLE, val);\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SELECTABLE);\n    }\n    this.#setSelection();\n  }\n  get selectable() {\n    const value = this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SELECTABLE);\n    if (value === \"false\") {\n      return false;\n    }\n    return value !== null ? value : _ids_tree_shared__WEBPACK_IMPORTED_MODULE_7__[\"default\"].DEFAULTS.selectable;\n  }\n  /**\n   * Sets the tree node to be selected\n   * @param {boolean|string} value If true will set selected attribute\n   */\n  set selected(value) {\n    const val = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(value);\n    if (val) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SELECTED, \"\");\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SELECTED);\n    }\n    this.#setSelection();\n  }\n  get selected() {\n    return (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SELECTED));\n  }\n  /**\n   * Set if the node is tabbable\n   * @param {boolean|string} value The tabbable\n   */\n  set tabbable(value) {\n    this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.TABBABLE, `${value}`.toString());\n    this.#setTabbable();\n  }\n  get tabbable() {\n    return (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.TABBABLE));\n  }\n  /**\n   * Sets the tree to use toggle target\n   * @param {boolean|string} value If true will set to use toggle target\n   */\n  set useToggleTarget(value) {\n    if (_ids_tree_shared__WEBPACK_IMPORTED_MODULE_7__[\"default\"].isBool(value)) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.USE_TOGGLE_TARGET, `${value}`);\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.USE_TOGGLE_TARGET);\n    }\n    this.#setToggleIconElement();\n  }\n  get useToggleTarget() {\n    return _ids_tree_shared__WEBPACK_IMPORTED_MODULE_7__[\"default\"].getBoolVal(this, _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.USE_TOGGLE_TARGET);\n  }\n};\nIdsTreeNode = __decorateClass([\n  (0,_core_ids_decorators__WEBPACK_IMPORTED_MODULE_0__.customElement)(\"ids-tree-node\"),\n  (0,_core_ids_decorators__WEBPACK_IMPORTED_MODULE_0__.scss)(_ids_tree_node_scss__WEBPACK_IMPORTED_MODULE_11__[\"default\"])\n], IdsTreeNode);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/ids-tree/ids-tree-node.ts\n");

/***/ }),

/***/ "./src/components/ids-tree/ids-tree-shared.ts":
/*!****************************************************!*\
  !*** ./src/components/ids-tree/ids-tree-shared.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ids_tree_shared_default)\n/* harmony export */ });\n/* harmony import */ var _utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/ids-string-utils/ids-string-utils */ \"./src/utils/ids-string-utils/ids-string-utils.ts\");\n\nconst IdsTreeShared = {\n  /**\n   * Default settings\n   */\n  DEFAULTS: {\n    collapseIcon: \"closed-folder\",\n    expandIcon: \"open-folder\",\n    expanded: true,\n    icon: \"tree-node\",\n    selectable: \"single\",\n    useToggleTarget: false,\n    toggleCollapseIcon: \"plusminus-folder-closed\",\n    toggleExpandIcon: \"plusminus-folder-open\",\n    toggleIconRotate: true\n  },\n  SELECTABLE: [\"single\", \"multiple\", \"false\"],\n  EVENTS: {\n    beforeselected: \"beforeselected\",\n    selected: \"selected\",\n    beforeunselected: \"beforeunselected\",\n    unselected: \"unselected\",\n    beforecollapsed: \"beforecollapsed\",\n    collapsed: \"collapsed\",\n    beforeexpanded: \"beforeexpanded\",\n    expanded: \"expanded\"\n  },\n  TOGGLE_CLASSES: {\n    collapsed: \"collapsed\",\n    expanded: \"expanded\"\n  },\n  TREE_ARIA_LABEL: \"IDS Tree\",\n  /**\n   * Get the value for given attribute.\n   * @param {HTMLElement} elem The element.\n   * @param {string} attr The attribute name to get the value.\n   * @returns {string|null} The value or default value\n   */\n  getVal(elem, attr) {\n    const value = elem?.getAttribute(attr);\n    return value !== null ? value : this.DEFAULTS[(0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_0__.camelCase)(attr)];\n  },\n  /**\n   * Get the boolean value for given attribute.\n   * @param {HTMLElement} elem The element.\n   * @param {string} attr The attribute name to get the value.\n   * @returns {boolean} The value\n   */\n  getBoolVal(elem, attr) {\n    const value = elem?.getAttribute(attr);\n    return value !== null ? (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_0__.stringToBool)(value) : this.DEFAULTS[(0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_0__.camelCase)(attr)];\n  },\n  /**\n   * Check the given value is boolean.\n   * @param {boolean|string} val The value.\n   * @returns {boolean} true if the value boolean\n   */\n  isBool(val) {\n    return val === true || val === \"true\" || val === false || val === \"false\";\n  }\n};\nvar ids_tree_shared_default = IdsTreeShared;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9pZHMtdHJlZS9pZHMtdHJlZS1zaGFyZWQudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBd0M7QUFPeEMsTUFBTSxnQkFBZ0I7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUlwQixVQUFVO0FBQUEsSUFDUixjQUFjO0FBQUEsSUFDZCxZQUFZO0FBQUEsSUFDWixVQUFVO0FBQUEsSUFDVixNQUFNO0FBQUEsSUFDTixZQUFZO0FBQUEsSUFDWixpQkFBaUI7QUFBQSxJQUNqQixvQkFBb0I7QUFBQSxJQUNwQixrQkFBa0I7QUFBQSxJQUNsQixrQkFBa0I7QUFBQSxFQUNwQjtBQUFBLEVBRUEsWUFBWSxDQUFDLFVBQVUsWUFBWSxPQUFPO0FBQUEsRUFFMUMsUUFBUTtBQUFBLElBQ04sZ0JBQWdCO0FBQUEsSUFDaEIsVUFBVTtBQUFBLElBQ1Ysa0JBQWtCO0FBQUEsSUFDbEIsWUFBWTtBQUFBLElBQ1osaUJBQWlCO0FBQUEsSUFDakIsV0FBVztBQUFBLElBQ1gsZ0JBQWdCO0FBQUEsSUFDaEIsVUFBVTtBQUFBLEVBQ1o7QUFBQSxFQUVBLGdCQUFnQjtBQUFBLElBQ2QsV0FBVztBQUFBLElBQ1gsVUFBVTtBQUFBLEVBQ1o7QUFBQSxFQUVBLGlCQUFpQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBUWpCLE9BQU8sTUFBVyxNQUFjO0FBQzlCLFVBQU0sUUFBUSxNQUFNLGFBQWEsSUFBSTtBQUNyQyxXQUFPLFVBQVUsT0FBTyxRQUFTLEtBQUssU0FBaUIsbUZBQVMsQ0FBQyxJQUFJLENBQUM7QUFBQSxFQUN4RTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBUUEsV0FBVyxNQUFXLE1BQWM7QUFDbEMsVUFBTSxRQUFRLE1BQU0sYUFBYSxJQUFJO0FBQ3JDLFdBQU8sVUFBVSxPQUNiLHNGQUFZLENBQUMsS0FBSyxJQUFLLEtBQUssU0FBaUIsbUZBQVMsQ0FBQyxJQUFJLENBQUM7QUFBQSxFQUNsRTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU9BLE9BQU8sS0FBZ0M7QUFDckMsV0FBTyxRQUFRLFFBQVEsUUFBUSxVQUFVLFFBQVEsU0FBUyxRQUFRO0FBQUEsRUFDcEU7QUFDRjtBQUVBLElBQU8sMEJBQVEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pZHMtZW50ZXJwcmlzZS13Yy8uL3NyYy9jb21wb25lbnRzL2lkcy10cmVlL2lkcy10cmVlLXNoYXJlZC50cz84MmUxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNhbWVsQ2FzZSwgc3RyaW5nVG9Cb29sIH0gZnJvbSAnLi4vLi4vdXRpbHMvaWRzLXN0cmluZy11dGlscy9pZHMtc3RyaW5nLXV0aWxzJztcblxuLyoqXG4gKiBTaGFyZWQgaW4gYmV0d2VlbiB0cmVlLlxuICogQHByaXZhdGVcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5jb25zdCBJZHNUcmVlU2hhcmVkID0ge1xuICAvKipcbiAgICogRGVmYXVsdCBzZXR0aW5nc1xuICAgKi9cbiAgREVGQVVMVFM6IHtcbiAgICBjb2xsYXBzZUljb246ICdjbG9zZWQtZm9sZGVyJyxcbiAgICBleHBhbmRJY29uOiAnb3Blbi1mb2xkZXInLFxuICAgIGV4cGFuZGVkOiB0cnVlLFxuICAgIGljb246ICd0cmVlLW5vZGUnLFxuICAgIHNlbGVjdGFibGU6ICdzaW5nbGUnLFxuICAgIHVzZVRvZ2dsZVRhcmdldDogZmFsc2UsXG4gICAgdG9nZ2xlQ29sbGFwc2VJY29uOiAncGx1c21pbnVzLWZvbGRlci1jbG9zZWQnLFxuICAgIHRvZ2dsZUV4cGFuZEljb246ICdwbHVzbWludXMtZm9sZGVyLW9wZW4nLFxuICAgIHRvZ2dsZUljb25Sb3RhdGU6IHRydWVcbiAgfSxcblxuICBTRUxFQ1RBQkxFOiBbJ3NpbmdsZScsICdtdWx0aXBsZScsICdmYWxzZSddLFxuXG4gIEVWRU5UUzoge1xuICAgIGJlZm9yZXNlbGVjdGVkOiAnYmVmb3Jlc2VsZWN0ZWQnLFxuICAgIHNlbGVjdGVkOiAnc2VsZWN0ZWQnLFxuICAgIGJlZm9yZXVuc2VsZWN0ZWQ6ICdiZWZvcmV1bnNlbGVjdGVkJyxcbiAgICB1bnNlbGVjdGVkOiAndW5zZWxlY3RlZCcsXG4gICAgYmVmb3JlY29sbGFwc2VkOiAnYmVmb3JlY29sbGFwc2VkJyxcbiAgICBjb2xsYXBzZWQ6ICdjb2xsYXBzZWQnLFxuICAgIGJlZm9yZWV4cGFuZGVkOiAnYmVmb3JlZXhwYW5kZWQnLFxuICAgIGV4cGFuZGVkOiAnZXhwYW5kZWQnXG4gIH0sXG5cbiAgVE9HR0xFX0NMQVNTRVM6IHtcbiAgICBjb2xsYXBzZWQ6ICdjb2xsYXBzZWQnLFxuICAgIGV4cGFuZGVkOiAnZXhwYW5kZWQnXG4gIH0sXG5cbiAgVFJFRV9BUklBX0xBQkVMOiAnSURTIFRyZWUnLFxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHZhbHVlIGZvciBnaXZlbiBhdHRyaWJ1dGUuXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW0gVGhlIGVsZW1lbnQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyIFRoZSBhdHRyaWJ1dGUgbmFtZSB0byBnZXQgdGhlIHZhbHVlLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9IFRoZSB2YWx1ZSBvciBkZWZhdWx0IHZhbHVlXG4gICAqL1xuICBnZXRWYWwoZWxlbTogYW55LCBhdHRyOiBzdHJpbmcpIHtcbiAgICBjb25zdCB2YWx1ZSA9IGVsZW0/LmdldEF0dHJpYnV0ZShhdHRyKTtcbiAgICByZXR1cm4gdmFsdWUgIT09IG51bGwgPyB2YWx1ZSA6ICh0aGlzLkRFRkFVTFRTIGFzIGFueSlbY2FtZWxDYXNlKGF0dHIpXTtcbiAgfSxcblxuICAvKipcbiAgICogR2V0IHRoZSBib29sZWFuIHZhbHVlIGZvciBnaXZlbiBhdHRyaWJ1dGUuXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW0gVGhlIGVsZW1lbnQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyIFRoZSBhdHRyaWJ1dGUgbmFtZSB0byBnZXQgdGhlIHZhbHVlLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVGhlIHZhbHVlXG4gICAqL1xuICBnZXRCb29sVmFsKGVsZW06IGFueSwgYXR0cjogc3RyaW5nKSB7XG4gICAgY29uc3QgdmFsdWUgPSBlbGVtPy5nZXRBdHRyaWJ1dGUoYXR0cik7XG4gICAgcmV0dXJuIHZhbHVlICE9PSBudWxsXG4gICAgICA/IHN0cmluZ1RvQm9vbCh2YWx1ZSkgOiAodGhpcy5ERUZBVUxUUyBhcyBhbnkpW2NhbWVsQ2FzZShhdHRyKV07XG4gIH0sXG5cbiAgLyoqXG4gICAqIENoZWNrIHRoZSBnaXZlbiB2YWx1ZSBpcyBib29sZWFuLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW58c3RyaW5nfSB2YWwgVGhlIHZhbHVlLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGUgdmFsdWUgYm9vbGVhblxuICAgKi9cbiAgaXNCb29sKHZhbDogYm9vbGVhbiB8IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB2YWwgPT09IHRydWUgfHwgdmFsID09PSAndHJ1ZScgfHwgdmFsID09PSBmYWxzZSB8fCB2YWwgPT09ICdmYWxzZSc7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IElkc1RyZWVTaGFyZWQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/components/ids-tree/ids-tree-shared.ts\n");

/***/ }),

/***/ "./src/components/ids-tree/ids-tree.ts":
/*!*********************************************!*\
  !*** ./src/components/ids-tree/ids-tree.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ IdsTree)\n/* harmony export */ });\n/* harmony import */ var _core_ids_decorators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/ids-decorators */ \"./src/core/ids-decorators.ts\");\n/* harmony import */ var _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/ids-attributes */ \"./src/core/ids-attributes.ts\");\n/* harmony import */ var _mixins_ids_events_mixin_ids_events_mixin__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../mixins/ids-events-mixin/ids-events-mixin */ \"./src/mixins/ids-events-mixin/ids-events-mixin.ts\");\n/* harmony import */ var _mixins_ids_theme_mixin_ids_theme_mixin__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../mixins/ids-theme-mixin/ids-theme-mixin */ \"./src/mixins/ids-theme-mixin/ids-theme-mixin.ts\");\n/* harmony import */ var _mixins_ids_locale_mixin_ids_locale_mixin__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../mixins/ids-locale-mixin/ids-locale-mixin */ \"./src/mixins/ids-locale-mixin/ids-locale-mixin.ts\");\n/* harmony import */ var _core_ids_element__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/ids-element */ \"./src/core/ids-element.ts\");\n/* harmony import */ var _core_ids_data_source__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/ids-data-source */ \"./src/core/ids-data-source.ts\");\n/* harmony import */ var _ids_tree_shared__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ids-tree-shared */ \"./src/components/ids-tree/ids-tree-shared.ts\");\n/* harmony import */ var _ids_tree_node__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./ids-tree-node */ \"./src/components/ids-tree/ids-tree-node.ts\");\n/* harmony import */ var _ids_text_ids_text__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../ids-text/ids-text */ \"./src/components/ids-text/ids-text.ts\");\n/* harmony import */ var _utils_ids_xss_utils_ids_xss_utils__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../utils/ids-xss-utils/ids-xss-utils */ \"./src/utils/ids-xss-utils/ids-xss-utils.ts\");\n/* harmony import */ var _utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../utils/ids-string-utils/ids-string-utils */ \"./src/utils/ids-string-utils/ids-string-utils.ts\");\n/* harmony import */ var _ids_tree_scss__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./ids-tree.scss */ \"./src/components/ids-tree/ids-tree.scss\");\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result)\n    __defProp(target, key, result);\n  return result;\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst Base = (0,_mixins_ids_theme_mixin_ids_theme_mixin__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(\n  (0,_mixins_ids_locale_mixin_ids_locale_mixin__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(\n    (0,_mixins_ids_events_mixin_ids_events_mixin__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\n      _core_ids_element__WEBPACK_IMPORTED_MODULE_5__[\"default\"]\n    )\n  )\n);\nlet IdsTree = class extends Base {\n  constructor() {\n    super();\n  }\n  /**\n   * Invoked each time the custom element is appended into a document-connected element.\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    if (this.datasource?.data?.length) {\n      this.#redraw();\n    } else {\n      this.#init();\n    }\n  }\n  /**\n   * Return the attributes we handle as getters/setters\n   * @returns {Array} The attributes in an array\n   */\n  static get attributes() {\n    return [\n      ...super.attributes,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.COLLAPSE_ICON,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.EXPAND_ICON,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.EXPANDED,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ICON,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.LABEL,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SELECTABLE,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.TOGGLE_COLLAPSE_ICON,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.TOGGLE_EXPAND_ICON,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.TOGGLE_ICON_ROTATE,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.USE_TOGGLE_TARGET\n    ];\n  }\n  /**\n   * Create the Template for the contents\n   * @returns {string} The template\n   */\n  template() {\n    const disabled = this.disabled ? \" disabled\" : \"\";\n    const label = ` aria-label=\"${this.label}\"`;\n    return `\n      <ul class=\"ids-tree\" part=\"tree\" role=\"tree\"${label}${disabled}>\n        <slot></slot>\n      </ul>`;\n  }\n  /**\n   * Tree datasource.\n   * @type {object}\n   */\n  datasource = new _core_ids_data_source__WEBPACK_IMPORTED_MODULE_6__[\"default\"]();\n  /**\n   * Collapse all attached nodes to the tree\n   * @returns {void}\n   */\n  collapseAll() {\n    this.#nodes.filter((n) => n.elem.isGroup).forEach((n) => {\n      n.elem.expanded = false;\n    });\n  }\n  /**\n   * Expand all attached nodes to the tree\n   * @returns {void}\n   */\n  expandAll() {\n    this.#nodes.filter((n) => n.elem.isGroup).forEach((n) => {\n      n.elem.expanded = true;\n    });\n  }\n  /**\n   * Collapse a tree node by given CSS selector.\n   * @param {string} selector The selector string to use\n   * @returns {void}\n   */\n  collapse(selector) {\n    const node = this.getNode(selector);\n    this.#collapse(node);\n  }\n  /**\n   * Expand a tree node by given CSS selector.\n   * @param {string} selector The selector string to use\n   * @returns {void}\n   */\n  expand(selector) {\n    const node = this.getNode(selector);\n    this.#expand(node);\n  }\n  /**\n   * Toggle a tree node by given CSS selector.\n   * @param {string} selector The selector string to use\n   * @returns {void}\n   */\n  toggle(selector) {\n    const node = this.getNode(selector);\n    this.#toggle(node);\n  }\n  /**\n   * Selects a tree node by given CSS selector.\n   * @param {string} selector The selector string to use\n   * @returns {void}\n   */\n  select(selector) {\n    const node = this.getNode(selector);\n    if (this.isMultiSelect) {\n      this.#setMultiSelected(node);\n    }\n    this.#setSelected(node);\n  }\n  /**\n   * UnSelects a tree node by given CSS selector.\n   * @param {string} selector The selector string to use\n   * @returns {void}\n   */\n  unselect(selector) {\n    const node = this.getNode(selector);\n    this.#setUnSelected(node);\n  }\n  /**\n   * Ckeck if related node is selected or not, by given CSS selector.\n   * @param {string} selector The selector string to use\n   * @returns {boolean} true, if given node is selected\n   */\n  isSelected(selector) {\n    const node = this.getNode(selector);\n    return !!node?.elem?.isSelected;\n  }\n  /**\n   * Get a tree node by given CSS selector.\n   * @param {string} selector The selector string to use\n   * @returns {object} The node element and index\n   */\n  getNode(selector) {\n    return this.#nodes.find((n) => n.elem.matches(selector));\n  }\n  /**\n   * Active node elements.\n   * @private\n   * @type {object}\n   */\n  #active = {\n    old: null,\n    current: null,\n    selectedOld: null,\n    selectedCurrent: null\n  };\n  /**\n   * List of node elements attached to tree.\n   * @private\n   * @type {Array<object>}\n   */\n  #nodes = [];\n  /**\n   * The current flatten data array.\n   * @private\n   * @type {Array<object>}\n   */\n  #nodesData = [];\n  /**\n   * Build nodes html and flatten data array\n   * @private\n   * @returns {object} The html and data array\n   */\n  #htmlAndData() {\n    const processed = (s) => /&#?[^\\s].{1,9};/g.test(s) ? (0,_utils_ids_xss_utils_ids_xss_utils__WEBPACK_IMPORTED_MODULE_10__.unescapeHTML)(s) : s;\n    const validatedText = (s) => (0,_utils_ids_xss_utils_ids_xss_utils__WEBPACK_IMPORTED_MODULE_10__.escapeHTML)(processed(s));\n    let html = \"\";\n    const data = [];\n    const nodesHtml = (nodesData) => {\n      nodesData.forEach((n) => {\n        const hasKey = (key, node = n) => typeof node[key] !== \"undefined\";\n        const addKey = (key, useKey) => {\n          if (hasKey(key)) {\n            const text = useKey === \"label\" ? validatedText(n[key]) : n[key];\n            html += ` ${useKey || key}=\"${text}\"`;\n          }\n        };\n        data.push(n);\n        html += \"<ids-tree-node\";\n        addKey(\"id\");\n        addKey(\"disabled\");\n        addKey(\"selected\");\n        if (hasKey(\"children\")) {\n          addKey(\"collapseIcon\");\n          addKey(\"expandIcon\");\n          addKey(hasKey(\"expanded\") ? \"expanded\" : \"open\", \"expanded\");\n          addKey(hasKey(\"label\") ? \"label\" : \"text\", \"label\");\n          html += \">\";\n          nodesHtml(n.children);\n        } else {\n          addKey(\"icon\");\n          addKey(this.isMultiSelect && hasKey(\"label\") ? \"label\" : \"text\", \"label\");\n          const text = hasKey(\"label\") ? n.label : n.text || \"\";\n          html += `>${validatedText(text)}`;\n        }\n        if (hasKey(\"badge\")) {\n          const hasBadgeKey = (key) => hasKey(key, n.badge);\n          let badgeHtml = '<ids-badge slot=\"badge\"';\n          if (hasBadgeKey(\"color\")) {\n            badgeHtml += ` color=\"${n.badge.color}\"`;\n          }\n          if (hasBadgeKey(\"shape\")) {\n            badgeHtml += ` shape=\"${n.badge.shape}\"`;\n          }\n          badgeHtml += \">\";\n          if (hasBadgeKey(\"text\")) {\n            badgeHtml += `${n.badge.text}`;\n          }\n          if (hasBadgeKey(\"textAudible\")) {\n            badgeHtml += ` <ids-text audible=\"true\">${n.badge.textAudible}</ids-text>`;\n          }\n          if (hasBadgeKey(\"icon\")) {\n            badgeHtml += ` <ids-icon icon=\"${n.badge.icon}\" size=\"normal\"></ids-icon>`;\n          }\n          badgeHtml += \"</ids-badge>\";\n          html += badgeHtml;\n        }\n        html += \"</ids-tree-node>\";\n      });\n    };\n    nodesHtml(this.data);\n    return { html, data };\n  }\n  /**\n   * Rerender by re applying the data\n   * @private\n   * @returns {void}\n   */\n  #redraw() {\n    if (this.data.length === 0 || !this.shadowRoot) {\n      return;\n    }\n    const slot = this.shadowRoot?.querySelector(\"slot\");\n    if (slot) {\n      const { data, html } = this.#htmlAndData();\n      this.#nodesData = data;\n      slot.innerHTML = html;\n      this.#init();\n    }\n  }\n  /**\n   * Set all the attached nodes to tree\n   * @private\n   * @returns {object} This API object for chaining\n   */\n  #init() {\n    this.#setNodes();\n    this.#initIcons();\n    this.#initTabbable();\n    this.#initSelection();\n    this.#attachEventHandlers();\n    return this;\n  }\n  /**\n   * Set all the attached nodes to tree\n   * @private\n   * @returns {object} This API object for chaining\n   */\n  #setNodes() {\n    this.#nodes = [];\n    const isNodeEl = (elem) => /^ids-tree-node$/i.test(elem.nodeName);\n    let nodeIdx = 0;\n    const setNodes = (root, depth) => {\n      let nodes = [];\n      if (depth === 0) {\n        nodes = root.childNodes.length ? [...root.childNodes].filter((n) => isNodeEl(n)) : root.shadowRoot.querySelectorAll(\"slot > ids-tree-node\");\n      } else {\n        nodes = root.shadowRoot.querySelectorAll(\".group-nodes > ids-tree-node\");\n      }\n      const len = nodes.length;\n      for (let i = 0; i < len; i++) {\n        const elem = nodes[i];\n        const idx = nodeIdx + depth;\n        const level = depth + 1;\n        const posinset = i + 1;\n        const setsize = len;\n        elem.setAttribute(\"role\", \"none\");\n        elem.nodeContainer?.setAttribute(\"aria-level\", `${level}`);\n        elem.nodeContainer?.setAttribute(\"aria-setsize\", `${setsize}`);\n        elem.nodeContainer?.setAttribute(\"aria-posinset\", `${posinset}`);\n        const args = {\n          elem,\n          level,\n          posinset,\n          setsize,\n          idx,\n          isGroup: elem.isGroup\n        };\n        if (this.#nodesData[idx]) {\n          args.data = this.#nodesData[idx];\n        }\n        this.#nodes.push(args);\n        if (elem.isGroup) {\n          setNodes(elem, depth + 1);\n        }\n        nodeIdx++;\n      }\n    };\n    setNodes(this, 0);\n    return this;\n  }\n  /**\n   * Initialize tree settings\n   * @private\n   * @returns {object} This API object for chaining\n   */\n  #initIcons() {\n    const collapseIcon = this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.COLLAPSE_ICON);\n    const expandIcon = this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.EXPAND_ICON);\n    const icon = this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ICON);\n    const useToggleTarget = this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.USE_TOGGLE_TARGET);\n    if (collapseIcon) {\n      this.#updateNodeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.COLLAPSE_ICON);\n    }\n    if (expandIcon) {\n      this.#updateNodeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.EXPAND_ICON);\n    }\n    if (icon) {\n      this.#updateNodeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ICON);\n    }\n    if (useToggleTarget) {\n      this.#updateNodeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.USE_TOGGLE_TARGET);\n    }\n    return this;\n  }\n  /**\n   * Initialize tabable to first focusable node as tabable\n   * @private\n   * @returns {object} This API object for chaining\n   */\n  #initTabbable() {\n    const first = this.#nodes.find((n) => !n.elem.disabled);\n    if (first) {\n      this.#active.current = first;\n      this.#active.current.elem.tabbable = true;\n    }\n    return this;\n  }\n  /**\n   * Initialize selection\n   * single selectable: first selected only, if end user set more than one\n   * @private\n   * @returns {object} This API object for chaining\n   */\n  #initSelection() {\n    const selected = this.#nodes.filter((n) => n.elem.isSelected);\n    const len = selected.length;\n    const unSelect = (nodes) => {\n      nodes.forEach((n) => {\n        n.elem.selected = false;\n      });\n    };\n    this.#updateNodeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SELECTABLE);\n    if (this.selectable === \"single\" && len) {\n      if (len > 1) {\n        this.#active.selectedCurrent = selected.shift();\n        unSelect(selected);\n      } else {\n        this.#active.selectedCurrent = selected[0];\n      }\n    } else {\n      unSelect(selected);\n    }\n    return this;\n  }\n  /**\n   * Get the current node element and index\n   * @private\n   * @param {HTMLElement} target The target node element\n   * @returns {object} The node element and index\n   */\n  #current(target) {\n    return this.#nodes.find((n) => n.elem === target);\n  }\n  /**\n   * Get the next node element and index\n   * @private\n   * @param {object} [current] The current node.\n   * @param {HTMLElement} [current.elem] The current node element\n   * @param {number} [current.idx] The current node Index\n   * @returns {object} The next node element and index\n   */\n  #next(current) {\n    const len = this.#nodes.length;\n    if (current.idx + 1 < len) {\n      return [...this.#nodes].splice(current.idx + 1).find((node) => {\n        if (current.elem.isGroup && !current.elem.expanded) {\n          return node.level === current.level;\n        }\n        return !node.elem.disabled;\n      });\n    }\n    return this.#nodes[len - 1];\n  }\n  /**\n   * Get the next node element and index in group\n   * @private\n   * @param {object} [current] The current node.\n   * @param {HTMLElement} [current.elem] The current node element\n   * @param {number} [current.idx] The current node Index\n   * @returns {object} The next node element and index\n   */\n  #nextInGroup(current) {\n    let nodes = [...this.#nodes].splice(current.idx + 1);\n    const last = nodes.findIndex((n) => n.level === current.level);\n    if (last > 0) {\n      nodes = nodes.splice(0, last).filter((n) => n.level === current.level + 1);\n    }\n    return nodes.find((n) => !n.elem.disabled);\n  }\n  /**\n   * Get the previous node element and index\n   * @private\n   * @param {object} [current] The current node.\n   * @param {HTMLElement} [current.elem] The current node element\n   * @param {number} [current.idx] The current node Index\n   * @returns {object} The previous node element and index\n   */\n  #previous(current) {\n    if (current.idx - 1 > -1) {\n      return [...this.#nodes].slice(0, current.idx).reverse().find((node) => {\n        if (node.level > current.level) {\n          const host = node.elem.getRootNode().host;\n          if (!host.expanded) {\n            return host === node.elem;\n          }\n        }\n        return !node.elem.disabled;\n      });\n    }\n    return this.#nodes[0];\n  }\n  /**\n   * Set the focus to given node, and set as active node\n   * @private\n   * @param {object} target The target node element\n   * @returns {void}\n   */\n  #setFocus(target) {\n    if (target && target.elem && target.elem !== this.#active.current?.elem) {\n      this.#active.old = this.#active.current;\n      this.#active.current = target;\n      this.#active.current.elem.tabbable = true;\n      this.#active.old.elem.tabbable = false;\n      this.#active.current.elem.setFocus();\n    }\n  }\n  /**\n   * Set the selected to given node\n   * @private\n   * @param {object} node The target node element\n   * @returns {void}\n   */\n  #setSelected(node) {\n    if (node && node.elem && node.elem !== this.#active.selectedCurrent?.elem) {\n      let canProceed = true;\n      const response = (veto) => {\n        canProceed = !!veto;\n      };\n      this.triggerEvent(\n        _ids_tree_shared__WEBPACK_IMPORTED_MODULE_7__[\"default\"].EVENTS.beforeselected,\n        this,\n        { detail: { elem: this, response, node } }\n      );\n      if (!canProceed) {\n        return;\n      }\n      this.#active.selectedOld = this.#active.selectedCurrent;\n      this.#active.selectedCurrent = node;\n      this.#active.selectedCurrent.elem.selected = true;\n      if (this.#active.selectedOld) {\n        this.#active.selectedOld.elem.selected = false;\n      }\n      this.triggerEvent(_ids_tree_shared__WEBPACK_IMPORTED_MODULE_7__[\"default\"].EVENTS.selected, this, { detail: { elem: this, node } });\n    }\n  }\n  /**\n   * Set the selection when multi-select enabled\n   * @param {HTMLElement | any} node tree node\n   * @returns {void}\n   */\n  #setMultiSelected(node) {\n    if (node && node.elem) {\n      let canProceed = true;\n      const response = (veto) => {\n        canProceed = !!veto;\n      };\n      this.triggerEvent(\n        _ids_tree_shared__WEBPACK_IMPORTED_MODULE_7__[\"default\"].EVENTS.beforeselected,\n        this,\n        { detail: { elem: this, response, node } }\n      );\n      if (!canProceed) {\n        return;\n      }\n      const parentNode = this.getParentNode(node);\n      node.elem.selected = true;\n      if (node.isGroup) {\n        this.selectNestedNodes(node);\n      }\n      if (parentNode) {\n        this.selectParentNodes(parentNode);\n      }\n      this.triggerEvent(_ids_tree_shared__WEBPACK_IMPORTED_MODULE_7__[\"default\"].EVENTS.selected, this, { detail: { elem: this, node } });\n    }\n  }\n  /**\n   * Set unselected to given node\n   * @private\n   * @param {HTMLElement | any} node The target node element\n   * @returns {void}\n   */\n  #setUnSelected(node) {\n    if (node && node.elem && node.elem === this.#active.selectedCurrent?.elem) {\n      let canProceed = true;\n      const response = (veto) => {\n        canProceed = !!veto;\n      };\n      this.triggerEvent(\n        _ids_tree_shared__WEBPACK_IMPORTED_MODULE_7__[\"default\"].EVENTS.beforeunselected,\n        this,\n        { detail: { elem: this, response, node } }\n      );\n      if (!canProceed) {\n        return;\n      }\n      this.#active.selectedCurrent.elem.selected = false;\n      this.#active.selectedOld = null;\n      this.#active.selectedCurrent = null;\n      this.triggerEvent(_ids_tree_shared__WEBPACK_IMPORTED_MODULE_7__[\"default\"].EVENTS.unselected, this, { detail: { elem: this, node } });\n    }\n  }\n  /**\n   * Set unselected to given node\n   * @private\n   * @param {HTMLElement | any} node The target node element\n   * @returns {void}\n   */\n  #setMultiUnSelected(node) {\n    let canProceed = true;\n    const response = (veto) => {\n      canProceed = !!veto;\n    };\n    this.triggerEvent(\n      _ids_tree_shared__WEBPACK_IMPORTED_MODULE_7__[\"default\"].EVENTS.beforeunselected,\n      this,\n      { detail: { elem: this, response, node } }\n    );\n    if (!canProceed) {\n      return;\n    }\n    const parentNode = this.getParentNode(node);\n    node.elem.selected = null;\n    if (node.isGroup) {\n      this.unselectNestedNodes(node);\n    }\n    if (parentNode) {\n      this.selectParentNodes(parentNode);\n    }\n    this.triggerEvent(_ids_tree_shared__WEBPACK_IMPORTED_MODULE_7__[\"default\"].EVENTS.unselected, this, { detail: { elem: this, node } });\n  }\n  /**\n   * Gets the parent node of the currently selected node.\n   * @param {HTMLElement | any} node ids-tree-node\n   * @returns {HTMLElement | any} value\n   */\n  getParentNode(node) {\n    const value = [];\n    const findParentElements = (n) => {\n      if (n && n?.classList?.contains(\"ids-tree-node\") || n.elem && n?.elem?.classList?.contains(\"ids-tree-node\")) {\n        value.push(n.getRootNode().host);\n      } else if (n && n.parentElement) {\n        findParentElements(n.parentElement);\n        if (n.getRootNode().host?.parentElement) {\n          findParentElements(n.getRootNode().host.parentElement);\n        }\n      } else if (n.elem && n.elem.parentElement) {\n        findParentElements(n.elem.parentElement);\n      }\n    };\n    findParentElements(node);\n    return value;\n  }\n  /**\n   * Get all child nodes of given parent\n   * @param {HTMLElement | any} parent node\n   * @returns {object | HTMLElement | any} value\n   */\n  getAllChildNodes(parent) {\n    if (parent.elem) {\n      return parent.elem.shadowRoot.querySelectorAll(\".group-nodes > ids-tree-node\");\n    }\n    if (parent.shadowRoot) {\n      return parent.shadowRoot.querySelectorAll(\".group-nodes > ids-tree-node\");\n    }\n    if (Array.isArray(parent)) {\n      return parent.map((p) => p.shadowRoot.querySelectorAll(\".group-nodes > ids-tree-node\"));\n    }\n    return parent.querySelectorAll(\".group-nodes > ids-tree-node\");\n  }\n  /**\n   * Set the correct selection of parent nodes\n   * @param {HTMLElement | any} parent node(s)\n   */\n  selectParentNodes(parent) {\n    parent.forEach((p) => {\n      const checkbox = p.container.querySelector(\"ids-checkbox\");\n      const selectedNodes = [...this.getAllChildNodes(p)].filter((node) => node.selected === true);\n      const indeterminateNodes = selectedNodes.filter((node) => node.shadowRoot.querySelector(\"ids-checkbox\").indeterminate === \"true\");\n      p.selected = true;\n      if (this.getAllChildNodes(p).length === selectedNodes.length) {\n        checkbox.indeterminate = null;\n      }\n      if (selectedNodes.length === 0) {\n        p.selected = null;\n        checkbox.indeterminate = null;\n      }\n      if (this.getAllChildNodes(p).length === selectedNodes.length) {\n        p.selected = true;\n        checkbox.indeterminate = null;\n      }\n      if (selectedNodes.length !== 0 && this.getAllChildNodes(p).length > selectedNodes.length || indeterminateNodes.length > 0) {\n        checkbox.indeterminate = true;\n      }\n      this.triggerEvent(_ids_tree_shared__WEBPACK_IMPORTED_MODULE_7__[\"default\"].EVENTS.selected, this, { detail: { elem: this, node: p } });\n    });\n  }\n  /**\n   * Select nodes under given parent node\n   * @param {HTMLElement | any} node element\n   */\n  selectNestedNodes(node) {\n    const findNestedNodes = (n) => {\n      if (n.elem && n.elem.hasChildNodes()) {\n        const children = [...this.getAllChildNodes(n.elem)];\n        children.forEach((childNode) => {\n          if (childNode.hasChildNodes() && !childNode.disabled) {\n            childNode.selected = true;\n            this.triggerEvent(_ids_tree_shared__WEBPACK_IMPORTED_MODULE_7__[\"default\"].EVENTS.selected, this, { detail: { elem: this, childNode } });\n          }\n          findNestedNodes(childNode);\n        });\n        requestAnimationFrame(() => {\n          const selectedChildren = [...this.getAllChildNodes(n.elem)].filter((child) => child.selected === true);\n          const indeterminateNodes = [...this.getAllChildNodes(n.elem)].filter((childNode) => childNode.shadowRoot.querySelector(\"ids-checkbox\")?.indeterminate === \"true\");\n          if (children.length > selectedChildren.length || indeterminateNodes.length > 0) {\n            n.elem.shadowRoot.querySelector(\"ids-checkbox\").indeterminate = true;\n          } else {\n            n.elem.shadowRoot.querySelector(\"ids-checkbox\").indeterminate = null;\n          }\n        });\n      } else if (n && n.shadowRoot?.querySelector(\".group-nodes\")) {\n        const children = [...this.getAllChildNodes(n)];\n        children.forEach((childNode) => {\n          if (childNode.hasChildNodes() && !childNode.disabled) {\n            childNode.selected = true;\n            this.triggerEvent(_ids_tree_shared__WEBPACK_IMPORTED_MODULE_7__[\"default\"].EVENTS.selected, this, { detail: { elem: this, childNode } });\n          }\n          findNestedNodes(childNode);\n        });\n        requestAnimationFrame(() => {\n          const selectedChildren = [...this.getAllChildNodes(n)].filter((child) => child.selected === true);\n          const indeterminateNodes = [...this.getAllChildNodes(n)].filter((childNode) => childNode.shadowRoot.querySelector(\"ids-checkbox\")?.indeterminate === \"true\");\n          if (children.length > selectedChildren.length || indeterminateNodes.length > 0) {\n            n.shadowRoot.querySelector(\"ids-checkbox\").indeterminate = true;\n          } else {\n            n.shadowRoot.querySelector(\"ids-checkbox\").indeterminate = null;\n          }\n        });\n      }\n    };\n    findNestedNodes(node);\n  }\n  /**\n   * Unselect nodes under given parent node\n   * @param {HTMLElement | any} node element\n   */\n  unselectNestedNodes(node) {\n    const findNestedNodes = (n) => {\n      if (n.elem && n.elem.hasChildNodes()) {\n        const children = [...this.getAllChildNodes(n.elem)];\n        children.forEach((childNode) => {\n          if (childNode.hasChildNodes() && !childNode.disabled) {\n            childNode.selected = null;\n            this.triggerEvent(_ids_tree_shared__WEBPACK_IMPORTED_MODULE_7__[\"default\"].EVENTS.unselected, this, { detail: { elem: this, childNode } });\n          }\n          findNestedNodes(childNode);\n        });\n        n.elem.shadowRoot.querySelector(\"ids-checkbox\").indeterminate = null;\n      } else if (n && n.shadowRoot?.querySelector(\".group-nodes\")) {\n        const children = [...this.getAllChildNodes(n)];\n        children.forEach((childNode) => {\n          if (childNode.hasChildNodes() && !childNode.disabled) {\n            childNode.selected = null;\n            this.triggerEvent(_ids_tree_shared__WEBPACK_IMPORTED_MODULE_7__[\"default\"].EVENTS.unselected, this, { detail: { elem: this, childNode } });\n          }\n          findNestedNodes(childNode);\n        });\n        n.shadowRoot.querySelector(\"ids-checkbox\").indeterminate = null;\n      }\n    };\n    findNestedNodes(node);\n  }\n  /**\n   * Collapse the given node\n   * @private\n   * @param {object} node The target node element\n   * @returns {void}\n   */\n  #collapse(node) {\n    if (node && node.elem?.isGroup && node.elem?.expanded) {\n      this.#toggle(node);\n    }\n  }\n  /**\n   * Expand the given node\n   * @private\n   * @param {object} node The target node element\n   * @returns {void}\n   */\n  #expand(node) {\n    if (node && node.elem?.isGroup && !node.elem?.expanded) {\n      this.#toggle(node);\n    }\n  }\n  /**\n   * Toggle the expand/collapse\n   * @private\n   * @param {object} node The target node element\n   * @returns {void}\n   */\n  #toggle(node) {\n    if (node && node.elem?.isGroup) {\n      const events = node.elem.expanded ? { before: _ids_tree_shared__WEBPACK_IMPORTED_MODULE_7__[\"default\"].EVENTS.beforecollapsed, after: _ids_tree_shared__WEBPACK_IMPORTED_MODULE_7__[\"default\"].EVENTS.collapsed } : { before: _ids_tree_shared__WEBPACK_IMPORTED_MODULE_7__[\"default\"].EVENTS.beforeexpanded, after: _ids_tree_shared__WEBPACK_IMPORTED_MODULE_7__[\"default\"].EVENTS.expanded };\n      let canProceed = true;\n      const response = (veto) => {\n        canProceed = !!veto;\n      };\n      this.triggerEvent(events.before, this, { detail: { elem: this, response, node } });\n      if (!canProceed) {\n        return;\n      }\n      node.elem.expanded = !node.elem.expanded;\n      this.triggerEvent(events.after, this, { detail: { elem: this, node } });\n    }\n  }\n  /**\n   * Set toggle icon\n   * @private\n   * @returns {void}\n   */\n  #setToggleIcon() {\n    this.#nodes.forEach((n) => {\n      if (n.isGroup) {\n        const toggleIconEl = n.elem.shadowRoot?.querySelector(\".toggle-icon\");\n        toggleIconEl?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ICON, n.elem.toggleIcon);\n      }\n    });\n  }\n  /**\n   * Update the given node attribute\n   * @private\n   * @param {string} attr The attribute name\n   * @param {boolean} mustUpdate if true, will must update\n   */\n  #updateNodeAttribute(attr, mustUpdate) {\n    this.#nodes.forEach((n) => {\n      const nodeVal = n.elem.getAttribute(attr);\n      const value = this[(0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_11__.camelCase)(attr)];\n      if (mustUpdate || nodeVal !== value) {\n        n.elem.setAttribute(attr, value?.toString());\n      }\n    });\n  }\n  /**\n   * Establish Internal Event Handlers\n   * @private\n   * @returns {void}\n   */\n  #attachEventHandlers() {\n    const move = {\n      next: (current) => {\n        const next = this.#next(current);\n        if (next) {\n          this.#setFocus(next);\n        }\n      },\n      previous: (current) => {\n        const previous = this.#previous(current);\n        if (previous) {\n          this.#setFocus(previous);\n        }\n      },\n      forward: (current) => {\n        if (current.elem.isGroup) {\n          if (current.elem.expanded) {\n            const next = this.#nextInGroup(current);\n            this.#setFocus(next);\n          } else {\n            this.#expand(current);\n          }\n        }\n      },\n      backward: (current) => {\n        if (current.elem.isGroup && current.elem.expanded) {\n          this.#collapse(current);\n        } else if (current.level > 1) {\n          const previous = { elem: current.elem.getRootNode().host };\n          this.#setFocus(previous);\n        }\n      }\n    };\n    const hasSomeClass = (el, str) => str.split(\" \").some((s) => el.classList.contains(s));\n    const handleClick = (e, node) => {\n      if (!node.elem.disabled) {\n        if (this.useToggleTarget || this.isMultiSelect) {\n          if (node.elem.isGroup && hasSomeClass(e.target, \"icon toggle-icon\")) {\n            this.#toggle(node);\n          } else {\n            if (this.isMultiSelect) {\n              if (!node.elem.selected) {\n                this.#setMultiSelected(node);\n              } else {\n                this.#setMultiUnSelected(node);\n              }\n              return;\n            }\n            this.#setSelected(node);\n            this.#setFocus(node);\n          }\n        } else {\n          if (node.elem.isGroup) {\n            this.#toggle(node);\n          }\n          this.#setSelected(node);\n          this.#setFocus(node);\n        }\n      }\n    };\n    this.#nodes.forEach((n) => {\n      this.onEvent(\"keydown.tree\", n.elem.nodeContainer, (e) => {\n        if (n.elem.disabled) {\n          return;\n        }\n        const allow = [\"ArrowDown\", \"ArrowRight\", \"ArrowUp\", \"ArrowLeft\", \"Space\"];\n        const key = e.code;\n        if (allow.indexOf(key) > -1) {\n          const current = this.#current(n.elem);\n          const isRTL = this.localeAPI.isRTL();\n          if (key === \"ArrowDown\") {\n            move.next(current);\n          } else if (key === \"ArrowUp\") {\n            move.previous(current);\n          } else if (key === \"ArrowRight\") {\n            move[isRTL ? \"backward\" : \"forward\"](current);\n          } else if (key === \"ArrowLeft\") {\n            move[isRTL ? \"forward\" : \"backward\"](current);\n          }\n          e.preventDefault();\n          e.stopPropagation();\n        }\n      });\n      this.onEvent(\"keyup.tree\", n.elem.nodeContainer, (e) => {\n        const allow = [\"Space\", \"Enter\"];\n        const key = e.code;\n        if (allow.indexOf(key) > -1) {\n          handleClick(e, n);\n          e.preventDefault();\n          e.stopPropagation();\n        }\n      });\n      this.onEvent(\"click.tree\", n.elem.nodeContainer, (e) => {\n        e.stopPropagation();\n        handleClick(e, n);\n      });\n    });\n  }\n  /**\n   * The currently selected\n   * @returns {object|null} An node object if selectable: single\n   */\n  get selected() {\n    if (this.selectable) {\n      const selected = this.#nodes.filter((n) => n.elem.isSelected);\n      const len = selected.length;\n      if (this.selectable === \"single\") {\n        return len ? selected[0] : null;\n      }\n      return selected;\n    }\n    return null;\n  }\n  /**\n   * Sets the tree group collapse icon\n   * @param {string|null} value The icon name\n   */\n  set collapseIcon(value) {\n    if (value) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.COLLAPSE_ICON, value.toString());\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.COLLAPSE_ICON);\n    }\n    this.#updateNodeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.COLLAPSE_ICON);\n  }\n  get collapseIcon() {\n    return _ids_tree_shared__WEBPACK_IMPORTED_MODULE_7__[\"default\"].getVal(this, _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.COLLAPSE_ICON);\n  }\n  /**\n   * Set the data array of the tree\n   * @param {Array} value The array to use\n   */\n  set data(value) {\n    if (value && value.constructor === Array) {\n      this.datasource.data = value;\n      this.#redraw();\n      return;\n    }\n    this.datasource.data = null;\n  }\n  get data() {\n    return this.datasource?.data || [];\n  }\n  /**\n   * Sets the tree to disabled\n   * @param {boolean|string} value If true will set disabled attribute\n   */\n  set disabled(value) {\n    const val = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_11__.stringToBool)(value);\n    if (val) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED, \"\");\n      this.container?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED, \"\");\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED);\n      this.container?.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED);\n    }\n    this.#updateNodeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED);\n  }\n  get disabled() {\n    return (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_11__.stringToBool)(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED));\n  }\n  /**\n   * Sets the tree group expand icon\n   * @param {string|null} value The icon name\n   */\n  set expandIcon(value) {\n    if (value) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.EXPAND_ICON, value.toString());\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.EXPAND_ICON);\n    }\n    this.#updateNodeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.EXPAND_ICON);\n  }\n  get expandIcon() {\n    return _ids_tree_shared__WEBPACK_IMPORTED_MODULE_7__[\"default\"].getVal(this, _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.EXPAND_ICON);\n  }\n  /**\n   * Sets the tree to be expanded\n   * @param {boolean|string} value If true will set expanded attribute\n   */\n  set expanded(value) {\n    if (_ids_tree_shared__WEBPACK_IMPORTED_MODULE_7__[\"default\"].isBool(value)) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.EXPANDED, `${value}`);\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.EXPANDED);\n    }\n    this.#updateNodeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.EXPANDED, true);\n  }\n  get expanded() {\n    return _ids_tree_shared__WEBPACK_IMPORTED_MODULE_7__[\"default\"].getBoolVal(this, _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.EXPANDED);\n  }\n  /**\n   * Sets the tree node icon\n   * @param {string|null} value The icon name\n   */\n  set icon(value) {\n    if (value) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ICON, value.toString());\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ICON);\n    }\n    this.#updateNodeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ICON);\n  }\n  get icon() {\n    return _ids_tree_shared__WEBPACK_IMPORTED_MODULE_7__[\"default\"].getVal(this, _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ICON);\n  }\n  /**\n   * Set the tree aria label text\n   * @param {string} value of the label text\n   */\n  set label(value) {\n    if (value) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.LABEL, value.toString());\n      this.container?.setAttribute(\"aria-label\", value.toString());\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.LABEL);\n      this.container?.setAttribute(\"aria-label\", _ids_tree_shared__WEBPACK_IMPORTED_MODULE_7__[\"default\"].TREE_ARIA_LABEL);\n    }\n  }\n  get label() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.LABEL) || _ids_tree_shared__WEBPACK_IMPORTED_MODULE_7__[\"default\"].TREE_ARIA_LABEL;\n  }\n  /**\n   * Sets the tree group to be selectable 'single', 'multiple'\n   * @param {string | null| boolean} value The selectable\n   */\n  set selectable(value) {\n    const val = `${value}`;\n    const isValid = _ids_tree_shared__WEBPACK_IMPORTED_MODULE_7__[\"default\"].SELECTABLE.indexOf(val) > -1;\n    if (isValid) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SELECTABLE, val);\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SELECTABLE);\n    }\n    this.#initSelection();\n  }\n  get selectable() {\n    const value = this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SELECTABLE);\n    if (value === \"false\") {\n      return false;\n    }\n    return value !== null ? value : _ids_tree_shared__WEBPACK_IMPORTED_MODULE_7__[\"default\"].DEFAULTS.selectable;\n  }\n  get isMultiSelect() {\n    return this.selectable === \"multiple\";\n  }\n  /**\n   * Sets the tree group toggle collapse icon\n   * @param {string|null} value The icon name\n   */\n  set toggleCollapseIcon(value) {\n    if (value) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.TOGGLE_COLLAPSE_ICON, value.toString());\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.TOGGLE_COLLAPSE_ICON);\n    }\n    this.#setToggleIcon();\n  }\n  get toggleCollapseIcon() {\n    return _ids_tree_shared__WEBPACK_IMPORTED_MODULE_7__[\"default\"].getVal(this, _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.TOGGLE_COLLAPSE_ICON);\n  }\n  /**\n   * Sets the tree group toggle expand icon\n   * @param {string|null} value The icon name\n   */\n  set toggleExpandIcon(value) {\n    if (value) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.TOGGLE_EXPAND_ICON, value.toString());\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.TOGGLE_EXPAND_ICON);\n    }\n    this.#setToggleIcon();\n  }\n  get toggleExpandIcon() {\n    return _ids_tree_shared__WEBPACK_IMPORTED_MODULE_7__[\"default\"].getVal(this, _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.TOGGLE_EXPAND_ICON);\n  }\n  /**\n   * Sets the tree to use toggle icon rotate\n   * @param {boolean|string} value If false will set to use toggle icon to be false\n   */\n  set toggleIconRotate(value) {\n    if (_ids_tree_shared__WEBPACK_IMPORTED_MODULE_7__[\"default\"].isBool(value)) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.TOGGLE_ICON_ROTATE, `${value}`);\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.TOGGLE_ICON_ROTATE);\n    }\n  }\n  get toggleIconRotate() {\n    return _ids_tree_shared__WEBPACK_IMPORTED_MODULE_7__[\"default\"].getBoolVal(this, _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.TOGGLE_ICON_ROTATE);\n  }\n  /**\n   * Sets the tree to use toggle target\n   * @param {boolean|string} value If true will set to use toggle target\n   */\n  set useToggleTarget(value) {\n    if (_ids_tree_shared__WEBPACK_IMPORTED_MODULE_7__[\"default\"].isBool(value)) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.USE_TOGGLE_TARGET, `${value}`);\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.USE_TOGGLE_TARGET);\n    }\n    this.#updateNodeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.USE_TOGGLE_TARGET);\n  }\n  get useToggleTarget() {\n    return _ids_tree_shared__WEBPACK_IMPORTED_MODULE_7__[\"default\"].getBoolVal(this, _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.USE_TOGGLE_TARGET);\n  }\n};\nIdsTree = __decorateClass([\n  (0,_core_ids_decorators__WEBPACK_IMPORTED_MODULE_0__.customElement)(\"ids-tree\"),\n  (0,_core_ids_decorators__WEBPACK_IMPORTED_MODULE_0__.scss)(_ids_tree_scss__WEBPACK_IMPORTED_MODULE_12__[\"default\"])\n], IdsTree);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/ids-tree/ids-tree.ts\n");

/***/ }),

/***/ "./src/mixins/ids-color-variant-mixin/ids-color-variant-mixin.ts":
/*!***********************************************************************!*\
  !*** ./src/mixins/ids-color-variant-mixin/ids-color-variant-mixin.ts ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ids_color_variant_mixin_default)\n/* harmony export */ });\n/* harmony import */ var _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/ids-attributes */ \"./src/core/ids-attributes.ts\");\n/* harmony import */ var _utils_ids_xss_utils_ids_xss_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/ids-xss-utils/ids-xss-utils */ \"./src/utils/ids-xss-utils/ids-xss-utils.ts\");\n\n\nconst IdsColorVariantMixin = (superclass) => class extends superclass {\n  constructor(...args) {\n    super(...args);\n    if (!this.state) {\n      this.state = {};\n    }\n    this.state.colorVariant = null;\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    if (this.colorVariant)\n      this.#refreshColorVariant(null, this.colorVariant);\n  }\n  static get attributes() {\n    return [\n      ...superclass.attributes,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.COLOR_VARIANT\n    ];\n  }\n  /**\n   * @returns {Array<string>} List of available color variants for this component\n   */\n  colorVariants = [];\n  /**\n   * @returns {string|null} the name of the color variant currently applied\n   */\n  get colorVariant() {\n    return this.state?.colorVariant;\n  }\n  /**\n   * @param {string | null} val the name of the color variant to be applied\n   */\n  set colorVariant(val) {\n    let safeValue = null;\n    if (typeof val === \"string\") {\n      safeValue = (0,_utils_ids_xss_utils_ids_xss_utils__WEBPACK_IMPORTED_MODULE_1__.stripHTML)(val);\n    }\n    const currentValue = this.state.colorVariant;\n    if (safeValue && currentValue !== safeValue) {\n      if (this.colorVariants.includes(safeValue)) {\n        this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.COLOR_VARIANT, `${safeValue}`);\n      } else {\n        this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.COLOR_VARIANT);\n        safeValue = null;\n      }\n      this.state.colorVariant = safeValue;\n      this.#refreshColorVariant(currentValue, safeValue);\n    }\n  }\n  /**\n   * Refreshes the component's color variant state, driven by\n   * a CSS class on the WebComponent's `container` element\n   *\n   * @param {string} oldVariantName the variant name to \"remove\" from the style\n   * @param {string} newVariantName the variant name to \"add\" to the style\n   * @returns {void}\n   */\n  #refreshColorVariant(oldVariantName, newVariantName) {\n    if (!this.container) {\n      return;\n    }\n    const cl = this.container?.classList;\n    if (oldVariantName)\n      cl?.remove(`color-variant-${oldVariantName}`);\n    if (newVariantName)\n      cl?.add(`color-variant-${newVariantName}`);\n    if (typeof this.onColorVariantRefresh === \"function\") {\n      this.onColorVariantRefresh(newVariantName);\n    }\n  }\n};\nvar ids_color_variant_mixin_default = IdsColorVariantMixin;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbWl4aW5zL2lkcy1jb2xvci12YXJpYW50LW1peGluL2lkcy1jb2xvci12YXJpYW50LW1peGluLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUEyQjtBQUVEO0FBa0IxQixNQUFNLHVCQUF1QixDQUF3QixlQUFrQixjQUFjLFdBQVc7QUFBQSxFQUM5RixlQUFlLE1BQWE7QUFDMUIsVUFBTSxHQUFHLElBQUk7QUFFYixRQUFJLENBQUMsS0FBSyxPQUFPO0FBQ2YsV0FBSyxRQUFRLENBQUM7QUFBQSxJQUNoQjtBQUNBLFNBQUssTUFBTSxlQUFlO0FBQUEsRUFDNUI7QUFBQSxFQUVBLG9CQUFvQjtBQUNsQixVQUFNLGtCQUFrQjtBQUN4QixRQUFJLEtBQUs7QUFBYyxXQUFLLHFCQUFxQixNQUFNLEtBQUssWUFBWTtBQUFBLEVBQzFFO0FBQUEsRUFFQSxXQUFXLGFBQWE7QUFDdEIsV0FBTztBQUFBLE1BQ0wsR0FBSSxXQUFtQjtBQUFBLE1BQ3ZCLDBFQUF3QjtBQUFiLElBQ2I7QUFBQSxFQUNGO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFLQSxnQkFBK0IsQ0FBQztBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS2hDLElBQUksZUFBZTtBQUNqQixXQUFPLEtBQUssT0FBTztBQUFBLEVBQ3JCO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFLQSxJQUFJLGFBQWEsS0FBb0I7QUFDbkMsUUFBSSxZQUFpQjtBQUNyQixRQUFJLE9BQU8sUUFBUSxVQUFVO0FBQzNCLGtCQUFZLDZFQUFTLENBQUMsR0FBRztBQUFBLElBQzNCO0FBRUEsVUFBTSxlQUFlLEtBQUssTUFBTTtBQUNoQyxRQUFJLGFBQWEsaUJBQWlCLFdBQVc7QUFDM0MsVUFBSSxLQUFLLGNBQWMsU0FBUyxTQUFTLEdBQUc7QUFDMUMsYUFBSyxhQUFhLDBFQUF3QixFQUFFLEdBQUcsV0FBVztBQUFBLE1BQzVELE9BQU87QUFDTCxhQUFLLGdCQUFnQiwwRUFBd0I7QUFDN0Msb0JBQVk7QUFBQSxNQUNkO0FBRUEsV0FBSyxNQUFNLGVBQWU7QUFDMUIsV0FBSyxxQkFBcUIsY0FBYyxTQUFTO0FBQUEsSUFDbkQ7QUFBQSxFQUNGO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBVUEscUJBQXFCLGdCQUFnQyxnQkFBc0M7QUFDekYsUUFBSSxDQUFDLEtBQUssV0FBVztBQUNuQjtBQUFBLElBQ0Y7QUFFQSxVQUFNLEtBQUssS0FBSyxXQUFXO0FBRTNCLFFBQUk7QUFBZ0IsVUFBSSxPQUFPLGlCQUFpQixnQkFBZ0I7QUFDaEUsUUFBSTtBQUFnQixVQUFJLElBQUksaUJBQWlCLGdCQUFnQjtBQUc3RCxRQUFJLE9BQU8sS0FBSywwQkFBMEIsWUFBWTtBQUNwRCxXQUFLLHNCQUFzQixjQUFjO0FBQUEsSUFDM0M7QUFBQSxFQUNGO0FBQ0Y7QUFFQSxJQUFPLGtDQUFRIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaWRzLWVudGVycHJpc2Utd2MvLi9zcmMvbWl4aW5zL2lkcy1jb2xvci12YXJpYW50LW1peGluL2lkcy1jb2xvci12YXJpYW50LW1peGluLnRzP2FlZWMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXR0cmlidXRlcyB9IGZyb20gJy4uLy4uL2NvcmUvaWRzLWF0dHJpYnV0ZXMnO1xuaW1wb3J0IHsgSWRzQ29uc3RydWN0b3IgfSBmcm9tICcuLi8uLi9jb3JlL2lkcy1lbGVtZW50JztcbmltcG9ydCB7IHN0cmlwSFRNTCB9IGZyb20gJy4uLy4uL3V0aWxzL2lkcy14c3MtdXRpbHMvaWRzLXhzcy11dGlscyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29sb3JWYXJpYW50SGFuZGxlciB7XG4gIC8vIGFzIGluc3RhbmNlIGZ1bmN0aW9uXG4gIG9uQ29sb3JWYXJpYW50UmVmcmVzaD8odmFyaWFudE5hbWU6IHN0cmluZyB8IHVuZGVmaW5lZCB8IG51bGwpOiB2b2lkO1xuICAvLyBhcyBpbnN0YW5jZSBwcm9wZXJ0eVxuICBvbkNvbG9yVmFyaWFudFJlZnJlc2g/OiAodmFyaWFudE5hbWU6IHN0cmluZyB8IHVuZGVmaW5lZCB8IG51bGwpID0+IHZvaWQ7XG59XG5cbnR5cGUgQ29uc3RyYWludHMgPSBJZHNDb25zdHJ1Y3RvcjxDb2xvclZhcmlhbnRIYW5kbGVyPjtcblxuLyoqXG4gKiBBIG1peGluIHRoYXQgd2lsbCBwcm92aWRlIHRoZSBjb250YWluZXIgZWxlbWVudCBvZiBhbiBJRFMgQ29tcG9uZW50IHdpdGggYSBjbGFzc1xuICogcmVzZXJ2ZWQgZm9yIGZsaXBwaW5nIHRoZSBmb3JlZ3JvdW5kIGNvbG9yICh0ZXh0IGNvbG9yLCBpY29uIGZpbGwsIGV0YykgdG8gYW4gYWx0ZXJuYXRlLFxuICogY29udHJhc3RpbmcgY29sb3IuICBUaGlzIGFsbG93cyBlYXN5IGludGVncmF0aW9uIHdpdGggYWx0ZXJuYXRlIGxheW91dHMsIGhlYWRlcnMsIGFwcCBtZW51LCBldGMuXG4gKiBAcGFyYW0ge2FueX0gc3VwZXJjbGFzcyBBY2NlcHRzIGEgc3VwZXJjbGFzcyBhbmQgY3JlYXRlcyBhIG5ldyBzdWJjbGFzcyBmcm9tIGl0XG4gKiBAcmV0dXJucyB7YW55fSBUaGUgZXh0ZW5kZWQgb2JqZWN0XG4gKi9cbmNvbnN0IElkc0NvbG9yVmFyaWFudE1peGluID0gPFQgZXh0ZW5kcyBDb25zdHJhaW50cz4oc3VwZXJjbGFzczogVCkgPT4gY2xhc3MgZXh0ZW5kcyBzdXBlcmNsYXNzIHtcbiAgY29uc3RydWN0b3IoLi4uYXJnczogYW55W10pIHtcbiAgICBzdXBlciguLi5hcmdzKTtcblxuICAgIGlmICghdGhpcy5zdGF0ZSkge1xuICAgICAgdGhpcy5zdGF0ZSA9IHt9O1xuICAgIH1cbiAgICB0aGlzLnN0YXRlLmNvbG9yVmFyaWFudCA9IG51bGw7XG4gIH1cblxuICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgIGlmICh0aGlzLmNvbG9yVmFyaWFudCkgdGhpcy4jcmVmcmVzaENvbG9yVmFyaWFudChudWxsLCB0aGlzLmNvbG9yVmFyaWFudCk7XG4gIH1cblxuICBzdGF0aWMgZ2V0IGF0dHJpYnV0ZXMoKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIC4uLihzdXBlcmNsYXNzIGFzIGFueSkuYXR0cmlidXRlcyxcbiAgICAgIGF0dHJpYnV0ZXMuQ09MT1JfVkFSSUFOVFxuICAgIF07XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge0FycmF5PHN0cmluZz59IExpc3Qgb2YgYXZhaWxhYmxlIGNvbG9yIHZhcmlhbnRzIGZvciB0aGlzIGNvbXBvbmVudFxuICAgKi9cbiAgY29sb3JWYXJpYW50czogQXJyYXk8c3RyaW5nPiA9IFtdO1xuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9IHRoZSBuYW1lIG9mIHRoZSBjb2xvciB2YXJpYW50IGN1cnJlbnRseSBhcHBsaWVkXG4gICAqL1xuICBnZXQgY29sb3JWYXJpYW50KCkge1xuICAgIHJldHVybiB0aGlzLnN0YXRlPy5jb2xvclZhcmlhbnQ7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmcgfCBudWxsfSB2YWwgdGhlIG5hbWUgb2YgdGhlIGNvbG9yIHZhcmlhbnQgdG8gYmUgYXBwbGllZFxuICAgKi9cbiAgc2V0IGNvbG9yVmFyaWFudCh2YWw6IHN0cmluZyB8IG51bGwpIHtcbiAgICBsZXQgc2FmZVZhbHVlOiBhbnkgPSBudWxsO1xuICAgIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgICAgc2FmZVZhbHVlID0gc3RyaXBIVE1MKHZhbCk7XG4gICAgfVxuXG4gICAgY29uc3QgY3VycmVudFZhbHVlID0gdGhpcy5zdGF0ZS5jb2xvclZhcmlhbnQ7XG4gICAgaWYgKHNhZmVWYWx1ZSAmJiBjdXJyZW50VmFsdWUgIT09IHNhZmVWYWx1ZSkge1xuICAgICAgaWYgKHRoaXMuY29sb3JWYXJpYW50cy5pbmNsdWRlcyhzYWZlVmFsdWUpKSB7XG4gICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZXMuQ09MT1JfVkFSSUFOVCwgYCR7c2FmZVZhbHVlfWApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlcy5DT0xPUl9WQVJJQU5UKTtcbiAgICAgICAgc2FmZVZhbHVlID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zdGF0ZS5jb2xvclZhcmlhbnQgPSBzYWZlVmFsdWU7XG4gICAgICB0aGlzLiNyZWZyZXNoQ29sb3JWYXJpYW50KGN1cnJlbnRWYWx1ZSwgc2FmZVZhbHVlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVmcmVzaGVzIHRoZSBjb21wb25lbnQncyBjb2xvciB2YXJpYW50IHN0YXRlLCBkcml2ZW4gYnlcbiAgICogYSBDU1MgY2xhc3Mgb24gdGhlIFdlYkNvbXBvbmVudCdzIGBjb250YWluZXJgIGVsZW1lbnRcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9sZFZhcmlhbnROYW1lIHRoZSB2YXJpYW50IG5hbWUgdG8gXCJyZW1vdmVcIiBmcm9tIHRoZSBzdHlsZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmV3VmFyaWFudE5hbWUgdGhlIHZhcmlhbnQgbmFtZSB0byBcImFkZFwiIHRvIHRoZSBzdHlsZVxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gICNyZWZyZXNoQ29sb3JWYXJpYW50KG9sZFZhcmlhbnROYW1lPzogc3RyaW5nIHwgbnVsbCwgbmV3VmFyaWFudE5hbWU/OiBzdHJpbmcgfCBudWxsKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmNvbnRhaW5lcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGNsID0gdGhpcy5jb250YWluZXI/LmNsYXNzTGlzdDtcblxuICAgIGlmIChvbGRWYXJpYW50TmFtZSkgY2w/LnJlbW92ZShgY29sb3ItdmFyaWFudC0ke29sZFZhcmlhbnROYW1lfWApO1xuICAgIGlmIChuZXdWYXJpYW50TmFtZSkgY2w/LmFkZChgY29sb3ItdmFyaWFudC0ke25ld1ZhcmlhbnROYW1lfWApO1xuXG4gICAgLy8gRmlyZSBvcHRpb25hbCBjYWxsYmFja1xuICAgIGlmICh0eXBlb2YgdGhpcy5vbkNvbG9yVmFyaWFudFJlZnJlc2ggPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXMub25Db2xvclZhcmlhbnRSZWZyZXNoKG5ld1ZhcmlhbnROYW1lKTtcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IElkc0NvbG9yVmFyaWFudE1peGluO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/mixins/ids-color-variant-mixin/ids-color-variant-mixin.ts\n");

/***/ }),

/***/ "./src/mixins/ids-label-state-mixin/ids-label-state-common.ts":
/*!********************************************************************!*\
  !*** ./src/mixins/ids-label-state-mixin/ids-label-state-common.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"IdsLabelStateAttributes\": () => (/* binding */ IdsLabelStateAttributes),\n/* harmony export */   \"isLabelRequiredValid\": () => (/* binding */ isLabelRequiredValid),\n/* harmony export */   \"isLabelStateValid\": () => (/* binding */ isLabelStateValid)\n/* harmony export */ });\n/* harmony import */ var _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/ids-attributes */ \"./src/core/ids-attributes.ts\");\n/* harmony import */ var _utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/ids-string-utils/ids-string-utils */ \"./src/utils/ids-string-utils/ids-string-utils.ts\");\n\n\nconst IdsLabelStateAttributes = [\n  _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.LABEL,\n  _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.LABEL_REQUIRED,\n  _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.LABEL_STATE\n];\nconst isLabelStateValid = (value) => value === null || [\"hidden\", \"collapsed\"].includes(value);\nconst isLabelRequiredValid = (value) => {\n  const isValid = typeof value !== \"undefined\" && value !== null;\n  return isValid ? (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_1__.stringToBool)(value) : true;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbWl4aW5zL2lkcy1sYWJlbC1zdGF0ZS1taXhpbi9pZHMtbGFiZWwtc3RhdGUtY29tbW9uLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTJCO0FBQ0U7QUFJdEIsTUFBTSwwQkFBMEI7QUFBQSxFQUNyQyxrRUFBZ0I7QUFBTCxFQUNYLDJFQUF5QjtBQUFkLEVBQ1gsd0VBQXNCO0FBQ3hCO0FBRU8sTUFBTSxvQkFBb0IsQ0FBQyxVQUF5QixVQUFVLFFBQVEsQ0FBQyxVQUFVLFdBQVcsRUFBRSxTQUFTLEtBQUs7QUFFNUcsTUFBTSx1QkFBdUIsQ0FBQyxVQUE0QztBQUMvRSxRQUFNLFVBQVUsT0FBTyxVQUFVLGVBQWUsVUFBVTtBQUMxRCxTQUFPLFVBQVUsc0ZBQVksQ0FBQyxLQUFLLElBQUk7QUFDekMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pZHMtZW50ZXJwcmlzZS13Yy8uL3NyYy9taXhpbnMvaWRzLWxhYmVsLXN0YXRlLW1peGluL2lkcy1sYWJlbC1zdGF0ZS1jb21tb24udHM/YWY3MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhdHRyaWJ1dGVzIH0gZnJvbSAnLi4vLi4vY29yZS9pZHMtYXR0cmlidXRlcyc7XG5pbXBvcnQgeyBzdHJpbmdUb0Jvb2wgfSBmcm9tICcuLi8uLi91dGlscy9pZHMtc3RyaW5nLXV0aWxzL2lkcy1zdHJpbmctdXRpbHMnO1xuXG5leHBvcnQgdHlwZSBJZHNMYWJlbFN0YXRlTW9kZSA9IG51bGwgfCAnaGlkZGVuJyB8ICdjb2xsYXBzZWQnO1xuXG5leHBvcnQgY29uc3QgSWRzTGFiZWxTdGF0ZUF0dHJpYnV0ZXMgPSBbXG4gIGF0dHJpYnV0ZXMuTEFCRUwsXG4gIGF0dHJpYnV0ZXMuTEFCRUxfUkVRVUlSRUQsXG4gIGF0dHJpYnV0ZXMuTEFCRUxfU1RBVEVcbl07XG5cbmV4cG9ydCBjb25zdCBpc0xhYmVsU3RhdGVWYWxpZCA9ICh2YWx1ZTogc3RyaW5nIHwgbnVsbCkgPT4gdmFsdWUgPT09IG51bGwgfHwgWydoaWRkZW4nLCAnY29sbGFwc2VkJ10uaW5jbHVkZXModmFsdWUpO1xuXG5leHBvcnQgY29uc3QgaXNMYWJlbFJlcXVpcmVkVmFsaWQgPSAodmFsdWU6IHN0cmluZyB8IGJvb2xlYW4gfCBudWxsKTogYm9vbGVhbiA9PiB7XG4gIGNvbnN0IGlzVmFsaWQgPSB0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnICYmIHZhbHVlICE9PSBudWxsO1xuICByZXR1cm4gaXNWYWxpZCA/IHN0cmluZ1RvQm9vbCh2YWx1ZSkgOiB0cnVlO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/mixins/ids-label-state-mixin/ids-label-state-common.ts\n");

/***/ }),

/***/ "./src/mixins/ids-label-state-mixin/ids-label-state-mixin.ts":
/*!*******************************************************************!*\
  !*** ./src/mixins/ids-label-state-mixin/ids-label-state-mixin.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ids_label_state_mixin_default)\n/* harmony export */ });\n/* harmony import */ var _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/ids-attributes */ \"./src/core/ids-attributes.ts\");\n/* harmony import */ var _utils_ids_xss_utils_ids_xss_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/ids-xss-utils/ids-xss-utils */ \"./src/utils/ids-xss-utils/ids-xss-utils.ts\");\n/* harmony import */ var _ids_label_state_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ids-label-state-common */ \"./src/mixins/ids-label-state-mixin/ids-label-state-common.ts\");\n\n\n\nconst IdsLabelStateMixin = (superclass) => class extends superclass {\n  constructor(...args) {\n    super(...args);\n    if (!this.state) {\n      this.state = {};\n    }\n    this.state.label = \"\";\n  }\n  connectedCallback() {\n    super.connectedCallback?.();\n    this.state.labelState = null;\n    if (this.hasAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.LABEL_STATE)) {\n      this.labelState = this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.LABEL_STATE);\n    }\n  }\n  static get attributes() {\n    return [\n      ...superclass.attributes,\n      ..._ids_label_state_common__WEBPACK_IMPORTED_MODULE_2__.IdsLabelStateAttributes\n    ];\n  }\n  /**\n   * Set the `label` text\n   * @param {string} value of the `label` text property\n   */\n  set label(value) {\n    const newValue = (0,_utils_ids_xss_utils_ids_xss_utils__WEBPACK_IMPORTED_MODULE_1__.stripHTML)(value);\n    const currentValue = this.label;\n    if (newValue !== currentValue) {\n      if (this.state)\n        this.state.label = newValue;\n      if (newValue) {\n        this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.LABEL, `${newValue}`);\n      } else {\n        this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.LABEL);\n      }\n      this.setLabelText(newValue);\n    }\n  }\n  get label() {\n    return this.state?.label || \"\";\n  }\n  /**\n   * Used for setting the text contents of the shadowroot label\n   * @param {string} [value] of label\n   * @param {string} [selector] used to target a specific element in the shadowroot by CSS selector\n   * @returns {void}\n   */\n  setLabelText(value = this.state?.label, selector = \"label\") {\n    const sanitizedValue = (0,_utils_ids_xss_utils_ids_xss_utils__WEBPACK_IMPORTED_MODULE_1__.stripHTML)(value);\n    const labelEl = this.shadowRoot?.querySelector(selector);\n    if (labelEl) {\n      const textEl = labelEl.querySelector(\"ids-text\");\n      if (!this.labelState) {\n        if (textEl)\n          textEl.innerHTML = sanitizedValue || \"\";\n        labelEl.classList[sanitizedValue ? \"remove\" : \"add\"](\"empty\");\n      } else {\n        if (textEl)\n          textEl.innerHTML = \"\";\n        labelEl.classList.add(\"empty\");\n      }\n    }\n  }\n  /**\n   * Set `label-required` attribute\n   * @param {string} value The `label-required` attribute\n   */\n  set labelRequired(value) {\n    const safeValue = (0,_ids_label_state_common__WEBPACK_IMPORTED_MODULE_2__.isLabelRequiredValid)(value);\n    if (value !== null) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.LABEL_REQUIRED, safeValue.toString());\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.LABEL_REQUIRED);\n    }\n    this.labelEl?.classList[!safeValue ? \"add\" : \"remove\"](\"no-required-indicator\");\n    if (this.textInput)\n      this.textInput.labelRequired = this.labelRequired;\n  }\n  get labelRequired() {\n    return (0,_ids_label_state_common__WEBPACK_IMPORTED_MODULE_2__.isLabelRequiredValid)(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.LABEL_REQUIRED));\n  }\n  /**\n   * @returns {Array<IdsLabelStateMode>} List of available hidden label states\n   */\n  labelStates = [\"hidden\", \"collapsed\"];\n  /**\n   * @returns {IdsLabelStateMode} the current state of the field label's visibility\n   */\n  get labelState() {\n    return this.state?.labelState || null;\n  }\n  /**\n   * @param {IdsLabelStateMode} val the type of label visibility to apply to the field\n   */\n  set labelState(val) {\n    let safeValue = null;\n    if (typeof val === \"string\") {\n      safeValue = (0,_utils_ids_xss_utils_ids_xss_utils__WEBPACK_IMPORTED_MODULE_1__.stripTags)(val, \"\");\n    }\n    const currentValue = this.state.labelState;\n    if (currentValue !== safeValue) {\n      if (safeValue !== null && this.labelStates.includes(safeValue)) {\n        this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.LABEL_STATE, `${safeValue}`);\n      } else {\n        this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.LABEL_STATE);\n        safeValue = null;\n      }\n      this.state.labelState = safeValue;\n      this.#refreshLabelState(currentValue, safeValue);\n    }\n  }\n  /**\n   * Refreshes the component's label state, driven by\n   * a CSS class on the WebComponent's `container` element\n   *\n   * @param {string} oldVariantName the variant name to \"remove\" from the style\n   * @param {string} newVariantName the variant name to \"add\" to the style\n   * @returns {void}\n   */\n  #refreshLabelState(oldVariantName, newVariantName) {\n    if (!this.container)\n      return;\n    const cl = this.container.classList;\n    if (oldVariantName)\n      cl.remove(`label-state-${oldVariantName}`);\n    if (newVariantName)\n      cl.add(`label-state-${newVariantName}`);\n    this.#setlabelState(newVariantName);\n    if (typeof this.onLabelStateChange === \"function\") {\n      this.onLabelStateChange(newVariantName);\n    }\n  }\n  #setlabelState(doHide = null) {\n    if (doHide) {\n      this.#hideLabel();\n      this.input?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.htmlAttributes.ARIA_LABEL, this.label);\n    } else {\n      this.#showLabel();\n      this.input?.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.htmlAttributes.ARIA_LABEL);\n    }\n  }\n  #hideLabel() {\n    this.setLabelText?.(\"\");\n  }\n  #showLabel() {\n    const existingLabel = this.shadowRoot?.querySelector(\"label\");\n    const thisAsInput = this;\n    if (!existingLabel && !thisAsInput.labelEl) {\n      if (thisAsInput.fieldContainer) {\n        thisAsInput.fieldContainer?.insertAdjacentHTML(\"beforebegin\", `<label for=\"${this.id}-input\" class=\"ids-label-text\">\n          <ids-text part=\"label\" label=\"true\" color-unset>${this.label}</ids-text>\n        </label>`);\n      }\n    } else {\n      this.setLabelText?.(this.label);\n    }\n  }\n};\nvar ids_label_state_mixin_default = IdsLabelStateMixin;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/mixins/ids-label-state-mixin/ids-label-state-mixin.ts\n");

/***/ }),

/***/ "./src/components/ids-badge/ids-badge.scss":
/*!*************************************************!*\
  !*** ./src/components/ids-badge/ids-badge.scss ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n\n        const styles = `/* Sass scss styles. Keep Base very small */\n/* Global variables (might want these to become tokens) */\n:host {\n  display: inline-flex;\n  contain: content;\n  text-align: center;\n}\n\n.ids-badge {\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  background-color: var(--ids-color-palette-slate-20);\n  border-width: 1px;\n  border-color: var(--ids-color-palette-slate-20);\n  border-style: solid;\n  font-family: source sans pro, helvetica, arial, sans-serif;\n  margin-bottom: 4px;\n  margin-inline-end: 4px;\n  padding-inline-start: 8px;\n  padding-inline-end: 8px;\n  padding-top: 1px;\n  padding-bottom: 1px;\n  border-radius: 16px;\n  font-size: 14px;\n  color: var(--ids-color-palette-slate-100);\n  flex-direction: column;\n  justify-content: space-between;\n  line-height: 22px;\n  min-height: 22px;\n  min-width: 22px;\n  padding: 0 10px;\n}\n.ids-badge.round {\n  display: inline-flex;\n  height: 22px;\n  padding: 0;\n  text-align: center;\n  width: 22px;\n  justify-content: center;\n  align-items: center;\n}\n.ids-badge.ids-white {\n  background-color: var(--ids-color-palette-white);\n  color: var(--ids-color-palette-white);\n}\n.ids-badge[color=error] {\n  background-color: var(--ids-color-palette-ruby-60);\n  border-color: var(--ids-color-palette-ruby-60);\n}\n.ids-badge[color=warning] {\n  background-color: var(--ids-color-palette-amber-80);\n  border-color: var(--ids-color-palette-amber-80);\n}\n.ids-badge[color=info] {\n  background-color: var(--ids-color-palette-azure-70);\n  border-color: var(--ids-color-palette-azure-70);\n}\n.ids-badge[color=success] {\n  background-color: var(--ids-color-palette-emerald-80);\n  border-color: var(--ids-color-palette-emerald-80);\n  color: var(--ids-color-palette-white);\n}\n\n.ids-badge[mode=dark]:not([color]) {\n  background-color: var(--ids-color-palette-slate-60);\n  border-color: var(--ids-color-palette-slate-60);\n  color: var(--ids-color-palette-white);\n}\n.ids-badge[mode=dark].ids-white {\n  color: var(--ids-color-palette-slate-100);\n}\n.ids-badge[mode=dark][color=error] {\n  color: var(--ids-color-palette-white);\n  background-color: var(--ids-color-palette-ruby-50);\n  border-color: var(--ids-color-palette-ruby-50);\n}\n.ids-badge[mode=dark][color=alert], .ids-badge[mode=dark][color=warning] {\n  background-color: var(--ids-color-palette-amber-50);\n  border-color: var(--ids-color-palette-amber-50);\n}\n.ids-badge[mode=dark][color=info] {\n  color: var(--ids-color-palette-white);\n  background-color: var(--ids-color-palette-azure-60);\n  border-color: var(--ids-color-palette-azure-60);\n}\n\n.ids-badge[mode=contrast].ids-white {\n  color: var(--ids-color-palette-slate-100);\n}\n.ids-badge[mode=contrast][color=error] {\n  color: var(--ids-color-palette-white);\n  background-color: var(--ids-color-palette-ruby-80);\n  border-color: var(--ids-color-palette-ruby-80);\n}\n.ids-badge[mode=contrast][color=info] {\n  color: var(--ids-color-palette-white);\n  background-color: var(--ids-color-palette-azure-80);\n  border-color: var(--ids-color-palette-azure-80);\n}\n.ids-badge[mode=contrast][color=alert], .ids-badge[mode=contrast][color=warning] {\n  background-color: var(--ids-color-palette-amber-100);\n  border-color: var(--ids-color-palette-amber-100);\n}`;\n        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (styles);\n    //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/ids-badge/ids-badge.scss\n");

/***/ })

}]);