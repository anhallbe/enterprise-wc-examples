"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkids_enterprise_wc"] = self["webpackChunkids_enterprise_wc"] || []).push([["src_mixins_ids-tooltip-mixin_ids-tooltip-mixin_ts"],{

/***/ "./src/components/ids-tooltip/ids-tooltip.ts":
/*!***************************************************!*\
  !*** ./src/components/ids-tooltip/ids-tooltip.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ IdsTooltip)\n/* harmony export */ });\n/* harmony import */ var _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/ids-attributes */ \"./src/core/ids-attributes.ts\");\n/* harmony import */ var _core_ids_decorators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/ids-decorators */ \"./src/core/ids-decorators.ts\");\n/* harmony import */ var _utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/ids-string-utils/ids-string-utils */ \"./src/utils/ids-string-utils/ids-string-utils.ts\");\n/* harmony import */ var _mixins_ids_theme_mixin_ids_theme_mixin__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../mixins/ids-theme-mixin/ids-theme-mixin */ \"./src/mixins/ids-theme-mixin/ids-theme-mixin.ts\");\n/* harmony import */ var _mixins_ids_keyboard_mixin_ids_keyboard_mixin__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../mixins/ids-keyboard-mixin/ids-keyboard-mixin */ \"./src/mixins/ids-keyboard-mixin/ids-keyboard-mixin.ts\");\n/* harmony import */ var _mixins_ids_events_mixin_ids_events_mixin__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../mixins/ids-events-mixin/ids-events-mixin */ \"./src/mixins/ids-events-mixin/ids-events-mixin.ts\");\n/* harmony import */ var _core_ids_element__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/ids-element */ \"./src/core/ids-element.ts\");\n/* harmony import */ var _ids_tooltip_scss__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ids-tooltip.scss */ \"./src/components/ids-tooltip/ids-tooltip.scss\");\n/* harmony import */ var _ids_popup_ids_popup__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../ids-popup/ids-popup */ \"./src/components/ids-popup/ids-popup.ts\");\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result)\n    __defProp(target, key, result);\n  return result;\n};\n\n\n\n\n\n\n\n\n\nconst Base = (0,_mixins_ids_theme_mixin_ids_theme_mixin__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(\n  (0,_mixins_ids_keyboard_mixin_ids_keyboard_mixin__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(\n    (0,_mixins_ids_events_mixin_ids_events_mixin__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(\n      _core_ids_element__WEBPACK_IMPORTED_MODULE_6__[\"default\"]\n    )\n  )\n);\nlet IdsTooltip = class extends Base {\n  constructor() {\n    super();\n    this.state = {\n      target: null,\n      trigger: \"hover\",\n      visible: false\n    };\n  }\n  /**\n   * Invoked each time the custom element is appended into a document-connected element,\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    this.#updateAria();\n  }\n  /**\n   * Returns the properties/settings we handle as getters/setters\n   * @returns {Array} The supported settings in an array\n   */\n  static get attributes() {\n    return [\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.DELAY,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.KEEP_OPEN,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.PLACEMENT,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.MODE,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.TARGET,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.TRIGGER,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.VISIBLE\n    ];\n  }\n  /**\n   * Create the Template for the component contents\n   * @returns {string} The template\n   */\n  template() {\n    const cssParts = \"popup: tooltip-popup, arrow: tooltip-arrow, arrow-top: tooltip-arrow-top, arrow-right: tooltip-arrow-right, arrow-bottom: tooltip-arrow-bottom, arrow-left: tooltip-arrow-left\";\n    return `<ids-popup part=\"popup\" id=\"${this.id || \"ids\"}-tooltip\" exportparts=\"${cssParts}\">\n        <div class=\"ids-tooltip\" slot=\"content\" part=\"tooltip\">\n          <slot></slot>\n        </div>\n        </ids-popup>\n      `;\n  }\n  /**\n   * Bind Internal Event Handlers\n   * @private\n   * @returns {void}\n   */\n  #attachEventHandlers() {\n    this.detachAllEvents();\n    if (!(typeof this.target === \"string\")) {\n      this.#bindEvents(this.target);\n      return;\n    }\n    const list = document.querySelectorAll(this.target);\n    for (let i = 0, len = list.length; i < len; i++) {\n      this.#bindEvents(list[i]);\n    }\n  }\n  /**\n   * Bind the events to a tooltip target.\n   * @param {HTMLElement} targetElem The element to attach events to\n   * @private\n   */\n  #bindEvents(targetElem) {\n    if (this.trigger === \"hover\") {\n      this.onEvent(\"hoverend.tooltip\", targetElem, (e) => {\n        if (this.popup) {\n          if (!this.popup?.alignTarget)\n            this.popup.alignTarget = e.currentTarget;\n          this.visible = true;\n        }\n      }, { delay: this.delay });\n      this.onEvent(\"mouseleave.tooltip\", targetElem, () => {\n        this.visible = false;\n      });\n      this.onEvent(\"click.tooltip\", targetElem, () => {\n        this.visible = false;\n      });\n      this.onEvent(\"longpress.tooltip\", targetElem, () => {\n        this.visible = true;\n      }, { delay: 1e3 });\n      this.onEvent(\"keyboardfocus.tooltip\", targetElem, () => {\n        this.visible = true;\n      });\n      this.onEvent(\"focusout.tooltip\", targetElem, () => {\n        this.visible = false;\n      });\n      this.onEvent(\"click.popup\", this.popup, () => {\n        this.visible = true;\n      });\n    }\n    if (this.trigger === \"click\") {\n      this.onEvent(\"click.tooltip\", targetElem, (e) => {\n        if (this.popup) {\n          this.popup.alignTarget = e.currentTarget;\n          if (this.visible) {\n            this.visible = false;\n            return;\n          }\n          this.visible = true;\n        }\n      });\n      this.onEvent(\"click.popup\", this.popup, () => {\n        this.visible = false;\n      });\n    }\n    if (this.trigger === \"focus\") {\n      this.onEvent(\"focusin.tooltip\", targetElem, (e) => {\n        if (this.popup) {\n          this.popup.alignTarget = e.currentTarget;\n          this.visible = true;\n        }\n      });\n      this.onEvent(\"focusout.tooltip\", targetElem, () => {\n        this.visible = false;\n      });\n    }\n  }\n  /**\n   * Setup the popup\n   * @private\n   * @returns {void}\n   */\n  #configurePopup() {\n    const popup = this.popup;\n    if (popup) {\n      popup.type = \"tooltip\";\n      popup.align = `${this.placement}, center`;\n      popup.arrow = this.placement;\n      if (this.placement === \"top\" || this.placement === \"bottom\") {\n        popup.setPosition(0, 10);\n      }\n      if (this.placement === \"left\" || this.placement === \"right\") {\n        popup.setPosition(10, 0);\n      }\n    }\n  }\n  /**\n   * Update the aria attributes with the correct contents\n   * @private\n   * @returns {void}\n   */\n  #updateAria() {\n    if (this.state?.noAria) {\n      return;\n    }\n    const popup = this.popup;\n    if (popup) {\n      popup.alignTarget = typeof this.target === \"object\" ? this.target : document.querySelectorAll(this.target)[0];\n      const id = `${this.id || \"ids\"}-tooltip`;\n      const alignTarget = popup?.alignTarget?.querySelector(`#${id}`);\n      if (alignTarget) {\n        alignTarget.textContent = this.textContent;\n        return;\n      }\n      if (popup.alignTarget) {\n        const ariaSpan = `<ids-text id=\"${id}\" audible=\"true\">${this.textContent}</ids-text>`;\n        popup.alignTarget.insertAdjacentHTML(\"beforeend\", ariaSpan);\n        popup.alignTarget.setAttribute(\"aria-describedby\", `#${id}`);\n      }\n    }\n  }\n  /**\n   * Show the tooltip (use visible for public API)\n   * @private\n   * @returns {Promise<void>}\n   */\n  async #show() {\n    let canShow = true;\n    const beforeShowResponse = (veto) => {\n      canShow = !!veto;\n    };\n    if (this.state.beforeShow) {\n      const stuff = await this.state.beforeShow();\n      this.textContent = stuff;\n      this.#updateAria();\n    }\n    this.triggerEvent(\"beforeshow\", this, {\n      detail: {\n        elem: this,\n        response: beforeShowResponse\n      }\n    });\n    if (!canShow) {\n      this.visible = false;\n      return;\n    }\n    this.#configurePopup();\n    const popup = this.popup;\n    if (popup) {\n      popup.visible = true;\n      popup.place();\n      this.triggerEvent(\"show\", this, { detail: { elem: this } });\n      this.triggerEvent(\"aftershow\", this, { detail: { elem: this } });\n    }\n  }\n  /**\n   * Show the tooltip  (use visible for public API)\n   * @returns {void}\n   */\n  #hide() {\n    const popup = this.popup;\n    if (popup) {\n      popup.visible = false;\n      this.triggerEvent(\"hide\", this, { detail: { elem: this } });\n      this.triggerEvent(\"afterhide\", this, { detail: { elem: this } });\n      this.onHide();\n    }\n  }\n  /**\n   * Callback for when hide is triggered\n   * @returns {void}\n   */\n  onHide() {\n  }\n  /**\n   * @readonly\n   * @returns {IdsPopup | undefined | null} reference to the internal IdsPopup component\n   */\n  get popup() {\n    return this.shadowRoot?.querySelector(\"ids-popup\");\n  }\n  /**\n   * An async function that fires as the tooltip is showing allowing you to set contents.\n   * @param {Function} func The async function\n   */\n  set beforeShow(func) {\n    this.state.beforeShow = func;\n  }\n  get beforeShow() {\n    return this.state.beforeShow;\n  }\n  /**\n   * Set how long after hover you should delay before showing\n   * @param {string | number} value The amount in ms to delay\n   */\n  set delay(value) {\n    if (value) {\n      this.setAttribute(\"delay\", value.toString());\n      return;\n    }\n    this.removeAttribute(\"delay\");\n  }\n  get delay() {\n    return Number(this.getAttribute(\"delay\")) || 500;\n  }\n  /**\n   * Sets the tooltip placement between left, right, top, bottom\n   * @param {string} value The placement of the tooltip\n   */\n  set placement(value) {\n    this.state.placement = value;\n    if (value) {\n      this.setAttribute(\"placement\", value);\n      return;\n    }\n    this.removeAttribute(\"placement\");\n  }\n  get placement() {\n    return this.getAttribute(\"placement\") || \"top\";\n  }\n  /**\n   * Set the target element for the tooltip\n   * @param {HTMLElement} value The target element selector\n   */\n  set target(value) {\n    this.state.target = value;\n    if (value && typeof value !== \"string\") {\n      this.removeAttribute(\"target\");\n      this.#attachEventHandlers();\n      return;\n    }\n    if (value && typeof value === \"string\") {\n      this.setAttribute(\"target\", value);\n      this.#attachEventHandlers();\n      return;\n    }\n    this.removeAttribute(\"target\");\n    this.#attachEventHandlers();\n  }\n  get target() {\n    return this.state.target;\n  }\n  /**\n   * Set trigger agains the target between hover, click and focus\n   * @param {string} value The trigger mode to use\n   */\n  set trigger(value) {\n    this.state.trigger = value;\n    if (this.state.trigger) {\n      this.setAttribute(\"trigger\", this.state.trigger);\n      this.#attachEventHandlers();\n      return;\n    }\n    this.removeAttribute(\"trigger\");\n    this.#attachEventHandlers();\n  }\n  get trigger() {\n    return this.state.trigger || \"hover\";\n  }\n  /**\n   * Set tooltip immediately to visible/invisible\n   * @param {string|boolean} value The target element selector\n   */\n  set visible(value) {\n    const trueVal = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(value);\n    if (this.state.visible !== trueVal) {\n      const popup = this.popup;\n      this.state.visible = trueVal;\n      if (popup && !popup.alignTarget) {\n        popup.alignTarget = typeof this.target === \"object\" ? this.target : document.querySelectorAll(this.target)[0];\n      }\n      if (this.state.visible) {\n        this.setAttribute(\"visible\", \"true\");\n        this.#show();\n        return;\n      }\n      if (popup)\n        popup.alignTarget = null;\n      this.removeAttribute(\"visible\");\n      this.#hide();\n    }\n  }\n  get visible() {\n    return this.state.visible;\n  }\n};\nIdsTooltip = __decorateClass([\n  (0,_core_ids_decorators__WEBPACK_IMPORTED_MODULE_1__.customElement)(\"ids-tooltip\"),\n  (0,_core_ids_decorators__WEBPACK_IMPORTED_MODULE_1__.scss)(_ids_tooltip_scss__WEBPACK_IMPORTED_MODULE_7__[\"default\"])\n], IdsTooltip);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9pZHMtdG9vbHRpcC9pZHMtdG9vbHRpcC50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBMkI7QUFDUztBQUNQO0FBRUg7QUFDRztBQUNGO0FBQ0o7QUFFSjtBQUVaO0FBRVAsTUFBTSxPQUFPLG1GQUFhO0FBQWIsRUFDWCx5RkFBZ0I7QUFBaEIsSUFDRSxxRkFBYztBQUFkLE1BQ0UseURBQVU7QUFBVixJQUNGO0FBQUEsRUFDRjtBQUNGO0FBYUEsSUFBcUIsYUFBckIsY0FBd0MsS0FBSztBQUFBLEVBQzNDLGNBQWM7QUFDWixVQUFNO0FBR04sU0FBSyxRQUFRO0FBQUEsTUFDWCxRQUFRO0FBQUEsTUFDUixTQUFTO0FBQUEsTUFDVCxTQUFTO0FBQUEsSUFDWDtBQUFBLEVBQ0Y7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUtBLG9CQUEwQjtBQUN4QixVQUFNLGtCQUFrQjtBQUN4QixTQUFLLFlBQVk7QUFBQSxFQUNuQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNQSxXQUFXLGFBQTRCO0FBQ3JDLFdBQU87QUFBQSxNQUNMLGtFQUFnQjtBQUFMLE1BQ1gsc0VBQW9CO0FBQVQsTUFDWCxzRUFBb0I7QUFBVCxNQUNYLGlFQUFlO0FBQUosTUFDWCxtRUFBaUI7QUFBTixNQUNYLG9FQUFrQjtBQUFQLE1BQ1gsb0VBQWtCO0FBQVAsSUFDYjtBQUFBLEVBQ0Y7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsV0FBbUI7QUFDakIsVUFBTSxXQUFXO0FBRWpCLFdBQU8sK0JBQStCLEtBQUssTUFBTSwrQkFBK0I7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNbEY7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFPQSx1QkFBNkI7QUFDM0IsU0FBSyxnQkFBZ0I7QUFDckIsUUFBSSxFQUFFLE9BQU8sS0FBSyxXQUFXLFdBQVc7QUFDdEMsV0FBSyxZQUFZLEtBQUssTUFBTTtBQUM1QjtB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SyxTQUNMLFNBQVMsaUJBQWlCLEtBQUssTUFBTSxFQUFFLENBQUM7QUFBQSxNQUM5QztBQUVBLFVBQUksS0FBSyxNQUFNLFNBQVM7QUFDdEIsYUFBSyxhQUFhLFdBQVcsTUFBTTtBQUNuQyxhQUFLLE1BQU07QUFDWDtBQUFBLE1BQ0Y7QUFFQSxVQUFJO0FBQU8sY0FBTSxjQUFjO0FBQy9CLFdBQUssZ0JBQWdCLFNBQVM7QUFDOUIsV0FBSyxNQUFNO0FBQUEsSUFDYjtBQUFBLEVBQ0Y7QUFBQSxFQUVBLElBQUksVUFBNEI7QUFBRSxXQUFPLEtBQUssTUFBTTtBQUFBLEVBQVM7QUFDL0Q7QUFoWXFCLGFBQXJCO0FBQUEsRUFGQyxtRUFBYSxDQUFDLGFBQWE7QUFBQSxFQUMzQiwwREFBSSxDQUFDLHlEQUFNO0FBQUEsR0FDUyIsInNvdXJjZXMiOlsid2VicGFjazovL2lkcy1lbnRlcnByaXNlLXdjLy4vc3JjL2NvbXBvbmVudHMvaWRzLXRvb2x0aXAvaWRzLXRvb2x0aXAudHM/NzE3ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhdHRyaWJ1dGVzIH0gZnJvbSAnLi4vLi4vY29yZS9pZHMtYXR0cmlidXRlcyc7XG5pbXBvcnQgeyBjdXN0b21FbGVtZW50LCBzY3NzIH0gZnJvbSAnLi4vLi4vY29yZS9pZHMtZGVjb3JhdG9ycyc7XG5pbXBvcnQgeyBzdHJpbmdUb0Jvb2wgfSBmcm9tICcuLi8uLi91dGlscy9pZHMtc3RyaW5nLXV0aWxzL2lkcy1zdHJpbmctdXRpbHMnO1xuXG5pbXBvcnQgSWRzVGhlbWVNaXhpbiBmcm9tICcuLi8uLi9taXhpbnMvaWRzLXRoZW1lLW1peGluL2lkcy10aGVtZS1taXhpbic7XG5pbXBvcnQgSWRzS2V5Ym9hcmRNaXhpbiBmcm9tICcuLi8uLi9taXhpbnMvaWRzLWtleWJvYXJkLW1peGluL2lkcy1rZXlib2FyZC1taXhpbic7XG5pbXBvcnQgSWRzRXZlbnRzTWl4aW4gZnJvbSAnLi4vLi4vbWl4aW5zL2lkcy1ldmVudHMtbWl4aW4vaWRzLWV2ZW50cy1taXhpbic7XG5pbXBvcnQgSWRzRWxlbWVudCBmcm9tICcuLi8uLi9jb3JlL2lkcy1lbGVtZW50JztcblxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL2lkcy10b29sdGlwLnNjc3MnO1xuaW1wb3J0IHR5cGUgSWRzUG9wdXAgZnJvbSAnLi4vaWRzLXBvcHVwL2lkcy1wb3B1cCc7XG5pbXBvcnQgJy4uL2lkcy1wb3B1cC9pZHMtcG9wdXAnO1xuXG5jb25zdCBCYXNlID0gSWRzVGhlbWVNaXhpbihcbiAgSWRzS2V5Ym9hcmRNaXhpbihcbiAgICBJZHNFdmVudHNNaXhpbihcbiAgICAgIElkc0VsZW1lbnRcbiAgICApXG4gIClcbik7XG5cbi8qKlxuICogSURTIFRvb2x0aXAgQ29tcG9uZW50XG4gKiBAdHlwZSB7SWRzVG9vbHRpcH1cbiAqIEBpbmhlcml0cyBJZHNFbGVtZW50XG4gKiBAbWl4ZXMgSWRzRXZlbnRzTWl4aW5cbiAqIEBtaXhlcyBJZHNLZXlib2FyZE1peGluXG4gKiBAbWl4ZXMgSWRzVGhlbWVNaXhpblxuICogQHBhcnQgdG9vbHRpcCAtIHRoZSB0b29sdGlwIGNvbnRhaW5lclxuICovXG5AY3VzdG9tRWxlbWVudCgnaWRzLXRvb2x0aXAnKVxuQHNjc3Moc3R5bGVzKVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSWRzVG9vbHRpcCBleHRlbmRzIEJhc2Uge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgLy8gU2V0dXAgaW5pdGlhbCBpbnRlcm5hbCBzdGF0ZXNcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgdGFyZ2V0OiBudWxsLFxuICAgICAgdHJpZ2dlcjogJ2hvdmVyJyxcbiAgICAgIHZpc2libGU6IGZhbHNlLFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogSW52b2tlZCBlYWNoIHRpbWUgdGhlIGN1c3RvbSBlbGVtZW50IGlzIGFwcGVuZGVkIGludG8gYSBkb2N1bWVudC1jb25uZWN0ZWQgZWxlbWVudCxcbiAgICovXG4gIGNvbm5lY3RlZENhbGxiYWNrKCk6IHZvaWQge1xuICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgdGhpcy4jdXBkYXRlQXJpYSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHByb3BlcnRpZXMvc2V0dGluZ3Mgd2UgaGFuZGxlIGFzIGdldHRlcnMvc2V0dGVyc1xuICAgKiBAcmV0dXJucyB7QXJyYXl9IFRoZSBzdXBwb3J0ZWQgc2V0dGluZ3MgaW4gYW4gYXJyYXlcbiAgICovXG4gIHN0YXRpYyBnZXQgYXR0cmlidXRlcygpOiBBcnJheTxzdHJpbmc+IHtcbiAgICByZXR1cm4gW1xuICAgICAgYXR0cmlidXRlcy5ERUxBWSxcbiAgICAgIGF0dHJpYnV0ZXMuS0VFUF9PUEVOLFxuICAgICAgYXR0cmlidXRlcy5QTEFDRU1FTlQsXG4gICAgICBhdHRyaWJ1dGVzLk1PREUsXG4gICAgICBhdHRyaWJ1dGVzLlRBUkdFVCxcbiAgICAgIGF0dHJpYnV0ZXMuVFJJR0dFUixcbiAgICAgIGF0dHJpYnV0ZXMuVklTSUJMRVxuICAgIF07XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIHRoZSBUZW1wbGF0ZSBmb3IgdGhlIGNvbXBvbmVudCBjb250ZW50c1xuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgdGVtcGxhdGVcbiAgICovXG4gIHRlbXBsYXRlKCk6IHN0cmluZyB7XG4gICAgY29uc3QgY3NzUGFydHMgPSAncG9wdXA6IHRvb2x0aXAtcG9wdXAsIGFycm93OiB0b29sdGlwLWFycm93LCBhcnJvdy10b3A6IHRvb2x0aXAtYXJyb3ctdG9wLCBhcnJvdy1yaWdodDogdG9vbHRpcC1hcnJvdy1yaWdodCwgYXJyb3ctYm90dG9tOiB0b29sdGlwLWFycm93LWJvdHRvbSwgYXJyb3ctbGVmdDogdG9vbHRpcC1hcnJvdy1sZWZ0JztcblxuICAgIHJldHVybiBgPGlkcy1wb3B1cCBwYXJ0PVwicG9wdXBcIiBpZD1cIiR7dGhpcy5pZCB8fCAnaWRzJ30tdG9vbHRpcFwiIGV4cG9ydHBhcnRzPVwiJHtjc3NQYXJ0c31cIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImlkcy10b29sdGlwXCIgc2xvdD1cImNvbnRlbnRcIiBwYXJ0PVwidG9vbHRpcFwiPlxuICAgICAgICAgIDxzbG90Pjwvc2xvdD5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvaWRzLXBvcHVwPlxuICAgICAgYDtcbiAgfVxuXG4gIC8qKlxuICAgKiBCaW5kIEludGVybmFsIEV2ZW50IEhhbmRsZXJzXG4gICAqIEBwcml2YXRlXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgI2F0dGFjaEV2ZW50SGFuZGxlcnMoKTogdm9pZCB7XG4gICAgdGhpcy5kZXRhY2hBbGxFdmVudHMoKTtcbiAgICBpZiAoISh0eXBlb2YgdGhpcy50YXJnZXQgPT09ICdzdHJpbmcnKSkge1xuICAgICAgdGhpcy4jYmluZEV2ZW50cyh0aGlzLnRhcmdldCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgbGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy50YXJnZXQpO1xuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBsaXN0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB0aGlzLiNiaW5kRXZlbnRzKGxpc3RbaV0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBCaW5kIHRoZSBldmVudHMgdG8gYSB0b29sdGlwIHRhcmdldC5cbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gdGFyZ2V0RWxlbSBUaGUgZWxlbWVudCB0byBhdHRhY2ggZXZlbnRzIHRvXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICAjYmluZEV2ZW50cyh0YXJnZXRFbGVtOiBhbnkpIHtcbiAgICAvLyBFdmVudHMgdG8gc2hvdyBvbiBob3ZlclxuICAgIGlmICh0aGlzLnRyaWdnZXIgPT09ICdob3ZlcicpIHtcbiAgICAgIHRoaXMub25FdmVudCgnaG92ZXJlbmQudG9vbHRpcCcsIHRhcmdldEVsZW0sIChlOiBFdmVudCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5wb3B1cCkge1xuICAgICAgICAgIGlmICghdGhpcy5wb3B1cD8uYWxpZ25UYXJnZXQpIHRoaXMucG9wdXAuYWxpZ25UYXJnZXQgPSBlLmN1cnJlbnRUYXJnZXQgYXMgSFRNTEVsZW1lbnQ7XG4gICAgICAgICAgdGhpcy52aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSwgeyBkZWxheTogdGhpcy5kZWxheSB9KTtcbiAgICAgIHRoaXMub25FdmVudCgnbW91c2VsZWF2ZS50b29sdGlwJywgdGFyZ2V0RWxlbSwgKCkgPT4ge1xuICAgICAgICB0aGlzLnZpc2libGUgPSBmYWxzZTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5vbkV2ZW50KCdjbGljay50b29sdGlwJywgdGFyZ2V0RWxlbSwgKCkgPT4ge1xuICAgICAgICB0aGlzLnZpc2libGUgPSBmYWxzZTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBMb25nIFByZXNzXG4gICAgICB0aGlzLm9uRXZlbnQoJ2xvbmdwcmVzcy50b29sdGlwJywgdGFyZ2V0RWxlbSwgKCkgPT4ge1xuICAgICAgICB0aGlzLnZpc2libGUgPSB0cnVlO1xuICAgICAgfSwgeyBkZWxheTogMTAwMCB9KTtcblxuICAgICAgLy8gS2V5Ym9hcmQgRm9jdXMgZXZlbnRcbiAgICAgIHRoaXMub25FdmVudCgna2V5Ym9hcmRmb2N1cy50b29sdGlwJywgdGFyZ2V0RWxlbSwgKCkgPT4ge1xuICAgICAgICB0aGlzLnZpc2libGUgPSB0cnVlO1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMub25FdmVudCgnZm9jdXNvdXQudG9vbHRpcCcsIHRhcmdldEVsZW0sICgpID0+IHtcbiAgICAgICAgdGhpcy52aXNpYmxlID0gZmFsc2U7XG4gICAgICB9KTtcblxuICAgICAgdGhpcy5vbkV2ZW50KCdjbGljay5wb3B1cCcsIHRoaXMucG9wdXAsICgpID0+IHtcbiAgICAgICAgdGhpcy52aXNpYmxlID0gdHJ1ZTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEV2ZW50cyB0byBzaG93IG9uIGNsaWNrXG4gICAgaWYgKHRoaXMudHJpZ2dlciA9PT0gJ2NsaWNrJykge1xuICAgICAgdGhpcy5vbkV2ZW50KCdjbGljay50b29sdGlwJywgdGFyZ2V0RWxlbSwgKGU6IEV2ZW50KSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnBvcHVwKSB7XG4gICAgICAgICAgdGhpcy5wb3B1cC5hbGlnblRhcmdldCA9IGUuY3VycmVudFRhcmdldCBhcyBIVE1MRWxlbWVudDtcbiAgICAgICAgICBpZiAodGhpcy52aXNpYmxlKSB7XG4gICAgICAgICAgICB0aGlzLnZpc2libGUgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy52aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHRoaXMub25FdmVudCgnY2xpY2sucG9wdXAnLCB0aGlzLnBvcHVwLCAoKSA9PiB7XG4gICAgICAgIHRoaXMudmlzaWJsZSA9IGZhbHNlO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gRXZlbnRzIHRvIHNob3cgb24gZm9jdXNcbiAgICBpZiAodGhpcy50cmlnZ2VyID09PSAnZm9jdXMnKSB7XG4gICAgICB0aGlzLm9uRXZlbnQoJ2ZvY3VzaW4udG9vbHRpcCcsIHRhcmdldEVsZW0sIChlOiBFdmVudCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5wb3B1cCkge1xuICAgICAgICAgIHRoaXMucG9wdXAuYWxpZ25UYXJnZXQgPSBlLmN1cnJlbnRUYXJnZXQgYXMgSFRNTEVsZW1lbnQ7XG4gICAgICAgICAgdGhpcy52aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHRoaXMub25FdmVudCgnZm9jdXNvdXQudG9vbHRpcCcsIHRhcmdldEVsZW0sICgpID0+IHtcbiAgICAgICAgdGhpcy52aXNpYmxlID0gZmFsc2U7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2V0dXAgdGhlIHBvcHVwXG4gICAqIEBwcml2YXRlXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgI2NvbmZpZ3VyZVBvcHVwKCk6IHZvaWQge1xuICAgIGNvbnN0IHBvcHVwID0gdGhpcy5wb3B1cDtcblxuICAgIC8vIFBvcHVwIHNldHRpbmdzIC8gY29uZmlnXG4gICAgaWYgKHBvcHVwKSB7XG4gICAgICBwb3B1cC50eXBlID0gJ3Rvb2x0aXAnO1xuICAgICAgcG9wdXAuYWxpZ24gPSBgJHt0aGlzLnBsYWNlbWVudH0sIGNlbnRlcmA7XG4gICAgICBwb3B1cC5hcnJvdyA9IHRoaXMucGxhY2VtZW50O1xuXG4gICAgICBpZiAodGhpcy5wbGFjZW1lbnQgPT09ICd0b3AnIHx8IHRoaXMucGxhY2VtZW50ID09PSAnYm90dG9tJykge1xuICAgICAgICBwb3B1cC5zZXRQb3NpdGlvbigwLCAxMCk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5wbGFjZW1lbnQgPT09ICdsZWZ0JyB8fCB0aGlzLnBsYWNlbWVudCA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICBwb3B1cC5zZXRQb3NpdGlvbigxMCwgMCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSB0aGUgYXJpYSBhdHRyaWJ1dGVzIHdpdGggdGhlIGNvcnJlY3QgY29udGVudHNcbiAgICogQHByaXZhdGVcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICAjdXBkYXRlQXJpYSgpOiB2b2lkIHtcbiAgICAvLyBGb3IgZWxsaXBzaXMgYmFzZWQgdG9vbHRpcHMgd2UgZG9udCBkbyB0aGlzXG4gICAgaWYgKHRoaXMuc3RhdGU/Lm5vQXJpYSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHBvcHVwID0gdGhpcy5wb3B1cDtcbiAgICBpZiAocG9wdXApIHtcbiAgICAgIHBvcHVwLmFsaWduVGFyZ2V0ID0gdHlwZW9mIHRoaXMudGFyZ2V0ID09PSAnb2JqZWN0J1xuICAgICAgICA/IHRoaXMudGFyZ2V0XG4gICAgICAgIDogZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh0aGlzLnRhcmdldClbMF07XG5cbiAgICAgIGNvbnN0IGlkID0gYCR7dGhpcy5pZCB8fCAnaWRzJ30tdG9vbHRpcGA7XG4gICAgICBjb25zdCBhbGlnblRhcmdldCA9IHBvcHVwPy5hbGlnblRhcmdldD8ucXVlcnlTZWxlY3RvcihgIyR7aWR9YCk7XG4gICAgICBpZiAoYWxpZ25UYXJnZXQpIHtcbiAgICAgICAgYWxpZ25UYXJnZXQudGV4dENvbnRlbnQgPSB0aGlzLnRleHRDb250ZW50O1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChwb3B1cC5hbGlnblRhcmdldCkge1xuICAgICAgICBjb25zdCBhcmlhU3BhbiA9IGA8aWRzLXRleHQgaWQ9XCIke2lkfVwiIGF1ZGlibGU9XCJ0cnVlXCI+JHt0aGlzLnRleHRDb250ZW50fTwvaWRzLXRleHQ+YDtcbiAgICAgICAgcG9wdXAuYWxpZ25UYXJnZXQuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCBhcmlhU3Bhbik7XG4gICAgICAgIHBvcHVwLmFsaWduVGFyZ2V0LnNldEF0dHJpYnV0ZSgnYXJpYS1kZXNjcmliZWRieScsIGAjJHtpZH1gKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2hvdyB0aGUgdG9vbHRpcCAodXNlIHZpc2libGUgZm9yIHB1YmxpYyBBUEkpXG4gICAqIEBwcml2YXRlXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxuICAgKi9cbiAgYXN5bmMgI3Nob3coKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgLy8gVHJpZ2dlciBhIHZldG8tYWJsZSBgYmVmb3Jlc2hvd2AgZXZlbnQuXG4gICAgbGV0IGNhblNob3cgPSB0cnVlO1xuICAgIGNvbnN0IGJlZm9yZVNob3dSZXNwb25zZSA9ICh2ZXRvOiBhbnkpID0+IHtcbiAgICAgIGNhblNob3cgPSAhIXZldG87XG4gICAgfTtcblxuICAgIC8vIFRyaWdnZXIgYW4gYXN5bmMgY2FsbGJhY2sgZm9yIGNvbnRlbnRzXG4gICAgaWYgKHRoaXMuc3RhdGUuYmVmb3JlU2hvdykge1xuICAgICAgY29uc3Qgc3R1ZmYgPSBhd2FpdCB0aGlzLnN0YXRlLmJlZm9yZVNob3coKTtcbiAgICAgIHRoaXMudGV4dENvbnRlbnQgPSBzdHVmZjtcbiAgICAgIHRoaXMuI3VwZGF0ZUFyaWEoKTtcbiAgICB9XG5cbiAgICB0aGlzLnRyaWdnZXJFdmVudCgnYmVmb3Jlc2hvdycsIHRoaXMsIHtcbiAgICAgIGRldGFpbDoge1xuICAgICAgICBlbGVtOiB0aGlzLFxuICAgICAgICByZXNwb25zZTogYmVmb3JlU2hvd1Jlc3BvbnNlXG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoIWNhblNob3cpIHtcbiAgICAgIHRoaXMudmlzaWJsZSA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFNob3cgdGhlIHBvcHVwXG4gICAgdGhpcy4jY29uZmlndXJlUG9wdXAoKTtcbiAgICBjb25zdCBwb3B1cCA9IHRoaXMucG9wdXA7XG4gICAgaWYgKHBvcHVwKSB7XG4gICAgICBwb3B1cC52aXNpYmxlID0gdHJ1ZTtcbiAgICAgIHBvcHVwLnBsYWNlKCk7XG4gICAgICB0aGlzLnRyaWdnZXJFdmVudCgnc2hvdycsIHRoaXMsIHsgZGV0YWlsOiB7IGVsZW06IHRoaXMgfSB9KTtcbiAgICAgIHRoaXMudHJpZ2dlckV2ZW50KCdhZnRlcnNob3cnLCB0aGlzLCB7IGRldGFpbDogeyBlbGVtOiB0aGlzIH0gfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNob3cgdGhlIHRvb2x0aXAgICh1c2UgdmlzaWJsZSBmb3IgcHVibGljIEFQSSlcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICAjaGlkZSgpOiB2b2lkIHtcbiAgICBjb25zdCBwb3B1cCA9IHRoaXMucG9wdXA7XG5cbiAgICBpZiAocG9wdXApIHtcbiAgICAgIHBvcHVwLnZpc2libGUgPSBmYWxzZTtcbiAgICAgIHRoaXMudHJpZ2dlckV2ZW50KCdoaWRlJywgdGhpcywgeyBkZXRhaWw6IHsgZWxlbTogdGhpcyB9IH0pO1xuICAgICAgdGhpcy50cmlnZ2VyRXZlbnQoJ2FmdGVyaGlkZScsIHRoaXMsIHsgZGV0YWlsOiB7IGVsZW06IHRoaXMgfSB9KTtcbiAgICAgIHRoaXMub25IaWRlKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZvciB3aGVuIGhpZGUgaXMgdHJpZ2dlcmVkXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgb25IaWRlKCkge1xuICB9XG5cbiAgLyoqXG4gICAqIEByZWFkb25seVxuICAgKiBAcmV0dXJucyB7SWRzUG9wdXAgfCB1bmRlZmluZWQgfCBudWxsfSByZWZlcmVuY2UgdG8gdGhlIGludGVybmFsIElkc1BvcHVwIGNvbXBvbmVudFxuICAgKi9cbiAgZ2V0IHBvcHVwKCk6IElkc1BvcHVwIHwgdW5kZWZpbmVkIHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMuc2hhZG93Um9vdD8ucXVlcnlTZWxlY3RvcignaWRzLXBvcHVwJyk7XG4gIH1cblxuICAvKipcbiAgICogQW4gYXN5bmMgZnVuY3Rpb24gdGhhdCBmaXJlcyBhcyB0aGUgdG9vbHRpcCBpcyBzaG93aW5nIGFsbG93aW5nIHlvdSB0byBzZXQgY29udGVudHMuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGFzeW5jIGZ1bmN0aW9uXG4gICAqL1xuICBzZXQgYmVmb3JlU2hvdyhmdW5jOiAoKSA9PiBQcm9taXNlPHN0cmluZz4pIHtcbiAgICB0aGlzLnN0YXRlLmJlZm9yZVNob3cgPSBmdW5jO1xuICB9XG5cbiAgZ2V0IGJlZm9yZVNob3coKTogKCkgPT4gUHJvbWlzZTxzdHJpbmc+IHsgcmV0dXJuIHRoaXMuc3RhdGUuYmVmb3JlU2hvdzsgfVxuXG4gIC8qKlxuICAgKiBTZXQgaG93IGxvbmcgYWZ0ZXIgaG92ZXIgeW91IHNob3VsZCBkZWxheSBiZWZvcmUgc2hvd2luZ1xuICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bWJlcn0gdmFsdWUgVGhlIGFtb3VudCBpbiBtcyB0byBkZWxheVxuICAgKi9cbiAgc2V0IGRlbGF5KHZhbHVlOiBzdHJpbmcgfCBudW1iZXIpIHtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdkZWxheScsIHZhbHVlLnRvU3RyaW5nKCkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKCdkZWxheScpO1xuICB9XG5cbiAgZ2V0IGRlbGF5KCk6IHN0cmluZyB8IG51bWJlciB7IHJldHVybiBOdW1iZXIodGhpcy5nZXRBdHRyaWJ1dGUoJ2RlbGF5JykpIHx8IDUwMDsgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSB0b29sdGlwIHBsYWNlbWVudCBiZXR3ZWVuIGxlZnQsIHJpZ2h0LCB0b3AsIGJvdHRvbVxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgVGhlIHBsYWNlbWVudCBvZiB0aGUgdG9vbHRpcFxuICAgKi9cbiAgc2V0IHBsYWNlbWVudCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5zdGF0ZS5wbGFjZW1lbnQgPSB2YWx1ZTtcblxuICAgIGlmICh2YWx1ZSkge1xuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ3BsYWNlbWVudCcsIHZhbHVlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZSgncGxhY2VtZW50Jyk7XG4gIH1cblxuICBnZXQgcGxhY2VtZW50KCk6IHN0cmluZyB7IHJldHVybiB0aGlzLmdldEF0dHJpYnV0ZSgncGxhY2VtZW50JykgfHwgJ3RvcCc7IH1cblxuICAvKipcbiAgICogU2V0IHRoZSB0YXJnZXQgZWxlbWVudCBmb3IgdGhlIHRvb2x0aXBcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gdmFsdWUgVGhlIHRhcmdldCBlbGVtZW50IHNlbGVjdG9yXG4gICAqL1xuICBzZXQgdGFyZ2V0KHZhbHVlOiBhbnkpIHtcbiAgICB0aGlzLnN0YXRlLnRhcmdldCA9IHZhbHVlO1xuXG4gICAgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKCd0YXJnZXQnKTtcbiAgICAgIHRoaXMuI2F0dGFjaEV2ZW50SGFuZGxlcnMoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ3RhcmdldCcsIHZhbHVlKTtcbiAgICAgIHRoaXMuI2F0dGFjaEV2ZW50SGFuZGxlcnMoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZSgndGFyZ2V0Jyk7XG4gICAgdGhpcy4jYXR0YWNoRXZlbnRIYW5kbGVycygpO1xuICB9XG5cbiAgZ2V0IHRhcmdldCgpOiBhbnkgeyByZXR1cm4gdGhpcy5zdGF0ZS50YXJnZXQ7IH1cblxuICAvKipcbiAgICogU2V0IHRyaWdnZXIgYWdhaW5zIHRoZSB0YXJnZXQgYmV0d2VlbiBob3ZlciwgY2xpY2sgYW5kIGZvY3VzXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSBUaGUgdHJpZ2dlciBtb2RlIHRvIHVzZVxuICAgKi9cbiAgc2V0IHRyaWdnZXIodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuc3RhdGUudHJpZ2dlciA9IHZhbHVlO1xuXG4gICAgaWYgKHRoaXMuc3RhdGUudHJpZ2dlcikge1xuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ3RyaWdnZXInLCB0aGlzLnN0YXRlLnRyaWdnZXIpO1xuICAgICAgdGhpcy4jYXR0YWNoRXZlbnRIYW5kbGVycygpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKCd0cmlnZ2VyJyk7XG4gICAgdGhpcy4jYXR0YWNoRXZlbnRIYW5kbGVycygpO1xuICB9XG5cbiAgZ2V0IHRyaWdnZXIoKTogc3RyaW5nIHsgcmV0dXJuIHRoaXMuc3RhdGUudHJpZ2dlciB8fCAnaG92ZXInOyB9XG5cbiAgLyoqXG4gICAqIFNldCB0b29sdGlwIGltbWVkaWF0ZWx5IHRvIHZpc2libGUvaW52aXNpYmxlXG4gICAqIEBwYXJhbSB7c3RyaW5nfGJvb2xlYW59IHZhbHVlIFRoZSB0YXJnZXQgZWxlbWVudCBzZWxlY3RvclxuICAgKi9cbiAgc2V0IHZpc2libGUodmFsdWU6IHN0cmluZyB8IGJvb2xlYW4pIHtcbiAgICBjb25zdCB0cnVlVmFsID0gc3RyaW5nVG9Cb29sKHZhbHVlKTtcbiAgICBpZiAodGhpcy5zdGF0ZS52aXNpYmxlICE9PSB0cnVlVmFsKSB7XG4gICAgICBjb25zdCBwb3B1cCA9IHRoaXMucG9wdXA7XG4gICAgICB0aGlzLnN0YXRlLnZpc2libGUgPSB0cnVlVmFsO1xuXG4gICAgICBpZiAocG9wdXAgJiYgIXBvcHVwLmFsaWduVGFyZ2V0KSB7XG4gICAgICAgIHBvcHVwLmFsaWduVGFyZ2V0ID0gdHlwZW9mIHRoaXMudGFyZ2V0ID09PSAnb2JqZWN0J1xuICAgICAgICAgID8gdGhpcy50YXJnZXRcbiAgICAgICAgICA6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy50YXJnZXQpWzBdO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5zdGF0ZS52aXNpYmxlKSB7XG4gICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCd2aXNpYmxlJywgJ3RydWUnKTtcbiAgICAgICAgdGhpcy4jc2hvdygpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChwb3B1cCkgcG9wdXAuYWxpZ25UYXJnZXQgPSBudWxsO1xuICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUoJ3Zpc2libGUnKTtcbiAgICAgIHRoaXMuI2hpZGUoKTtcbiAgICB9XG4gIH1cblxuICBnZXQgdmlzaWJsZSgpOiBzdHJpbmcgfCBib29sZWFuIHsgcmV0dXJuIHRoaXMuc3RhdGUudmlzaWJsZTsgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/components/ids-tooltip/ids-tooltip.ts\n");

/***/ }),

/***/ "./src/mixins/ids-keyboard-mixin/ids-keyboard-mixin.ts":
/*!*************************************************************!*\
  !*** ./src/mixins/ids-keyboard-mixin/ids-keyboard-mixin.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ids_keyboard_mixin_default)\n/* harmony export */ });\nconst IdsKeyboardMixin = (superclass) => class extends superclass {\n  hotkeys = null;\n  pressedKeys = null;\n  keyDownHandler;\n  keyUpHandler;\n  constructor(...args) {\n    super(...args);\n    this.initKeyboardHandlers();\n  }\n  static get attributes() {\n    return [\n      ...superclass.attributes\n    ];\n  }\n  disconnectedCallback() {\n    super.disconnectedCallback?.();\n    this.detachAllListeners();\n    this.hotkeys = null;\n    this.pressedKeys = null;\n  }\n  /**\n   * Initializes the keyboard management system with the current object\n   * @private\n   */\n  initKeyboardHandlers() {\n    this.hotkeys = /* @__PURE__ */ new Map();\n    this.pressedKeys = /* @__PURE__ */ new Map();\n    this.keyDownHandler = (e) => {\n      this.press(e.key);\n      this.dispatchHotkeys(e);\n    };\n    this.onEvent(\"keydown.keyboard\", this, this.keyDownHandler);\n    this.keyUpHandler = (e) => {\n      this.unpress(e.key);\n    };\n    this.onEvent(\"keyup.keyboard\", this, this.keyUpHandler);\n  }\n  /**\n   * Add a key to the pressedKeys Map.\n   * @private\n   * @param {string} key a string representing a {KeyboardEvent.key} that was pressed\n   * @returns {Map} the current set of pressed keys\n   */\n  press(key) {\n    return this.pressedKeys?.set(`${key}`, true);\n  }\n  /**\n   * Add a listener for a key or set of keys\n   * @param {Array|string} keycode An array of all matchinng keycodes\n   * @param {HTMLElement} elem The object with the listener attached\n   * @param {Function} callback The call back when this combination is met\n   */\n  listen(keycode, elem, callback) {\n    const keycodes = Array.isArray(keycode) ? keycode : [keycode];\n    for (const c of keycodes) {\n      this.hotkeys?.set(`${c}`, callback);\n    }\n  }\n  /**\n   * Removes a single applied listener for a hotkey combination\n   * @param {string} key An array of all matching keycodes\n   * @returns {Map} the current set of hotkeys\n   */\n  unlisten(key) {\n    return this.hotkeys?.delete(`${key}`);\n  }\n  /**\n   * Remove a key from the pressedKeys map.\n   * @private\n   * @param {string} key a string representing a {KeyboardEvent.key} that is no longer active\n   * @returns {boolean} whether or not the key had been previously logged as \"pressed\"\n   */\n  unpress(key) {\n    return this.pressedKeys?.delete(`${key}`);\n  }\n  /**\n   * Dispatch an event on any active listeners\n   * @private\n   * @param {object} e a string representing a {KeyboardEvent.key} that is no longer active\n   * @returns {void}\n   */\n  dispatchHotkeys(e) {\n    this.hotkeys?.forEach((value, key) => {\n      if (key.split(\",\").indexOf(e.key) > -1) {\n        value(e);\n      }\n    });\n  }\n  /**\n   * Remove all handlers and clear memory\n   */\n  detachAllListeners() {\n    if (this.keyDownHandler && this.offEvent) {\n      this.offEvent(\"keydown.keyboard\", this, this.keyDownHandler);\n      delete this.keyDownHandler;\n    }\n    if (this.keyUpHandler && this.offEvent) {\n      this.offEvent(\"keyup.keyboard\", this, this.keyUpHandler);\n      delete this.keyUpHandler;\n    }\n  }\n};\nvar ids_keyboard_mixin_default = IdsKeyboardMixin;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbWl4aW5zL2lkcy1rZXlib2FyZC1taXhpbi9pZHMta2V5Ym9hcmQtbWl4aW4udHMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQWlCQSxNQUFNLG1CQUFtQixDQUF3QixlQUFrQixjQUFjLFdBQzdDO0FBQUEsRUFDbEMsVUFBZ0M7QUFBQSxFQUVoQyxjQUFvQztBQUFBLEVBRXBDO0FBQUEsRUFFQTtBQUFBLEVBRUEsZUFBZSxNQUFhO0FBQzFCLFVBQU0sR0FBRyxJQUFJO0FBQ2IsU0FBSyxxQkFBcUI7QUFBQSxFQUM1QjtBQUFBLEVBRUEsV0FBVyxhQUFhO0FBQ3RCLFdBQU87QUFBQSxNQUNMLEdBQUksV0FBbUI7QUFBQSxJQUN6QjtBQUFBLEVBQ0Y7QUFBQSxFQUVBLHVCQUE2QjtBQUMzQixVQUFNLHVCQUF1QjtBQUM3QixTQUFLLG1CQUFtQjtBQUN4QixTQUFLLFVBQVU7QUFDZixTQUFLLGNBQWM7QUFBQSxFQUNyQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNQSx1QkFBdUI7QUFDckIsU0FBSyxVQUFVLG9CQUFJLElBQUk7QUFDdkIsU0FBSyxjQUFjLG9CQUFJLElBQUk7QUFFM0IsU0FBSyxpQkFBaUIsQ0FBQyxNQUFxQjtBQUMxQyxXQUFLLE1BQU0sRUFBRSxHQUFHO0FBQ2hCLFdBQUssZ0JBQWdCLENBQUM7QUFBQSxJQUN4QjtBQUNBLFNBQUssUUFBUSxvQkFBb0IsTUFBTSxLQUFLLGNBQWM7QUFFMUQsU0FBSyxlQUFlLENBQUMsTUFBcUI7QUFDeEMsV0FBSyxRQUFRLEVBQUUsR0FBRztBQUFBLElBQ3BCO0FBQ0EsU0FBSyxRQUFRLGtCQUFrQixNQUFNLEtBQUssWUFBWTtBQUFBLEVBQ3hEO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFRQSxNQUFNLEtBQWE7QUFDakIsV0FBTyxLQUFLLGFBQWEsSUFBSSxHQUFHLE9BQU8sSUFBSTtBQUFBLEVBQzdDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFRQSxPQUFPLFNBQWlDLE1BQXlCLFVBQW1CO0FBQ2xGLFVBQU0sV0FBVyxNQUFNLFFBQVEsT0FBTyxJQUFJLFVBQVUsQ0FBQyxPQUFPO0FBRTVELGVBQVcsS0FBSyxVQUFVO0FBQ3hCLFdBQUssU0FBUyxJQUFJLEdBQUcsS0FBSyxRQUFRO0FBQUEsSUFDcEM7QUFBQSxFQUNGO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBT0EsU0FBUyxLQUFhO0FBQ3BCLFdBQU8sS0FBSyxTQUFTLE9BQU8sR0FBRyxLQUFLO0FBQUEsRUFDdEM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVFBLFFBQVEsS0FBYTtBQUNuQixXQUFPLEtBQUssYUFBYSxPQUFPLEdBQUcsS0FBSztBQUFBLEVBQzFDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFRQSxnQkFBZ0IsR0FBa0I7QUFDaEMsU0FBSyxTQUFTLFFBQVEsQ0FBQyxPQUFZLFFBQWE7QUFDOUMsVUFBSSxJQUFJLE1BQU0sR0FBRyxFQUFFLFFBQVEsRUFBRSxHQUFHLElBQUksSUFBSTtBQUN0QyxjQUFNLENBQUM7QUFBQSxNQUNUO0FBQUEsSUFDRixDQUFDO0FBQUEsRUFDSDtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS0EscUJBQXFCO0FBQ25CLFFBQUksS0FBSyxrQkFBa0IsS0FBSyxVQUFVO0FBQ3hDLFdBQUssU0FBUyxvQkFBb0IsTUFBTSxLQUFLLGNBQWM7QUFDM0QsYUFBTyxLQUFLO0FBQUEsSUFDZDtBQUNBLFFBQUksS0FBSyxnQkFBZ0IsS0FBSyxVQUFVO0FBQ3RDLFdBQUssU0FBUyxrQkFBa0IsTUFBTSxLQUFLLFlBQVk7QUFDdkQsYUFBTyxLQUFLO0FBQUEsSUFDZDtBQUFBLEVBQ0Y7QUFDRjtBQUVBLElBQU8sNkJBQVEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pZHMtZW50ZXJwcmlzZS13Yy8uL3NyYy9taXhpbnMvaWRzLWtleWJvYXJkLW1peGluL2lkcy1rZXlib2FyZC1taXhpbi50cz9mZjM0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElkc0NvbnN0cnVjdG9yIH0gZnJvbSAnLi4vLi4vY29yZS9pZHMtZWxlbWVudCc7XG5pbXBvcnQgeyBFdmVudHNNaXhpbkludGVyZmFjZSB9IGZyb20gJy4uL2lkcy1ldmVudHMtbWl4aW4vaWRzLWV2ZW50cy1taXhpbic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgS2V5Ym9hcmRNaXhpbkludGVyZmFjZSB7XG4gIGxpc3RlbihrZXljb2RlOiBBcnJheTxzdHJpbmc+IHwgc3RyaW5nLCBlbGVtOiBIVE1MRWxlbWVudCB8IGFueSwgY2FsbGJhY2s6IHVua25vd24pOiB2b2lkO1xuICB1bmxpc3RlbihrZXk6IHN0cmluZyk6IHZvaWQ7XG4gIGRldGFjaEFsbExpc3RlbmVycygpOiB2b2lkO1xuICBwcmVzcyhrZXk6IHN0cmluZyk6IHZvaWRcbn1cblxudHlwZSBDb25zdHJhaW50cyA9IElkc0NvbnN0cnVjdG9yPEV2ZW50c01peGluSW50ZXJmYWNlPjtcblxuLyoqXG4gKiBIYW5kbGUga2V5Ym9hcmQgc2hvcnRjdXRzIGFuZCBwcmVzc2VkIGRvd24ga2V5c1xuICogQHBhcmFtIHthbnl9IHN1cGVyY2xhc3MgQWNjZXB0cyBhIHN1cGVyY2xhc3MgYW5kIGNyZWF0ZXMgYSBuZXcgc3ViY2xhc3MgZnJvbSBpdFxuICogQHJldHVybnMge2FueX0gVGhlIGV4dGVuZGVkIG9iamVjdFxuICovXG5jb25zdCBJZHNLZXlib2FyZE1peGluID0gPFQgZXh0ZW5kcyBDb25zdHJhaW50cz4oc3VwZXJjbGFzczogVCkgPT4gY2xhc3MgZXh0ZW5kcyBzdXBlcmNsYXNzXG4gIGltcGxlbWVudHMgS2V5Ym9hcmRNaXhpbkludGVyZmFjZSB7XG4gIGhvdGtleXM6IE1hcDxhbnksIGFueT4gfCBudWxsID0gbnVsbDtcblxuICBwcmVzc2VkS2V5czogTWFwPGFueSwgYW55PiB8IG51bGwgPSBudWxsO1xuXG4gIGtleURvd25IYW5kbGVyPzogKGU6IEtleWJvYXJkRXZlbnQpID0+IHZvaWQ7XG5cbiAga2V5VXBIYW5kbGVyPzogKGU6IEtleWJvYXJkRXZlbnQpID0+IHZvaWQ7XG5cbiAgY29uc3RydWN0b3IoLi4uYXJnczogYW55W10pIHtcbiAgICBzdXBlciguLi5hcmdzKTtcbiAgICB0aGlzLmluaXRLZXlib2FyZEhhbmRsZXJzKCk7XG4gIH1cblxuICBzdGF0aWMgZ2V0IGF0dHJpYnV0ZXMoKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIC4uLihzdXBlcmNsYXNzIGFzIGFueSkuYXR0cmlidXRlcyxcbiAgICBdO1xuICB9XG5cbiAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKTogdm9pZCB7XG4gICAgc3VwZXIuZGlzY29ubmVjdGVkQ2FsbGJhY2s/LigpO1xuICAgIHRoaXMuZGV0YWNoQWxsTGlzdGVuZXJzKCk7XG4gICAgdGhpcy5ob3RrZXlzID0gbnVsbDtcbiAgICB0aGlzLnByZXNzZWRLZXlzID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUga2V5Ym9hcmQgbWFuYWdlbWVudCBzeXN0ZW0gd2l0aCB0aGUgY3VycmVudCBvYmplY3RcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGluaXRLZXlib2FyZEhhbmRsZXJzKCkge1xuICAgIHRoaXMuaG90a2V5cyA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLnByZXNzZWRLZXlzID0gbmV3IE1hcCgpO1xuXG4gICAgdGhpcy5rZXlEb3duSGFuZGxlciA9IChlOiBLZXlib2FyZEV2ZW50KSA9PiB7XG4gICAgICB0aGlzLnByZXNzKGUua2V5KTtcbiAgICAgIHRoaXMuZGlzcGF0Y2hIb3RrZXlzKGUpO1xuICAgIH07XG4gICAgdGhpcy5vbkV2ZW50KCdrZXlkb3duLmtleWJvYXJkJywgdGhpcywgdGhpcy5rZXlEb3duSGFuZGxlcik7XG5cbiAgICB0aGlzLmtleVVwSGFuZGxlciA9IChlOiBLZXlib2FyZEV2ZW50KSA9PiB7XG4gICAgICB0aGlzLnVucHJlc3MoZS5rZXkpO1xuICAgIH07XG4gICAgdGhpcy5vbkV2ZW50KCdrZXl1cC5rZXlib2FyZCcsIHRoaXMsIHRoaXMua2V5VXBIYW5kbGVyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSBrZXkgdG8gdGhlIHByZXNzZWRLZXlzIE1hcC5cbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBhIHN0cmluZyByZXByZXNlbnRpbmcgYSB7S2V5Ym9hcmRFdmVudC5rZXl9IHRoYXQgd2FzIHByZXNzZWRcbiAgICogQHJldHVybnMge01hcH0gdGhlIGN1cnJlbnQgc2V0IG9mIHByZXNzZWQga2V5c1xuICAgKi9cbiAgcHJlc3Moa2V5OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5wcmVzc2VkS2V5cz8uc2V0KGAke2tleX1gLCB0cnVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSBsaXN0ZW5lciBmb3IgYSBrZXkgb3Igc2V0IG9mIGtleXNcbiAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IGtleWNvZGUgQW4gYXJyYXkgb2YgYWxsIG1hdGNoaW5uZyBrZXljb2Rlc1xuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtIFRoZSBvYmplY3Qgd2l0aCB0aGUgbGlzdGVuZXIgYXR0YWNoZWRcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGNhbGwgYmFjayB3aGVuIHRoaXMgY29tYmluYXRpb24gaXMgbWV0XG4gICAqL1xuICBsaXN0ZW4oa2V5Y29kZTogQXJyYXk8c3RyaW5nPiB8IHN0cmluZywgZWxlbTogSFRNTEVsZW1lbnQgfCBhbnksIGNhbGxiYWNrOiB1bmtub3duKSB7XG4gICAgY29uc3Qga2V5Y29kZXMgPSBBcnJheS5pc0FycmF5KGtleWNvZGUpID8ga2V5Y29kZSA6IFtrZXljb2RlXTtcblxuICAgIGZvciAoY29uc3QgYyBvZiBrZXljb2Rlcykge1xuICAgICAgdGhpcy5ob3RrZXlzPy5zZXQoYCR7Y31gLCBjYWxsYmFjayk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYSBzaW5nbGUgYXBwbGllZCBsaXN0ZW5lciBmb3IgYSBob3RrZXkgY29tYmluYXRpb25cbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBBbiBhcnJheSBvZiBhbGwgbWF0Y2hpbmcga2V5Y29kZXNcbiAgICogQHJldHVybnMge01hcH0gdGhlIGN1cnJlbnQgc2V0IG9mIGhvdGtleXNcbiAgICovXG4gIHVubGlzdGVuKGtleTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuaG90a2V5cz8uZGVsZXRlKGAke2tleX1gKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgYSBrZXkgZnJvbSB0aGUgcHJlc3NlZEtleXMgbWFwLlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IGEgc3RyaW5nIHJlcHJlc2VudGluZyBhIHtLZXlib2FyZEV2ZW50LmtleX0gdGhhdCBpcyBubyBsb25nZXIgYWN0aXZlXG4gICAqIEByZXR1cm5zIHtib29sZWFufSB3aGV0aGVyIG9yIG5vdCB0aGUga2V5IGhhZCBiZWVuIHByZXZpb3VzbHkgbG9nZ2VkIGFzIFwicHJlc3NlZFwiXG4gICAqL1xuICB1bnByZXNzKGtleTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMucHJlc3NlZEtleXM/LmRlbGV0ZShgJHtrZXl9YCk7XG4gIH1cblxuICAvKipcbiAgICogRGlzcGF0Y2ggYW4gZXZlbnQgb24gYW55IGFjdGl2ZSBsaXN0ZW5lcnNcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtvYmplY3R9IGUgYSBzdHJpbmcgcmVwcmVzZW50aW5nIGEge0tleWJvYXJkRXZlbnQua2V5fSB0aGF0IGlzIG5vIGxvbmdlciBhY3RpdmVcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBkaXNwYXRjaEhvdGtleXMoZTogS2V5Ym9hcmRFdmVudCkge1xuICAgIHRoaXMuaG90a2V5cz8uZm9yRWFjaCgodmFsdWU6IGFueSwga2V5OiBhbnkpID0+IHtcbiAgICAgIGlmIChrZXkuc3BsaXQoJywnKS5pbmRleE9mKGUua2V5KSA+IC0xKSB7XG4gICAgICAgIHZhbHVlKGUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhbGwgaGFuZGxlcnMgYW5kIGNsZWFyIG1lbW9yeVxuICAgKi9cbiAgZGV0YWNoQWxsTGlzdGVuZXJzKCkge1xuICAgIGlmICh0aGlzLmtleURvd25IYW5kbGVyICYmIHRoaXMub2ZmRXZlbnQpIHtcbiAgICAgIHRoaXMub2ZmRXZlbnQoJ2tleWRvd24ua2V5Ym9hcmQnLCB0aGlzLCB0aGlzLmtleURvd25IYW5kbGVyKTtcbiAgICAgIGRlbGV0ZSB0aGlzLmtleURvd25IYW5kbGVyO1xuICAgIH1cbiAgICBpZiAodGhpcy5rZXlVcEhhbmRsZXIgJiYgdGhpcy5vZmZFdmVudCkge1xuICAgICAgdGhpcy5vZmZFdmVudCgna2V5dXAua2V5Ym9hcmQnLCB0aGlzLCB0aGlzLmtleVVwSGFuZGxlcik7XG4gICAgICBkZWxldGUgdGhpcy5rZXlVcEhhbmRsZXI7XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBJZHNLZXlib2FyZE1peGluO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/mixins/ids-keyboard-mixin/ids-keyboard-mixin.ts\n");

/***/ }),

/***/ "./src/mixins/ids-tooltip-mixin/ids-tooltip-mixin.ts":
/*!***********************************************************!*\
  !*** ./src/mixins/ids-tooltip-mixin/ids-tooltip-mixin.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ids_tooltip_mixin_default)\n/* harmony export */ });\n/* harmony import */ var _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/ids-attributes */ \"./src/core/ids-attributes.ts\");\n/* harmony import */ var _utils_ids_dom_utils_ids_dom_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/ids-dom-utils/ids-dom-utils */ \"./src/utils/ids-dom-utils/ids-dom-utils.ts\");\n/* harmony import */ var _components_ids_tooltip_ids_tooltip__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../components/ids-tooltip/ids-tooltip */ \"./src/components/ids-tooltip/ids-tooltip.ts\");\n\n\n\nconst IdsTooltipMixin = (superclass) => class extends superclass {\n  constructor(...args) {\n    super(...args);\n  }\n  static get attributes() {\n    return [\n      ...superclass.attributes,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.TOOLTIP\n    ];\n  }\n  connectedCallback() {\n    super.connectedCallback?.();\n    this.handleTooltipEvents();\n  }\n  /**\n   * Init the mixin events and states\n   * @private\n   */\n  handleTooltipEvents() {\n    if (!this.tooltip) {\n      return;\n    }\n    this.offEvent(\"hoverend.tooltipmixin\");\n    this.onEvent(\"hoverend.tooltipmixin\", this, () => {\n      this.showTooltip();\n    });\n  }\n  /**\n   * Return the correct target element\n   * @private\n   * @returns {HTMLElement} The correct target element\n   */\n  get toolTipTarget() {\n    const fieldContainerElem = this.fieldContainer;\n    if (fieldContainerElem instanceof HTMLElement || fieldContainerElem instanceof SVGElement) {\n      return fieldContainerElem;\n    }\n    const triggerField = this.shadowRoot?.querySelector(\"ids-trigger-field\");\n    if (triggerField?.fieldContainer instanceof HTMLElement || triggerField?.fieldContainer instanceof SVGElement) {\n      return triggerField.fieldContainer;\n    }\n    return this;\n  }\n  /**\n   * Show the tooltip if available\n   */\n  showTooltip() {\n    if (this.nodeName === \"IDS-TEXT\" && this.tooltip === \"true\" && this.container && !(this.container.scrollWidth > this.container.clientWidth)) {\n      return;\n    }\n    const tooltip = document.createElement(\"ids-tooltip\");\n    let container = document.querySelector(\"ids-container\");\n    if (!container) {\n      container = document.body;\n    }\n    container?.appendChild(tooltip);\n    if (!tooltip.state) {\n      tooltip.state = {};\n    }\n    tooltip.state.noAria = true;\n    tooltip.target = this.toolTipTarget;\n    tooltip.textContent = this.tooltip === \"true\" ? this.textContent : this.tooltip;\n    tooltip.visible = true;\n    if ((0,_utils_ids_dom_utils_ids_dom_utils__WEBPACK_IMPORTED_MODULE_1__.getClosest)(this, \"ids-container\")?.getAttribute(\"dir\") === \"rtl\")\n      tooltip.popup?.setAttribute(\"dir\", \"rtl\");\n    if (this.beforeTooltipShow)\n      this.beforeTooltipShow(tooltip);\n    tooltip.onEvent(\"hide.tooltipmixin\", tooltip, () => {\n      tooltip.remove();\n    });\n  }\n  /**\n   * Setup some special config for the tooltip\n   * @param {any} tooltip The tooltip to configure\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  beforeTooltipShow(tooltip) {\n  }\n  /**\n   * Set the tooltip to a particular string\n   * @param {string} value The tooltips value\n   */\n  set tooltip(value) {\n    if (value) {\n      this.setAttribute(\"tooltip\", value);\n      this.container?.setAttribute(\"tooltip\", value);\n    }\n  }\n  get tooltip() {\n    return this.getAttribute(\"tooltip\");\n  }\n};\nvar ids_tooltip_mixin_default = IdsTooltipMixin;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbWl4aW5zL2lkcy10b29sdGlwLW1peGluL2lkcy10b29sdGlwLW1peGluLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBMkI7QUFHQTtBQUVwQjtBQVVQLE1BQU0sa0JBQWtCLENBQXdCLGVBQWtCLGNBQWMsV0FBVztBQUFBLEVBQ3pGLGVBQWUsTUFBYTtBQUMxQixVQUFNLEdBQUcsSUFBSTtBQUFBLEVBQ2Y7QUFBQSxFQUVBLFdBQVcsYUFBYTtBQUN0QixXQUFPO0FBQUEsTUFDTCxHQUFJLFdBQW1CO0FBQUEsTUFDdkIsb0VBQWtCO0FBQVAsSUFDYjtBQUFBLEVBQ0Y7QUFBQSxFQUVBLG9CQUFvQjtBQUNsQixVQUFNLG9CQUFvQjtBQUMxQixTQUFLLG9CQUFvQjtBQUFBLEVBQzNCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU1BLHNCQUFzQjtBQUNwQixRQUFJLENBQUMsS0FBSyxTQUFTO0FBQ2pCO0FBQUEsSUFDRjtBQUVBLFNBQUssU0FBUyx1QkFBdUI7QUFDckMsU0FBSyxRQUFRLHlCQUF5QixNQUFNLE1BQU07QUFDaEQsV0FBSyxZQUFZO0FBQUEsSUFDbkIsQ0FBQztBQUFBLEVBQ0g7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFPQSxJQUFJLGdCQUFxQjtBQUN2QixVQUFNLHFCQUFzQixLQUEyQjtBQUd2RCxRQUFJLDhCQUE4QixlQUFlLDhCQUE4QixZQUFZO0FBQ3pGLGFBQU87QUFBQSxJQUNUO0FBRUEsVUFBTSxlQUFlLEtBQUssWUFBWSxjQUFtQixtQkFBbUI7QUFDNUUsUUFBSSxjQUFjLDBCQUEwQixlQUFlLGNBQWMsMEJBQTBCLFlBQVk7QUFDN0csYUFBTyxhQUFhO0FBQUEsSUFDdEI7QUFFQSxXQUFPO0FBQUEsRUFDVDtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS0EsY0FBYztBQUVaLFFBQUksS0FBSyxhQUFhLGNBQWMsS0FBSyxZQUFZLFVBQVUsS0FBSyxhQUFhLEVBQUUsS0FBSyxVQUFVLGNBQWMsS0FBSyxVQUFVLGNBQWM7QUFDM0k7QUFBQSxJQUNGO0FBR0EsVUFBTSxVQUFzQixTQUFTLGNBQWMsYUFBYTtBQUNoRSxRQUFJLFlBQVksU0FBUyxjQUFjLGVBQWU7QUFDdEQsUUFBSSxDQUFDLFdBQVc7QUFDZCxrQkFBWSxTQUFTO0FBQUEsSUFDdkI7QUFDQSxlQUFXLFlBQVksT0FBTztBQUU5QixRQUFJLENBQUMsUUFBUSxPQUFPO0FBQ2xCLGNBQVEsUUFBUSxDQUFDO0FBQUEsSUFDbkI7QUFDQSxZQUFRLE1BQU0sU0FBUztBQUN2QixZQUFRLFNBQVMsS0FBSztBQUd0QixZQUFRLGNBQWMsS0FBSyxZQUFZLFNBQVMsS0FBSyxjQUFjLEtBQUs7QUFHeEUsWUFBUSxVQUFVO0FBRWxCLFFBQUksOEVBQVUsQ0FBQyxNQUFNLGVBQWUsR0FBRyxhQUFhLEtBQUssTUFBTTtBQUFPLGNBQVEsT0FBTyxhQUFhLE9BQU8sS0FBSztBQUM5RyxRQUFJLEtBQUs7QUFBbUIsV0FBSyxrQkFBa0IsT0FBTztBQUcxRCxZQUFRLFFBQVEscUJBQXFCLFNBQVMsTUFBTTtBQUNsRCxjQUFRLE9BQU87QUFBQSxJQUNqQixDQUFDO0FBQUEsRUFDSDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU9BLGtCQUFrQixTQUFlO0FBQUEsRUFDakM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsSUFBSSxRQUFRLE9BQWU7QUFDekIsUUFBSSxPQUFPO0FBQ1QsV0FBSyxhQUFhLFdBQVcsS0FBSztBQUNsQyxXQUFLLFdBQVcsYUFBYSxXQUFXLEtBQUs7QUFBQSxJQUMvQztBQUFBLEVBQ0Y7QUFBQSxFQUVBLElBQUksVUFBVTtBQUNaLFdBQU8sS0FBSyxhQUFhLFNBQVM7QUFBQSxFQUNwQztBQUNGO0FBRUEsSUFBTyw0QkFBUSIsInNvdXJjZXMiOlsid2VicGFjazovL2lkcy1lbnRlcnByaXNlLXdjLy4vc3JjL21peGlucy9pZHMtdG9vbHRpcC1taXhpbi9pZHMtdG9vbHRpcC1taXhpbi50cz84ODBhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGF0dHJpYnV0ZXMgfSBmcm9tICcuLi8uLi9jb3JlL2lkcy1hdHRyaWJ1dGVzJztcbmltcG9ydCB7IEV2ZW50c01peGluSW50ZXJmYWNlIH0gZnJvbSAnLi4vaWRzLWV2ZW50cy1taXhpbi9pZHMtZXZlbnRzLW1peGluJztcbmltcG9ydCB7IElkc0NvbnN0cnVjdG9yIH0gZnJvbSAnLi4vLi4vY29yZS9pZHMtZWxlbWVudCc7XG5pbXBvcnQgeyBnZXRDbG9zZXN0IH0gZnJvbSAnLi4vLi4vdXRpbHMvaWRzLWRvbS11dGlscy9pZHMtZG9tLXV0aWxzJztcbmltcG9ydCB7IElkc0lucHV0SW50ZXJmYWNlIH0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9pZHMtaW5wdXQvaWRzLWlucHV0LWF0dHJpYnV0ZXMnO1xuaW1wb3J0ICcuLi8uLi9jb21wb25lbnRzL2lkcy10b29sdGlwL2lkcy10b29sdGlwJztcbmltcG9ydCB0eXBlIElkc1Rvb2x0aXAgZnJvbSAnLi4vLi4vY29tcG9uZW50cy9pZHMtdG9vbHRpcC9pZHMtdG9vbHRpcCc7XG5cbnR5cGUgQ29uc3RyYWludHMgPSBJZHNDb25zdHJ1Y3RvcjxFdmVudHNNaXhpbkludGVyZmFjZT47XG4vKipcbi8qKlxuICogQSBtaXhpbiB0aGF0IGFkZHMgdG9vbHRpcCBmdW5jdGlvbmFsaXR5IHRvIGNvbXBvbmVudHNcbiAqIEBwYXJhbSB7YW55fSBzdXBlcmNsYXNzIEFjY2VwdHMgYSBzdXBlcmNsYXNzIGFuZCBjcmVhdGVzIGEgbmV3IHN1YmNsYXNzIGZyb20gaXRcbiAqIEByZXR1cm5zIHthbnl9IFRoZSBleHRlbmRlZCBvYmplY3RcbiAqL1xuY29uc3QgSWRzVG9vbHRpcE1peGluID0gPFQgZXh0ZW5kcyBDb25zdHJhaW50cz4oc3VwZXJjbGFzczogVCkgPT4gY2xhc3MgZXh0ZW5kcyBzdXBlcmNsYXNzIHtcbiAgY29uc3RydWN0b3IoLi4uYXJnczogYW55W10pIHtcbiAgICBzdXBlciguLi5hcmdzKTtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgYXR0cmlidXRlcygpIHtcbiAgICByZXR1cm4gW1xuICAgICAgLi4uKHN1cGVyY2xhc3MgYXMgYW55KS5hdHRyaWJ1dGVzLFxuICAgICAgYXR0cmlidXRlcy5UT09MVElQXG4gICAgXTtcbiAgfVxuXG4gIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrPy4oKTtcbiAgICB0aGlzLmhhbmRsZVRvb2x0aXBFdmVudHMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0IHRoZSBtaXhpbiBldmVudHMgYW5kIHN0YXRlc1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgaGFuZGxlVG9vbHRpcEV2ZW50cygpIHtcbiAgICBpZiAoIXRoaXMudG9vbHRpcCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMub2ZmRXZlbnQoJ2hvdmVyZW5kLnRvb2x0aXBtaXhpbicpO1xuICAgIHRoaXMub25FdmVudCgnaG92ZXJlbmQudG9vbHRpcG1peGluJywgdGhpcywgKCkgPT4ge1xuICAgICAgdGhpcy5zaG93VG9vbHRpcCgpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgY29ycmVjdCB0YXJnZXQgZWxlbWVudFxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcmV0dXJucyB7SFRNTEVsZW1lbnR9IFRoZSBjb3JyZWN0IHRhcmdldCBlbGVtZW50XG4gICAqL1xuICBnZXQgdG9vbFRpcFRhcmdldCgpOiBhbnkge1xuICAgIGNvbnN0IGZpZWxkQ29udGFpbmVyRWxlbSA9ICh0aGlzIGFzIElkc0lucHV0SW50ZXJmYWNlKS5maWVsZENvbnRhaW5lcjtcblxuICAgIC8vIGB0aGlzLmZpZWxkQ29udGFpbmVyYCB0YXJnZXRzIGFueSBJRFMgQ29tcG9uZW50IHRoYXQgZXh0ZW5kcyBJZHNJbnB1dFxuICAgIGlmIChmaWVsZENvbnRhaW5lckVsZW0gaW5zdGFuY2VvZiBIVE1MRWxlbWVudCB8fCBmaWVsZENvbnRhaW5lckVsZW0gaW5zdGFuY2VvZiBTVkdFbGVtZW50KSB7XG4gICAgICByZXR1cm4gZmllbGRDb250YWluZXJFbGVtO1xuICAgIH1cblxuICAgIGNvbnN0IHRyaWdnZXJGaWVsZCA9IHRoaXMuc2hhZG93Um9vdD8ucXVlcnlTZWxlY3Rvcjxhbnk+KCdpZHMtdHJpZ2dlci1maWVsZCcpO1xuICAgIGlmICh0cmlnZ2VyRmllbGQ/LmZpZWxkQ29udGFpbmVyIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgfHwgdHJpZ2dlckZpZWxkPy5maWVsZENvbnRhaW5lciBpbnN0YW5jZW9mIFNWR0VsZW1lbnQpIHtcbiAgICAgIHJldHVybiB0cmlnZ2VyRmllbGQuZmllbGRDb250YWluZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogU2hvdyB0aGUgdG9vbHRpcCBpZiBhdmFpbGFibGVcbiAgICovXG4gIHNob3dUb29sdGlwKCkge1xuICAgIC8vIEZvciBlbGxpcHNpcyB0b29sdGlwIGNoZWNrIGlmIG92ZXJmbG93aW5nIGFuZCBvbmx5IHNob3cgaWYgaXQgaXNcbiAgICBpZiAodGhpcy5ub2RlTmFtZSA9PT0gJ0lEUy1URVhUJyAmJiB0aGlzLnRvb2x0aXAgPT09ICd0cnVlJyAmJiB0aGlzLmNvbnRhaW5lciAmJiAhKHRoaXMuY29udGFpbmVyLnNjcm9sbFdpZHRoID4gdGhpcy5jb250YWluZXIuY2xpZW50V2lkdGgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gQXBwZW5kIGFuIElEUyBUb29sdGlwIGFuZCBzaG93IGl0XG4gICAgY29uc3QgdG9vbHRpcDogSWRzVG9vbHRpcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lkcy10b29sdGlwJykgYXMgSWRzVG9vbHRpcDtcbiAgICBsZXQgY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaWRzLWNvbnRhaW5lcicpO1xuICAgIGlmICghY29udGFpbmVyKSB7XG4gICAgICBjb250YWluZXIgPSBkb2N1bWVudC5ib2R5O1xuICAgIH1cbiAgICBjb250YWluZXI/LmFwcGVuZENoaWxkKHRvb2x0aXApO1xuXG4gICAgaWYgKCF0b29sdGlwLnN0YXRlKSB7XG4gICAgICB0b29sdGlwLnN0YXRlID0ge307XG4gICAgfVxuICAgIHRvb2x0aXAuc3RhdGUubm9BcmlhID0gdHJ1ZTtcbiAgICB0b29sdGlwLnRhcmdldCA9IHRoaXMudG9vbFRpcFRhcmdldDtcblxuICAgIC8vIEhhbmRsZSBFbGxpcHNpcyBUZXh0IGlmIHRvb2x0aXA9XCJ0cnVlXCJcbiAgICB0b29sdGlwLnRleHRDb250ZW50ID0gdGhpcy50b29sdGlwID09PSAndHJ1ZScgPyB0aGlzLnRleHRDb250ZW50IDogdGhpcy50b29sdGlwO1xuXG4gICAgLy8gU2hvdyBpdFxuICAgIHRvb2x0aXAudmlzaWJsZSA9IHRydWU7XG5cbiAgICBpZiAoZ2V0Q2xvc2VzdCh0aGlzLCAnaWRzLWNvbnRhaW5lcicpPy5nZXRBdHRyaWJ1dGUoJ2RpcicpID09PSAncnRsJykgdG9vbHRpcC5wb3B1cD8uc2V0QXR0cmlidXRlKCdkaXInLCAncnRsJyk7XG4gICAgaWYgKHRoaXMuYmVmb3JlVG9vbHRpcFNob3cpIHRoaXMuYmVmb3JlVG9vbHRpcFNob3codG9vbHRpcCk7XG5cbiAgICAvLyBSZW1vdmUgaXQgd2hlbiBjbG9zZWRcbiAgICB0b29sdGlwLm9uRXZlbnQoJ2hpZGUudG9vbHRpcG1peGluJywgdG9vbHRpcCwgKCkgPT4ge1xuICAgICAgdG9vbHRpcC5yZW1vdmUoKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXR1cCBzb21lIHNwZWNpYWwgY29uZmlnIGZvciB0aGUgdG9vbHRpcFxuICAgKiBAcGFyYW0ge2FueX0gdG9vbHRpcCBUaGUgdG9vbHRpcCB0byBjb25maWd1cmVcbiAgICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgYmVmb3JlVG9vbHRpcFNob3codG9vbHRpcD86IGFueSkge1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgdG9vbHRpcCB0byBhIHBhcnRpY3VsYXIgc3RyaW5nXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSBUaGUgdG9vbHRpcHMgdmFsdWVcbiAgICovXG4gIHNldCB0b29sdGlwKHZhbHVlOiBzdHJpbmcpIHtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCd0b29sdGlwJywgdmFsdWUpO1xuICAgICAgdGhpcy5jb250YWluZXI/LnNldEF0dHJpYnV0ZSgndG9vbHRpcCcsIHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICBnZXQgdG9vbHRpcCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRBdHRyaWJ1dGUoJ3Rvb2x0aXAnKSBhcyBzdHJpbmc7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IElkc1Rvb2x0aXBNaXhpbjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/mixins/ids-tooltip-mixin/ids-tooltip-mixin.ts\n");

/***/ }),

/***/ "./src/components/ids-tooltip/ids-tooltip.scss":
/*!*****************************************************!*\
  !*** ./src/components/ids-tooltip/ids-tooltip.scss ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n\n        const styles = `:host {\n  display: none;\n}\n\n:host([visible]) {\n  display: inline;\n}\n\n.ids-popup.tooltip.standalone {\n  position: relative;\n}\n\nids-popup[dir=rtl]::part(arrow)::after, ids-popup[dir=rtl]::part(arrow-top)::after, ids-popup[dir=rtl]::part(arrow-right)::after, ids-popup[dir=rtl]::part(arrow-bottom)::after, ids-popup[dir=rtl]::part(arrow-left)::after {\n  display: none;\n}`;\n        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (styles);\n    //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9pZHMtdG9vbHRpcC9pZHMtdG9vbHRpcC5zY3NzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtFQUNFOzs7QUFHRjtFQUNFOzs7QUFJRjtFQUNFOzs7QUFLQTtFQUtFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaWRzLWVudGVycHJpc2Utd2MvLi9zcmMvY29tcG9uZW50cy9pZHMtdG9vbHRpcC9pZHMtdG9vbHRpcC5zY3NzP2I0MWIiXSwic291cmNlc0NvbnRlbnQiOlsiOmhvc3Qge1xuICBkaXNwbGF5OiBub25lO1xufVxuXG46aG9zdChbdmlzaWJsZV0pIHtcbiAgZGlzcGxheTogaW5saW5lO1xufVxuXG4vLyBVc2VkIGZvciBwb3NpdGlvbmluZyBJZHNUb29sdGlwcyBpbiBzdGFuZGFsb25lLWNzcyBtb2RlXG4uaWRzLXBvcHVwLnRvb2x0aXAuc3RhbmRhbG9uZSB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbn1cblxuLy8gQWRqdXN0IFN0dWZmIGZvciBSVExcbmlkcy1wb3B1cFtkaXI9J3J0bCddIHtcbiAgJjo6cGFydChhcnJvdyk6OmFmdGVyLFxuICAmOjpwYXJ0KGFycm93LXRvcCk6OmFmdGVyLFxuICAmOjpwYXJ0KGFycm93LXJpZ2h0KTo6YWZ0ZXIsXG4gICY6OnBhcnQoYXJyb3ctYm90dG9tKTo6YWZ0ZXIsXG4gICY6OnBhcnQoYXJyb3ctbGVmdCk6OmFmdGVyIHtcbiAgICBkaXNwbGF5OiBub25lO1xuICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/components/ids-tooltip/ids-tooltip.scss\n");

/***/ })

}]);