"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkids_enterprise_wc"] = self["webpackChunkids_enterprise_wc"] || []).push([["src_components_ids-input_ids-input_ts"],{

/***/ "./src/components/ids-input/ids-autocomplete.ts":
/*!******************************************************!*\
  !*** ./src/components/ids-input/ids-autocomplete.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ids_autocomplete_default)\n/* harmony export */ });\n/* harmony import */ var _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/ids-attributes */ \"./src/core/ids-attributes.ts\");\n/* harmony import */ var _utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/ids-string-utils/ids-string-utils */ \"./src/utils/ids-string-utils/ids-string-utils.ts\");\n/* harmony import */ var _ids_popup_ids_popup__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ids-popup/ids-popup */ \"./src/components/ids-popup/ids-popup.ts\");\n/* harmony import */ var _ids_list_box_ids_list_box__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ids-list-box/ids-list-box */ \"./src/components/ids-list-box/ids-list-box.ts\");\n/* harmony import */ var _ids_list_box_ids_list_box_option__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ids-list-box/ids-list-box-option */ \"./src/components/ids-list-box/ids-list-box-option.ts\");\n/* harmony import */ var _core_ids_data_source__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/ids-data-source */ \"./src/core/ids-data-source.ts\");\n\n\n\n\n\n\nconst IdsAutoComplete = (superclass) => class extends superclass {\n  /**\n   * Gets the internal IdsDataSource object\n   * @returns {IdsDataSource} object\n   */\n  datasource = new _core_ids_data_source__WEBPACK_IMPORTED_MODULE_5__[\"default\"]();\n  constructor(...args) {\n    super(...args);\n  }\n  static get attributes() {\n    return [\n      ...superclass.attributes,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.AUTOCOMPLETE,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.SEARCH_FIELD\n    ];\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    if (!this.autocomplete) {\n      this.destroyAutocomplete();\n      return;\n    }\n    this.#configurePopup();\n    this.#addAria();\n    this.#attachKeyboardListeners();\n    this.#attachEventListeners();\n  }\n  /**\n   * Set autocomplete attribute\n   * @param {string | boolean | null} value autocomplete value\n   */\n  set autocomplete(value) {\n    const val = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_1__.stringToBool)(value);\n    if (!this.container) {\n      return;\n    }\n    if (val) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.AUTOCOMPLETE, \"\");\n      this.container?.classList.add(\"autocomplete\");\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.AUTOCOMPLETE);\n      this.container?.classList.remove(\"autocomplete\");\n    }\n  }\n  /**\n   * Get the autocomplete attribute\n   * @returns {boolean} autocomplete attribute value\n   */\n  get autocomplete() {\n    return this.hasAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.AUTOCOMPLETE);\n  }\n  /**\n   * Set the data array of the autocomplete input\n   * @param {Array<any>} value The array to use\n   */\n  set data(value) {\n    if (this.datasource) {\n      this.datasource.data = value || [];\n      this.#populateListBox();\n    }\n  }\n  /**\n   * Get the data of the autocomplete\n   * @returns {Array<any>} containing the dataset\n   */\n  get data() {\n    return this?.datasource?.data || [];\n  }\n  /**\n   * Set searchfield attribute\n   * Used as the target term to find matches in the dataset.\n   * @param {string | null} value search field value\n   */\n  set searchField(value) {\n    if (value) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.SEARCH_FIELD, value);\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.SEARCH_FIELD);\n    }\n  }\n  /**\n   * Get searchField\n   * @returns {string} containing the searchField\n   */\n  get searchField() {\n    const fields = this.data && Object?.keys(this.data[0]);\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.SEARCH_FIELD) || fields[0];\n  }\n  /**\n   * Get the internal ids-popup element\n   * @returns {Element | null | any} IdsPopup Element\n   * @readonly\n   */\n  get popup() {\n    return this.shadowRoot?.querySelector(\"ids-popup\");\n  }\n  /**\n   * Get the internal ids-list-box element\n   * @returns {Element | null | any} IdsListBox Element\n   * @readonly\n   */\n  get listBox() {\n    return this.shadowRoot?.querySelector(\"ids-list-box\");\n  }\n  /**\n   * Get all internal ids-list-box-option elements\n   * @returns {Element | null | any} IdsListBoxOption Elements\n   * @readonly\n   */\n  get options() {\n    return this.shadowRoot?.querySelectorAll(\"ids-list-box-option\");\n  }\n  /**\n   * Get the selected ids-list-box-option element\n   * @returns {Element | null | any} Selected IdsListBoxOption Element\n   * @readonly\n   */\n  get isSelected() {\n    return this.shadowRoot?.querySelector(`ids-list-box-option.is-selected`);\n  }\n  /**\n   * Find matches between the input value, searchField and dataset\n   * @param {string | RegExp} value value of the input field\n   * @param {Array} list the dataset\n   * @returns {Array<any> | null} containing matched values.\n   */\n  findMatches(value, list) {\n    return list.filter((option) => {\n      const regex = new RegExp(value, \"gi\");\n      return option[this.searchField].toString()?.match(regex);\n    });\n  }\n  /**\n   * Display matches from the dataset\n   * @returns {void}\n   */\n  displayMatches() {\n    if (this.readonly || this.disabled) {\n      return;\n    }\n    const thisAsInput = this;\n    const resultsArr = this.findMatches(thisAsInput.value, this.data);\n    const results = resultsArr?.map((result) => {\n      const regex = new RegExp(thisAsInput.value, \"gi\");\n      const optionText = result[this.searchField].toString()?.replace(regex, `<span class=\"highlight\">${thisAsInput.value?.toLowerCase()}</span>`);\n      return this.#templatelistBoxOption(result[this.searchField], optionText);\n    }).join(\"\");\n    if (thisAsInput.value) {\n      this.openPopup();\n      this.listBox.innerHTML = results || `<ids-list-box-option>${this.localeAPI.translate(\"NoResults\")}</ids-list-box-option>`;\n      this.popup.place();\n    } else {\n      this.clearOptions();\n      this.closePopup();\n    }\n  }\n  /**\n   * Popuplate the list box with the current data\n   */\n  #populateListBox() {\n    if (this.listBox) {\n      this.listBox.innerHTML = this.data.map((d) => {\n        const value = d[this.searchField];\n        return this.#templatelistBoxOption(value, value);\n      });\n    }\n  }\n  /**\n   * Create the list box option template.\n   * @param {string | null} value sets the value attr of the option\n   * @param {string | null} label sets the label of the option\n   * @returns {string} ids-list-box-option template.\n   */\n  #templatelistBoxOption(value, label) {\n    return `<ids-list-box-option value=\"${value}\">${label}</ids-list-box-option>`;\n  }\n  /**\n   * Add internal aria attributes\n   * @private\n   * @returns {object} This API object for chaining\n   */\n  #addAria() {\n    const attrs = {\n      role: \"combobox\",\n      \"aria-expanded\": \"false\",\n      \"aria-autocomplete\": \"list\",\n      \"aria-haspopup\": \"listbox\",\n      \"aria-controls\": this.listBox?.getAttribute(\"id\") || `ids-list-box-${this.id}`\n    };\n    if (this.listBox) {\n      this.listBox.setAttribute(\"id\", `ids-list-box-${this.id}`);\n      this.listBox.setAttribute(\"aria-label\", `Listbox`);\n    }\n    Object.keys(attrs).forEach((key) => this.setAttribute(key, attrs[key]));\n    return this;\n  }\n  /**\n   * Close popup\n   * @returns {void}\n   */\n  closePopup() {\n    this.popup.open = false;\n    this.popup.visible = false;\n  }\n  /**\n   * Open popup\n   * @returns {void}\n   */\n  openPopup() {\n    this.popup.open = true;\n    this.popup.visible = true;\n  }\n  /**\n   * Set the value of the input to the selected option\n   * @param {Event | any} e event\n   */\n  selectOption(e) {\n    if (e.target.nodeName === \"IDS-LIST-BOX-OPTION\") {\n      this.setSelectedOption(e.target);\n    }\n    if (this.isSelected) {\n      this.value = this.isSelected.getAttribute(\"value\");\n      this.triggerEvent(\"selected\", this, {\n        bubbles: true,\n        detail: {\n          elem: this,\n          value: this.value\n        }\n      });\n    }\n    this.closePopup();\n  }\n  /**\n   * Trigger the cleared event when input is cleared\n   */\n  clearOptions() {\n    this.triggerEvent(\"cleared\", this, {\n      bubbles: true,\n      detail: {\n        elem: this,\n        value: this.value\n      }\n    });\n  }\n  /**\n   * Set the selected attributes on the current option\n   * @param {Element | any} el element\n   */\n  setSelectedOption(el) {\n    el.classList.add(\"is-selected\");\n    el.setAttribute(\"tabindex\", \"0\");\n  }\n  /**\n   * Remove the selected attributes on the current option\n   * @param {Element | any} el element\n   */\n  removeSelectedOption(el) {\n    el.classList.remove(\"is-selected\");\n    el.setAttribute(\"tabindex\", \"-1\");\n  }\n  /**\n   * Configure and attach internal IdsPopup element.\n   * @returns {void}\n   */\n  #configurePopup() {\n    this.popup.type = \"dropdown\";\n    this.popup.align = \"bottom, left\";\n    this.popup.alignTarget = this.fieldContainer;\n    this.popup.y = -1;\n  }\n  /**\n   * Attach internal event handlers\n   * @returns {void}\n   */\n  #attachEventListeners() {\n    this.onEvent(\"keydownend\", this, this.displayMatches);\n    this.onEvent(\"mousedown\", this.listBox, this.selectOption.bind(this));\n    this.onEvent(\"blur\", this, this.closePopup);\n  }\n  /**\n   * Attach the keyborad listeners\n   * @returns {void}\n   */\n  #attachKeyboardListeners() {\n    this.listen([\"ArrowDown\"], this, (e) => {\n      e.stopPropagation();\n      e.stopImmediatePropagation();\n      e.preventDefault();\n      const selected = this.isSelected;\n      const firstOption = this.options[0];\n      const lastOption = this.options[this.options.length - 1];\n      if (!selected) {\n        this.setSelectedOption(firstOption);\n      }\n      if (selected?.nextElementSibling) {\n        this.removeSelectedOption(selected);\n        this.setSelectedOption(selected.nextElementSibling);\n        selected.nextElementSibling.focus();\n      }\n      if (selected === lastOption) {\n        this.removeSelectedOption(selected);\n        this.setSelectedOption(firstOption);\n      }\n    });\n    this.listen([\"ArrowUp\"], this, (e) => {\n      e.stopPropagation();\n      e.stopImmediatePropagation();\n      e.preventDefault();\n      const selected = this.isSelected;\n      const firstOption = this.options[0];\n      const lastOption = this.options[this.options.length - 1];\n      if (e.altKey) {\n        this.value = selected.getAttribute(\"value\");\n        this.closePopup();\n        return;\n      }\n      if (selected?.previousElementSibling) {\n        this.removeSelectedOption(selected);\n        this.setSelectedOption(selected.previousElementSibling);\n        selected.previousElementSibling.focus();\n      }\n      if (selected === firstOption) {\n        this.removeSelectedOption(selected);\n        this.setSelectedOption(lastOption);\n      }\n    });\n    this.listen([\" \", \"Enter\"], this.listBox, this.selectOption.bind(this));\n    this.listen([\"Escape\"], this.listBox, this.closePopup.bind(this));\n  }\n  /**\n   * Remove internal event handlers\n   * @returns {void}\n   */\n  #removeEventListeners() {\n    this.offEvent(\"keyup\", this, this.displayMatches);\n    this.offEvent(\"change\", this, this.displayMatches);\n    this.offEvent(\"blur\", this, this.closePopup);\n  }\n  /**\n   * Destroy autocomplete functionality\n   * @returns {void}\n   */\n  destroyAutocomplete() {\n    this.#removeEventListeners();\n  }\n};\nvar ids_autocomplete_default = IdsAutoComplete;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/ids-input/ids-autocomplete.ts\n");

/***/ }),

/***/ "./src/components/ids-input/ids-input-attributes.ts":
/*!**********************************************************!*\
  !*** ./src/components/ids-input/ids-input-attributes.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SIZES\": () => (/* binding */ SIZES),\n/* harmony export */   \"TEXT_ALIGN\": () => (/* binding */ TEXT_ALIGN),\n/* harmony export */   \"TYPES\": () => (/* binding */ TYPES),\n/* harmony export */   \"instanceCounter\": () => (/* binding */ instanceCounter)\n/* harmony export */ });\nconst TYPES = {\n  default: \"text\",\n  text: \"text\",\n  password: \"password\",\n  number: \"number\",\n  phone: \"tel\",\n  email: \"email\",\n  color: \"color\"\n};\nconst SIZES = {\n  default: \"md\",\n  xs: \"xs\",\n  sm: \"sm\",\n  mm: \"mm\",\n  md: \"md\",\n  lg: \"lg\",\n  full: \"full\"\n};\nconst TEXT_ALIGN = {\n  default: \"start\",\n  start: \"start\",\n  center: \"center\",\n  end: \"end\"\n};\nconst instanceCounter = 0;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9pZHMtaW5wdXQvaWRzLWlucHV0LWF0dHJpYnV0ZXMudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQVVBLE1BQU0sUUFBUTtBQUFBLEVBQ1osU0FBUztBQUFBLEVBQ1QsTUFBTTtBQUFBLEVBQ04sVUFBVTtBQUFBLEVBQ1YsUUFBUTtBQUFBLEVBQ1IsT0FBTztBQUFBLEVBQ1AsT0FBTztBQUFBLEVBQ1AsT0FBTztBQUNUO0FBT0EsTUFBTSxRQUFRO0FBQUEsRUFDWixTQUFTO0FBQUEsRUFDVCxJQUFJO0FBQUEsRUFDSixJQUFJO0FBQUEsRUFDSixJQUFJO0FBQUEsRUFDSixJQUFJO0FBQUEsRUFDSixJQUFJO0FBQUEsRUFDSixNQUFNO0FBQ1I7QUFPQSxNQUFNLGFBQWE7QUFBQSxFQUNqQixTQUFTO0FBQUEsRUFDVCxPQUFPO0FBQUEsRUFDUCxRQUFRO0FBQUEsRUFDUixLQUFLO0FBQ1A7QUFFQSxNQUFNLGtCQUFrQiIsInNvdXJjZXMiOlsid2VicGFjazovL2lkcy1lbnRlcnByaXNlLXdjLy4vc3JjL2NvbXBvbmVudHMvaWRzLWlucHV0L2lkcy1pbnB1dC1hdHRyaWJ1dGVzLnRzP2IzMWQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW50ZXJmYWNlXG5leHBvcnQgaW50ZXJmYWNlIElkc0lucHV0SW50ZXJmYWNlIHtcbiAgaW5wdXQ/OiBhbnk7XG4gIHZhbHVlPzogYW55O1xuICBjaGVja2VkPzogYW55O1xuICBmaWVsZENvbnRhaW5lcj86IEhUTUxFbGVtZW50IHwgU1ZHRWxlbWVudCB8IG51bGw7XG4gIGxhYmVsRWw/OiBIVE1MTGFiZWxFbGVtZW50IHwgbnVsbDtcbn1cblxuLy8gVHlwZXNcbmNvbnN0IFRZUEVTID0ge1xuICBkZWZhdWx0OiAndGV4dCcsXG4gIHRleHQ6ICd0ZXh0JyxcbiAgcGFzc3dvcmQ6ICdwYXNzd29yZCcsXG4gIG51bWJlcjogJ251bWJlcicsXG4gIHBob25lOiAndGVsJyxcbiAgZW1haWw6ICdlbWFpbCcsXG4gIGNvbG9yOiAnY29sb3InXG59IGFzIGNvbnN0O1xuXG50eXBlIFR5cGVLZXlzID0ga2V5b2YgdHlwZW9mIFRZUEVTO1xuXG50eXBlIFR5cGVWYWx1ZXMgPSB0eXBlb2YgVFlQRVNbVHlwZUtleXNdO1xuXG4vLyBTZXR0aW5nIGRlZmF1bHRzIHNpemVzXG5jb25zdCBTSVpFUyA9IHtcbiAgZGVmYXVsdDogJ21kJyxcbiAgeHM6ICd4cycsXG4gIHNtOiAnc20nLFxuICBtbTogJ21tJyxcbiAgbWQ6ICdtZCcsXG4gIGxnOiAnbGcnLFxuICBmdWxsOiAnZnVsbCdcbn0gYXMgY29uc3Q7XG5cbnR5cGUgU2l6ZUtleXMgPSBrZXlvZiB0eXBlb2YgU0laRVM7XG5cbnR5cGUgU2l6ZVZhbHVlcyA9IHR5cGVvZiBTSVpFU1tTaXplS2V5c107XG5cbi8vIFNldHRpbmcgZGVmYXVsdHMgdGV4dC1hbGlnblxuY29uc3QgVEVYVF9BTElHTiA9IHtcbiAgZGVmYXVsdDogJ3N0YXJ0JyxcbiAgc3RhcnQ6ICdzdGFydCcsXG4gIGNlbnRlcjogJ2NlbnRlcicsXG4gIGVuZDogJ2VuZCdcbn07XG5cbmNvbnN0IGluc3RhbmNlQ291bnRlciA9IDA7XG5cbmV4cG9ydCB7XG4gIFRZUEVTLFxuICBUeXBlS2V5cyxcbiAgVHlwZVZhbHVlcyxcbiAgU0laRVMsXG4gIFNpemVLZXlzLFxuICBTaXplVmFsdWVzLFxuICBURVhUX0FMSUdOLFxuICBpbnN0YW5jZUNvdW50ZXJcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/components/ids-input/ids-input-attributes.ts\n");

/***/ }),

/***/ "./src/components/ids-input/ids-input.ts":
/*!***********************************************!*\
  !*** ./src/components/ids-input/ids-input.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ IdsInput)\n/* harmony export */ });\n/* harmony import */ var _core_ids_decorators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/ids-decorators */ \"./src/core/ids-decorators.ts\");\n/* harmony import */ var _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/ids-attributes */ \"./src/core/ids-attributes.ts\");\n/* harmony import */ var _utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/ids-string-utils/ids-string-utils */ \"./src/utils/ids-string-utils/ids-string-utils.ts\");\n/* harmony import */ var _mixins_ids_locale_mixin_ids_locale_mixin__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../mixins/ids-locale-mixin/ids-locale-mixin */ \"./src/mixins/ids-locale-mixin/ids-locale-mixin.ts\");\n/* harmony import */ var _mixins_ids_keyboard_mixin_ids_keyboard_mixin__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../mixins/ids-keyboard-mixin/ids-keyboard-mixin */ \"./src/mixins/ids-keyboard-mixin/ids-keyboard-mixin.ts\");\n/* harmony import */ var _mixins_ids_dirty_tracker_mixin_ids_dirty_tracker_mixin__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../mixins/ids-dirty-tracker-mixin/ids-dirty-tracker-mixin */ \"./src/mixins/ids-dirty-tracker-mixin/ids-dirty-tracker-mixin.ts\");\n/* harmony import */ var _mixins_ids_clearable_mixin_ids_clearable_mixin__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../mixins/ids-clearable-mixin/ids-clearable-mixin */ \"./src/mixins/ids-clearable-mixin/ids-clearable-mixin.ts\");\n/* harmony import */ var _mixins_ids_color_variant_mixin_ids_color_variant_mixin__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../mixins/ids-color-variant-mixin/ids-color-variant-mixin */ \"./src/mixins/ids-color-variant-mixin/ids-color-variant-mixin.ts\");\n/* harmony import */ var _mixins_ids_field_height_mixin_ids_field_height_mixin__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../mixins/ids-field-height-mixin/ids-field-height-mixin */ \"./src/mixins/ids-field-height-mixin/ids-field-height-mixin.ts\");\n/* harmony import */ var _mixins_ids_label_state_mixin_ids_label_state_mixin__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../mixins/ids-label-state-mixin/ids-label-state-mixin */ \"./src/mixins/ids-label-state-mixin/ids-label-state-mixin.ts\");\n/* harmony import */ var _mixins_ids_mask_mixin_ids_mask_mixin__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../mixins/ids-mask-mixin/ids-mask-mixin */ \"./src/mixins/ids-mask-mixin/ids-mask-mixin.ts\");\n/* harmony import */ var _mixins_ids_validation_mixin_ids_validation_mixin__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../mixins/ids-validation-mixin/ids-validation-mixin */ \"./src/mixins/ids-validation-mixin/ids-validation-mixin.ts\");\n/* harmony import */ var _mixins_ids_tooltip_mixin_ids_tooltip_mixin__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../mixins/ids-tooltip-mixin/ids-tooltip-mixin */ \"./src/mixins/ids-tooltip-mixin/ids-tooltip-mixin.ts\");\n/* harmony import */ var _mixins_ids_theme_mixin_ids_theme_mixin__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../mixins/ids-theme-mixin/ids-theme-mixin */ \"./src/mixins/ids-theme-mixin/ids-theme-mixin.ts\");\n/* harmony import */ var _mixins_ids_events_mixin_ids_events_mixin__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../mixins/ids-events-mixin/ids-events-mixin */ \"./src/mixins/ids-events-mixin/ids-events-mixin.ts\");\n/* harmony import */ var _mixins_ids_loading_indicator_mixin_ids_loading_indicator_mixin__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../mixins/ids-loading-indicator-mixin/ids-loading-indicator-mixin */ \"./src/mixins/ids-loading-indicator-mixin/ids-loading-indicator-mixin.ts\");\n/* harmony import */ var _ids_autocomplete__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./ids-autocomplete */ \"./src/components/ids-input/ids-autocomplete.ts\");\n/* harmony import */ var _core_ids_element__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../core/ids-element */ \"./src/core/ids-element.ts\");\n/* harmony import */ var _ids_icon_ids_icon__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../ids-icon/ids-icon */ \"./src/components/ids-icon/ids-icon.ts\");\n/* harmony import */ var _ids_text_ids_text__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../ids-text/ids-text */ \"./src/components/ids-text/ids-text.ts\");\n/* harmony import */ var _ids_trigger_field_ids_trigger_button__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../ids-trigger-field/ids-trigger-button */ \"./src/components/ids-trigger-field/ids-trigger-button.ts\");\n/* harmony import */ var _ids_input_attributes__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./ids-input-attributes */ \"./src/components/ids-input/ids-input-attributes.ts\");\n/* harmony import */ var _ids_input_scss__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./ids-input.scss */ \"./src/components/ids-input/ids-input.scss\");\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result)\n    __defProp(target, key, result);\n  return result;\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlet instanceCounter = 0;\nconst Base = (0,_mixins_ids_tooltip_mixin_ids_tooltip_mixin__WEBPACK_IMPORTED_MODULE_12__[\"default\"])(\n  (0,_mixins_ids_label_state_mixin_ids_label_state_mixin__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(\n    (0,_mixins_ids_loading_indicator_mixin_ids_loading_indicator_mixin__WEBPACK_IMPORTED_MODULE_15__[\"default\"])(\n      (0,_ids_autocomplete__WEBPACK_IMPORTED_MODULE_16__[\"default\"])(\n        (0,_mixins_ids_field_height_mixin_ids_field_height_mixin__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(\n          (0,_mixins_ids_dirty_tracker_mixin_ids_dirty_tracker_mixin__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(\n            (0,_mixins_ids_clearable_mixin_ids_clearable_mixin__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(\n              (0,_mixins_ids_color_variant_mixin_ids_color_variant_mixin__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(\n                (0,_mixins_ids_theme_mixin_ids_theme_mixin__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(\n                  (0,_mixins_ids_mask_mixin_ids_mask_mixin__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(\n                    (0,_mixins_ids_validation_mixin_ids_validation_mixin__WEBPACK_IMPORTED_MODULE_11__[\"default\"])(\n                      (0,_mixins_ids_locale_mixin_ids_locale_mixin__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(\n                        (0,_mixins_ids_keyboard_mixin_ids_keyboard_mixin__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(\n                          (0,_mixins_ids_events_mixin_ids_events_mixin__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(\n                            _core_ids_element__WEBPACK_IMPORTED_MODULE_17__[\"default\"]\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n);\nlet IdsInput = class extends Base {\n  generatedId = \"\";\n  triggeredByChange = false;\n  constructor() {\n    super();\n    Object.defineProperty(this, \"id\", {\n      get: () => this.#id,\n      set: (value) => {\n        this.#id = value;\n      },\n      configurable: true,\n      enumerable: true\n    });\n  }\n  isFormComponent = true;\n  /**\n   * Inherited from `IdsColorVariantMixin`\n   * @returns {Array<string>} List of available color variants for this component\n   */\n  colorVariants = [\"alternate\", \"alternate-formatter\", \"borderless\", \"in-cell\"];\n  /**\n   * @returns {Array<string>} IdsInput component observable attributes\n   */\n  static get attributes() {\n    return [\n      ...super.attributes,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ACTIVE,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.AUTOSELECT,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.BG_TRANSPARENT,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.CAPS_LOCK,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.CURSOR,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.FORMAT,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ID,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.NO_MARGINS,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.PADDING,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.PASSWORD_VISIBLE,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.PLACEHOLDER,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.READONLY_BACKGROUND,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.READONLY,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.REVEALABLE_PASSWORD,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SIZE,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.TABBABLE,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.TEXT_ALIGN,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.TEXT_ELLIPSIS,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.TYPE,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.VALUE\n    ];\n  }\n  /**\n   * Custom Element `connectedCallback` implementation\n   * @returns {void}\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    this.#attachEventHandlers();\n    if (this.hasAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.AUTOSELECT)) {\n      this.handleAutoselect();\n    }\n    if (this.isPasswordVisible) {\n      this.#togglePasswordEventSetUp(true);\n    }\n    if (this.capsLock) {\n      this.#capsLockEventSetUp(true);\n    }\n    this.#setReadonlyBackground();\n  }\n  /**\n   * Create the Template for the contents\n   * @returns {string} The template\n   */\n  template() {\n    this.templateHostAttributes();\n    const {\n      ariaLabel,\n      capsLock,\n      containerClass,\n      inputClass,\n      inputState,\n      labelHtml,\n      placeholder,\n      showHide,\n      type,\n      value\n    } = this.templateVariables();\n    return `<div class=\"${containerClass}\" part=\"container\">\n      ${labelHtml}\n      <div class=\"field-container\" part=\"field-container\">\n        <input\n          part=\"input\"\n          id=\"${this.id}-input\"\n          ${type}${inputClass}${placeholder}${inputState}\n          ${ariaLabel}\n          ${value}\n          ></input>\n        ${showHide}\n        ${capsLock}\n        <slot name=\"loading-indicator\"></slot>\n      </div>\n      ${this.autocomplete ? `\n        <ids-popup\n          type=\"dropdown\"\n          align=\"bottom, left\"\n          align-target=\"#${this.id}-input\"\n          part=\"popup\"\n        >\n          <ids-list-box slot=\"content\" size=\"${this.size}\"></ids-list-box>\n        </ids-popup>` : \"\"}\n    </div>`;\n  }\n  /**\n   * Uses current IdsInput state to set some attributes on its host element\n   * @returns {void}\n   */\n  templateHostAttributes() {\n    if (!this.id) {\n      this.generatedId = `ids-input-${instanceCounter++}`;\n    }\n  }\n  /**\n   * Uses current IdsInput state to generate strings used in its template.\n   * @returns {IdsInputTemplateVariables} containing template strings used for generating an IdsInput template\n   */\n  templateVariables() {\n    const attrs = {\n      readonly: this.readonly ? \"readonly\" : \"\",\n      disabled: this.disabled ? \"disabled\" : \"\",\n      required: this.validate ? \"required\" : \"\",\n      noMargins: this.noMargins ? \"no-margins\" : \"\"\n    };\n    const placeholder = this.placeholder ? ` placeholder=\"${this.placeholder}\"` : \"\";\n    const type = ` type=\"${this.isPasswordVisible && this.passwordVisible ? \"text\" : this.type || _ids_input_attributes__WEBPACK_IMPORTED_MODULE_21__.TYPES[\"default\"]}\"`;\n    let inputClass = `ids-input-field ${this.textAlign}`;\n    const showHide = this.templateShowHide();\n    const capsLock = this.templateCapsLock();\n    inputClass += (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(this.bgTransparent) ? \" bg-transparent\" : \"\";\n    inputClass += (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(this.readonlyBackground) ? \"\" : \" readonly-background\";\n    inputClass += (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(this.textEllipsis) ? \" text-ellipsis\" : \"\";\n    inputClass = ` class=\"${inputClass}\"`;\n    let inputState = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(this.readonly) ? \" readonly\" : \"\";\n    inputState = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(this.disabled) ? \" disabled\" : inputState;\n    let containerClass = `ids-input${inputState} ${this.size}`;\n    containerClass += (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(this.compact) ? \" compact\" : \"\";\n    containerClass += (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(this.noMargins) ? \" no-margins\" : \"\";\n    const ariaLabel = this.hasAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.LABEL_STATE) && this.label ? `aria-label=\"${this.label}\"` : \"\";\n    const hiddenLabelCss = !this.label.length || this.labelState === \"hidden\" ? \" empty\" : \"\";\n    const requiredLabelCss = !this.labelRequired ? \" no-required-indicator\" : \"\";\n    const labelHtml = `<label\n      class=\"ids-label-text${requiredLabelCss}${hiddenLabelCss}\"\n      for=\"${this.id}-input\"\n      part=\"label\"\n      ${attrs.readonly}\n      ${attrs.disabled}\n      ${attrs.required}\n    >\n      <ids-text part=\"label\" label ${attrs.disabled} color-unset>\n        ${this.label}\n      </ids-text>\n    </label>`;\n    const value = this.hasAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.VALUE) ? ` value=\"${this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.VALUE)}\" ` : \"\";\n    return {\n      ariaLabel,\n      capsLock,\n      containerClass,\n      inputClass,\n      inputState,\n      labelHtml,\n      placeholder,\n      showHide,\n      type,\n      value\n    };\n  }\n  /**\n   * @readonly\n   * @returns {boolean} true if this is a password field and the password should be shown as plain text\n   */\n  get isPasswordVisible() {\n    return this.revealablePassword && this.type === _ids_input_attributes__WEBPACK_IMPORTED_MODULE_21__.TYPES.password;\n  }\n  templateShowHide() {\n    return this.isPasswordVisible ? `<ids-button id=\"show-hide-password\" class=\"show-hide-password\" no-padding text=\"${this.passwordVisible ? \"HIDE\" : \"SHOW\"}\"></ids-button>` : \"\";\n  }\n  templateCapsLock() {\n    return this.capsLock ? `<ids-icon id=\"caps-lock-indicator\" class=\"caps-lock-indicator\" icon=\"capslock\"></ids-icon>` : \"\";\n  }\n  onColorVariantRefresh(value) {\n    super.colorVariant = value;\n    if (this.clearable) {\n      this.refreshClearableButtonStyles();\n    }\n  }\n  /**\n   * @readonly\n   * @returns {HTMLInputElement} the inner `input` element\n   */\n  get input() {\n    return this.container?.querySelector(`input[part=\"input\"]`);\n  }\n  /**\n   * @readonly\n   * @returns {HTMLElement} the caps lock indicator icon, if one exists\n   */\n  get capsLockIcon() {\n    return this.container?.querySelector(\"#caps-lock-indicator\");\n  }\n  /**\n   * @readonly\n   * @returns {HTMLElement} the element in this component's Shadow Root\n   *  that wraps the input and any triggering elements or icons\n   */\n  get fieldContainer() {\n    return this.container?.querySelector(\".field-container\");\n  }\n  /**\n   * @readonly\n   * @returns {HTMLLabelElement} the inner `label` element\n   */\n  get labelEl() {\n    return this.#labelEl || this.shadowRoot?.querySelector(`[for=\"${this.id}-input\"]`);\n  }\n  /**\n   * @returns {boolean} indicates whether password reveal functionality is on or off\n   */\n  get revealablePassword() {\n    return (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.REVEALABLE_PASSWORD));\n  }\n  /**\n   * sets whether password reveal functionality is available\n   * @param {boolean | string} value boolean value sets whether reveal functionality is toggled on or off\n   */\n  set revealablePassword(value) {\n    const valueSafe = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(value);\n    if (this.type === _ids_input_attributes__WEBPACK_IMPORTED_MODULE_21__.TYPES.password) {\n      if (valueSafe) {\n        this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.REVEALABLE_PASSWORD, \"true\");\n        this.#togglePasswordEventSetUp(true);\n      } else {\n        this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.REVEALABLE_PASSWORD, \"false\");\n        this.#togglePasswordEventSetUp(false);\n      }\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.REVEALABLE_PASSWORD);\n    }\n  }\n  /**\n   * @returns {boolean} indicates whether the capslock indicator is enabled or disabled\n   */\n  get capsLock() {\n    return (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.CAPS_LOCK));\n  }\n  /**\n   * sets whether capslock indicatoris enabled or disabled\n   * @param {boolean | string} value sets whether capslock indicator functionality is toggled on or off\n   */\n  set capsLock(value) {\n    if ((0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(value)) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.CAPS_LOCK, \"true\");\n      this.#capsLockEventSetUp(true);\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.CAPS_LOCK);\n      this.#capsLockEventSetUp(false);\n    }\n  }\n  /**\n   * @returns {boolean} whether the password is currently visible\n   */\n  get passwordVisible() {\n    return (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.PASSWORD_VISIBLE));\n  }\n  /**\n   * sets whether the password is currently visible\n   * @param {boolean | string} value toggles the visibility of the password on or off\n   */\n  set passwordVisible(value) {\n    const valueSafe = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(value);\n    if (valueSafe !== this.passwordVisible) {\n      if (valueSafe) {\n        this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.PASSWORD_VISIBLE, \"true\");\n      } else {\n        this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.PASSWORD_VISIBLE, \"false\");\n      }\n    }\n    this.#passwordVisibilityHandler();\n  }\n  /**\n   * Set input state for disabled or readonly\n   * @private\n   * @param {string} prop The property.\n   * @returns {void}\n   */\n  setInputState(prop) {\n    if (prop === _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.READONLY || prop === _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED) {\n      if (!this.shadowRoot)\n        return;\n      const msgNodes = [].slice.call(this.shadowRoot.querySelectorAll(\".validation-message\"));\n      const options = {\n        prop1: prop,\n        prop2: prop !== _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.READONLY ? _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.READONLY : _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED,\n        val: (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(this[prop])\n      };\n      if (options.val) {\n        this.input?.removeAttribute(options.prop2);\n        this.container?.classList?.remove?.(options.prop2);\n        this.container?.querySelector?.(\"ids-text\")?.removeAttribute(options.prop2);\n        msgNodes.forEach((x) => x.classList.remove(options.prop2));\n        this.input?.setAttribute(options.prop1, \"true\");\n        this.container?.classList.add(options.prop1);\n        this.container?.querySelector?.(\"ids-text\")?.setAttribute?.(options.prop1, \"true\");\n        msgNodes.forEach((x) => x.classList.add(options.prop1));\n      } else {\n        this.input?.removeAttribute(options.prop1);\n        this.container?.classList.remove(options.prop1);\n        this.container?.querySelector(\"ids-text\")?.removeAttribute(options.prop1);\n        msgNodes.forEach((x) => x.classList.remove(options.prop1));\n      }\n    }\n  }\n  /**\n   * Set the label text\n   * @private\n   * @param {string} value of label\n   * @returns {void}\n   */\n  setLabelText(value) {\n    return super.setLabelText(value, `[for=\"${this.id}-input\"]`);\n  }\n  /**\n   * Handle autoselect\n   * @private\n   * @returns {void}\n   */\n  handleAutoselect() {\n    if (this.autoselect) {\n      this.handleInputFocusEvent();\n    } else {\n      this.handleInputFocusEvent(\"remove\");\n    }\n  }\n  /**\n   * Handle input focus event\n   * @private\n   * @param {string | null} option If 'remove', will remove attached events\n   * @returns {void}\n   */\n  handleInputFocusEvent(option) {\n    const eventName = \"focus\";\n    if (option === \"remove\") {\n      const handler = this?.handledEvents?.get(eventName);\n      if (handler && handler.target === this.input) {\n        this.offEvent(eventName, this.input);\n      }\n    } else {\n      this.onEvent(eventName, this.input, () => {\n        requestAnimationFrame(() => {\n          this.input?.select();\n        });\n      });\n    }\n  }\n  /**\n   * handles teardown and set up for capslock detection events\n   * @param {boolean} value indicates whether to turn events on or off\n   * @returns {void}\n   */\n  #capsLockEventSetUp(value) {\n    const updateCapsLockIcon = (e) => {\n      if (this.capsLockIcon && e.getModifierState) {\n        this.capsLockIcon.hidden = !e.getModifierState(\"CapsLock\");\n      }\n    };\n    if (value) {\n      if (!this.capsLockIcon && this.input) {\n        this.input.insertAdjacentHTML(\"afterend\", this.templateCapsLock());\n      }\n      this.offEvent(\"keydown.input-capslock\");\n      this.onEvent(\"keydown.input-capslock\", this, updateCapsLockIcon);\n      this.offEvent(\"keyup.input-capslock\");\n      this.onEvent(\"keyup.input-capslock\", this, updateCapsLockIcon);\n      if (this.capsLockIcon) {\n        this.capsLockIcon.hidden = true;\n      }\n    } else {\n      this.offEvent(\"keydown.input-capslock\");\n      this.offEvent(\"keyup.input-capslock\");\n      this.capsLockIcon?.remove();\n    }\n  }\n  /**\n   * Setup event handlers that trigger on the host element during native events from the internal HTMLInputElement\n   * These trigg\n   * @private\n   * @returns {this} The IdsInput API for chaining\n   */\n  #attachNativeEvents() {\n    if (!this.input) {\n      return this;\n    }\n    const events = [\"focus\", \"select\", \"keydown\", \"keypress\", \"keyup\", \"click\", \"dbclick\"];\n    events.forEach((evt) => {\n      this.onEvent(evt, this.input, (e) => {\n        this.triggerEvent(e.type, this, {\n          detail: {\n            elem: this,\n            nativeEvent: e,\n            value: this.value\n          }\n        });\n      });\n    });\n    return this;\n  }\n  /**\n   * Handle events\n   * @private\n   * @returns {void}\n   */\n  #attachEventHandlers() {\n    this.#attachNativeEvents();\n    this.onEvent(\"change.input\", this.container, (e) => {\n      this.triggeredByChange = true;\n      this.value = this.input?.value;\n      this.triggerEvent(\"change\", this, {\n        bubbles: true,\n        detail: {\n          elem: this,\n          nativeEvent: e,\n          value: this.value\n        }\n      });\n    });\n  }\n  /**\n   * handles event set up and teardown for password indicator\n   * @private\n   * @param {boolean} value whether to toggle events on or off\n   * @returns {void}\n   */\n  #togglePasswordEventSetUp(value) {\n    const showHidePasswordElem = this.container?.querySelector(\".show-hide-password\");\n    if (value) {\n      if (!showHidePasswordElem && this.isPasswordVisible) {\n        const showHideButton = document.createElement(\"ids-button\");\n        showHideButton.text = this.passwordVisible ? \"HIDE\" : \"SHOW\";\n        showHideButton.id = \"show-hide-password\";\n        showHideButton.classList.add(\"show-hide-password\");\n        showHideButton.noPadding = true;\n        if (this.input) {\n          this.input.insertAdjacentElement(\"afterend\", showHideButton);\n          this.input.type = `${this.passwordVisible ? \"text\" : this.type}`;\n        }\n      }\n      this.offEvent(\"click.input-showhidepassword\");\n      this.onEvent(\"click.input-showhidepassword\", showHidePasswordElem, () => {\n        this.passwordVisible = !this.passwordVisible;\n        this.#passwordVisibilityHandler();\n      });\n    } else {\n      this.offEvent(\"click.input-showhidepassword\");\n      this.input?.setAttribute(\"type\", this.type);\n      showHidePasswordElem?.remove();\n    }\n  }\n  /**\n   * toggles the visibility of the password by changing field type\n   * @private\n   */\n  #passwordVisibilityHandler() {\n    if (!this.shadowRoot)\n      return;\n    const passwordButton = this.shadowRoot.querySelector(`.show-hide-password`);\n    const passwordField = this.shadowRoot.querySelector(`.ids-input-field`);\n    if (this.passwordVisible) {\n      passwordButton?.setAttribute(\"text\", \"HIDE\");\n      passwordField?.setAttribute(\"type\", \"text\");\n    } else {\n      passwordButton?.setAttribute(\"text\", \"SHOW\");\n      passwordField?.setAttribute(\"type\", \"password\");\n    }\n  }\n  /**\n   * When set the input will add a CSS class `is-active` that simulates the text input being \"focused\".\n   * @param {boolean | string} value If true will set `text-ellipsis` attribute\n   */\n  set active(value) {\n    const val = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(value);\n    const className = \"is-active\";\n    if (val) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ACTIVE, val.toString());\n      this.container?.classList.add(className);\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ACTIVE);\n      this.container?.classList.remove(className);\n    }\n  }\n  get active() {\n    return (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(this.hasAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ACTIVE));\n  }\n  /**\n   * When set the input will select all text on focus\n   * @param {boolean | string} value If true will set `autoselect` attribute\n   */\n  set autoselect(value) {\n    const val = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(value);\n    if (val) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.AUTOSELECT, val.toString());\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.AUTOSELECT);\n    }\n    this.handleAutoselect();\n  }\n  get autoselect() {\n    return (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.AUTOSELECT));\n  }\n  /**\n   * When set the input will add css class `bg-transparent`\n   * @param {boolean | string} value If true will set `bg-transparent` attribute\n   */\n  set bgTransparent(value) {\n    const val = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(value);\n    const className = \"bg-transparent\";\n    if (val) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.BG_TRANSPARENT, val.toString());\n      this.container?.classList.add(className);\n      this.input?.classList.add(className);\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.BG_TRANSPARENT);\n      this.container?.classList.remove(className);\n      this.input?.classList.remove(className);\n    }\n  }\n  get bgTransparent() {\n    return (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.BG_TRANSPARENT));\n  }\n  /**\n   * When set the input will add css class `text-ellipsis`\n   * @param {boolean | string} value If true will set `text-ellipsis` attribute\n   */\n  set textEllipsis(value) {\n    const val = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(value);\n    const className = \"text-ellipsis\";\n    if (val) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.TEXT_ELLIPSIS, val.toString());\n      this.input?.classList.add(className);\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.TEXT_ELLIPSIS);\n      this.input?.classList.remove(className);\n    }\n  }\n  get textEllipsis() {\n    return (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.TEXT_ELLIPSIS));\n  }\n  /**\n   * Sets input to disabled\n   * @param {boolean | string} value If true will set `disabled` attribute\n   */\n  set disabled(value) {\n    const val = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(value);\n    if (val) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED, \"true\");\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED);\n    }\n    this.setInputState(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED);\n  }\n  get disabled() {\n    return (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED));\n  }\n  /**\n   * internal reference to a label element a user provides\n   */\n  #labelEl;\n  /**\n   * Set the `placeholder` of input\n   * @param {string} value of the `placeholder` property\n   */\n  set placeholder(value) {\n    if (value) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.PLACEHOLDER, value);\n      this.input?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.PLACEHOLDER, value);\n      return;\n    }\n    this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.PLACEHOLDER);\n    this.input?.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.PLACEHOLDER);\n  }\n  get placeholder() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.PLACEHOLDER);\n  }\n  /**\n   * Set the input to readonly state\n   * @param {boolean | string} value If true will set `readonly` attribute\n   */\n  set readonly(value) {\n    const val = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(value);\n    if (val) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.READONLY, val.toString());\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.READONLY);\n    }\n    this.setInputState(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.READONLY);\n  }\n  get readonly() {\n    return (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.READONLY));\n  }\n  /**\n   * @param {boolean | string} value If true, causes an IdsInput set to `readonly` to appear\n   * to use its standard field background color instead of the \"readonly\" state color\n   */\n  set readonlyBackground(value) {\n    const val = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(value);\n    if (val) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.READONLY_BACKGROUND, val.toString());\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.READONLY_BACKGROUND);\n    }\n    this.#setReadonlyBackground();\n  }\n  /**\n   * @returns {boolean} true if this IdsInput should appear to use its standard\n   * field background color instead of the \"readonly\" state color when set to `readonly`\n   */\n  get readonlyBackground() {\n    return (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.READONLY_BACKGROUND));\n  }\n  #setReadonlyBackground() {\n    this.container?.classList.toggle(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.READONLY_BACKGROUND, this.readonlyBackground);\n  }\n  /**\n   * Set the size (width) of input\n   * @param {string} value [xs, sm, mm, md, lg, full]\n   */\n  set size(value) {\n    const size = _ids_input_attributes__WEBPACK_IMPORTED_MODULE_21__.SIZES[value] || _ids_input_attributes__WEBPACK_IMPORTED_MODULE_21__.SIZES[\"default\"];\n    this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SIZE, size);\n    this.container?.classList.remove(...Object.values(_ids_input_attributes__WEBPACK_IMPORTED_MODULE_21__.SIZES));\n    this.container?.classList.add(size);\n  }\n  get size() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SIZE) || _ids_input_attributes__WEBPACK_IMPORTED_MODULE_21__.SIZES[\"default\"];\n  }\n  /**\n   * Sets the text alignment\n   * @param {IdsInputAlignment} value [start, center, end]\n   */\n  set textAlign(value) {\n    const textAlign = _ids_input_attributes__WEBPACK_IMPORTED_MODULE_21__.TEXT_ALIGN[value] || _ids_input_attributes__WEBPACK_IMPORTED_MODULE_21__.TEXT_ALIGN[\"default\"];\n    this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.TEXT_ALIGN, textAlign);\n    this.input?.classList.remove(\"start\", \"center\", \"end\");\n    this.input?.classList.add(textAlign);\n  }\n  get textAlign() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.TEXT_ALIGN) || _ids_input_attributes__WEBPACK_IMPORTED_MODULE_21__.TEXT_ALIGN[\"default\"];\n  }\n  /**\n   * Sets the input type\n   * @param {string} value [text, password, number, phone, email]\n   */\n  set type(value) {\n    const type = _ids_input_attributes__WEBPACK_IMPORTED_MODULE_21__.TYPES[value];\n    if (type) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.TYPE, value);\n      this.input?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.TYPE, type);\n      return;\n    }\n    this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.TYPE, _ids_input_attributes__WEBPACK_IMPORTED_MODULE_21__.TYPES[\"default\"]);\n    this.input?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.TYPE, _ids_input_attributes__WEBPACK_IMPORTED_MODULE_21__.TYPES[\"default\"]);\n  }\n  get type() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.TYPE) ?? _ids_input_attributes__WEBPACK_IMPORTED_MODULE_21__.TYPES[\"default\"];\n  }\n  /**\n   * Set the `value` attribute of input\n   * @param {string} val the value property\n   */\n  set value(val) {\n    let v = [\"string\", \"number\"].includes(typeof val) ? String(val) : String(val || \"\");\n    const currentValue = this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.VALUE) || \"\";\n    if (this.mask) {\n      v = this.processMaskFromProperty(val) || v;\n    }\n    if (this.input && this.input?.value !== v) {\n      this.input.value = v;\n      if (!this.triggeredByChange) {\n        this.input?.dispatchEvent(new Event(\"change\", { bubbles: true }));\n      }\n      this.triggeredByChange = false;\n    }\n    if (currentValue !== v) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.VALUE, v);\n    }\n  }\n  get value() {\n    return this.input?.value || \"\";\n  }\n  /**\n   * set the id of the input, which will also determine the\n   * input id for labels at #${id}-input\n   * @param {string} value id\n   */\n  set #id(value) {\n    if (value !== \"\") {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ID, value);\n      this.input?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ID, `${value}-input`);\n    }\n  }\n  get #id() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ID) || this.generatedId;\n  }\n  /**\n   * Set the css cursor property to something other than text\n   * @param {string} value the css cursor value\n   */\n  set cursor(value) {\n    this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.CURSOR, value);\n    this.input?.style.setProperty(\"cursor\", value);\n  }\n  get cursor() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.CURSOR) ?? \"\";\n  }\n  /**\n   * Sets the no margins attribute\n   * @param {boolean | string} n true or false or as a string\n   */\n  set noMargins(n) {\n    if ((0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(n)) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.NO_MARGINS, \"\");\n      this.container?.classList.add(\"no-margins\");\n      return;\n    }\n    this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.NO_MARGINS);\n    this.container?.classList.remove(\"no-margins\");\n  }\n  get noMargins() {\n    return (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.NO_MARGINS));\n  }\n  /**\n   * Sets the inner padding (inline-start and end)\n   * @param {string} n string value for the padding\n   */\n  set padding(n) {\n    if (n) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.PADDING, String(n));\n      this.input?.style.setProperty(\"padding-inline-start\", `${n}px`);\n      this.input?.style.setProperty(\"padding-inline-end\", `${n}px`);\n      return;\n    }\n    this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.PADDING);\n    this.input?.style.setProperty(\"padding-inline-start\", ``);\n    this.input?.style.setProperty(\"padding-inline-end\", ``);\n  }\n  get padding() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.PADDING) || \"\";\n  }\n  /**\n   * Overrides the standard \"blur\" behavior to instead tell the inner HTMLInput element to blur.\n   */\n  blur() {\n    this.input?.blur();\n  }\n  /**\n   * Overrides the standard \"focus\" behavior to instead pass focus to the inner HTMLInput element.\n   */\n  focus() {\n    this.input?.focus();\n  }\n  /**\n   * Set a format to be used in the validation\n   * @param {string|null} val date, time format\n   */\n  set format(val) {\n    if (val) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.FORMAT, val);\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.FORMAT);\n    }\n  }\n  /**\n   * format attribute\n   * @returns {string|null} return date format\n   */\n  get format() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.FORMAT);\n  }\n};\nIdsInput = __decorateClass([\n  (0,_core_ids_decorators__WEBPACK_IMPORTED_MODULE_0__.customElement)(\"ids-input\"),\n  (0,_core_ids_decorators__WEBPACK_IMPORTED_MODULE_0__.scss)(_ids_input_scss__WEBPACK_IMPORTED_MODULE_22__[\"default\"])\n], IdsInput);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9pZHMtaW5wdXQvaWRzLWlucHV0LnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQW9DO0FBQ1Q7QUFDRTtBQUVGO0FBQ0U7QUFDSTtBQUNIO0FBQ0c7QUFDRDtBQUNEO0FBQ047QUFDTTtBQUNIO0FBQ0Y7QUFDQztBQUNVO0FBQ1Q7QUFDTDtBQUVoQjtBQUNBO0FBQ0E7QUFRQTtBQUVZO0FBSW5CLElBQUksa0JBQWtCO0FBRXRCLE1BQU0sT0FBTyx3RkFBZTtBQUFmLEVBQ1gsK0ZBQWtCO0FBQWxCLElBQ0UsNEdBQXdCO0FBQXhCLE1BQ0UsOERBQWU7QUFBZixRQUNFLGlHQUFtQjtBQUFuQixVQUNFLG1HQUFvQjtBQUFwQixZQUNFLDJGQUFpQjtBQUFqQixjQUNFLG1HQUFvQjtBQUFwQixnQkFDRSxvRkFBYTtBQUFiLGtCQUNFLGtGQUFZO0FBQVosb0JBQ0UsOEZBQWtCO0FBQWxCLHNCQUNFLHFGQUFjO0FBQWQsd0JBQ0UseUZBQWdCO0FBQWhCLDBCQUNFLHNGQUFjO0FBQWQsNEJBQ0UsMERBQVU7QUFBViwwQkFDRjtBQUFBLHdCQUNGO0FBQUEsc0JBQ0Y7QUFBQSxvQkFDRjtBQUFBLGtCQUNGO0FBQUEsZ0JBQ0Y7QUFBQSxjQUNGO0FBQUEsWUFDRjtBQUFBLFVBQ0Y7QUFBQSxRQUNGO0FBQUEsTUFDRjtBQUFBLElBQ0Y7QUFBQSxFQUNGO0FBQ0Y7QUE2Q0EsSUFBcUIsV0FBckIsY0FBc0MsS0FBSztBQUFBLEVBQ3pDLGNBQWM7QUFBQSxFQUVkLG9CQUFvQjtBQUFBLEVBRXBCLGNBQWM7QUFDWixVQUFNO0FBR04sV0FBTyxlQUFlLE1BQU0sTUFBTTtBQUFBLE1BQ2hDLEtBQUssTUFBTSxLQUFLO0FBQUEsTUFDaEIsS0FBSyxDQUFDLFVBQVU7QUFBRSxhQUFLLE1BQU07QUFBQSxNQUFPO0FBQUEsTUFDcEMsY0FBYztBQUFBLE1BQ2QsWUFBWTtBQUFBLElBQ2QsQ0FBQztBQUFB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QUMxQyxPQUFPO0FBQ0wsV0FBSyxnQkFBZ0IsbUVBQWlCO0FBQUEsSUFDeEM7QUFBQSxFQUNGO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU1BLElBQUksU0FBd0I7QUFDMUIsV0FBTyxLQUFLLGFBQWEsbUVBQWlCO0FBQUEsRUFDNUM7QUFDRjtBQWozQnFCLFdBQXJCO0FBQUEsRUFGQyxtRUFBYSxDQUFDLFdBQVc7QUFBQSxFQUN6QiwwREFBSSxDQUFDLHdEQUFNO0FBQUEsR0FDUyIsInNvdXJjZXMiOlsid2VicGFjazovL2lkcy1lbnRlcnByaXNlLXdjLy4vc3JjL2NvbXBvbmVudHMvaWRzLWlucHV0L2lkcy1pbnB1dC50cz9kNmMxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGN1c3RvbUVsZW1lbnQsIHNjc3MgfSBmcm9tICcuLi8uLi9jb3JlL2lkcy1kZWNvcmF0b3JzJztcbmltcG9ydCB7IGF0dHJpYnV0ZXMgfSBmcm9tICcuLi8uLi9jb3JlL2lkcy1hdHRyaWJ1dGVzJztcbmltcG9ydCB7IHN0cmluZ1RvQm9vbCB9IGZyb20gJy4uLy4uL3V0aWxzL2lkcy1zdHJpbmctdXRpbHMvaWRzLXN0cmluZy11dGlscyc7XG5cbmltcG9ydCBJZHNMb2NhbGVNaXhpbiBmcm9tICcuLi8uLi9taXhpbnMvaWRzLWxvY2FsZS1taXhpbi9pZHMtbG9jYWxlLW1peGluJztcbmltcG9ydCBJZHNLZXlib2FyZE1peGluIGZyb20gJy4uLy4uL21peGlucy9pZHMta2V5Ym9hcmQtbWl4aW4vaWRzLWtleWJvYXJkLW1peGluJztcbmltcG9ydCBJZHNEaXJ0eVRyYWNrZXJNaXhpbiBmcm9tICcuLi8uLi9taXhpbnMvaWRzLWRpcnR5LXRyYWNrZXItbWl4aW4vaWRzLWRpcnR5LXRyYWNrZXItbWl4aW4nO1xuaW1wb3J0IElkc0NsZWFyYWJsZU1peGluIGZyb20gJy4uLy4uL21peGlucy9pZHMtY2xlYXJhYmxlLW1peGluL2lkcy1jbGVhcmFibGUtbWl4aW4nO1xuaW1wb3J0IElkc0NvbG9yVmFyaWFudE1peGluIGZyb20gJy4uLy4uL21peGlucy9pZHMtY29sb3ItdmFyaWFudC1taXhpbi9pZHMtY29sb3ItdmFyaWFudC1taXhpbic7XG5pbXBvcnQgSWRzRmllbGRIZWlnaHRNaXhpbiBmcm9tICcuLi8uLi9taXhpbnMvaWRzLWZpZWxkLWhlaWdodC1taXhpbi9pZHMtZmllbGQtaGVpZ2h0LW1peGluJztcbmltcG9ydCBJZHNMYWJlbFN0YXRlTWl4aW4gZnJvbSAnLi4vLi4vbWl4aW5zL2lkcy1sYWJlbC1zdGF0ZS1taXhpbi9pZHMtbGFiZWwtc3RhdGUtbWl4aW4nO1xuaW1wb3J0IElkc01hc2tNaXhpbiBmcm9tICcuLi8uLi9taXhpbnMvaWRzLW1hc2stbWl4aW4vaWRzLW1hc2stbWl4aW4nO1xuaW1wb3J0IElkc1ZhbGlkYXRpb25NaXhpbiBmcm9tICcuLi8uLi9taXhpbnMvaWRzLXZhbGlkYXRpb24tbWl4aW4vaWRzLXZhbGlkYXRpb24tbWl4aW4nO1xuaW1wb3J0IElkc1Rvb2x0aXBNaXhpbiBmcm9tICcuLi8uLi9taXhpbnMvaWRzLXRvb2x0aXAtbWl4aW4vaWRzLXRvb2x0aXAtbWl4aW4nO1xuaW1wb3J0IElkc1RoZW1lTWl4aW4gZnJvbSAnLi4vLi4vbWl4aW5zL2lkcy10aGVtZS1taXhpbi9pZHMtdGhlbWUtbWl4aW4nO1xuaW1wb3J0IElkc0V2ZW50c01peGluIGZyb20gJy4uLy4uL21peGlucy9pZHMtZXZlbnRzLW1peGluL2lkcy1ldmVudHMtbWl4aW4nO1xuaW1wb3J0IElkc0xvYWRpbmdJbmRpY2F0b3JNaXhpbiBmcm9tICcuLi8uLi9taXhpbnMvaWRzLWxvYWRpbmctaW5kaWNhdG9yLW1peGluL2lkcy1sb2FkaW5nLWluZGljYXRvci1taXhpbic7XG5pbXBvcnQgSWRzQXV0b0NvbXBsZXRlIGZyb20gJy4vaWRzLWF1dG9jb21wbGV0ZSc7XG5pbXBvcnQgSWRzRWxlbWVudCBmcm9tICcuLi8uLi9jb3JlL2lkcy1lbGVtZW50JztcblxuaW1wb3J0ICcuLi9pZHMtaWNvbi9pZHMtaWNvbic7XG5pbXBvcnQgJy4uL2lkcy10ZXh0L2lkcy10ZXh0JztcbmltcG9ydCAnLi4vaWRzLXRyaWdnZXItZmllbGQvaWRzLXRyaWdnZXItYnV0dG9uJztcbmltcG9ydCB7XG4gIFRZUEVTLFxuICBTSVpFUyxcbiAgVEVYVF9BTElHTixcbiAgVHlwZVZhbHVlcyxcbiAgVHlwZUtleXMsXG4gIFNpemVLZXlzLFxufSBmcm9tICcuL2lkcy1pbnB1dC1hdHRyaWJ1dGVzJztcblxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL2lkcy1pbnB1dC5zY3NzJztcbmltcG9ydCB0eXBlIElkc0ljb24gZnJvbSAnLi4vaWRzLWljb24vaWRzLWljb24nO1xuaW1wb3J0IHR5cGUgSWRzQnV0dG9uIGZyb20gJy4uL2lkcy1idXR0b24vaWRzLWJ1dHRvbic7XG5cbmxldCBpbnN0YW5jZUNvdW50ZXIgPSAwO1xuXG5jb25zdCBCYXNlID0gSWRzVG9vbHRpcE1peGluKFxuICBJZHNMYWJlbFN0YXRlTWl4aW4oXG4gICAgSWRzTG9hZGluZ0luZGljYXRvck1peGluKFxuICAgICAgSWRzQXV0b0NvbXBsZXRlKFxuICAgICAgICBJZHNGaWVsZEhlaWdodE1peGluKFxuICAgICAgICAgIElkc0RpcnR5VHJhY2tlck1peGluKFxuICAgICAgICAgICAgSWRzQ2xlYXJhYmxlTWl4aW4oXG4gICAgICAgICAgICAgIElkc0NvbG9yVmFyaWFudE1peGluKFxuICAgICAgICAgICAgICAgIElkc1RoZW1lTWl4aW4oXG4gICAgICAgICAgICAgICAgICBJZHNNYXNrTWl4aW4oXG4gICAgICAgICAgICAgICAgICAgIElkc1ZhbGlkYXRpb25NaXhpbihcbiAgICAgICAgICAgICAgICAgICAgICBJZHNMb2NhbGVNaXhpbihcbiAgICAgICAgICAgICAgICAgICAgICAgIElkc0tleWJvYXJkTWl4aW4oXG4gICAgICAgICAgICAgICAgICAgICAgICAgIElkc0V2ZW50c01peGluKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIElkc0VsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKVxuICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICAgKVxuICAgIClcbiAgKVxuKTtcblxuLy8gU2V0dGluZyBkZWZhdWx0cyB0ZXh0LWFsaWduXG50eXBlIElkc0lucHV0QWxpZ25tZW50ID0gJ3N0YXJ0JyB8ICdjZW50ZXInIHwgJ2VuZCc7XG5cbi8qKlxuICogSWRzSW5wdXQgZGVmaW5lcyBpdHMgdGVtcGxhdGUgaW4gYSB3YXkgdGhhdCBjYW4gYmUgb3ZlcnJpZGRlbiBieSBvdGhlclxuICogY29tcG9uZW50IHR5cGVzLlxuICovXG50eXBlIElkc0lucHV0VGVtcGxhdGVWYXJpYWJsZXMgPSB7XG4gIGFyaWFMYWJlbDogc3RyaW5nO1xuICBjYXBzTG9jazogc3RyaW5nO1xuICBjb250YWluZXJDbGFzczogc3RyaW5nO1xuICBpbnB1dENsYXNzOiBzdHJpbmc7XG4gIGlucHV0U3RhdGU6IHN0cmluZztcbiAgbGFiZWxIdG1sOiBzdHJpbmc7XG4gIHBsYWNlaG9sZGVyOiBzdHJpbmc7XG4gIHNob3dIaWRlOiBzdHJpbmc7XG4gIHR5cGU6IHN0cmluZztcbiAgdmFsdWU6IHN0cmluZztcbn07XG5cbi8qKlxuICogSURTIElucHV0IENvbXBvbmVudFxuICogQHR5cGUge0lkc0lucHV0fVxuICogQGluaGVyaXRzIElkc0VsZW1lbnRcbiAqIEBtaXhlcyBJZHNMb2NhbGVNaXhpblxuICogQG1peGVzIElkc0V2ZW50c01peGluXG4gKiBAbWl4ZXMgSWRzS2V5Ym9hcmRNaXhpblxuICogQG1peGVzIElkc0NsZWFyYWJsZU1peGluXG4gKiBAbWl4ZXMgSWRzQ29sb3JWYXJpYW50TWl4aW5cbiAqIEBtaXhlcyBJZHNEaXJ0eVRyYWNrZXJNaXhpblxuICogQG1peGVzIElkc0xhYmVsU3RhdGVNaXhpblxuICogQG1peGVzIElkc01hc2tNaXhpblxuICogQG1peGVzIElkc1ZhbGlkYXRpb25NaXhpblxuICogQG1peGVzIElkc1RoZW1lTWl4aW5cbiAqIEBtaXhlcyBJZHNUb29sdGlwTWl4aW5cbiAqIEBtaXhlcyBJZHNMb2FkaW5nSW5kaWNhdG9yTWl4aW5cbiAqIEBwYXJ0IGNvbnRhaW5lciAtIHRoZSBvdmVyYWxsIGNvbnRhaW5lclxuICogQHBhcnQgZmllbGQtY29udGFpbmVyIC0gdGhlIGNvbnRhaW5lciBmb3IgdGhlIGlucHV0XG4gKiBAcGFydCBpbnB1dCAtIHRoZSBpbnB1dCBlbGVtZW50XG4gKiBAcGFydCBsYWJlbCAtIHRoZSBsYWJlbCBlbGVtZW50XG4gKi9cbkBjdXN0b21FbGVtZW50KCdpZHMtaW5wdXQnKVxuQHNjc3Moc3R5bGVzKVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSWRzSW5wdXQgZXh0ZW5kcyBCYXNlIHtcbiAgZ2VuZXJhdGVkSWQgPSAnJztcblxuICB0cmlnZ2VyZWRCeUNoYW5nZSA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICAvLyBPdmVycmlkZSBIVE1MRWxlbWVudCBpZCBwcm9wZXJ0eVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnaWQnLCB7XG4gICAgICBnZXQ6ICgpID0+IHRoaXMuI2lkLFxuICAgICAgc2V0OiAodmFsdWUpID0+IHsgdGhpcy4jaWQgPSB2YWx1ZTsgfSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICB9KTtcbiAgfVxuXG4gIGlzRm9ybUNvbXBvbmVudCA9IHRydWU7XG5cbiAgLyoqXG4gICAqIEluaGVyaXRlZCBmcm9tIGBJZHNDb2xvclZhcmlhbnRNaXhpbmBcbiAgICogQHJldHVybnMge0FycmF5PHN0cmluZz59IExpc3Qgb2YgYXZhaWxhYmxlIGNvbG9yIHZhcmlhbnRzIGZvciB0aGlzIGNvbXBvbmVudFxuICAgKi9cbiAgY29sb3JWYXJpYW50cyA9IFsnYWx0ZXJuYXRlJywgJ2FsdGVybmF0ZS1mb3JtYXR0ZXInLCAnYm9yZGVybGVzcycsICdpbi1jZWxsJ107XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtBcnJheTxzdHJpbmc+fSBJZHNJbnB1dCBjb21wb25lbnQgb2JzZXJ2YWJsZSBhdHRyaWJ1dGVzXG4gICAqL1xuICBzdGF0aWMgZ2V0IGF0dHJpYnV0ZXMoKTogQXJyYXk8c3RyaW5nPiB7XG4gICAgcmV0dXJuIFtcbiAgICAgIC4uLnN1cGVyLmF0dHJpYnV0ZXMsXG4gICAgICBhdHRyaWJ1dGVzLkFDVElWRSxcbiAgICAgIGF0dHJpYnV0ZXMuQVVUT1NFTEVDVCxcbiAgICAgIGF0dHJpYnV0ZXMuQkdfVFJBTlNQQVJFTlQsXG4gICAgICBhdHRyaWJ1dGVzLkNBUFNfTE9DSyxcbiAgICAgIGF0dHJpYnV0ZXMuQ1VSU09SLFxuICAgICAgYXR0cmlidXRlcy5ESVNBQkxFRCxcbiAgICAgIGF0dHJpYnV0ZXMuRk9STUFULFxuICAgICAgYXR0cmlidXRlcy5JRCxcbiAgICAgIGF0dHJpYnV0ZXMuTk9fTUFSR0lOUyxcbiAgICAgIGF0dHJpYnV0ZXMuUEFERElORyxcbiAgICAgIGF0dHJpYnV0ZXMuUEFTU1dPUkRfVklTSUJMRSxcbiAgICAgIGF0dHJpYnV0ZXMuUExBQ0VIT0xERVIsXG4gICAgICBhdHRyaWJ1dGVzLlJFQURPTkxZX0JBQ0tHUk9VTkQsXG4gICAgICBhdHRyaWJ1dGVzLlJFQURPTkxZLFxuICAgICAgYXR0cmlidXRlcy5SRVZFQUxBQkxFX1BBU1NXT1JELFxuICAgICAgYXR0cmlidXRlcy5TSVpFLFxuICAgICAgYXR0cmlidXRlcy5UQUJCQUJMRSxcbiAgICAgIGF0dHJpYnV0ZXMuVEVYVF9BTElHTixcbiAgICAgIGF0dHJpYnV0ZXMuVEVYVF9FTExJUFNJUyxcbiAgICAgIGF0dHJpYnV0ZXMuVFlQRSxcbiAgICAgIGF0dHJpYnV0ZXMuVkFMVUUsXG4gICAgXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDdXN0b20gRWxlbWVudCBgY29ubmVjdGVkQ2FsbGJhY2tgIGltcGxlbWVudGF0aW9uXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgY29ubmVjdGVkQ2FsbGJhY2soKTogdm9pZCB7XG4gICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICB0aGlzLiNhdHRhY2hFdmVudEhhbmRsZXJzKCk7XG5cbiAgICBpZiAodGhpcy5oYXNBdHRyaWJ1dGUoYXR0cmlidXRlcy5BVVRPU0VMRUNUKSkge1xuICAgICAgdGhpcy5oYW5kbGVBdXRvc2VsZWN0KCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaXNQYXNzd29yZFZpc2libGUpIHtcbiAgICAgIHRoaXMuI3RvZ2dsZVBhc3N3b3JkRXZlbnRTZXRVcCh0cnVlKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5jYXBzTG9jaykge1xuICAgICAgdGhpcy4jY2Fwc0xvY2tFdmVudFNldFVwKHRydWUpO1xuICAgIH1cblxuICAgIHRoaXMuI3NldFJlYWRvbmx5QmFja2dyb3VuZCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSB0aGUgVGVtcGxhdGUgZm9yIHRoZSBjb250ZW50c1xuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgdGVtcGxhdGVcbiAgICovXG4gIHRlbXBsYXRlKCk6IHN0cmluZyB7XG4gICAgdGhpcy50ZW1wbGF0ZUhvc3RBdHRyaWJ1dGVzKCk7XG4gICAgY29uc3Qge1xuICAgICAgYXJpYUxhYmVsLFxuICAgICAgY2Fwc0xvY2ssXG4gICAgICBjb250YWluZXJDbGFzcyxcbiAgICAgIGlucHV0Q2xhc3MsXG4gICAgICBpbnB1dFN0YXRlLFxuICAgICAgbGFiZWxIdG1sLFxuICAgICAgcGxhY2Vob2xkZXIsXG4gICAgICBzaG93SGlkZSxcbiAgICAgIHR5cGUsXG4gICAgICB2YWx1ZVxuICAgIH0gPSB0aGlzLnRlbXBsYXRlVmFyaWFibGVzKCk7XG5cbiAgICByZXR1cm4gYDxkaXYgY2xhc3M9XCIke2NvbnRhaW5lckNsYXNzfVwiIHBhcnQ9XCJjb250YWluZXJcIj5cbiAgICAgICR7bGFiZWxIdG1sfVxuICAgICAgPGRpdiBjbGFzcz1cImZpZWxkLWNvbnRhaW5lclwiIHBhcnQ9XCJmaWVsZC1jb250YWluZXJcIj5cbiAgICAgICAgPGlucHV0XG4gICAgICAgICAgcGFydD1cImlucHV0XCJcbiAgICAgICAgICBpZD1cIiR7dGhpcy5pZH0taW5wdXRcIlxuICAgICAgICAgICR7dHlwZX0ke2lucHV0Q2xhc3N9JHtwbGFjZWhvbGRlcn0ke2lucHV0U3RhdGV9XG4gICAgICAgICAgJHthcmlhTGFiZWx9XG4gICAgICAgICAgJHt2YWx1ZX1cbiAgICAgICAgICA+PC9pbnB1dD5cbiAgICAgICAgJHtzaG93SGlkZX1cbiAgICAgICAgJHtjYXBzTG9ja31cbiAgICAgICAgPHNsb3QgbmFtZT1cImxvYWRpbmctaW5kaWNhdG9yXCI+PC9zbG90PlxuICAgICAgPC9kaXY+XG4gICAgICAke3RoaXMuYXV0b2NvbXBsZXRlID8gYFxuICAgICAgICA8aWRzLXBvcHVwXG4gICAgICAgICAgdHlwZT1cImRyb3Bkb3duXCJcbiAgICAgICAgICBhbGlnbj1cImJvdHRvbSwgbGVmdFwiXG4gICAgICAgICAgYWxpZ24tdGFyZ2V0PVwiIyR7dGhpcy5pZH0taW5wdXRcIlxuICAgICAgICAgIHBhcnQ9XCJwb3B1cFwiXG4gICAgICAgID5cbiAgICAgICAgICA8aWRzLWxpc3QtYm94IHNsb3Q9XCJjb250ZW50XCIgc2l6ZT1cIiR7dGhpcy5zaXplfVwiPjwvaWRzLWxpc3QtYm94PlxuICAgICAgICA8L2lkcy1wb3B1cD5gIDogJyd9XG4gICAgPC9kaXY+YDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VzIGN1cnJlbnQgSWRzSW5wdXQgc3RhdGUgdG8gc2V0IHNvbWUgYXR0cmlidXRlcyBvbiBpdHMgaG9zdCBlbGVtZW50XG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgdGVtcGxhdGVIb3N0QXR0cmlidXRlcygpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuaWQpIHtcbiAgICAgIHRoaXMuZ2VuZXJhdGVkSWQgPSBgaWRzLWlucHV0LSR7aW5zdGFuY2VDb3VudGVyKyt9YDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVXNlcyBjdXJyZW50IElkc0lucHV0IHN0YXRlIHRvIGdlbmVyYXRlIHN0cmluZ3MgdXNlZCBpbiBpdHMgdGVtcGxhdGUuXG4gICAqIEByZXR1cm5zIHtJZHNJbnB1dFRlbXBsYXRlVmFyaWFibGVzfSBjb250YWluaW5nIHRlbXBsYXRlIHN0cmluZ3MgdXNlZCBmb3IgZ2VuZXJhdGluZyBhbiBJZHNJbnB1dCB0ZW1wbGF0ZVxuICAgKi9cbiAgdGVtcGxhdGVWYXJpYWJsZXMoKTogSWRzSW5wdXRUZW1wbGF0ZVZhcmlhYmxlcyB7XG4gICAgY29uc3QgYXR0cnMgPSB7XG4gICAgICByZWFkb25seTogdGhpcy5yZWFkb25seSA/ICdyZWFkb25seScgOiAnJyxcbiAgICAgIGRpc2FibGVkOiB0aGlzLmRpc2FibGVkID8gJ2Rpc2FibGVkJyA6ICcnLFxuICAgICAgcmVxdWlyZWQ6IHRoaXMudmFsaWRhdGUgPyAncmVxdWlyZWQnIDogJycsXG4gICAgICBub01hcmdpbnM6IHRoaXMubm9NYXJnaW5zID8gJ25vLW1hcmdpbnMnIDogJycsXG4gICAgfTtcblxuICAgIGNvbnN0IHBsYWNlaG9sZGVyID0gdGhpcy5wbGFjZWhvbGRlciA/IGAgcGxhY2Vob2xkZXI9XCIke3RoaXMucGxhY2Vob2xkZXJ9XCJgIDogJyc7XG4gICAgY29uc3QgdHlwZSA9IGAgdHlwZT1cIiR7dGhpcy5pc1Bhc3N3b3JkVmlzaWJsZSAmJiB0aGlzLnBhc3N3b3JkVmlzaWJsZSA/ICd0ZXh0JyA6IHRoaXMudHlwZSB8fCBUWVBFUy5kZWZhdWx0fVwiYDtcbiAgICBsZXQgaW5wdXRDbGFzcyA9IGBpZHMtaW5wdXQtZmllbGQgJHt0aGlzLnRleHRBbGlnbn1gO1xuXG4gICAgLy8gSGFuZGxlIFBhc3N3b3JkIEZpZWxkc1xuICAgIGNvbnN0IHNob3dIaWRlID0gdGhpcy50ZW1wbGF0ZVNob3dIaWRlKCk7XG4gICAgY29uc3QgY2Fwc0xvY2sgPSB0aGlzLnRlbXBsYXRlQ2Fwc0xvY2soKTtcblxuICAgIGlucHV0Q2xhc3MgKz0gc3RyaW5nVG9Cb29sKHRoaXMuYmdUcmFuc3BhcmVudCkgPyAnIGJnLXRyYW5zcGFyZW50JyA6ICcnO1xuICAgIGlucHV0Q2xhc3MgKz0gc3RyaW5nVG9Cb29sKHRoaXMucmVhZG9ubHlCYWNrZ3JvdW5kKSA/ICcnIDogJyByZWFkb25seS1iYWNrZ3JvdW5kJztcbiAgICBpbnB1dENsYXNzICs9IHN0cmluZ1RvQm9vbCh0aGlzLnRleHRFbGxpcHNpcykgPyAnIHRleHQtZWxsaXBzaXMnIDogJyc7XG4gICAgaW5wdXRDbGFzcyA9IGAgY2xhc3M9XCIke2lucHV0Q2xhc3N9XCJgO1xuXG4gICAgbGV0IGlucHV0U3RhdGUgPSBzdHJpbmdUb0Jvb2wodGhpcy5yZWFkb25seSkgPyAnIHJlYWRvbmx5JyA6ICcnO1xuICAgIGlucHV0U3RhdGUgPSBzdHJpbmdUb0Jvb2wodGhpcy5kaXNhYmxlZCkgPyAnIGRpc2FibGVkJyA6IGlucHV0U3RhdGU7XG5cbiAgICBsZXQgY29udGFpbmVyQ2xhc3MgPSBgaWRzLWlucHV0JHtpbnB1dFN0YXRlfSAke3RoaXMuc2l6ZX1gO1xuICAgIGNvbnRhaW5lckNsYXNzICs9IHN0cmluZ1RvQm9vbCh0aGlzLmNvbXBhY3QpID8gJyBjb21wYWN0JyA6ICcnO1xuICAgIGNvbnRhaW5lckNsYXNzICs9IHN0cmluZ1RvQm9vbCh0aGlzLm5vTWFyZ2lucykgPyAnIG5vLW1hcmdpbnMnIDogJyc7XG5cbiAgICBjb25zdCBhcmlhTGFiZWwgPSB0aGlzLmhhc0F0dHJpYnV0ZShhdHRyaWJ1dGVzLkxBQkVMX1NUQVRFKSAmJiB0aGlzLmxhYmVsID8gYGFyaWEtbGFiZWw9XCIke3RoaXMubGFiZWx9XCJgIDogJyc7XG4gICAgY29uc3QgaGlkZGVuTGFiZWxDc3MgPSAhdGhpcy5sYWJlbC5sZW5ndGggfHwgdGhpcy5sYWJlbFN0YXRlID09PSAnaGlkZGVuJyA/ICcgZW1wdHknIDogJyc7XG4gICAgY29uc3QgcmVxdWlyZWRMYWJlbENzcyA9ICF0aGlzLmxhYmVsUmVxdWlyZWQgPyAnIG5vLXJlcXVpcmVkLWluZGljYXRvcicgOiAnJztcbiAgICBjb25zdCBsYWJlbEh0bWwgPSBgPGxhYmVsXG4gICAgICBjbGFzcz1cImlkcy1sYWJlbC10ZXh0JHtyZXF1aXJlZExhYmVsQ3NzfSR7aGlkZGVuTGFiZWxDc3N9XCJcbiAgICAgIGZvcj1cIiR7dGhpcy5pZH0taW5wdXRcIlxuICAgICAgcGFydD1cImxhYmVsXCJcbiAgICAgICR7YXR0cnMucmVhZG9ubHl9XG4gICAgICAke2F0dHJzLmRpc2FibGVkfVxuICAgICAgJHthdHRycy5yZXF1aXJlZH1cbiAgICA+XG4gICAgICA8aWRzLXRleHQgcGFydD1cImxhYmVsXCIgbGFiZWwgJHthdHRycy5kaXNhYmxlZH0gY29sb3ItdW5zZXQ+XG4gICAgICAgICR7dGhpcy5sYWJlbH1cbiAgICAgIDwvaWRzLXRleHQ+XG4gICAgPC9sYWJlbD5gO1xuXG4gICAgY29uc3QgdmFsdWUgPSB0aGlzLmhhc0F0dHJpYnV0ZShhdHRyaWJ1dGVzLlZBTFVFKSA/IGAgdmFsdWU9XCIke3RoaXMuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZXMuVkFMVUUpfVwiIGAgOiAnJztcblxuICAgIHJldHVybiB7XG4gICAgICBhcmlhTGFiZWwsXG4gICAgICBjYXBzTG9jayxcbiAgICAgIGNvbnRhaW5lckNsYXNzLFxuICAgICAgaW5wdXRDbGFzcyxcbiAgICAgIGlucHV0U3RhdGUsXG4gICAgICBsYWJlbEh0bWwsXG4gICAgICBwbGFjZWhvbGRlcixcbiAgICAgIHNob3dIaWRlLFxuICAgICAgdHlwZSxcbiAgICAgIHZhbHVlXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmVhZG9ubHlcbiAgICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgdGhpcyBpcyBhIHBhc3N3b3JkIGZpZWxkIGFuZCB0aGUgcGFzc3dvcmQgc2hvdWxkIGJlIHNob3duIGFzIHBsYWluIHRleHRcbiAgICovXG4gIGdldCBpc1Bhc3N3b3JkVmlzaWJsZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5yZXZlYWxhYmxlUGFzc3dvcmQgJiYgdGhpcy50eXBlID09PSBUWVBFUy5wYXNzd29yZDtcbiAgfVxuXG4gIHRlbXBsYXRlU2hvd0hpZGUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5pc1Bhc3N3b3JkVmlzaWJsZVxuICAgICAgPyBgPGlkcy1idXR0b24gaWQ9XCJzaG93LWhpZGUtcGFzc3dvcmRcIiBjbGFzcz1cInNob3ctaGlkZS1wYXNzd29yZFwiIG5vLXBhZGRpbmcgdGV4dD1cIiR7dGhpcy5wYXNzd29yZFZpc2libGUgPyAnSElERScgOiAnU0hPVyd9XCI+PC9pZHMtYnV0dG9uPmBcbiAgICAgIDogJyc7XG4gIH1cblxuICB0ZW1wbGF0ZUNhcHNMb2NrKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuY2Fwc0xvY2tcbiAgICAgID8gYDxpZHMtaWNvbiBpZD1cImNhcHMtbG9jay1pbmRpY2F0b3JcIiBjbGFzcz1cImNhcHMtbG9jay1pbmRpY2F0b3JcIiBpY29uPVwiY2Fwc2xvY2tcIj48L2lkcy1pY29uPmBcbiAgICAgIDogJyc7XG4gIH1cblxuICBvbkNvbG9yVmFyaWFudFJlZnJlc2godmFsdWU6IHN0cmluZyk6IHZvaWQge1xuICAgIHN1cGVyLmNvbG9yVmFyaWFudCA9IHZhbHVlO1xuICAgIGlmICh0aGlzLmNsZWFyYWJsZSkge1xuICAgICAgdGhpcy5yZWZyZXNoQ2xlYXJhYmxlQnV0dG9uU3R5bGVzKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEByZWFkb25seVxuICAgKiBAcmV0dXJucyB7SFRNTElucHV0RWxlbWVudH0gdGhlIGlubmVyIGBpbnB1dGAgZWxlbWVudFxuICAgKi9cbiAgZ2V0IGlucHV0KCk6IEhUTUxJbnB1dEVsZW1lbnQgfCB1bmRlZmluZWQgfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy5jb250YWluZXI/LnF1ZXJ5U2VsZWN0b3I8SFRNTElucHV0RWxlbWVudD4oYGlucHV0W3BhcnQ9XCJpbnB1dFwiXWApO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZWFkb25seVxuICAgKiBAcmV0dXJucyB7SFRNTEVsZW1lbnR9IHRoZSBjYXBzIGxvY2sgaW5kaWNhdG9yIGljb24sIGlmIG9uZSBleGlzdHNcbiAgICovXG4gIGdldCBjYXBzTG9ja0ljb24oKTogSFRNTEVsZW1lbnQgfCB1bmRlZmluZWQgfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy5jb250YWluZXI/LnF1ZXJ5U2VsZWN0b3I8SWRzSWNvbj4oJyNjYXBzLWxvY2staW5kaWNhdG9yJyk7XG4gIH1cblxuICAvKipcbiAgICogQHJlYWRvbmx5XG4gICAqIEByZXR1cm5zIHtIVE1MRWxlbWVudH0gdGhlIGVsZW1lbnQgaW4gdGhpcyBjb21wb25lbnQncyBTaGFkb3cgUm9vdFxuICAgKiAgdGhhdCB3cmFwcyB0aGUgaW5wdXQgYW5kIGFueSB0cmlnZ2VyaW5nIGVsZW1lbnRzIG9yIGljb25zXG4gICAqL1xuICBnZXQgZmllbGRDb250YWluZXIoKTogSFRNTEVsZW1lbnQgfCB1bmRlZmluZWQgfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy5jb250YWluZXI/LnF1ZXJ5U2VsZWN0b3IoJy5maWVsZC1jb250YWluZXInKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmVhZG9ubHlcbiAgICogQHJldHVybnMge0hUTUxMYWJlbEVsZW1lbnR9IHRoZSBpbm5lciBgbGFiZWxgIGVsZW1lbnRcbiAgICovXG4gIGdldCBsYWJlbEVsKCk6IEhUTUxMYWJlbEVsZW1lbnQgfCB1bmRlZmluZWQgfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy4jbGFiZWxFbCB8fCB0aGlzLnNoYWRvd1Jvb3Q/LnF1ZXJ5U2VsZWN0b3I8SFRNTExhYmVsRWxlbWVudD4oYFtmb3I9XCIke3RoaXMuaWR9LWlucHV0XCJdYCk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge2Jvb2xlYW59IGluZGljYXRlcyB3aGV0aGVyIHBhc3N3b3JkIHJldmVhbCBmdW5jdGlvbmFsaXR5IGlzIG9uIG9yIG9mZlxuICAgKi9cbiAgZ2V0IHJldmVhbGFibGVQYXNzd29yZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gc3RyaW5nVG9Cb29sKHRoaXMuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZXMuUkVWRUFMQUJMRV9QQVNTV09SRCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIHNldHMgd2hldGhlciBwYXNzd29yZCByZXZlYWwgZnVuY3Rpb25hbGl0eSBpcyBhdmFpbGFibGVcbiAgICogQHBhcmFtIHtib29sZWFuIHwgc3RyaW5nfSB2YWx1ZSBib29sZWFuIHZhbHVlIHNldHMgd2hldGhlciByZXZlYWwgZnVuY3Rpb25hbGl0eSBpcyB0b2dnbGVkIG9uIG9yIG9mZlxuICAgKi9cbiAgc2V0IHJldmVhbGFibGVQYXNzd29yZCh2YWx1ZTogYm9vbGVhbiB8IHN0cmluZykge1xuICAgIGNvbnN0IHZhbHVlU2FmZSA9IHN0cmluZ1RvQm9vbCh2YWx1ZSk7XG4gICAgaWYgKHRoaXMudHlwZSA9PT0gVFlQRVMucGFzc3dvcmQpIHtcbiAgICAgIGlmICh2YWx1ZVNhZmUpIHtcbiAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlcy5SRVZFQUxBQkxFX1BBU1NXT1JELCAndHJ1ZScpO1xuICAgICAgICB0aGlzLiN0b2dnbGVQYXNzd29yZEV2ZW50U2V0VXAodHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZShhdHRyaWJ1dGVzLlJFVkVBTEFCTEVfUEFTU1dPUkQsICdmYWxzZScpO1xuICAgICAgICB0aGlzLiN0b2dnbGVQYXNzd29yZEV2ZW50U2V0VXAoZmFsc2UpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGVzLlJFVkVBTEFCTEVfUEFTU1dPUkQpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gaW5kaWNhdGVzIHdoZXRoZXIgdGhlIGNhcHNsb2NrIGluZGljYXRvciBpcyBlbmFibGVkIG9yIGRpc2FibGVkXG4gICAqL1xuICBnZXQgY2Fwc0xvY2soKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHN0cmluZ1RvQm9vbCh0aGlzLmdldEF0dHJpYnV0ZShhdHRyaWJ1dGVzLkNBUFNfTE9DSykpO1xuICB9XG5cbiAgLyoqXG4gICAqIHNldHMgd2hldGhlciBjYXBzbG9jayBpbmRpY2F0b3JpcyBlbmFibGVkIG9yIGRpc2FibGVkXG4gICAqIEBwYXJhbSB7Ym9vbGVhbiB8IHN0cmluZ30gdmFsdWUgc2V0cyB3aGV0aGVyIGNhcHNsb2NrIGluZGljYXRvciBmdW5jdGlvbmFsaXR5IGlzIHRvZ2dsZWQgb24gb3Igb2ZmXG4gICAqL1xuICBzZXQgY2Fwc0xvY2sodmFsdWU6IGJvb2xlYW4gfCBzdHJpbmcpIHtcbiAgICBpZiAoc3RyaW5nVG9Cb29sKHZhbHVlKSkge1xuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlcy5DQVBTX0xPQ0ssICd0cnVlJyk7XG4gICAgICB0aGlzLiNjYXBzTG9ja0V2ZW50U2V0VXAodHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZXMuQ0FQU19MT0NLKTtcbiAgICAgIHRoaXMuI2NhcHNMb2NrRXZlbnRTZXRVcChmYWxzZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtib29sZWFufSB3aGV0aGVyIHRoZSBwYXNzd29yZCBpcyBjdXJyZW50bHkgdmlzaWJsZVxuICAgKi9cbiAgZ2V0IHBhc3N3b3JkVmlzaWJsZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gc3RyaW5nVG9Cb29sKHRoaXMuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZXMuUEFTU1dPUkRfVklTSUJMRSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIHNldHMgd2hldGhlciB0aGUgcGFzc3dvcmQgaXMgY3VycmVudGx5IHZpc2libGVcbiAgICogQHBhcmFtIHtib29sZWFuIHwgc3RyaW5nfSB2YWx1ZSB0b2dnbGVzIHRoZSB2aXNpYmlsaXR5IG9mIHRoZSBwYXNzd29yZCBvbiBvciBvZmZcbiAgICovXG4gIHNldCBwYXNzd29yZFZpc2libGUodmFsdWU6IGJvb2xlYW4gfCBzdHJpbmcpIHtcbiAgICBjb25zdCB2YWx1ZVNhZmUgPSBzdHJpbmdUb0Jvb2wodmFsdWUpO1xuICAgIGlmICh2YWx1ZVNhZmUgIT09IHRoaXMucGFzc3dvcmRWaXNpYmxlKSB7XG4gICAgICBpZiAodmFsdWVTYWZlKSB7XG4gICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZXMuUEFTU1dPUkRfVklTSUJMRSwgJ3RydWUnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZXMuUEFTU1dPUkRfVklTSUJMRSwgJ2ZhbHNlJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy4jcGFzc3dvcmRWaXNpYmlsaXR5SGFuZGxlcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBpbnB1dCBzdGF0ZSBmb3IgZGlzYWJsZWQgb3IgcmVhZG9ubHlcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHByb3AgVGhlIHByb3BlcnR5LlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIHNldElucHV0U3RhdGUocHJvcDogc3RyaW5nKTogdm9pZCB7XG4gICAgaWYgKHByb3AgPT09IGF0dHJpYnV0ZXMuUkVBRE9OTFkgfHwgcHJvcCA9PT0gYXR0cmlidXRlcy5ESVNBQkxFRCkge1xuICAgICAgaWYgKCF0aGlzLnNoYWRvd1Jvb3QpIHJldHVybjtcblxuICAgICAgY29uc3QgbXNnTm9kZXMgPSBbXS5zbGljZS5jYWxsKHRoaXMuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yQWxsKCcudmFsaWRhdGlvbi1tZXNzYWdlJykpO1xuICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgcHJvcDE6IHByb3AsXG4gICAgICAgIHByb3AyOiBwcm9wICE9PSBhdHRyaWJ1dGVzLlJFQURPTkxZID8gYXR0cmlidXRlcy5SRUFET05MWSA6IGF0dHJpYnV0ZXMuRElTQUJMRUQsXG4gICAgICAgIHZhbDogc3RyaW5nVG9Cb29sKCh0aGlzIGFzIGFueSlbcHJvcF0pXG4gICAgICB9O1xuXG4gICAgICBpZiAob3B0aW9ucy52YWwpIHtcbiAgICAgICAgdGhpcy5pbnB1dD8ucmVtb3ZlQXR0cmlidXRlKG9wdGlvbnMucHJvcDIpO1xuICAgICAgICB0aGlzLmNvbnRhaW5lcj8uY2xhc3NMaXN0Py5yZW1vdmU/LihvcHRpb25zLnByb3AyKTtcbiAgICAgICAgdGhpcy5jb250YWluZXI/LnF1ZXJ5U2VsZWN0b3I/LignaWRzLXRleHQnKT8ucmVtb3ZlQXR0cmlidXRlKG9wdGlvbnMucHJvcDIpO1xuICAgICAgICBtc2dOb2Rlcy5mb3JFYWNoKCh4OiBhbnkpID0+IHguY2xhc3NMaXN0LnJlbW92ZShvcHRpb25zLnByb3AyKSk7XG5cbiAgICAgICAgdGhpcy5pbnB1dD8uc2V0QXR0cmlidXRlKG9wdGlvbnMucHJvcDEsICd0cnVlJyk7XG4gICAgICAgIHRoaXMuY29udGFpbmVyPy5jbGFzc0xpc3QuYWRkKG9wdGlvbnMucHJvcDEpO1xuICAgICAgICB0aGlzLmNvbnRhaW5lcj8ucXVlcnlTZWxlY3Rvcj8uKCdpZHMtdGV4dCcpPy5zZXRBdHRyaWJ1dGU/LihvcHRpb25zLnByb3AxLCAndHJ1ZScpO1xuICAgICAgICBtc2dOb2Rlcy5mb3JFYWNoKCh4OiBhbnkpID0+IHguY2xhc3NMaXN0LmFkZChvcHRpb25zLnByb3AxKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmlucHV0Py5yZW1vdmVBdHRyaWJ1dGUob3B0aW9ucy5wcm9wMSk7XG4gICAgICAgIHRoaXMuY29udGFpbmVyPy5jbGFzc0xpc3QucmVtb3ZlKG9wdGlvbnMucHJvcDEpO1xuICAgICAgICB0aGlzLmNvbnRhaW5lcj8ucXVlcnlTZWxlY3RvcignaWRzLXRleHQnKT8ucmVtb3ZlQXR0cmlidXRlKG9wdGlvbnMucHJvcDEpO1xuICAgICAgICBtc2dOb2Rlcy5mb3JFYWNoKCh4OiBhbnkpID0+IHguY2xhc3NMaXN0LnJlbW92ZShvcHRpb25zLnByb3AxKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgbGFiZWwgdGV4dFxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgb2YgbGFiZWxcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBzZXRMYWJlbFRleHQodmFsdWU6IHN0cmluZyk6IHZvaWQge1xuICAgIHJldHVybiBzdXBlci5zZXRMYWJlbFRleHQodmFsdWUsIGBbZm9yPVwiJHt0aGlzLmlkfS1pbnB1dFwiXWApO1xuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZSBhdXRvc2VsZWN0XG4gICAqIEBwcml2YXRlXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgaGFuZGxlQXV0b3NlbGVjdCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5hdXRvc2VsZWN0KSB7XG4gICAgICB0aGlzLmhhbmRsZUlucHV0Rm9jdXNFdmVudCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmhhbmRsZUlucHV0Rm9jdXNFdmVudCgncmVtb3ZlJyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZSBpbnB1dCBmb2N1cyBldmVudFxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bGx9IG9wdGlvbiBJZiAncmVtb3ZlJywgd2lsbCByZW1vdmUgYXR0YWNoZWQgZXZlbnRzXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgaGFuZGxlSW5wdXRGb2N1c0V2ZW50KG9wdGlvbj86IHN0cmluZyB8IG51bGwpOiB2b2lkIHtcbiAgICBjb25zdCBldmVudE5hbWUgPSAnZm9jdXMnO1xuICAgIGlmIChvcHRpb24gPT09ICdyZW1vdmUnKSB7XG4gICAgICBjb25zdCBoYW5kbGVyID0gdGhpcz8uaGFuZGxlZEV2ZW50cz8uZ2V0KGV2ZW50TmFtZSk7XG4gICAgICBpZiAoaGFuZGxlciAmJiBoYW5kbGVyLnRhcmdldCA9PT0gdGhpcy5pbnB1dCkge1xuICAgICAgICB0aGlzLm9mZkV2ZW50KGV2ZW50TmFtZSwgdGhpcy5pbnB1dCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMub25FdmVudChldmVudE5hbWUsIHRoaXMuaW5wdXQsICgpID0+IHtcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHsgLy8gU2FmYXJpIG5lZWRzIGEgZGVsYXlcbiAgICAgICAgICB0aGlzLmlucHV0Py5zZWxlY3QoKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogaGFuZGxlcyB0ZWFyZG93biBhbmQgc2V0IHVwIGZvciBjYXBzbG9jayBkZXRlY3Rpb24gZXZlbnRzXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsdWUgaW5kaWNhdGVzIHdoZXRoZXIgdG8gdHVybiBldmVudHMgb24gb3Igb2ZmXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgI2NhcHNMb2NrRXZlbnRTZXRVcCh2YWx1ZTogYm9vbGVhbik6IHZvaWQge1xuICAgIGNvbnN0IHVwZGF0ZUNhcHNMb2NrSWNvbiA9IChlOiBhbnkpID0+IHtcbiAgICAgIGlmICh0aGlzLmNhcHNMb2NrSWNvbiAmJiBlLmdldE1vZGlmaWVyU3RhdGUpIHtcbiAgICAgICAgdGhpcy5jYXBzTG9ja0ljb24uaGlkZGVuID0gIWUuZ2V0TW9kaWZpZXJTdGF0ZSgnQ2Fwc0xvY2snKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICBpZiAoIXRoaXMuY2Fwc0xvY2tJY29uICYmIHRoaXMuaW5wdXQpIHtcbiAgICAgICAgdGhpcy5pbnB1dC5pbnNlcnRBZGphY2VudEhUTUwoJ2FmdGVyZW5kJywgdGhpcy50ZW1wbGF0ZUNhcHNMb2NrKCkpO1xuICAgICAgfVxuICAgICAgdGhpcy5vZmZFdmVudCgna2V5ZG93bi5pbnB1dC1jYXBzbG9jaycpO1xuICAgICAgdGhpcy5vbkV2ZW50KCdrZXlkb3duLmlucHV0LWNhcHNsb2NrJywgdGhpcywgdXBkYXRlQ2Fwc0xvY2tJY29uKTtcbiAgICAgIHRoaXMub2ZmRXZlbnQoJ2tleXVwLmlucHV0LWNhcHNsb2NrJyk7XG4gICAgICB0aGlzLm9uRXZlbnQoJ2tleXVwLmlucHV0LWNhcHNsb2NrJywgdGhpcywgdXBkYXRlQ2Fwc0xvY2tJY29uKTtcbiAgICAgIGlmICh0aGlzLmNhcHNMb2NrSWNvbikge1xuICAgICAgICB0aGlzLmNhcHNMb2NrSWNvbi5oaWRkZW4gPSB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm9mZkV2ZW50KCdrZXlkb3duLmlucHV0LWNhcHNsb2NrJyk7XG4gICAgICB0aGlzLm9mZkV2ZW50KCdrZXl1cC5pbnB1dC1jYXBzbG9jaycpO1xuICAgICAgdGhpcy5jYXBzTG9ja0ljb24/LnJlbW92ZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXR1cCBldmVudCBoYW5kbGVycyB0aGF0IHRyaWdnZXIgb24gdGhlIGhvc3QgZWxlbWVudCBkdXJpbmcgbmF0aXZlIGV2ZW50cyBmcm9tIHRoZSBpbnRlcm5hbCBIVE1MSW5wdXRFbGVtZW50XG4gICAqIFRoZXNlIHRyaWdnXG4gICAqIEBwcml2YXRlXG4gICAqIEByZXR1cm5zIHt0aGlzfSBUaGUgSWRzSW5wdXQgQVBJIGZvciBjaGFpbmluZ1xuICAgKi9cbiAgI2F0dGFjaE5hdGl2ZUV2ZW50cygpOiB0aGlzIHtcbiAgICBpZiAoIXRoaXMuaW5wdXQpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGNvbnN0IGV2ZW50cyA9IFsnZm9jdXMnLCAnc2VsZWN0JywgJ2tleWRvd24nLCAna2V5cHJlc3MnLCAna2V5dXAnLCAnY2xpY2snLCAnZGJjbGljayddO1xuICAgIGV2ZW50cy5mb3JFYWNoKChldnQpID0+IHtcbiAgICAgIHRoaXMub25FdmVudChldnQsIHRoaXMuaW5wdXQsIChlOiBhbnkpID0+IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRyaWdnZXIgZXZlbnQgb24gcGFyZW50IGFuZCBjb21wb3NlIHRoZSBhcmdzXG4gICAgICAgICAqIHdpbGwgZmlyZSBuYXRpdmVFdmVudHMuXG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBlbGVtIEFjdHVhbCBldmVudFxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgVGhlIHVwZGF0ZWQgaW5wdXQgZWxlbWVudCB2YWx1ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy50cmlnZ2VyRXZlbnQoZS50eXBlLCB0aGlzLCB7XG4gICAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgICBlbGVtOiB0aGlzLFxuICAgICAgICAgICAgbmF0aXZlRXZlbnQ6IGUsXG4gICAgICAgICAgICB2YWx1ZTogdGhpcy52YWx1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGUgZXZlbnRzXG4gICAqIEBwcml2YXRlXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgI2F0dGFjaEV2ZW50SGFuZGxlcnMoKTogdm9pZCB7XG4gICAgdGhpcy4jYXR0YWNoTmF0aXZlRXZlbnRzKCk7XG5cbiAgICAvLyBJZiB0aGUgaW50ZXJuYWwgaW5wdXQgdmFsdWUgaXMgdXBkYXRlZCBhbmQgYSBjaGFuZ2UgZXZlbnQgaXMgdHJpZ2dlcmVkLFxuICAgIC8vIHJlZmxlY3QgdGhhdCBjaGFuZ2Ugb24gdGhlIFdlYkNvbXBvbmVudCBob3N0IGVsZW1lbnQuXG4gICAgdGhpcy5vbkV2ZW50KCdjaGFuZ2UuaW5wdXQnLCB0aGlzLmNvbnRhaW5lciwgKGU6IGFueSkgPT4ge1xuICAgICAgdGhpcy50cmlnZ2VyZWRCeUNoYW5nZSA9IHRydWU7XG4gICAgICB0aGlzLnZhbHVlID0gdGhpcy5pbnB1dD8udmFsdWU7XG4gICAgICB0aGlzLnRyaWdnZXJFdmVudCgnY2hhbmdlJywgdGhpcywge1xuICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgICBkZXRhaWw6IHtcbiAgICAgICAgICBlbGVtOiB0aGlzLFxuICAgICAgICAgIG5hdGl2ZUV2ZW50OiBlLFxuICAgICAgICAgIHZhbHVlOiB0aGlzLnZhbHVlXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIGhhbmRsZXMgZXZlbnQgc2V0IHVwIGFuZCB0ZWFyZG93biBmb3IgcGFzc3dvcmQgaW5kaWNhdG9yXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsdWUgd2hldGhlciB0byB0b2dnbGUgZXZlbnRzIG9uIG9yIG9mZlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gICN0b2dnbGVQYXNzd29yZEV2ZW50U2V0VXAodmFsdWU6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICBjb25zdCBzaG93SGlkZVBhc3N3b3JkRWxlbSA9IHRoaXMuY29udGFpbmVyPy5xdWVyeVNlbGVjdG9yKCcuc2hvdy1oaWRlLXBhc3N3b3JkJyk7XG5cbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIGlmICghc2hvd0hpZGVQYXNzd29yZEVsZW0gJiYgdGhpcy5pc1Bhc3N3b3JkVmlzaWJsZSkge1xuICAgICAgICBjb25zdCBzaG93SGlkZUJ1dHRvbjogYW55ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWRzLWJ1dHRvbicpO1xuICAgICAgICBzaG93SGlkZUJ1dHRvbi50ZXh0ID0gdGhpcy5wYXNzd29yZFZpc2libGUgPyAnSElERScgOiAnU0hPVyc7XG4gICAgICAgIHNob3dIaWRlQnV0dG9uLmlkID0gJ3Nob3ctaGlkZS1wYXNzd29yZCc7XG4gICAgICAgIHNob3dIaWRlQnV0dG9uLmNsYXNzTGlzdC5hZGQoJ3Nob3ctaGlkZS1wYXNzd29yZCcpO1xuICAgICAgICBzaG93SGlkZUJ1dHRvbi5ub1BhZGRpbmcgPSB0cnVlO1xuICAgICAgICBpZiAodGhpcy5pbnB1dCkge1xuICAgICAgICAgIHRoaXMuaW5wdXQuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KCdhZnRlcmVuZCcsIHNob3dIaWRlQnV0dG9uKTtcbiAgICAgICAgICB0aGlzLmlucHV0LnR5cGUgPSBgJHt0aGlzLnBhc3N3b3JkVmlzaWJsZSA/ICd0ZXh0JyA6IHRoaXMudHlwZX1gO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLm9mZkV2ZW50KCdjbGljay5pbnB1dC1zaG93aGlkZXBhc3N3b3JkJyk7XG4gICAgICB0aGlzLm9uRXZlbnQoJ2NsaWNrLmlucHV0LXNob3doaWRlcGFzc3dvcmQnLCBzaG93SGlkZVBhc3N3b3JkRWxlbSwgKCkgPT4ge1xuICAgICAgICB0aGlzLnBhc3N3b3JkVmlzaWJsZSA9ICF0aGlzLnBhc3N3b3JkVmlzaWJsZTtcbiAgICAgICAgdGhpcy4jcGFzc3dvcmRWaXNpYmlsaXR5SGFuZGxlcigpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMub2ZmRXZlbnQoJ2NsaWNrLmlucHV0LXNob3doaWRlcGFzc3dvcmQnKTtcbiAgICAgIHRoaXMuaW5wdXQ/LnNldEF0dHJpYnV0ZSgndHlwZScsIHRoaXMudHlwZSk7XG4gICAgICBzaG93SGlkZVBhc3N3b3JkRWxlbT8ucmVtb3ZlKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIHRvZ2dsZXMgdGhlIHZpc2liaWxpdHkgb2YgdGhlIHBhc3N3b3JkIGJ5IGNoYW5naW5nIGZpZWxkIHR5cGVcbiAgICogQHByaXZhdGVcbiAgICovXG4gICNwYXNzd29yZFZpc2liaWxpdHlIYW5kbGVyKCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5zaGFkb3dSb290KSByZXR1cm47XG4gICAgY29uc3QgcGFzc3dvcmRCdXR0b24gPSB0aGlzLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcjxJZHNCdXR0b24+KGAuc2hvdy1oaWRlLXBhc3N3b3JkYCk7XG4gICAgY29uc3QgcGFzc3dvcmRGaWVsZCA9IHRoaXMuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKGAuaWRzLWlucHV0LWZpZWxkYCk7XG5cbiAgICBpZiAodGhpcy5wYXNzd29yZFZpc2libGUpIHtcbiAgICAgIHBhc3N3b3JkQnV0dG9uPy5zZXRBdHRyaWJ1dGUoJ3RleHQnLCAnSElERScpO1xuICAgICAgcGFzc3dvcmRGaWVsZD8uc2V0QXR0cmlidXRlKCd0eXBlJywgJ3RleHQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFzc3dvcmRCdXR0b24/LnNldEF0dHJpYnV0ZSgndGV4dCcsICdTSE9XJyk7XG4gICAgICBwYXNzd29yZEZpZWxkPy5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAncGFzc3dvcmQnKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogV2hlbiBzZXQgdGhlIGlucHV0IHdpbGwgYWRkIGEgQ1NTIGNsYXNzIGBpcy1hY3RpdmVgIHRoYXQgc2ltdWxhdGVzIHRoZSB0ZXh0IGlucHV0IGJlaW5nIFwiZm9jdXNlZFwiLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW4gfCBzdHJpbmd9IHZhbHVlIElmIHRydWUgd2lsbCBzZXQgYHRleHQtZWxsaXBzaXNgIGF0dHJpYnV0ZVxuICAgKi9cbiAgc2V0IGFjdGl2ZSh2YWx1ZTogYm9vbGVhbiB8IHN0cmluZykge1xuICAgIGNvbnN0IHZhbCA9IHN0cmluZ1RvQm9vbCh2YWx1ZSk7XG4gICAgY29uc3QgY2xhc3NOYW1lID0gJ2lzLWFjdGl2ZSc7XG4gICAgaWYgKHZhbCkge1xuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlcy5BQ1RJVkUsIHZhbC50b1N0cmluZygpKTtcbiAgICAgIHRoaXMuY29udGFpbmVyPy5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZXMuQUNUSVZFKTtcbiAgICAgIHRoaXMuY29udGFpbmVyPy5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7XG4gICAgfVxuICB9XG5cbiAgZ2V0IGFjdGl2ZSgpOiBib29sZWFuIHsgcmV0dXJuIHN0cmluZ1RvQm9vbCh0aGlzLmhhc0F0dHJpYnV0ZShhdHRyaWJ1dGVzLkFDVElWRSkpOyB9XG5cbiAgLyoqXG4gICAqIFdoZW4gc2V0IHRoZSBpbnB1dCB3aWxsIHNlbGVjdCBhbGwgdGV4dCBvbiBmb2N1c1xuICAgKiBAcGFyYW0ge2Jvb2xlYW4gfCBzdHJpbmd9IHZhbHVlIElmIHRydWUgd2lsbCBzZXQgYGF1dG9zZWxlY3RgIGF0dHJpYnV0ZVxuICAgKi9cbiAgc2V0IGF1dG9zZWxlY3QodmFsdWU6IGJvb2xlYW4gfCBzdHJpbmcpIHtcbiAgICBjb25zdCB2YWwgPSBzdHJpbmdUb0Jvb2wodmFsdWUpO1xuICAgIGlmICh2YWwpIHtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZXMuQVVUT1NFTEVDVCwgdmFsLnRvU3RyaW5nKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGVzLkFVVE9TRUxFQ1QpO1xuICAgIH1cbiAgICB0aGlzLmhhbmRsZUF1dG9zZWxlY3QoKTtcbiAgfVxuXG4gIGdldCBhdXRvc2VsZWN0KCk6IGJvb2xlYW4geyByZXR1cm4gc3RyaW5nVG9Cb29sKHRoaXMuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZXMuQVVUT1NFTEVDVCkpOyB9XG5cbiAgLyoqXG4gICAqIFdoZW4gc2V0IHRoZSBpbnB1dCB3aWxsIGFkZCBjc3MgY2xhc3MgYGJnLXRyYW5zcGFyZW50YFxuICAgKiBAcGFyYW0ge2Jvb2xlYW4gfCBzdHJpbmd9IHZhbHVlIElmIHRydWUgd2lsbCBzZXQgYGJnLXRyYW5zcGFyZW50YCBhdHRyaWJ1dGVcbiAgICovXG4gIHNldCBiZ1RyYW5zcGFyZW50KHZhbHVlOiBib29sZWFuIHwgc3RyaW5nKSB7XG4gICAgY29uc3QgdmFsID0gc3RyaW5nVG9Cb29sKHZhbHVlKTtcbiAgICBjb25zdCBjbGFzc05hbWUgPSAnYmctdHJhbnNwYXJlbnQnO1xuICAgIGlmICh2YWwpIHtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZXMuQkdfVFJBTlNQQVJFTlQsIHZhbC50b1N0cmluZygpKTtcbiAgICAgIHRoaXMuY29udGFpbmVyPy5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XG4gICAgICB0aGlzLmlucHV0Py5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZXMuQkdfVFJBTlNQQVJFTlQpO1xuICAgICAgdGhpcy5jb250YWluZXI/LmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtcbiAgICAgIHRoaXMuaW5wdXQ/LmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtcbiAgICB9XG4gIH1cblxuICBnZXQgYmdUcmFuc3BhcmVudCgpOiBib29sZWFuIHsgcmV0dXJuIHN0cmluZ1RvQm9vbCh0aGlzLmdldEF0dHJpYnV0ZShhdHRyaWJ1dGVzLkJHX1RSQU5TUEFSRU5UKSk7IH1cblxuICAvKipcbiAgICogV2hlbiBzZXQgdGhlIGlucHV0IHdpbGwgYWRkIGNzcyBjbGFzcyBgdGV4dC1lbGxpcHNpc2BcbiAgICogQHBhcmFtIHtib29sZWFuIHwgc3RyaW5nfSB2YWx1ZSBJZiB0cnVlIHdpbGwgc2V0IGB0ZXh0LWVsbGlwc2lzYCBhdHRyaWJ1dGVcbiAgICovXG4gIHNldCB0ZXh0RWxsaXBzaXModmFsdWU6IGJvb2xlYW4gfCBzdHJpbmcpIHtcbiAgICBjb25zdCB2YWwgPSBzdHJpbmdUb0Jvb2wodmFsdWUpO1xuICAgIGNvbnN0IGNsYXNzTmFtZSA9ICd0ZXh0LWVsbGlwc2lzJztcbiAgICBpZiAodmFsKSB7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZShhdHRyaWJ1dGVzLlRFWFRfRUxMSVBTSVMsIHZhbC50b1N0cmluZygpKTtcbiAgICAgIHRoaXMuaW5wdXQ/LmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlcy5URVhUX0VMTElQU0lTKTtcbiAgICAgIHRoaXMuaW5wdXQ/LmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtcbiAgICB9XG4gIH1cblxuICBnZXQgdGV4dEVsbGlwc2lzKCk6IGJvb2xlYW4geyByZXR1cm4gc3RyaW5nVG9Cb29sKHRoaXMuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZXMuVEVYVF9FTExJUFNJUykpOyB9XG5cbiAgLyoqXG4gICAqIFNldHMgaW5wdXQgdG8gZGlzYWJsZWRcbiAgICogQHBhcmFtIHtib29sZWFuIHwgc3RyaW5nfSB2YWx1ZSBJZiB0cnVlIHdpbGwgc2V0IGBkaXNhYmxlZGAgYXR0cmlidXRlXG4gICAqL1xuICBzZXQgZGlzYWJsZWQodmFsdWU6IGJvb2xlYW4gfCBzdHJpbmcpIHtcbiAgICBjb25zdCB2YWwgPSBzdHJpbmdUb0Jvb2wodmFsdWUpO1xuICAgIGlmICh2YWwpIHtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZXMuRElTQUJMRUQsICd0cnVlJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZXMuRElTQUJMRUQpO1xuICAgIH1cbiAgICB0aGlzLnNldElucHV0U3RhdGUoYXR0cmlidXRlcy5ESVNBQkxFRCk7XG4gIH1cblxuICBnZXQgZGlzYWJsZWQoKTogYm9vbGVhbiB7IHJldHVybiBzdHJpbmdUb0Jvb2wodGhpcy5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlcy5ESVNBQkxFRCkpOyB9XG5cbiAgLyoqXG4gICAqIGludGVybmFsIHJlZmVyZW5jZSB0byBhIGxhYmVsIGVsZW1lbnQgYSB1c2VyIHByb3ZpZGVzXG4gICAqL1xuICAjbGFiZWxFbD86IEhUTUxMYWJlbEVsZW1lbnQ7XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgYHBsYWNlaG9sZGVyYCBvZiBpbnB1dFxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgb2YgdGhlIGBwbGFjZWhvbGRlcmAgcHJvcGVydHlcbiAgICovXG4gIHNldCBwbGFjZWhvbGRlcih2YWx1ZTogc3RyaW5nIHwgbnVsbCkge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlcy5QTEFDRUhPTERFUiwgdmFsdWUpO1xuICAgICAgdGhpcy5pbnB1dD8uc2V0QXR0cmlidXRlKGF0dHJpYnV0ZXMuUExBQ0VIT0xERVIsIHZhbHVlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlcy5QTEFDRUhPTERFUik7XG4gICAgdGhpcy5pbnB1dD8ucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZXMuUExBQ0VIT0xERVIpO1xuICB9XG5cbiAgZ2V0IHBsYWNlaG9sZGVyKCk6IHN0cmluZyB8IG51bGwge1xuICAgIHJldHVybiB0aGlzLmdldEF0dHJpYnV0ZShhdHRyaWJ1dGVzLlBMQUNFSE9MREVSKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIGlucHV0IHRvIHJlYWRvbmx5IHN0YXRlXG4gICAqIEBwYXJhbSB7Ym9vbGVhbiB8IHN0cmluZ30gdmFsdWUgSWYgdHJ1ZSB3aWxsIHNldCBgcmVhZG9ubHlgIGF0dHJpYnV0ZVxuICAgKi9cbiAgc2V0IHJlYWRvbmx5KHZhbHVlOiBib29sZWFuIHwgc3RyaW5nKSB7XG4gICAgY29uc3QgdmFsID0gc3RyaW5nVG9Cb29sKHZhbHVlKTtcbiAgICBpZiAodmFsKSB7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZShhdHRyaWJ1dGVzLlJFQURPTkxZLCB2YWwudG9TdHJpbmcoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZXMuUkVBRE9OTFkpO1xuICAgIH1cbiAgICB0aGlzLnNldElucHV0U3RhdGUoYXR0cmlidXRlcy5SRUFET05MWSk7XG4gIH1cblxuICBnZXQgcmVhZG9ubHkoKTogYm9vbGVhbiB7IHJldHVybiBzdHJpbmdUb0Jvb2wodGhpcy5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlcy5SRUFET05MWSkpOyB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbiB8IHN0cmluZ30gdmFsdWUgSWYgdHJ1ZSwgY2F1c2VzIGFuIElkc0lucHV0IHNldCB0byBgcmVhZG9ubHlgIHRvIGFwcGVhclxuICAgKiB0byB1c2UgaXRzIHN0YW5kYXJkIGZpZWxkIGJhY2tncm91bmQgY29sb3IgaW5zdGVhZCBvZiB0aGUgXCJyZWFkb25seVwiIHN0YXRlIGNvbG9yXG4gICAqL1xuICBzZXQgcmVhZG9ubHlCYWNrZ3JvdW5kKHZhbHVlOiBib29sZWFuIHwgc3RyaW5nKSB7XG4gICAgY29uc3QgdmFsID0gc3RyaW5nVG9Cb29sKHZhbHVlKTtcbiAgICBpZiAodmFsKSB7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZShhdHRyaWJ1dGVzLlJFQURPTkxZX0JBQ0tHUk9VTkQsIHZhbC50b1N0cmluZygpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlcy5SRUFET05MWV9CQUNLR1JPVU5EKTtcbiAgICB9XG5cbiAgICB0aGlzLiNzZXRSZWFkb25seUJhY2tncm91bmQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGlzIElkc0lucHV0IHNob3VsZCBhcHBlYXIgdG8gdXNlIGl0cyBzdGFuZGFyZFxuICAgKiBmaWVsZCBiYWNrZ3JvdW5kIGNvbG9yIGluc3RlYWQgb2YgdGhlIFwicmVhZG9ubHlcIiBzdGF0ZSBjb2xvciB3aGVuIHNldCB0byBgcmVhZG9ubHlgXG4gICAqL1xuICBnZXQgcmVhZG9ubHlCYWNrZ3JvdW5kKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBzdHJpbmdUb0Jvb2wodGhpcy5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlcy5SRUFET05MWV9CQUNLR1JPVU5EKSk7XG4gIH1cblxuICAjc2V0UmVhZG9ubHlCYWNrZ3JvdW5kKCkge1xuICAgIHRoaXMuY29udGFpbmVyPy5jbGFzc0xpc3QudG9nZ2xlKGF0dHJpYnV0ZXMuUkVBRE9OTFlfQkFDS0dST1VORCwgdGhpcy5yZWFkb25seUJhY2tncm91bmQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgc2l6ZSAod2lkdGgpIG9mIGlucHV0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSBbeHMsIHNtLCBtbSwgbWQsIGxnLCBmdWxsXVxuICAgKi9cbiAgc2V0IHNpemUodmFsdWU6IHN0cmluZykge1xuICAgIGNvbnN0IHNpemUgPSBTSVpFU1t2YWx1ZSBhcyBTaXplS2V5c10gfHwgU0laRVMuZGVmYXVsdDtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZShhdHRyaWJ1dGVzLlNJWkUsIHNpemUpO1xuICAgIHRoaXMuY29udGFpbmVyPy5jbGFzc0xpc3QucmVtb3ZlKC4uLk9iamVjdC52YWx1ZXMoU0laRVMpKTtcbiAgICB0aGlzLmNvbnRhaW5lcj8uY2xhc3NMaXN0LmFkZChzaXplKTtcbiAgfVxuXG4gIGdldCBzaXplKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZXMuU0laRSkgfHwgU0laRVMuZGVmYXVsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSB0ZXh0IGFsaWdubWVudFxuICAgKiBAcGFyYW0ge0lkc0lucHV0QWxpZ25tZW50fSB2YWx1ZSBbc3RhcnQsIGNlbnRlciwgZW5kXVxuICAgKi9cbiAgc2V0IHRleHRBbGlnbih2YWx1ZTogSWRzSW5wdXRBbGlnbm1lbnQpIHtcbiAgICBjb25zdCB0ZXh0QWxpZ24gPSBURVhUX0FMSUdOW3ZhbHVlXSB8fCBURVhUX0FMSUdOLmRlZmF1bHQ7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlcy5URVhUX0FMSUdOLCB0ZXh0QWxpZ24pO1xuICAgIHRoaXMuaW5wdXQ/LmNsYXNzTGlzdC5yZW1vdmUoJ3N0YXJ0JywgJ2NlbnRlcicsICdlbmQnKTtcbiAgICB0aGlzLmlucHV0Py5jbGFzc0xpc3QuYWRkKHRleHRBbGlnbik7XG4gIH1cblxuICBnZXQgdGV4dEFsaWduKCk6IElkc0lucHV0QWxpZ25tZW50IHtcbiAgICByZXR1cm4gdGhpcy5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlcy5URVhUX0FMSUdOKSBhcyBJZHNJbnB1dEFsaWdubWVudCB8fCBURVhUX0FMSUdOLmRlZmF1bHQ7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgaW5wdXQgdHlwZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgW3RleHQsIHBhc3N3b3JkLCBudW1iZXIsIHBob25lLCBlbWFpbF1cbiAgICovXG4gIHNldCB0eXBlKHZhbHVlOiBzdHJpbmcpIHtcbiAgICBjb25zdCB0eXBlID0gVFlQRVNbdmFsdWUgYXMgVHlwZUtleXNdO1xuICAgIGlmICh0eXBlKSB7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZShhdHRyaWJ1dGVzLlRZUEUsIHZhbHVlKTtcbiAgICAgIHRoaXMuaW5wdXQ/LnNldEF0dHJpYnV0ZShhdHRyaWJ1dGVzLlRZUEUsIHR5cGUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnNldEF0dHJpYnV0ZShhdHRyaWJ1dGVzLlRZUEUsIFRZUEVTLmRlZmF1bHQpO1xuICAgIHRoaXMuaW5wdXQ/LnNldEF0dHJpYnV0ZShhdHRyaWJ1dGVzLlRZUEUsIFRZUEVTLmRlZmF1bHQpO1xuICB9XG5cbiAgZ2V0IHR5cGUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlcy5UWVBFKSBhcyBUeXBlVmFsdWVzID8/IFRZUEVTLmRlZmF1bHQ7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBgdmFsdWVgIGF0dHJpYnV0ZSBvZiBpbnB1dFxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsIHRoZSB2YWx1ZSBwcm9wZXJ0eVxuICAgKi9cbiAgc2V0IHZhbHVlKHZhbDogc3RyaW5nIHwgdW5kZWZpbmVkKSB7XG4gICAgbGV0IHYgPSBbJ3N0cmluZycsICdudW1iZXInXS5pbmNsdWRlcyh0eXBlb2YgdmFsKSA/IFN0cmluZyh2YWwpIDogU3RyaW5nKHZhbCB8fCAnJyk7XG4gICAgY29uc3QgY3VycmVudFZhbHVlID0gdGhpcy5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlcy5WQUxVRSkgfHwgJyc7XG5cbiAgICAvLyBJZiBhIG1hc2sgaXMgZW5hYmxlZCwgdXNlIHRoZSBjb25mb3JtZWQgdmFsdWUuXG4gICAgLy8gSWYgbm8gbWFza2luZyBvY2N1cnMsIHNpbXBseSB1c2UgdGhlIHByb3ZpZGVkIHZhbHVlLlxuICAgIGlmICh0aGlzLm1hc2spIHtcbiAgICAgIHYgPSB0aGlzLnByb2Nlc3NNYXNrRnJvbVByb3BlcnR5KHZhbCkgfHwgdjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pbnB1dCAmJiB0aGlzLmlucHV0Py52YWx1ZSAhPT0gdikge1xuICAgICAgdGhpcy5pbnB1dC52YWx1ZSA9IHY7XG4gICAgICBpZiAoIXRoaXMudHJpZ2dlcmVkQnlDaGFuZ2UpIHtcbiAgICAgICAgdGhpcy5pbnB1dD8uZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ2NoYW5nZScsIHsgYnViYmxlczogdHJ1ZSB9KSk7XG4gICAgICB9XG4gICAgICB0aGlzLnRyaWdnZXJlZEJ5Q2hhbmdlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKGN1cnJlbnRWYWx1ZSAhPT0gdikge1xuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlcy5WQUxVRSwgdik7XG4gICAgfVxuICB9XG5cbiAgZ2V0IHZhbHVlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuaW5wdXQ/LnZhbHVlIHx8ICcnO1xuICB9XG5cbiAgLyoqXG4gICAqIHNldCB0aGUgaWQgb2YgdGhlIGlucHV0LCB3aGljaCB3aWxsIGFsc28gZGV0ZXJtaW5lIHRoZVxuICAgKiBpbnB1dCBpZCBmb3IgbGFiZWxzIGF0ICMke2lkfS1pbnB1dFxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgaWRcbiAgICovXG4gIHNldCAjaWQodmFsdWU6IHN0cmluZykge1xuICAgIGlmICh2YWx1ZSAhPT0gJycpIHtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZXMuSUQsIHZhbHVlKTtcbiAgICAgIHRoaXMuaW5wdXQ/LnNldEF0dHJpYnV0ZShhdHRyaWJ1dGVzLklELCBgJHt2YWx1ZX0taW5wdXRgKTtcbiAgICB9XG4gIH1cblxuICBnZXQgI2lkKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZXMuSUQpIHx8IHRoaXMuZ2VuZXJhdGVkSWQ7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBjc3MgY3Vyc29yIHByb3BlcnR5IHRvIHNvbWV0aGluZyBvdGhlciB0aGFuIHRleHRcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIHRoZSBjc3MgY3Vyc29yIHZhbHVlXG4gICAqL1xuICBzZXQgY3Vyc29yKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZShhdHRyaWJ1dGVzLkNVUlNPUiwgdmFsdWUpO1xuICAgIHRoaXMuaW5wdXQ/LnN0eWxlLnNldFByb3BlcnR5KCdjdXJzb3InLCB2YWx1ZSk7XG4gIH1cblxuICBnZXQgY3Vyc29yKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZXMuQ1VSU09SKSA/PyAnJztcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBubyBtYXJnaW5zIGF0dHJpYnV0ZVxuICAgKiBAcGFyYW0ge2Jvb2xlYW4gfCBzdHJpbmd9IG4gdHJ1ZSBvciBmYWxzZSBvciBhcyBhIHN0cmluZ1xuICAgKi9cbiAgc2V0IG5vTWFyZ2lucyhuOiBib29sZWFuIHwgc3RyaW5nKSB7XG4gICAgaWYgKHN0cmluZ1RvQm9vbChuKSkge1xuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlcy5OT19NQVJHSU5TLCAnJyk7XG4gICAgICB0aGlzLmNvbnRhaW5lcj8uY2xhc3NMaXN0LmFkZCgnbm8tbWFyZ2lucycpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGVzLk5PX01BUkdJTlMpO1xuICAgIHRoaXMuY29udGFpbmVyPy5jbGFzc0xpc3QucmVtb3ZlKCduby1tYXJnaW5zJyk7XG4gIH1cblxuICBnZXQgbm9NYXJnaW5zKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBzdHJpbmdUb0Jvb2wodGhpcy5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlcy5OT19NQVJHSU5TKSk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgaW5uZXIgcGFkZGluZyAoaW5saW5lLXN0YXJ0IGFuZCBlbmQpXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuIHN0cmluZyB2YWx1ZSBmb3IgdGhlIHBhZGRpbmdcbiAgICovXG4gIHNldCBwYWRkaW5nKG46IHN0cmluZyB8IG51bWJlcikge1xuICAgIGlmIChuKSB7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZShhdHRyaWJ1dGVzLlBBRERJTkcsIFN0cmluZyhuKSk7XG4gICAgICB0aGlzLmlucHV0Py5zdHlsZS5zZXRQcm9wZXJ0eSgncGFkZGluZy1pbmxpbmUtc3RhcnQnLCBgJHtufXB4YCk7XG4gICAgICB0aGlzLmlucHV0Py5zdHlsZS5zZXRQcm9wZXJ0eSgncGFkZGluZy1pbmxpbmUtZW5kJywgYCR7bn1weGApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGVzLlBBRERJTkcpO1xuICAgIHRoaXMuaW5wdXQ/LnN0eWxlLnNldFByb3BlcnR5KCdwYWRkaW5nLWlubGluZS1zdGFydCcsIGBgKTtcbiAgICB0aGlzLmlucHV0Py5zdHlsZS5zZXRQcm9wZXJ0eSgncGFkZGluZy1pbmxpbmUtZW5kJywgYGApO1xuICB9XG5cbiAgZ2V0IHBhZGRpbmcoKTogc3RyaW5nIHwgbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlcy5QQURESU5HKSB8fCAnJztcbiAgfVxuXG4gIC8qKlxuICAgKiBPdmVycmlkZXMgdGhlIHN0YW5kYXJkIFwiYmx1clwiIGJlaGF2aW9yIHRvIGluc3RlYWQgdGVsbCB0aGUgaW5uZXIgSFRNTElucHV0IGVsZW1lbnQgdG8gYmx1ci5cbiAgICovXG4gIGJsdXIoKTogdm9pZCB7XG4gICAgdGhpcy5pbnB1dD8uYmx1cigpO1xuICB9XG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlcyB0aGUgc3RhbmRhcmQgXCJmb2N1c1wiIGJlaGF2aW9yIHRvIGluc3RlYWQgcGFzcyBmb2N1cyB0byB0aGUgaW5uZXIgSFRNTElucHV0IGVsZW1lbnQuXG4gICAqL1xuICBmb2N1cygpOiB2b2lkIHtcbiAgICB0aGlzLmlucHV0Py5mb2N1cygpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBhIGZvcm1hdCB0byBiZSB1c2VkIGluIHRoZSB2YWxpZGF0aW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfG51bGx9IHZhbCBkYXRlLCB0aW1lIGZvcm1hdFxuICAgKi9cbiAgc2V0IGZvcm1hdCh2YWw6IHN0cmluZyB8IG51bGwpIHtcbiAgICBpZiAodmFsKSB7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZShhdHRyaWJ1dGVzLkZPUk1BVCwgdmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlcy5GT1JNQVQpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBmb3JtYXQgYXR0cmlidXRlXG4gICAqIEByZXR1cm5zIHtzdHJpbmd8bnVsbH0gcmV0dXJuIGRhdGUgZm9ybWF0XG4gICAqL1xuICBnZXQgZm9ybWF0KCk6IHN0cmluZyB8IG51bGwge1xuICAgIHJldHVybiB0aGlzLmdldEF0dHJpYnV0ZShhdHRyaWJ1dGVzLkZPUk1BVCk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/components/ids-input/ids-input.ts\n");

/***/ }),

/***/ "./src/components/ids-list-box/ids-list-box-option.ts":
/*!************************************************************!*\
  !*** ./src/components/ids-list-box/ids-list-box-option.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ IdsListBoxOption)\n/* harmony export */ });\n/* harmony import */ var _core_ids_decorators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/ids-decorators */ \"./src/core/ids-decorators.ts\");\n/* harmony import */ var _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/ids-attributes */ \"./src/core/ids-attributes.ts\");\n/* harmony import */ var _mixins_ids_events_mixin_ids_events_mixin__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../mixins/ids-events-mixin/ids-events-mixin */ \"./src/mixins/ids-events-mixin/ids-events-mixin.ts\");\n/* harmony import */ var _mixins_ids_tooltip_mixin_ids_tooltip_mixin__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../mixins/ids-tooltip-mixin/ids-tooltip-mixin */ \"./src/mixins/ids-tooltip-mixin/ids-tooltip-mixin.ts\");\n/* harmony import */ var _mixins_ids_theme_mixin_ids_theme_mixin__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../mixins/ids-theme-mixin/ids-theme-mixin */ \"./src/mixins/ids-theme-mixin/ids-theme-mixin.ts\");\n/* harmony import */ var _core_ids_element__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/ids-element */ \"./src/core/ids-element.ts\");\n/* harmony import */ var _ids_list_box_option_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ids-list-box-option.scss */ \"./src/components/ids-list-box/ids-list-box-option.scss\");\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result)\n    __defProp(target, key, result);\n  return result;\n};\n\n\n\n\n\n\n\nconst Base = (0,_mixins_ids_tooltip_mixin_ids_tooltip_mixin__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(\n  (0,_mixins_ids_theme_mixin_ids_theme_mixin__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(\n    (0,_mixins_ids_events_mixin_ids_events_mixin__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\n      _core_ids_element__WEBPACK_IMPORTED_MODULE_5__[\"default\"]\n    )\n  )\n);\nlet IdsListBoxOption = class extends Base {\n  constructor() {\n    super();\n  }\n  /**\n   * Return the attributes we handle as getters/setters\n   * @returns {Array<any>} The attributes in an array\n   */\n  static get attributes() {\n    return [\n      ...super.attributes,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.GROUP_LABEL,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.TOOLTIP,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.VALUE\n    ];\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    this.setAttribute(\"role\", this.hasAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.GROUP_LABEL) ? \"none\" : \"option\");\n    this.setAttribute(\"tabindex\", \"-1\");\n  }\n  /**\n   * Create the Template for the contents\n   * @returns {string} The template\n   */\n  template() {\n    return `<slot></slot>`;\n  }\n  set value(val) {\n    if (val)\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.VALUE, `${val}`);\n    else\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.VALUE);\n  }\n  get value() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.VALUE);\n  }\n};\nIdsListBoxOption = __decorateClass([\n  (0,_core_ids_decorators__WEBPACK_IMPORTED_MODULE_0__.customElement)(\"ids-list-box-option\"),\n  (0,_core_ids_decorators__WEBPACK_IMPORTED_MODULE_0__.scss)(_ids_list_box_option_scss__WEBPACK_IMPORTED_MODULE_6__[\"default\"])\n], IdsListBoxOption);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9pZHMtbGlzdC1ib3gvaWRzLWxpc3QtYm94LW9wdGlvbi50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQW9DO0FBQ1Q7QUFDQTtBQUNDO0FBQ0Y7QUFDSDtBQUVKO0FBRW5CLE1BQU0sT0FBTyx1RkFBZTtBQUFmLEVBQ1gsbUZBQWE7QUFBYixJQUNFLHFGQUFjO0FBQWQsTUFDRSx5REFBVTtBQUFWLElBQ0Y7QUFBQSxFQUNGO0FBQ0Y7QUFhQSxJQUFxQixtQkFBckIsY0FBOEMsS0FBSztBQUFBLEVBQ2pELGNBQWM7QUFDWixVQUFNO0FBQUEsRUFDUjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNQSxXQUFXLGFBQXlCO0FBQ2xDLFdBQU87QUFBQSxNQUNMLEdBQUcsTUFBTTtBQUFBLE1BQ1Qsd0VBQXNCO0FBQVgsTUFDWCxvRUFBa0I7QUFBUCxNQUNYLGtFQUFnQjtBQUFMLElBQ2I7QUFBQSxFQUNGO0FBQUEsRUFFQSxvQkFBb0I7QUFDbEIsVUFBTSxrQkFBa0I7QUFDeEIsU0FBSyxhQUFhLFFBQVEsS0FBSyxhQUFhLHdFQUFzQixJQUFJLFNBQVMsUUFBUTtBQUN2RixTQUFLLGFBQWEsWUFBWSxJQUFJO0FBQUEsRUFDcEM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsV0FBbUI7QUFDakIsV0FBTztBQUFBLEVBQ1Q7QUFBQSxFQUVBLElBQUksTUFBTSxLQUFvQjtBQUM1QixRQUFJO0FBQUssV0FBSyxhQUFhLGtFQUFnQixFQUFFLEdBQUcsS0FBSztBQUFBO0FBQ2hELFdBQUssZ0JBQWdCLGtFQUFnQjtBQUFBLEVBQzVDO0FBQUEsRUFFQSxJQUFJLFFBQXVCO0FBQ3pCLFdBQU8sS0FBSyxhQUFhLGtFQUFnQjtBQUFBLEVBQzNDO0FBQ0Y7QUF4Q3FCLG1CQUFyQjtBQUFBLEVBRkMsbUVBQWEsQ0FBQyxxQkFBcUI7QUFBQSxFQUNuQywwREFBSSxDQUFDLGlFQUFNO0FBQUEsR0FDUyIsInNvdXJjZXMiOlsid2VicGFjazovL2lkcy1lbnRlcnByaXNlLXdjLy4vc3JjL2NvbXBvbmVudHMvaWRzLWxpc3QtYm94L2lkcy1saXN0LWJveC1vcHRpb24udHM/NTUzNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjdXN0b21FbGVtZW50LCBzY3NzIH0gZnJvbSAnLi4vLi4vY29yZS9pZHMtZGVjb3JhdG9ycyc7XG5pbXBvcnQgeyBhdHRyaWJ1dGVzIH0gZnJvbSAnLi4vLi4vY29yZS9pZHMtYXR0cmlidXRlcyc7XG5pbXBvcnQgSWRzRXZlbnRzTWl4aW4gZnJvbSAnLi4vLi4vbWl4aW5zL2lkcy1ldmVudHMtbWl4aW4vaWRzLWV2ZW50cy1taXhpbic7XG5pbXBvcnQgSWRzVG9vbHRpcE1peGluIGZyb20gJy4uLy4uL21peGlucy9pZHMtdG9vbHRpcC1taXhpbi9pZHMtdG9vbHRpcC1taXhpbic7XG5pbXBvcnQgSWRzVGhlbWVNaXhpbiBmcm9tICcuLi8uLi9taXhpbnMvaWRzLXRoZW1lLW1peGluL2lkcy10aGVtZS1taXhpbic7XG5pbXBvcnQgSWRzRWxlbWVudCBmcm9tICcuLi8uLi9jb3JlL2lkcy1lbGVtZW50JztcblxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL2lkcy1saXN0LWJveC1vcHRpb24uc2Nzcyc7XG5cbmNvbnN0IEJhc2UgPSBJZHNUb29sdGlwTWl4aW4oXG4gIElkc1RoZW1lTWl4aW4oXG4gICAgSWRzRXZlbnRzTWl4aW4oXG4gICAgICBJZHNFbGVtZW50XG4gICAgKVxuICApXG4pO1xuXG4vKipcbiAqIElEUyBMaXN0IEJveCBPcHRpb24gQ29tcG9uZW50XG4gKiBAdHlwZSB7SWRzTGlzdEJveE9wdGlvbn1cbiAqIEBpbmhlcml0cyBJZHNFbGVtZW50XG4gKiBAbWl4ZXMgSWRzRXZlbnRzTWl4aW5cbiAqIEBtaXhlcyBJZHNUaGVtZU1peGluXG4gKiBAbWl4ZXMgSWRzVG9vbHRpcE1peGluXG4gKiBAcGFydCBvcHRpb24gLSB0aGUgb3B0aW9uIGVsZW1lbnRcbiAqL1xuQGN1c3RvbUVsZW1lbnQoJ2lkcy1saXN0LWJveC1vcHRpb24nKVxuQHNjc3Moc3R5bGVzKVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSWRzTGlzdEJveE9wdGlvbiBleHRlbmRzIEJhc2Uge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgYXR0cmlidXRlcyB3ZSBoYW5kbGUgYXMgZ2V0dGVycy9zZXR0ZXJzXG4gICAqIEByZXR1cm5zIHtBcnJheTxhbnk+fSBUaGUgYXR0cmlidXRlcyBpbiBhbiBhcnJheVxuICAgKi9cbiAgc3RhdGljIGdldCBhdHRyaWJ1dGVzKCk6IEFycmF5PGFueT4ge1xuICAgIHJldHVybiBbXG4gICAgICAuLi5zdXBlci5hdHRyaWJ1dGVzLFxuICAgICAgYXR0cmlidXRlcy5HUk9VUF9MQUJFTCxcbiAgICAgIGF0dHJpYnV0ZXMuVE9PTFRJUCxcbiAgICAgIGF0dHJpYnV0ZXMuVkFMVUVcbiAgICBdO1xuICB9XG5cbiAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgncm9sZScsIHRoaXMuaGFzQXR0cmlidXRlKGF0dHJpYnV0ZXMuR1JPVVBfTEFCRUwpID8gJ25vbmUnIDogJ29wdGlvbicpO1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsICctMScpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSB0aGUgVGVtcGxhdGUgZm9yIHRoZSBjb250ZW50c1xuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgdGVtcGxhdGVcbiAgICovXG4gIHRlbXBsYXRlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGA8c2xvdD48L3Nsb3Q+YDtcbiAgfVxuXG4gIHNldCB2YWx1ZSh2YWw6IHN0cmluZyB8IG51bGwpIHtcbiAgICBpZiAodmFsKSB0aGlzLnNldEF0dHJpYnV0ZShhdHRyaWJ1dGVzLlZBTFVFLCBgJHt2YWx9YCk7XG4gICAgZWxzZSB0aGlzLnJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGVzLlZBTFVFKTtcbiAgfVxuXG4gIGdldCB2YWx1ZSgpOiBzdHJpbmcgfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlcy5WQUxVRSk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/components/ids-list-box/ids-list-box-option.ts\n");

/***/ }),

/***/ "./src/components/ids-list-box/ids-list-box.ts":
/*!*****************************************************!*\
  !*** ./src/components/ids-list-box/ids-list-box.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ IdsListBox)\n/* harmony export */ });\n/* harmony import */ var _core_ids_decorators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/ids-decorators */ \"./src/core/ids-decorators.ts\");\n/* harmony import */ var _core_ids_element__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/ids-element */ \"./src/core/ids-element.ts\");\n/* harmony import */ var _ids_list_box_option__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ids-list-box-option */ \"./src/components/ids-list-box/ids-list-box-option.ts\");\n/* harmony import */ var _ids_list_box_scss__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ids-list-box.scss */ \"./src/components/ids-list-box/ids-list-box.scss\");\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result)\n    __defProp(target, key, result);\n  return result;\n};\n\n\n\n\nlet IdsListBox = class extends _core_ids_element__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n  constructor() {\n    super();\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    this.setAttribute(\"role\", \"listbox\");\n  }\n  /**\n   * Create the Template for the contents\n   * @returns {string} The template\n   */\n  template() {\n    return `<slot></slot>`;\n  }\n};\nIdsListBox = __decorateClass([\n  (0,_core_ids_decorators__WEBPACK_IMPORTED_MODULE_0__.customElement)(\"ids-list-box\"),\n  (0,_core_ids_decorators__WEBPACK_IMPORTED_MODULE_0__.scss)(_ids_list_box_scss__WEBPACK_IMPORTED_MODULE_3__[\"default\"])\n], IdsListBox);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9pZHMtbGlzdC1ib3gvaWRzLWxpc3QtYm94LnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBb0M7QUFDYjtBQUNoQjtBQUVZO0FBU25CLElBQXFCLGFBQXJCLGNBQXdDLHlEQUFVLENBQUM7QUFBQSxFQUNqRCxjQUFjO0FBQ1osVUFBTTtBQUFBLEVBQ1I7QUFBQSxFQUVBLG9CQUEwQjtBQUN4QixVQUFNLGtCQUFrQjtBQUN4QixTQUFLLGFBQWEsUUFBUSxTQUFTO0FBQUEsRUFDckM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsV0FBbUI7QUFDakIsV0FBTztBQUFBLEVBQ1Q7QUFDRjtBQWpCcUIsYUFBckI7QUFBQSxFQUZDLG1FQUFhLENBQUMsY0FBYztBQUFBLEVBQzVCLDBEQUFJLENBQUMsMERBQU07QUFBQSxHQUNTIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaWRzLWVudGVycHJpc2Utd2MvLi9zcmMvY29tcG9uZW50cy9pZHMtbGlzdC1ib3gvaWRzLWxpc3QtYm94LnRzPzg3NGEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3VzdG9tRWxlbWVudCwgc2NzcyB9IGZyb20gJy4uLy4uL2NvcmUvaWRzLWRlY29yYXRvcnMnO1xuaW1wb3J0IElkc0VsZW1lbnQgZnJvbSAnLi4vLi4vY29yZS9pZHMtZWxlbWVudCc7XG5pbXBvcnQgJy4vaWRzLWxpc3QtYm94LW9wdGlvbic7XG5cbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9pZHMtbGlzdC1ib3guc2Nzcyc7XG5cbi8qKlxuICogSURTIExpc3QgQm94IENvbXBvbmVudFxuICogQHR5cGUge0lkc0xpc3RCb3h9XG4gKiBAaW5oZXJpdHMgSWRzRWxlbWVudFxuICovXG5AY3VzdG9tRWxlbWVudCgnaWRzLWxpc3QtYm94JylcbkBzY3NzKHN0eWxlcylcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIElkc0xpc3RCb3ggZXh0ZW5kcyBJZHNFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIGNvbm5lY3RlZENhbGxiYWNrKCk6IHZvaWQge1xuICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAnbGlzdGJveCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSB0aGUgVGVtcGxhdGUgZm9yIHRoZSBjb250ZW50c1xuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgdGVtcGxhdGVcbiAgICovXG4gIHRlbXBsYXRlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGA8c2xvdD48L3Nsb3Q+YDtcbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/components/ids-list-box/ids-list-box.ts\n");

/***/ }),

/***/ "./src/components/ids-mask/ids-mask-api.ts":
/*!*************************************************!*\
  !*** ./src/components/ids-mask/ids-mask-api.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ids_mask_api_default)\n/* harmony export */ });\n/* harmony import */ var _ids_mask_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ids-mask-common */ \"./src/components/ids-mask/ids-mask-common.ts\");\n/* harmony import */ var _utils_ids_deep_clone_utils_ids_deep_clone_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/ids-deep-clone-utils/ids-deep-clone-utils */ \"./src/utils/ids-deep-clone-utils/ids-deep-clone-utils.ts\");\n\n\nfunction isString(value) {\n  return typeof value === \"string\" || value instanceof String;\n}\nclass MaskAPI {\n  /**\n   * Process a string against the masking algorithm\n   * @param {string} rawValue the original, unmasked value\n   * @param {object} [opts] process options\n   * @returns {object} containing the processed mask along with some meta-data\n   */\n  process(rawValue, opts = {}) {\n    if (typeof rawValue !== \"string\") {\n      throw new Error(\"No string provided\");\n    }\n    if (!opts.selection) {\n      opts.selection = {\n        start: 0\n      };\n    }\n    let maskObj = {};\n    let processResult = {\n      originalValue: rawValue,\n      caretPos: opts?.selection?.start || 0,\n      maskResult: false\n    };\n    if (typeof opts.pattern === \"function\") {\n      if (!opts.patternOptions) {\n        opts.patternOptions = {};\n      }\n      const maskOpts = (0,_utils_ids_deep_clone_utils_ids_deep_clone_utils__WEBPACK_IMPORTED_MODULE_1__.deepClone)(opts.patternOptions);\n      maskOpts.caretPos = opts.selection.start;\n      maskOpts.previousMaskResult = opts.previousMaskResult;\n      maskOpts.locale = opts.locale;\n      maskObj = opts.pattern(rawValue, maskOpts);\n      if (Array.isArray(maskObj)) {\n        maskObj = {\n          caretTrapIndexes: [],\n          mask: maskObj\n        };\n      }\n      if (Array.isArray(maskObj.mask)) {\n        const caretTrapInfo = this.processCaretTraps(maskObj.mask);\n        maskObj.mask = caretTrapInfo.maskWithoutCaretTraps;\n        maskObj.caretTrapIndexes = caretTrapInfo.indexes;\n        opts.caretTrapIndexes = caretTrapInfo.indexes;\n      }\n    } else {\n      maskObj = {\n        caretTrapIndexes: [],\n        mask: opts.pattern\n      };\n    }\n    try {\n      processResult = this.conformToMask(rawValue, maskObj, opts);\n    } catch (e) {\n      return processResult;\n    }\n    if (typeof opts.pipe === \"function\") {\n      let pipeResult = {};\n      try {\n        pipeResult = opts.pipe(processResult, opts);\n      } catch (e) {\n        pipeResult = false;\n      }\n      if (pipeResult === false) {\n        processResult.pipeResult = false;\n        processResult.pipedValue = opts.previousMaskResult;\n      } else if (isString(pipeResult)) {\n        processResult.pipeResult = true;\n        processResult.pipedValue = pipeResult;\n        processResult.pipedCharIndexes = [];\n      } else {\n        processResult = (0,_utils_ids_deep_clone_utils_ids_deep_clone_utils__WEBPACK_IMPORTED_MODULE_1__.deepClone)(processResult);\n        processResult.pipeResult = pipeResult.result;\n        processResult.pipedValue = pipeResult.value;\n        processResult.pipedCharIndexes = pipeResult.characterIndexes;\n      }\n    }\n    return processResult;\n  }\n  /**\n   * Processes a raw string value against a masking algorithm and removes unfavorable chracters.\n   * @private\n   * @param {string} rawValue incoming full text string to process.\n   * @param {object} maskObj containing the mask to be used for modifying the raw value,\n   *  along with some meta-data calculated about the mask\n   * @param {object} [settings] incoming settings for mask parsing.\n   * @returns {object} containing the conformation result and some meta-data\n   */\n  conformToMask(rawValue, maskObj, settings) {\n    const conformSettings = (0,_utils_ids_deep_clone_utils_ids_deep_clone_utils__WEBPACK_IMPORTED_MODULE_1__.deepClone)(_ids_mask_common__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_CONFORM_OPTIONS);\n    Object.assign(conformSettings, settings);\n    conformSettings.placeholder = this.convertMaskToPlaceholder(\n      maskObj.mask,\n      conformSettings.placeholderChar\n    );\n    let charactersRejected = false;\n    const suppressGuide = conformSettings.guide === false;\n    const rawValueLength = rawValue.length;\n    const prevMaskResultLength = conformSettings.previousMaskResult.length;\n    const maskLength = maskObj.mask.length;\n    const placeholderLength = conformSettings.placeholder.length;\n    const placeholderChar = conformSettings.placeholderChar;\n    let caretPos = conformSettings.selection.start;\n    let resultStr = _ids_mask_common__WEBPACK_IMPORTED_MODULE_0__.EMPTY_STRING;\n    const editDistance = rawValueLength - prevMaskResultLength;\n    const isAddition = editDistance > 0;\n    const indexOfFirstChange = caretPos + (isAddition ? -editDistance : 0);\n    const indexOfLastChange = indexOfFirstChange + Math.abs(editDistance);\n    if (conformSettings.keepCharacterPositions === true && !isAddition) {\n      let compensatingPlaceholderChars = _ids_mask_common__WEBPACK_IMPORTED_MODULE_0__.EMPTY_STRING;\n      for (let i = indexOfFirstChange; i < indexOfLastChange; i++) {\n        if (conformSettings.placeholder[i] === placeholderChar) {\n          compensatingPlaceholderChars += placeholderChar;\n        }\n      }\n      rawValue = rawValue.slice(0, indexOfFirstChange) + compensatingPlaceholderChars + rawValue.slice(indexOfFirstChange, rawValueLength);\n    }\n    function markAddedChars(char, j) {\n      return {\n        char,\n        isNew: j >= indexOfFirstChange && j < indexOfLastChange\n      };\n    }\n    const rawValueArr = rawValue.split(_ids_mask_common__WEBPACK_IMPORTED_MODULE_0__.EMPTY_STRING).map(markAddedChars);\n    for (let k = rawValueLength - 1; k >= 0; k--) {\n      const char = rawValueArr[k];\n      if (char !== conformSettings.placeholderChar) {\n        const shouldOffset = k >= indexOfFirstChange && prevMaskResultLength === maskLength;\n        if (char === conformSettings.placeholder[shouldOffset ? k - editDistance : k]) {\n          rawValueArr.splice(k, 1);\n        }\n      }\n    }\n    placeholderLoop:\n      for (let l = 0; l < placeholderLength; l++) {\n        const charInPlaceholder = conformSettings.placeholder[l];\n        if (charInPlaceholder === placeholderChar) {\n          if (rawValueArr.length > 0) {\n            while (rawValueArr.length > 0) {\n              const rawValueChar = rawValueArr.shift();\n              const nextChar = rawValue.slice(l, l + 1);\n              if (rawValueChar.char === placeholderChar && suppressGuide !== true) {\n                resultStr += placeholderChar;\n                continue placeholderLoop;\n              } else if (maskObj.literalRegex && maskObj.literalRegex.test(rawValueChar.char) && nextChar && (nextChar === rawValueChar.char || nextChar === placeholderChar)) {\n                if (isAddition && maskObj.literals.indexOf(rawValue[l - 1]) > -1) {\n                  caretPos++;\n                  continue placeholderLoop;\n                }\n                const thisLiteralRegex = new RegExp(`(${rawValueChar.char})`, \"g\");\n                const numberLiteralsPlaceholder = conformSettings.placeholder.match(thisLiteralRegex).length;\n                const numberLiteralsRawValue = rawValue.match(thisLiteralRegex)?.length;\n                if (numberLiteralsRawValue <= numberLiteralsPlaceholder) {\n                  resultStr += rawValueChar.char;\n                }\n                let literalIndex = conformSettings.placeholder.slice(l).indexOf(rawValueChar.char);\n                while (literalIndex > 0) {\n                  l++;\n                  literalIndex--;\n                }\n                continue placeholderLoop;\n              } else if (maskObj.mask[l].test(rawValueChar.char)) {\n                if (conformSettings.keepCharacterPositions !== true || rawValueChar.isNew === false || conformSettings.previousMaskResult === _ids_mask_common__WEBPACK_IMPORTED_MODULE_0__.EMPTY_STRING || suppressGuide || !isAddition) {\n                  resultStr += rawValueChar.char;\n                } else {\n                  const rawValueArrLength = rawValueArr.length;\n                  let indexOfNextAvailablePlaceholderChar = null;\n                  for (let x = 0; x < rawValueArrLength; x++) {\n                    const charData = rawValueArr[x];\n                    if (charData.char !== placeholderChar && charData.isNew === false) {\n                      break;\n                    }\n                    if (charData.char === placeholderChar) {\n                      indexOfNextAvailablePlaceholderChar = x;\n                      break;\n                    }\n                  }\n                  if (indexOfNextAvailablePlaceholderChar !== null) {\n                    resultStr += rawValueChar.char;\n                    rawValueArr.splice(indexOfNextAvailablePlaceholderChar, 1);\n                  } else {\n                    l--;\n                  }\n                }\n                continue placeholderLoop;\n              } else {\n                charactersRejected = true;\n              }\n            }\n          }\n          if (suppressGuide === false) {\n            resultStr += conformSettings.placeholder.substr(l, placeholderLength);\n          }\n          break;\n        } else {\n          resultStr += charInPlaceholder;\n        }\n      }\n    if (suppressGuide && isAddition === false) {\n      let indexOfLastFilledPlaceholderChar = null;\n      for (let m = 0; m < resultStr.length; m++) {\n        if (conformSettings.placeholder[m] === placeholderChar) {\n          indexOfLastFilledPlaceholderChar = m;\n        }\n      }\n      if (indexOfLastFilledPlaceholderChar !== null) {\n        resultStr = resultStr.substr(0, indexOfLastFilledPlaceholderChar + 1);\n      } else if (rawValue !== \"\" && resultStr.indexOf(rawValue) > -1) {\n        caretPos += rawValue.length;\n      } else {\n        resultStr = _ids_mask_common__WEBPACK_IMPORTED_MODULE_0__.EMPTY_STRING;\n      }\n    }\n    return {\n      caretPos,\n      caretTrapIndexes: conformSettings.caretTrapIndexes,\n      conformedValue: resultStr,\n      charactersRejected,\n      placeholder: conformSettings.placeholder,\n      placeholderChar,\n      maskResult: true\n    };\n  }\n  /**\n   * Detects Caret Traps inside of a Mask Array and identifies them with a rich object\n   * @private\n   * @param {Array<string|RegExp>} mask the mask being checked\n   * @returns {object} containing a modified Mask array without caret traps, and an array of\n   *  indices with locations of the caret traps.\n   */\n  processCaretTraps(mask) {\n    const indexes = [];\n    let indexOfCaretTrap = mask.indexOf(_ids_mask_common__WEBPACK_IMPORTED_MODULE_0__.CARET_TRAP);\n    while (indexOfCaretTrap !== -1) {\n      indexes.push(indexOfCaretTrap);\n      mask.splice(indexOfCaretTrap, 1);\n      indexOfCaretTrap = mask.indexOf(_ids_mask_common__WEBPACK_IMPORTED_MODULE_0__.CARET_TRAP);\n    }\n    return {\n      maskWithoutCaretTraps: mask,\n      indexes\n    };\n  }\n  /**\n   * Converts an array-based mask into a placeholder string.\n   * @private\n   * @param {Array<string|RegExp>} mask - contains string \"literal\" characters and Regex matchers.\n   * @param {string} placeholderChar - a character that will be used as the placeholder.\n   * @returns {string} representing the placeholder\n   */\n  convertMaskToPlaceholder(mask, placeholderChar = _ids_mask_common__WEBPACK_IMPORTED_MODULE_0__.PLACEHOLDER_CHAR) {\n    return mask.map((char) => char instanceof RegExp ? placeholderChar : char).join(_ids_mask_common__WEBPACK_IMPORTED_MODULE_0__.EMPTY_STRING);\n  }\n  /**\n   * Takes an index representing a caret and changes it based on mask modifications\n   * @param {object} opts information about the caret placement.\n   * @returns {number} the index of the text caret.\n   */\n  adjustCaretPosition(opts) {\n    if (opts.caretPos === 0) {\n      return 0;\n    }\n    function nonPlaceholderFilter(char) {\n      return char !== nonPlaceholderFilter;\n    }\n    const rawValueLength = opts.rawValue.length;\n    const previousConformedValueLength = opts.previousMaskResult.length;\n    const placeholderLength = opts.placeholder ? opts.placeholder.length : 0;\n    const conformedValueLength = opts.conformedValue ? opts.conformedValue.length : 0;\n    const editLength = rawValueLength - previousConformedValueLength;\n    const isAddition = editLength > 0;\n    const isFirstRawValue = previousConformedValueLength === 0;\n    const isPartialMultiCharEdit = editLength > 1 && !isAddition && !isFirstRawValue;\n    if (isPartialMultiCharEdit) {\n      return opts.caretPos;\n    }\n    const possiblyHasRejectedChar = isAddition && (opts.previousMaskResult === opts.conformedValue || opts.conformedValue === opts.placeholder);\n    let startingSearchIndex = 0;\n    let trackRightCharacter;\n    let targetChar;\n    if (possiblyHasRejectedChar) {\n      startingSearchIndex = opts.caretPos - editLength;\n    } else {\n      const normalizedConformedValue = opts.conformedValue.toLowerCase();\n      const normalizedRawValue = opts.rawValue.toLowerCase();\n      const leftHalfChars = normalizedRawValue.substr(0, opts.caretPos).split(_ids_mask_common__WEBPACK_IMPORTED_MODULE_0__.EMPTY_STRING);\n      const intersection = leftHalfChars.filter((char) => normalizedConformedValue.indexOf(char) !== -1);\n      targetChar = intersection[intersection.length - 1];\n      const previousLeftMaskChars = opts.previousPlaceholder.substr(0, intersection.length).split(_ids_mask_common__WEBPACK_IMPORTED_MODULE_0__.EMPTY_STRING).filter(nonPlaceholderFilter).length;\n      const leftMaskChars = opts.placeholder.substr(0, intersection.length).split(_ids_mask_common__WEBPACK_IMPORTED_MODULE_0__.EMPTY_STRING).filter(nonPlaceholderFilter).length;\n      const masklengthChanged = leftMaskChars !== previousLeftMaskChars;\n      const targetIsMaskMovingLeft = opts.previousPlaceholder[intersection.length - 1] !== void 0 && opts.placeholder[intersection.length - 2] !== void 0 && opts.previousPlaceholder[intersection.length - 1] !== opts.placeholderChar && opts.previousPlaceholder[intersection.length - 1] !== opts.placeholder[intersection.length - 1] && opts.previousPlaceholder[intersection.length - 1] === opts.placeholder[intersection.length - 2];\n      if (!isAddition && (masklengthChanged || targetIsMaskMovingLeft) && previousLeftMaskChars > 0 && opts.placeholder.indexOf(targetChar) > -1 && opts.rawValue[opts.caretPos] !== void 0) {\n        trackRightCharacter = true;\n        targetChar = opts.rawValue[opts.caretPos];\n      }\n      let pipedChars = [];\n      if (opts.indexesOfPipedChars) {\n        pipedChars = opts.indexesOfPipedChars.map((index) => normalizedConformedValue[index]);\n      }\n      const countTargetCharInPipedChars = pipedChars.filter((char) => char === targetChar).length;\n      const countTargetCharInIntersection = intersection.filter((char) => char === targetChar).length;\n      const countTargetCharInPlaceholder = opts.placeholder.substr(0, opts.placeholder.indexOf(opts.placeholderChar)).split(_ids_mask_common__WEBPACK_IMPORTED_MODULE_0__.EMPTY_STRING).filter((char, index) => char === targetChar && opts.rawValue[index] !== char).length;\n      const requiredNumberOfMatches = countTargetCharInPlaceholder + countTargetCharInIntersection + countTargetCharInPipedChars + (trackRightCharacter ? 1 : 0);\n      let numberOfEncounteredMatches = 0;\n      for (let i = 0; i < conformedValueLength; i++) {\n        const conformedValueChar = normalizedConformedValue[i];\n        startingSearchIndex = i + 1;\n        if (conformedValueChar === targetChar) {\n          numberOfEncounteredMatches++;\n        }\n        if (numberOfEncounteredMatches >= requiredNumberOfMatches) {\n          break;\n        }\n      }\n    }\n    if (isAddition) {\n      let lastPlaceholderChar = startingSearchIndex;\n      for (let j = startingSearchIndex; j <= placeholderLength; j++) {\n        if (!opts.placeholder) {\n          return lastPlaceholderChar;\n        }\n        if (opts.placeholder[j] === opts.placeholderChar) {\n          lastPlaceholderChar = j;\n        }\n        if (\n          // If we're adding, we can position the caret at the next placeholder character.\n          opts.placeholder[j] === opts.placeholderChar || opts.caretTrapIndexes.indexOf(j) !== -1 || j === placeholderLength\n        ) {\n          return lastPlaceholderChar;\n        }\n      }\n    } else {\n      if (trackRightCharacter) {\n        for (let k = startingSearchIndex - 1; k >= 0; k--) {\n          if (\n            // `targetChar` should be in `conformedValue`, since it was in `rawValue`, just\n            // to the right of the caret\n            opts.conformedValue[k] === targetChar || opts.caretTrapIndexes.indexOf(k) !== -1 || k === 0\n          ) {\n            return k;\n          }\n        }\n      } else {\n        for (let l = startingSearchIndex; l >= 0; l--) {\n          if (\n            // If we're deleting, we can position the caret right before the placeholder character\n            opts.placeholder[l - 1] === opts.placeholderChar || opts.caretTrapIndexes.indexOf(l) !== -1 || l === 0\n          ) {\n            return l;\n          }\n        }\n      }\n    }\n    return 0;\n  }\n  /**\n   * Gets the safe raw value of an input field\n   * @param {any} inputValue the original value that came from an input field or other source\n   * @returns {string} the string-ified version of the original value\n   */\n  getSafeRawValue(inputValue) {\n    if (typeof inputValue === \"string\") {\n      return inputValue;\n    }\n    if (typeof inputValue === \"number\") {\n      return String(inputValue);\n    }\n    return \"\";\n  }\n}\nvar ids_mask_api_default = MaskAPI;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9pZHMtbWFzay9pZHMtbWFzay1hcGkudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBT087QUFFbUI7QUFNMUIsU0FBUyxTQUFTLE9BQVk7QUFDNUIsU0FBTyxPQUFPLFVBQVUsWUFBWSxpQkFBaUI7QUFDdkQ7QUFLQSxNQUFNLFFBQVE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU9aLFFBQVEsVUFBa0IsT0FBdUIsQ0FBQyxHQUFHO0FBQ25ELFFBQUksT0FBTyxhQUFhLFVBQVU7QUFDaEMsWUFBTSxJQUFJLE1BQU0sb0JBQW9CO0FBQUEsSUFDdEM7QUFHQSxRQUFJLENBQUMsS0FBSyxXQUFXO0FBQ25CLFdBQUssWUFBWTtBQUFBLFFBQ2YsT0FBTztBQUFBLE1BQ1Q7QUFBQSxJQUNGO0FBRUEsUUFBSSxVQUFlLENBQUM7QUFDcEIsUUFBSSxnQkFBcUI7QUFBQSxNQUN2QixlQUFlO0FBQUEsTUFDZixVQUFVLE1BQU0sV0FBVyxTQUFTO0FBQUEsTUFDcEMsWUFBWTtBQUFBLElBQ2Q7QUFHQSxRQUFJLE9BQU8sS0FBSyxZQUFZLFlBQVk7QUFDdEMsVUFBSSxDQUFDLEtBQUssZ0JBQWdCO0FBQ3hCLGFBQUssaUJBQWlCLENBQUM7QUFBQSxNQUN6QjtBQUdBLFlBQU0sV0FBVywyRkFBUyxDQUFDLEtBQUssY0FBYztBQUM5QyxlQUFTLFdBQVcsS0FBSyxVQUFVO0FBQ25DLGVBQVMscUJBQXFCLEtBQUs7QUFDbkMsZUFBUyxTQUFTLEtBQUs7QUFJdkIsZ0JBQVUsS0FBSyxRQUFRLFVBQVUsUUFBUTtBQUN6QyxVQUFJLE1BQU0sUUFBUSxPQUFPLEdBQUc7QUFDMUIsa0JBQVU7QUFBQSxVQUNSLGtCQUFrQixDQUFDO0FBQUEsVUFDbkIsTUFBTTtBQUFBLFFBQ1I7QUFBQSxNQUNGO0FBRUEsVUFBSSxNQUFNLFFBQVEsUUFBUSxJQUFJLEdBQUc7QUFJL0IsY0FBTSxnQkFBZ0IsS0FBSyxrQkFBa0IsUUFBUSxJQUFJO0FBR3pE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QUFPLGVBQWUsVUFBVTtBQUNsQyxhQUFPO0FBQUEsSUFDVDtBQUNBLFFBQUksT0FBTyxlQUFlLFVBQVU7QUFDbEMsYUFBTyxPQUFPLFVBQVU7QUFBQSxJQUMxQjtBQUNBLFdBQU87QUFBQSxFQUNUO0FBQ0Y7QUFFQSxJQUFPLHVCQUFRIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaWRzLWVudGVycHJpc2Utd2MvLi9zcmMvY29tcG9uZW50cy9pZHMtbWFzay9pZHMtbWFzay1hcGkudHM/ZWI0YSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBuby1jb250aW51ZSwgbm8tdW5kZXJzY29yZS1kYW5nbGUsIG5vLXJlc3RyaWN0ZWQtc3ludGF4LCBuby1sYWJlbHMgKi9cbmltcG9ydCB7XG4gIENBUkVUX1RSQVAsXG4gIEVNUFRZX1NUUklORyxcbiAgUExBQ0VIT0xERVJfQ0hBUixcbiAgREVGQVVMVF9DT05GT1JNX09QVElPTlMsXG4gIElkc01hc2tPcHRpb25zXG59IGZyb20gJy4vaWRzLW1hc2stY29tbW9uJztcblxuaW1wb3J0IHsgZGVlcENsb25lIH0gZnJvbSAnLi4vLi4vdXRpbHMvaWRzLWRlZXAtY2xvbmUtdXRpbHMvaWRzLWRlZXAtY2xvbmUtdXRpbHMnO1xuXG4vKipcbiAqIEBwYXJhbSB7YW55fSB2YWx1ZSB0aGUgaXRlbSB0byBjaGVjayBmb3Igc3RyaW5nXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGUgaXRlbSdzIGEgc3RyaW5nXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlOiBhbnkpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHwgdmFsdWUgaW5zdGFuY2VvZiBTdHJpbmc7XG59XG5cbi8qKlxuICogQGNsYXNzIE1hc2tBUElcbiAqL1xuY2xhc3MgTWFza0FQSSB7XG4gIC8qKlxuICAgKiBQcm9jZXNzIGEgc3RyaW5nIGFnYWluc3QgdGhlIG1hc2tpbmcgYWxnb3JpdGhtXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByYXdWYWx1ZSB0aGUgb3JpZ2luYWwsIHVubWFza2VkIHZhbHVlXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0c10gcHJvY2VzcyBvcHRpb25zXG4gICAqIEByZXR1cm5zIHtvYmplY3R9IGNvbnRhaW5pbmcgdGhlIHByb2Nlc3NlZCBtYXNrIGFsb25nIHdpdGggc29tZSBtZXRhLWRhdGFcbiAgICovXG4gIHByb2Nlc3MocmF3VmFsdWU6IHN0cmluZywgb3B0czogSWRzTWFza09wdGlvbnMgPSB7fSkge1xuICAgIGlmICh0eXBlb2YgcmF3VmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHN0cmluZyBwcm92aWRlZCcpO1xuICAgIH1cblxuICAgIC8vIElmIG5vIHRleHQgc2VsZWN0aW9uIGluZm9ybWF0aW9uIGV4aXN0cywgc2V0IGRlZmF1bHRzXG4gICAgaWYgKCFvcHRzLnNlbGVjdGlvbikge1xuICAgICAgb3B0cy5zZWxlY3Rpb24gPSB7XG4gICAgICAgIHN0YXJ0OiAwXG4gICAgICB9O1xuICAgIH1cblxuICAgIGxldCBtYXNrT2JqOiBhbnkgPSB7fTtcbiAgICBsZXQgcHJvY2Vzc1Jlc3VsdDogYW55ID0ge1xuICAgICAgb3JpZ2luYWxWYWx1ZTogcmF3VmFsdWUsXG4gICAgICBjYXJldFBvczogb3B0cz8uc2VsZWN0aW9uPy5zdGFydCB8fCAwLFxuICAgICAgbWFza1Jlc3VsdDogZmFsc2VcbiAgICB9O1xuXG4gICAgLy8gU2V0dXAgdGhlIHBhdHRlcm4gaWYgaXQncyBhIGZ1bmN0aW9uLlxuICAgIGlmICh0eXBlb2Ygb3B0cy5wYXR0ZXJuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAoIW9wdHMucGF0dGVybk9wdGlvbnMpIHtcbiAgICAgICAgb3B0cy5wYXR0ZXJuT3B0aW9ucyA9IHt9O1xuICAgICAgfVxuXG4gICAgICAvLyBNZXJnZSBpbmNvbWluZyBzZXR0aW5nc1xuICAgICAgY29uc3QgbWFza09wdHMgPSBkZWVwQ2xvbmUob3B0cy5wYXR0ZXJuT3B0aW9ucyk7XG4gICAgICBtYXNrT3B0cy5jYXJldFBvcyA9IG9wdHMuc2VsZWN0aW9uLnN0YXJ0O1xuICAgICAgbWFza09wdHMucHJldmlvdXNNYXNrUmVzdWx0ID0gb3B0cy5wcmV2aW91c01hc2tSZXN1bHQ7XG4gICAgICBtYXNrT3B0cy5sb2NhbGUgPSBvcHRzLmxvY2FsZTtcblxuICAgICAgLy8gR2V0IGEgcHJvY2Vzc2VkIG1hc2sgcGF0dGVybiBmcm9tIHRoZSBmdW5jdGlvbi5cbiAgICAgIC8vIFNlZSAjNDA3OSBmb3IgYW4gZXhwbGFuYXRpb24gb2YgdGhlIGNoYW5nZSBmcm9tIGp1c3QgYW4gYXJyYXkgdG8gYW4gb2JqZWN0IHdpdGggbWV0YS1kYXRhLlxuICAgICAgbWFza09iaiA9IG9wdHMucGF0dGVybihyYXdWYWx1ZSwgbWFza09wdHMpO1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkobWFza09iaikpIHtcbiAgICAgICAgbWFza09iaiA9IHtcbiAgICAgICAgICBjYXJldFRyYXBJbmRleGVzOiBbXSxcbiAgICAgICAgICBtYXNrOiBtYXNrT2JqXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KG1hc2tPYmoubWFzaykpIHtcbiAgICAgICAgLy8gbWFzayBmdW5jdGlvbnMgY2FuIHNldHVwIGNhcmV0IHRyYXBzIHRvIGhhdmUgc29tZSBjb250cm9sIG92ZXIgaG93IHRoZSBjYXJldFxuICAgICAgICAvLyBtb3Zlcy4gV2UgbmVlZCB0byBwcm9jZXNzIHRoZSBtYXNrIGZvciBhbnkgY2FyZXQgdHJhcHMuIGBwcm9jZXNzQ2FyZXRUcmFwc2BcbiAgICAgICAgLy8gd2lsbCByZW1vdmUgdGhlIGNhcmV0IHRyYXBzIGZyb20gdGhlIG1hc2sgYW5kIHJldHVybiB0aGUgaW5kZXhlcyBvZiB0aGUgY2FyZXQgdHJhcHMuXG4gICAgICAgIGNvbnN0IGNhcmV0VHJhcEluZm8gPSB0aGlzLnByb2Nlc3NDYXJldFRyYXBzKG1hc2tPYmoubWFzayk7XG5cbiAgICAgICAgLy8gVGhlIHByb2Nlc3NlZCBtYXNrIGlzIHdoYXQgd2UncmUgaW50ZXJlc3RlZCBpblxuICAgICAgICBtYXNrT2JqLm1hc2sgPSBjYXJldFRyYXBJbmZvLm1hc2tXaXRob3V0Q2FyZXRUcmFwcztcbiAgICAgICAgbWFza09iai5jYXJldFRyYXBJbmRleGVzID0gY2FyZXRUcmFwSW5mby5pbmRleGVzO1xuXG4gICAgICAgIC8vIEFuZCB3ZSBuZWVkIHRvIHN0b3JlIHRoZXNlIGluZGV4ZXMgYmVjYXVzZSB0aGV5J3JlIG5lZWRlZCBieSBgYWRqdXN0Q2FyZXRQb3NpdGlvbmBcbiAgICAgICAgb3B0cy5jYXJldFRyYXBJbmRleGVzID0gY2FyZXRUcmFwSW5mby5pbmRleGVzO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBVc2UgYSBwcm92aWRlZCBhcnJheVxuICAgICAgbWFza09iaiA9IHtcbiAgICAgICAgY2FyZXRUcmFwSW5kZXhlczogW10sXG4gICAgICAgIG1hc2s6IG9wdHMucGF0dGVybixcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHByb2Nlc3NSZXN1bHQgPSB0aGlzLmNvbmZvcm1Ub01hc2socmF3VmFsdWUsIG1hc2tPYmosIG9wdHMpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBwcm9jZXNzUmVzdWx0O1xuICAgIH1cblxuICAgIC8vIEFkanVzdHMgdGhlIGNhcmV0IHBvc2l0aW9uIHRvIHRoZSBlbmQgb2YgdGhlIHZhbHVlIGluIHNvbWUgY2FzZXMgKHJhbmdlIG51bWJlci9kYXRlIG1hc2tzKS5cbiAgICAvLyBAVE9ETyBSZS1lbmFibGUgdGhpcyBjb2RlIHdoZW4gd2UgcmUtaW1wbGVtZW50IHJhbmdlIGRhdGUvdGltZS9udW1iZXIgbWFza3NcbiAgICAvKlxuICAgIGlmIChvcHRzLnBhdHRlcm5PcHRpb25zPy5kZWxpbWl0ZXIgJiYgcHJvY2Vzc1Jlc3VsdD8uY29uZm9ybWVkVmFsdWUgIT09IHJhd1ZhbHVlKSB7XG4gICAgICBwcm9jZXNzUmVzdWx0LmNhcmV0UG9zID0gcHJvY2Vzc1Jlc3VsdC5jb25mb3JtZWRWYWx1ZS5sZW5ndGg7XG4gICAgfVxuICAgICovXG5cbiAgICAvLyBIYW5kbGUgdGhlIG9wdGlvbmFsIFwicGlwZVwiIGNsZWFudXAgbWV0aG9kLCBpZiBhcHBsaWNhYmxlLlxuICAgIGlmICh0eXBlb2Ygb3B0cy5waXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBsZXQgcGlwZVJlc3VsdDogYW55ID0ge307XG5cbiAgICAgIC8vIGBwaXBlYCByZWNlaXZlcyB0aGUgZW50aXJlIGBwcm9jZXNzUmVzdWx0YCBvYmplY3QgYW5kIHRoZSBjb25maWd1cmF0aW9ucyB3aXRoIHdoaWNoXG4gICAgICAvLyBgY29uZm9ybVRvTWFza2Agd2FzIGNhbGxlZC5cbiAgICAgIHRyeSB7XG4gICAgICAgIHBpcGVSZXN1bHQgPSBvcHRzLnBpcGUocHJvY2Vzc1Jlc3VsdCwgb3B0cyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHBpcGVSZXN1bHQgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgLy8gYHBpcGVSZXN1bHRzYCBzaG91bGQgYmUgYW4gb2JqZWN0LiBCdXQgYXMgYSBjb252ZW5pZW5jZSwgd2UgYWxsb3cgdGhlIHBpcGVcbiAgICAgIC8vIGF1dGhvciB0byBqdXN0IHJldHVybiBgZmFsc2VgIHRvIGluZGljYXRlIHJlamVjdGlvbi4gT3IgcmV0dXJuIGp1c3QgYSBzdHJpbmcgd2hlbiB0aGVyZVxuICAgICAgLy8gYXJlIG5vIHBpcGVkIGNoYXJhY3RlcnMuXG4gICAgICAvLyBJZiB0aGUgYHBpcGVgIHJldHVybnMgYGZhbHNlYCBvciBhIHN0cmluZywgdGhlIGJsb2NrIGJlbG93IHR1cm5zIGl0IGludG8gYW5cbiAgICAgIC8vIG9iamVjdCB0aGF0IHRoZSByZXN0IG9mIHRoZSBjb2RlIGNhbiB3b3JrIHdpdGguXG4gICAgICBpZiAocGlwZVJlc3VsdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgLy8gSWYgdGhlIGBwaXBlYCByZWplY3RzIGBjb25mb3JtZWRWYWx1ZWAsIHdlIHVzZSB0aGUgYHByZXZpb3VzQ29uZm9ybWVkVmFsdWVgLFxuICAgICAgICAvLyBhbmQgc2V0IGByZWplY3RlZGAgdG8gYHRydWVgLlxuICAgICAgICBwcm9jZXNzUmVzdWx0LnBpcGVSZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgcHJvY2Vzc1Jlc3VsdC5waXBlZFZhbHVlID0gb3B0cy5wcmV2aW91c01hc2tSZXN1bHQ7XG4gICAgICB9IGVsc2UgaWYgKGlzU3RyaW5nKHBpcGVSZXN1bHQpKSB7XG4gICAgICAgIHByb2Nlc3NSZXN1bHQucGlwZVJlc3VsdCA9IHRydWU7XG4gICAgICAgIHByb2Nlc3NSZXN1bHQucGlwZWRWYWx1ZSA9IHBpcGVSZXN1bHQ7XG4gICAgICAgIHByb2Nlc3NSZXN1bHQucGlwZWRDaGFySW5kZXhlcyA9IFtdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzc1Jlc3VsdCA9IGRlZXBDbG9uZShwcm9jZXNzUmVzdWx0KTtcbiAgICAgICAgcHJvY2Vzc1Jlc3VsdC5waXBlUmVzdWx0ID0gcGlwZVJlc3VsdC5yZXN1bHQ7XG4gICAgICAgIHByb2Nlc3NSZXN1bHQucGlwZWRWYWx1ZSA9IHBpcGVSZXN1bHQudmFsdWU7XG4gICAgICAgIHByb2Nlc3NSZXN1bHQucGlwZWRDaGFySW5kZXhlcyA9IHBpcGVSZXN1bHQuY2hhcmFjdGVySW5kZXhlcztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcHJvY2Vzc1Jlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcm9jZXNzZXMgYSByYXcgc3RyaW5nIHZhbHVlIGFnYWluc3QgYSBtYXNraW5nIGFsZ29yaXRobSBhbmQgcmVtb3ZlcyB1bmZhdm9yYWJsZSBjaHJhY3RlcnMuXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByYXdWYWx1ZSBpbmNvbWluZyBmdWxsIHRleHQgc3RyaW5nIHRvIHByb2Nlc3MuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBtYXNrT2JqIGNvbnRhaW5pbmcgdGhlIG1hc2sgdG8gYmUgdXNlZCBmb3IgbW9kaWZ5aW5nIHRoZSByYXcgdmFsdWUsXG4gICAqICBhbG9uZyB3aXRoIHNvbWUgbWV0YS1kYXRhIGNhbGN1bGF0ZWQgYWJvdXQgdGhlIG1hc2tcbiAgICogQHBhcmFtIHtvYmplY3R9IFtzZXR0aW5nc10gaW5jb21pbmcgc2V0dGluZ3MgZm9yIG1hc2sgcGFyc2luZy5cbiAgICogQHJldHVybnMge29iamVjdH0gY29udGFpbmluZyB0aGUgY29uZm9ybWF0aW9uIHJlc3VsdCBhbmQgc29tZSBtZXRhLWRhdGFcbiAgICovXG4gIGNvbmZvcm1Ub01hc2socmF3VmFsdWU6IHN0cmluZywgbWFza09iajogYW55LCBzZXR0aW5nczogYW55KSB7XG4gICAgLy8gVXNlIGRlZmF1bHQgc2V0dGluZ3MsIGFwcGVuZGVkIGJ5IHVzZXIgc2V0dGluZ3NcbiAgICBjb25zdCBjb25mb3JtU2V0dGluZ3MgPSBkZWVwQ2xvbmUoREVGQVVMVF9DT05GT1JNX09QVElPTlMpO1xuICAgIE9iamVjdC5hc3NpZ24oY29uZm9ybVNldHRpbmdzLCBzZXR0aW5ncyk7XG5cbiAgICAvLyBTZXR1cCB0aGUgcGxhY2Vob2xkZXIgdmVyc2lvbiBvZiB0aGUgbWFza1xuICAgIGNvbmZvcm1TZXR0aW5ncy5wbGFjZWhvbGRlciA9IHRoaXMuY29udmVydE1hc2tUb1BsYWNlaG9sZGVyKFxuICAgICAgbWFza09iai5tYXNrLFxuICAgICAgY29uZm9ybVNldHRpbmdzLnBsYWNlaG9sZGVyQ2hhclxuICAgICk7XG5cbiAgICAvLyBTZXR1cCBib29sZWFucyBhbmQgbnVtYmVycyBmb3IgdmFyaW91cyBzZXR0aW5ncyAoc3BlZWQpXG4gICAgbGV0IGNoYXJhY3RlcnNSZWplY3RlZCA9IGZhbHNlO1xuICAgIGNvbnN0IHN1cHByZXNzR3VpZGUgPSBjb25mb3JtU2V0dGluZ3MuZ3VpZGUgPT09IGZhbHNlO1xuICAgIGNvbnN0IHJhd1ZhbHVlTGVuZ3RoID0gcmF3VmFsdWUubGVuZ3RoO1xuICAgIGNvbnN0IHByZXZNYXNrUmVzdWx0TGVuZ3RoID0gY29uZm9ybVNldHRpbmdzLnByZXZpb3VzTWFza1Jlc3VsdC5sZW5ndGg7XG4gICAgY29uc3QgbWFza0xlbmd0aCA9IG1hc2tPYmoubWFzay5sZW5ndGg7XG4gICAgY29uc3QgcGxhY2Vob2xkZXJMZW5ndGggPSBjb25mb3JtU2V0dGluZ3MucGxhY2Vob2xkZXIubGVuZ3RoO1xuICAgIGNvbnN0IHBsYWNlaG9sZGVyQ2hhciA9IGNvbmZvcm1TZXR0aW5ncy5wbGFjZWhvbGRlckNoYXI7XG4gICAgbGV0IGNhcmV0UG9zID0gY29uZm9ybVNldHRpbmdzLnNlbGVjdGlvbi5zdGFydDtcbiAgICBsZXQgcmVzdWx0U3RyID0gRU1QVFlfU1RSSU5HO1xuXG4gICAgY29uc3QgZWRpdERpc3RhbmNlID0gcmF3VmFsdWVMZW5ndGggLSBwcmV2TWFza1Jlc3VsdExlbmd0aDtcbiAgICBjb25zdCBpc0FkZGl0aW9uID0gZWRpdERpc3RhbmNlID4gMDtcbiAgICBjb25zdCBpbmRleE9mRmlyc3RDaGFuZ2UgPSBjYXJldFBvcyArIChpc0FkZGl0aW9uID8gLWVkaXREaXN0YW5jZSA6IDApO1xuICAgIGNvbnN0IGluZGV4T2ZMYXN0Q2hhbmdlID0gaW5kZXhPZkZpcnN0Q2hhbmdlICsgTWF0aC5hYnMoZWRpdERpc3RhbmNlKTtcblxuICAgIC8vIElmIGBfY29uZm9ybVRvTWFzaygpYCBpcyBjb25maWd1cmVkIHRvIGtlZXAgY2hhcmFjdGVyIHBvc2l0aW9ucywgdGhhdCBpcyxcbiAgICAvLyBmb3IgbWFzayAxMTEsIHByZXZpb3VzIHZhbHVlIF8yXyBhbmQgcmF3IHZhbHVlIDNfMl8sIHRoZSBuZXcgY29uZm9ybWVkIHZhbHVlXG4gICAgLy8gc2hvdWxkIGJlIDMyXywgbm90IDNfMiAoZGVmYXVsdCBiZWhhdmlvcikuIFRoYXQncyBpbiB0aGUgY2FzZSBvZiBhZGRpdGlvbi5cbiAgICAvLyBBbmQgaW4gdGhlIGNhc2Ugb2YgZGVsZXRpb24sIHByZXZpb3VzIHZhbHVlIF8yMywgcmF3IHZhbHVlIF8zLCB0aGUgbmV3IGNvbmZvcm1lZFxuICAgIC8vIHN0cmluZyBzaG91bGQgYmUgX18zLCBub3QgXzNfIChkZWZhdWx0IGJlaGF2aW9yKVxuICAgIC8vXG4gICAgLy8gVGhlIG5leHQgYmxvY2sgb2YgbG9naWMgaGFuZGxlcyBrZWVwaW5nIGNoYXJhY3RlciBwb3NpdGlvbnMgZm9yIHRoZSBjYXNlXG4gICAgLy8gb2YgZGVsZXRpb24uIChLZWVwaW5nIGNoYXJhY3RlciBwb3NpdGlvbnMgZm9yIHRoZSBjYXNlIG9mIGFkZGl0aW9uIGlzIGZ1cnRoZXJcbiAgICAvLyBkb3duIHNpbmNlIGl0IGlzIGhhbmRsZWQgZGlmZmVyZW50bHkuKVxuICAgIC8vIFRvIGRvIHRoaXMsIHdlIHdhbnQgdG8gY29tcGVuc2F0ZSBmb3IgYWxsIGNoYXJhY3RlcnMgdGhhdCB3ZXJlIGRlbGV0ZWRcbiAgICBpZiAoY29uZm9ybVNldHRpbmdzLmtlZXBDaGFyYWN0ZXJQb3NpdGlvbnMgPT09IHRydWUgJiYgIWlzQWRkaXRpb24pIHtcbiAgICAgIC8vIFdlIHdpbGwgYmUgc3RvcmluZyB0aGUgbmV3IHBsYWNlaG9sZGVyIGNoYXJhY3RlcnMgaW4gdGhpcyB2YXJpYWJsZS5cbiAgICAgIGxldCBjb21wZW5zYXRpbmdQbGFjZWhvbGRlckNoYXJzID0gRU1QVFlfU1RSSU5HO1xuXG4gICAgICAvLyBGb3IgZXZlcnkgY2hhcmFjdGVyIHRoYXQgd2FzIGRlbGV0ZWQgZnJvbSBhIHBsYWNlaG9sZGVyIHBvc2l0aW9uLCB3ZSBhZGQgYSBwbGFjZWhvbGRlciBjaGFyXG4gICAgICBmb3IgKGxldCBpID0gaW5kZXhPZkZpcnN0Q2hhbmdlOyBpIDwgaW5kZXhPZkxhc3RDaGFuZ2U7IGkrKykge1xuICAgICAgICBpZiAoY29uZm9ybVNldHRpbmdzLnBsYWNlaG9sZGVyW2ldID09PSBwbGFjZWhvbGRlckNoYXIpIHtcbiAgICAgICAgICBjb21wZW5zYXRpbmdQbGFjZWhvbGRlckNoYXJzICs9IHBsYWNlaG9sZGVyQ2hhcjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBOb3cgd2UgdHJpY2sgb3VyIGFsZ29yaXRobSBieSBtb2RpZnlpbmcgdGhlIHJhdyB2YWx1ZSB0byBtYWtlIGl0IGNvbnRhaW5cbiAgICAgIC8vIGFkZGl0aW9uYWwgcGxhY2Vob2xkZXIgY2hhcmFjdGVycy4gVGhhdCB3YXkgd2hlbiB0aGUgd2Ugc3RhcnQgbGF5aW5nIHRoZVxuICAgICAgLy8gY2hhcmFjdGVycyBhZ2FpbiBvbiB0aGUgbWFzaywgaXQgd2lsbCBrZWVwIHRoZSBub24tZGVsZXRlZCBjaGFyYWN0ZXJzXG4gICAgICAvLyBpbiB0aGVpciBwb3NpdGlvbnMuXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIHJhd1ZhbHVlID1cbiAgICAgICAgcmF3VmFsdWUuc2xpY2UoMCwgaW5kZXhPZkZpcnN0Q2hhbmdlKVxuICAgICAgICArIGNvbXBlbnNhdGluZ1BsYWNlaG9sZGVyQ2hhcnNcbiAgICAgICAgKyByYXdWYWx1ZS5zbGljZShpbmRleE9mRmlyc3RDaGFuZ2UsIHJhd1ZhbHVlTGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0IGByYXdWYWx1ZWAgc3RyaW5nIHRvIGFuIGFycmF5LCBhbmQgbWFyayBjaGFyYWN0ZXJzIGJhc2VkIG9uIHdoZXRoZXJcbiAgICAgKiB0aGV5IGFyZSBuZXdseSBhZGRlZCBvciBoYXZlIGV4aXN0ZWQgaW4gdGhlIHByZXZpb3VzIGNvbmZvcm1lZCB2YWx1ZS4gSWRlbnRpZnlpbmcgbmV3XG4gICAgICogYW5kIG9sZCBjaGFyYWN0ZXJzIGlzIG5lZWRlZCBmb3IgYF9jb25mb3JtVG9NYXNrKClgIHRvIHdvcmsgaWYgaXQgaXMgY29uZmlndXJlZFxuICAgICAqIHRvIGtlZXAgY2hhcmFjdGVyIHBvc2l0aW9ucy5cbiAgICAgKiBAcGFyYW0geyp9IGNoYXIgdGhlIGFkZGVkIGNoYXJhY3RlclxuICAgICAqIEBwYXJhbSB7Kn0gaiB0aGUgaW5kZXggdGhlIGNoYXJhY3RlciB3YXMgYWRkZWRcbiAgICAgKiBAcmV0dXJucyB7b2JqZWN0fSBjb250YWluaW5nIG1ldGEtZGF0YSBhYm91dCB0aGUgY2hhcmFjdGVyIHRoYXQgd2FzIGFkZGVkLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcmtBZGRlZENoYXJzKGNoYXI6IGFueSwgajogYW55KSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjaGFyLFxuICAgICAgICBpc05ldzogaiA+PSBpbmRleE9mRmlyc3RDaGFuZ2UgJiYgaiA8IGluZGV4T2ZMYXN0Q2hhbmdlXG4gICAgICB9O1xuICAgIH1cbiAgICBjb25zdCByYXdWYWx1ZUFyciA9IHJhd1ZhbHVlLnNwbGl0KEVNUFRZX1NUUklORykubWFwKG1hcmtBZGRlZENoYXJzKTtcblxuICAgIC8vIFRoZSBsb29wIGJlbG93IHJlbW92ZXMgbWFza2luZyBjaGFyYWN0ZXJzIGZyb20gdXNlciBpbnB1dC4gRm9yIGV4YW1wbGUsIGZvciBtYXNrXG4gICAgLy8gYDAwICgxMTEpYCwgdGhlIHBsYWNlaG9sZGVyIHdvdWxkIGJlIGAwMCAoX19fKWAuIElmIHVzZXIgaW5wdXQgaXMgYDAwICgyMzQpYCwgdGhlIGxvb3AgYmVsb3dcbiAgICAvLyB3b3VsZCByZW1vdmUgYWxsIGNoYXJhY3RlcnMgYnV0IGAyMzRgIGZyb20gdGhlIGByYXdWYWx1ZUFycmAuIFRoZSByZXN0IG9mIHRoZSBhbGdvcml0aG1cbiAgICAvLyB0aGVuIHdvdWxkIGxheSBgMjM0YCBvbiB0b3Agb2YgdGhlIGF2YWlsYWJsZSBwbGFjZWhvbGRlciBwb3NpdGlvbnMgaW4gdGhlIG1hc2suXG4gICAgZm9yIChsZXQgayA9IHJhd1ZhbHVlTGVuZ3RoIC0gMTsgayA+PSAwOyBrLS0pIHtcbiAgICAgIGNvbnN0IGNoYXIgPSByYXdWYWx1ZUFycltrXTtcblxuICAgICAgaWYgKGNoYXIgIT09IGNvbmZvcm1TZXR0aW5ncy5wbGFjZWhvbGRlckNoYXIpIHtcbiAgICAgICAgY29uc3Qgc2hvdWxkT2Zmc2V0ID0gayA+PSBpbmRleE9mRmlyc3RDaGFuZ2UgJiYgcHJldk1hc2tSZXN1bHRMZW5ndGggPT09IG1hc2tMZW5ndGg7XG5cbiAgICAgICAgaWYgKGNoYXIgPT09IGNvbmZvcm1TZXR0aW5ncy5wbGFjZWhvbGRlclsoc2hvdWxkT2Zmc2V0KSA/IGsgLSBlZGl0RGlzdGFuY2UgOiBrXSkge1xuICAgICAgICAgIHJhd1ZhbHVlQXJyLnNwbGljZShrLCAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIExvb3AgdGhyb3VnaCB0aGUgcGxhY2Vob2xkZXIgc3RyaW5nIHRvIGZpbmQgY2hhcmFjdGVycyB0aGF0IG5lZWQgdG8gYmUgZmlsbGVkLlxuICAgIHBsYWNlaG9sZGVyTG9vcDpcbiAgICBmb3IgKGxldCBsID0gMDsgbCA8IHBsYWNlaG9sZGVyTGVuZ3RoOyBsKyspIHtcbiAgICAgIGNvbnN0IGNoYXJJblBsYWNlaG9sZGVyID0gY29uZm9ybVNldHRpbmdzLnBsYWNlaG9sZGVyW2xdO1xuXG4gICAgICAvLyBXZSBzZWUgb25lLiBMZXQncyBmaW5kIG91dCB3aGF0IHdlIGNhbiBwdXQgaW4gaXQuXG4gICAgICBpZiAoY2hhckluUGxhY2Vob2xkZXIgPT09IHBsYWNlaG9sZGVyQ2hhcikge1xuICAgICAgICAvLyBCdXQgYmVmb3JlIHRoYXQsIGRvIHdlIGFjdHVhbGx5IGhhdmUgYW55IHVzZXIgY2hhcmFjdGVycyB0aGF0IG5lZWQgYSBwbGFjZT9cbiAgICAgICAgaWYgKHJhd1ZhbHVlQXJyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAvLyBXZSB3aWxsIGtlZXAgY2hpcHBpbmcgYXdheSBhdCB1c2VyIGlucHV0IHVudGlsIGVpdGhlciB3ZSBydW4gb3V0IG9mIGNoYXJhY3RlcnNcbiAgICAgICAgICAvLyBvciB3ZSBmaW5kIGF0IGxlYXN0IG9uZSBjaGFyYWN0ZXIgdGhhdCB3ZSBjYW4gbWFwLlxuICAgICAgICAgIHdoaWxlIChyYXdWYWx1ZUFyci5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAvLyBMZXQncyByZXRyaWV2ZSB0aGUgZmlyc3QgdXNlciBjaGFyYWN0ZXIgaW4gdGhlIHF1ZXVlIG9mIGNoYXJhY3RlcnMgd2UgaGF2ZSBsZWZ0XG4gICAgICAgICAgICBjb25zdCByYXdWYWx1ZUNoYXI6IGFueSA9IHJhd1ZhbHVlQXJyLnNoaWZ0KCk7XG4gICAgICAgICAgICBjb25zdCBuZXh0Q2hhciA9IHJhd1ZhbHVlLnNsaWNlKGwsIGwgKyAxKTtcblxuICAgICAgICAgICAgLy8gSWYgdGhlIGNoYXJhY3RlciB3ZSBnb3QgZnJvbSB0aGUgdXNlciBpbnB1dCBpcyBhIHBsYWNlaG9sZGVyIGNoYXJhY3RlciAod2hpY2ggaGFwcGVuc1xuICAgICAgICAgICAgLy8gcmVndWxhcmx5IGJlY2F1c2UgdXNlciBpbnB1dCBjb3VsZCBiZSBzb21ldGhpbmcgbGlrZSAoNTQwKSA5MF8tX19fXywgd2hpY2ggaW5jbHVkZXNcbiAgICAgICAgICAgIC8vIGEgYnVuY2ggb2YgYF9gIHdoaWNoIGFyZSBwbGFjZWhvbGRlciBjaGFyYWN0ZXJzKSBhbmQgd2UgYXJlIG5vdCBpbiAqbm8gZ3VpZGUqIG1vZGUsXG4gICAgICAgICAgICAvLyB0aGVuIHdlIG1hcCB0aGlzIHBsYWNlaG9sZGVyIGNoYXJhY3RlciB0byB0aGUgY3VycmVudCBzcG90IGluIHRoZSBwbGFjZWhvbGRlclxuICAgICAgICAgICAgaWYgKHJhd1ZhbHVlQ2hhci5jaGFyID09PSBwbGFjZWhvbGRlckNoYXIgJiYgc3VwcHJlc3NHdWlkZSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICByZXN1bHRTdHIgKz0gcGxhY2Vob2xkZXJDaGFyO1xuXG4gICAgICAgICAgICAgIC8vIEFuZCB3ZSBnbyB0byBmaW5kIHRoZSBuZXh0IHBsYWNlaG9sZGVyIGNoYXJhY3RlciB0aGF0IG5lZWRzIGZpbGxpbmdcbiAgICAgICAgICAgICAgY29udGludWUgcGxhY2Vob2xkZXJMb29wO1xuXG4gICAgICAgICAgICAgIC8vIEVsc2UgaWYsIHRoZSBjaGFyYWN0ZXIgd2UgZ290IGZyb20gdGhlIHVzZXIgaW5wdXQgaXMgYSBrbm93biBsaXRlcmFsIG1lbWJlciBvZiB0aGVcbiAgICAgICAgICAgICAgLy8gbWFzayAobm90IG5lY2Vzc2FyaWx5IHVzZXItaW5wdXQsIGFuZCBmb3JtcyBwYXJ0IG9mIHRoZSBmb3JtYXR0aW5nKSwgYWRkIHRoYXQgYW5kXG4gICAgICAgICAgICAgIC8vIHNwZWVkIHRoZSBtYXNrIHVwIHRvIHRoZSBuZXh0IHNlY3Rpb24uXG4gICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICBtYXNrT2JqLmxpdGVyYWxSZWdleFxuICAgICAgICAgICAgICAmJiBtYXNrT2JqLmxpdGVyYWxSZWdleC50ZXN0KHJhd1ZhbHVlQ2hhci5jaGFyKVxuICAgICAgICAgICAgICAmJiBuZXh0Q2hhciAmJiAoKG5leHRDaGFyID09PSByYXdWYWx1ZUNoYXIuY2hhcikgfHwgKG5leHRDaGFyID09PSBwbGFjZWhvbGRlckNoYXIpKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGlmIChpc0FkZGl0aW9uICYmIG1hc2tPYmoubGl0ZXJhbHMuaW5kZXhPZihyYXdWYWx1ZVtsIC0gMV0pID4gLTEpIHtcbiAgICAgICAgICAgICAgICBjYXJldFBvcysrO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlIHBsYWNlaG9sZGVyTG9vcDtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIC8vIEFuYWx5emUgdGhlIG51bWJlciBvZiB0aGlzIHBhcnRpY3VsYXIgbGl0ZXJhbCBpbiB0aGUgdmFsdWUsXG4gICAgICAgICAgICAgIC8vIGFuZCBvbmx5IGFkZCBpdCBpZiB3ZSBoYXZlbid0IHBhc3NlZCB0aGUgbWF4aW11bVxuICAgICAgICAgICAgICBjb25zdCB0aGlzTGl0ZXJhbFJlZ2V4ID0gbmV3IFJlZ0V4cChgKCR7cmF3VmFsdWVDaGFyLmNoYXJ9KWAsICdnJyk7XG4gICAgICAgICAgICAgIGNvbnN0IG51bWJlckxpdGVyYWxzUGxhY2Vob2xkZXIgPSBjb25mb3JtU2V0dGluZ3MucGxhY2Vob2xkZXIubWF0Y2godGhpc0xpdGVyYWxSZWdleCkubGVuZ3RoOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgICAgICAgICAgICAgY29uc3QgbnVtYmVyTGl0ZXJhbHNSYXdWYWx1ZTogYW55ID0gcmF3VmFsdWUubWF0Y2godGhpc0xpdGVyYWxSZWdleCk/Lmxlbmd0aDtcbiAgICAgICAgICAgICAgaWYgKG51bWJlckxpdGVyYWxzUmF3VmFsdWUgPD0gbnVtYmVyTGl0ZXJhbHNQbGFjZWhvbGRlcikge1xuICAgICAgICAgICAgICAgIHJlc3VsdFN0ciArPSByYXdWYWx1ZUNoYXIuY2hhcjtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIC8vIEZhc3QgZm9yd2FyZCB0aGUgbG9vcCB0byB0aGUgYWZ0ZXIgdGhlIG5leHQgaW5zdGFuY2Ugb2YgdGhpcyBsaXRlcmFsLlxuICAgICAgICAgICAgICBsZXQgbGl0ZXJhbEluZGV4ID0gY29uZm9ybVNldHRpbmdzLnBsYWNlaG9sZGVyLnNsaWNlKGwpLmluZGV4T2YocmF3VmFsdWVDaGFyLmNoYXIpO1xuICAgICAgICAgICAgICB3aGlsZSAobGl0ZXJhbEluZGV4ID4gMCkge1xuICAgICAgICAgICAgICAgIGwrKztcbiAgICAgICAgICAgICAgICBsaXRlcmFsSW5kZXgtLTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGNvbnRpbnVlIHBsYWNlaG9sZGVyTG9vcDtcbiAgICAgICAgICAgICAgLy8gRWxzZSBpZiwgdGhlIGNoYXJhY3RlciB3ZSBnb3QgZnJvbSB0aGUgdXNlciBpbnB1dCBpcyBub3QgYSBwbGFjZWhvbGRlciwgbGV0J3Mgc2VlXG4gICAgICAgICAgICAgIC8vIGlmIHRoZSBjdXJyZW50IHBvc2l0aW9uIGluIHRoZSBtYXNrIGNhbiBhY2NlcHQgaXQuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1hc2tPYmoubWFza1tsXS50ZXN0KHJhd1ZhbHVlQ2hhci5jaGFyKSkge1xuICAgICAgICAgICAgICAvLyB3ZSBtYXAgdGhlIGNoYXJhY3RlciBkaWZmZXJlbnRseSBiYXNlZCBvbiB3aGV0aGVyIHdlIGFyZSBrZWVwaW5nIGNoYXJhY3RlclxuICAgICAgICAgICAgICAvLyBwb3NpdGlvbnMgb3Igbm90LiBJZiBhbnkgb2YgdGhlIGNvbmRpdGlvbnMgYmVsb3cgYXJlIG1ldCwgd2Ugc2ltcGx5IG1hcCB0aGVcbiAgICAgICAgICAgICAgLy8gcmF3IHZhbHVlIGNoYXJhY3RlciB0byB0aGUgcGxhY2Vob2xkZXIgcG9zaXRpb24uXG4gICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBjb25mb3JtU2V0dGluZ3Mua2VlcENoYXJhY3RlclBvc2l0aW9ucyAhPT0gdHJ1ZVxuICAgICAgICAgICAgICAgIHx8IHJhd1ZhbHVlQ2hhci5pc05ldyA9PT0gZmFsc2VcbiAgICAgICAgICAgICAgICB8fCBjb25mb3JtU2V0dGluZ3MucHJldmlvdXNNYXNrUmVzdWx0ID09PSBFTVBUWV9TVFJJTkdcbiAgICAgICAgICAgICAgICB8fCBzdXBwcmVzc0d1aWRlXG4gICAgICAgICAgICAgICAgfHwgIWlzQWRkaXRpb25cbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0U3RyICs9IHJhd1ZhbHVlQ2hhci5jaGFyO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFdlIGVudGVyIHRoaXMgYmxvY2sgb2YgY29kZSBpZiB3ZSBhcmUgdHJ5aW5nIHRvIGtlZXAgY2hhcmFjdGVyIHBvc2l0aW9ucyBhbmRcbiAgICAgICAgICAgICAgICAvLyBub25lIG9mIHRoZSBjb25kaXRpb25zIGFib3ZlIGlzIG1ldC4gSW4gdGhpcyBjYXNlLCB3ZSBuZWVkIHRvIHNlZSBpZiB0aGVyZSdzXG4gICAgICAgICAgICAgICAgLy8gYW4gYXZhaWxhYmxlIHNwb3QgZm9yIHRoZSByYXcgdmFsdWUgY2hhcmFjdGVyIHRvIGJlIG1hcHBlZCB0by4gSWYgd2UgY291bGRuJ3RcbiAgICAgICAgICAgICAgICAvLyBmaW5kIGEgc3BvdCwgd2Ugd2lsbCBkaXNjYXJkIHRoZSBjaGFyYWN0ZXIuXG4gICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAvLyBGb3IgZXhhbXBsZSwgZm9yIG1hc2sgYDExMTFgLCBwcmV2aW91cyBjb25mb3JtZWQgdmFsdWUgYF8yX19gLCByYXcgdmFsdWVcbiAgICAgICAgICAgICAgICAvLyBgOTQyXzJfX2AuIFdlIGNhbiBtYXAgdGhlIGA5YCwgdG8gdGhlIGZpcnN0IGF2YWlsYWJsZSBwbGFjZWhvbGRlciBwb3NpdGlvbixcbiAgICAgICAgICAgICAgICAvLyBidXQgdGhlbiwgdGhlcmUgYXJlIG5vIG1vcmUgc3BvdHMgYXZhaWxhYmxlIGZvciB0aGUgYDRgIGFuZCBgMmAuIFNvLCB3ZVxuICAgICAgICAgICAgICAgIC8vIGRpc2NhcmQgdGhlbSBhbmQgZW5kIHVwIHdpdGggYSBjb25mb3JtZWQgdmFsdWUgb2YgYDkyX19gLlxuICAgICAgICAgICAgICAgIGNvbnN0IHJhd1ZhbHVlQXJyTGVuZ3RoID0gcmF3VmFsdWVBcnIubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGxldCBpbmRleE9mTmV4dEF2YWlsYWJsZVBsYWNlaG9sZGVyQ2hhciA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICAvLyBMZXQncyBsb29wIHRocm91Z2ggdGhlIHJlbWFpbmluZyByYXcgdmFsdWUgY2hhcmFjdGVycy4gV2UgYXJlIGxvb2tpbmcgZm9yXG4gICAgICAgICAgICAgICAgLy8gZWl0aGVyIGEgc3VpdGFibGUgc3BvdCwgaWUsIGEgcGxhY2Vob2xkZXIgY2hhcmFjdGVyIG9yIGEgbm9uLXN1aXRhYmxlIHNwb3QsXG4gICAgICAgICAgICAgICAgLy8gaWUsIGEgbm9uLXBsYWNlaG9sZGVyIGNoYXJhY3RlciB0aGF0IGlzIG5vdCBuZXcuIElmIHdlIHNlZSBhIHN1aXRhYmxlIHNwb3RcbiAgICAgICAgICAgICAgICAvLyBmaXJzdCwgd2Ugc3RvcmUgaXRzIHBvc2l0aW9uIGFuZCBleGl0IHRoZSBsb29wLiBJZiB3ZSBzZWUgYSBub24tc3VpdGFibGUgc3BvdFxuICAgICAgICAgICAgICAgIC8vIGZpcnN0LCB3ZSBleGl0IHRoZSBsb29wIGFuZCBvdXIgYGluZGV4T2ZOZXh0QXZhaWxhYmxlUGxhY2Vob2xkZXJDaGFyYFxuICAgICAgICAgICAgICAgIC8vIHdpbGwgc3RheSBhcyBgbnVsbGAuXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCByYXdWYWx1ZUFyckxlbmd0aDsgeCsrKSB7XG4gICAgICAgICAgICAgICAgICBjb25zdCBjaGFyRGF0YSA9IHJhd1ZhbHVlQXJyW3hdO1xuXG4gICAgICAgICAgICAgICAgICBpZiAoY2hhckRhdGEuY2hhciAhPT0gcGxhY2Vob2xkZXJDaGFyICYmIGNoYXJEYXRhLmlzTmV3ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgaWYgKGNoYXJEYXRhLmNoYXIgPT09IHBsYWNlaG9sZGVyQ2hhcikge1xuICAgICAgICAgICAgICAgICAgICBpbmRleE9mTmV4dEF2YWlsYWJsZVBsYWNlaG9sZGVyQ2hhciA9IHg7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIElmIGBpbmRleE9mTmV4dEF2YWlsYWJsZVBsYWNlaG9sZGVyQ2hhcmAgaXMgbm90IGBudWxsYCwgdGhhdCBtZWFucyB0aGVcbiAgICAgICAgICAgICAgICAvLyBjaGFyYWN0ZXIgaXMgbm90IGJsb2NrZWQuIFdlIGNhbiBtYXAgaXQuIEFuZCB0byBrZWVwIHRoZSBjaGFyYWN0ZXIgcG9zaXRpb25zLFxuICAgICAgICAgICAgICAgIC8vIHdlIHJlbW92ZSB0aGUgcGxhY2Vob2xkZXIgY2hhcmFjdGVyIGZyb20gdGhlIHJlbWFpbmluZyBjaGFyYWN0ZXJzXG4gICAgICAgICAgICAgICAgaWYgKGluZGV4T2ZOZXh0QXZhaWxhYmxlUGxhY2Vob2xkZXJDaGFyICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICByZXN1bHRTdHIgKz0gcmF3VmFsdWVDaGFyLmNoYXI7XG4gICAgICAgICAgICAgICAgICByYXdWYWx1ZUFyci5zcGxpY2UoaW5kZXhPZk5leHRBdmFpbGFibGVQbGFjZWhvbGRlckNoYXIsIDEpO1xuXG4gICAgICAgICAgICAgICAgICAvLyBJZiBgaW5kZXhPZk5leHRBdmFpbGFibGVQbGFjZWhvbGRlckNoYXJgIGlzIGBudWxsYCwgdGhhdCBtZWFucyB0aGVcbiAgICAgICAgICAgICAgICAgIC8vIGNoYXJhY3RlciBpcyBibG9ja2VkLiBXZSBoYXZlIHRvIGRpc2NhcmQgaXQuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGwtLTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvLyBTaW5jZSB3ZSd2ZSBtYXBwZWQgdGhpcyBwbGFjZWhvbGRlciBwb3NpdGlvbi4gV2UgbW92ZSBvbiB0byB0aGUgbmV4dCBvbmUuXG4gICAgICAgICAgICAgIGNvbnRpbnVlIHBsYWNlaG9sZGVyTG9vcDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNoYXJhY3RlcnNSZWplY3RlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gV2UgcmVhY2ggdGhpcyBwb2ludCB3aGVuIHdlJ3ZlIG1hcHBlZCBhbGwgdGhlIHVzZXIgaW5wdXQgY2hhcmFjdGVycyB0byBwbGFjZWhvbGRlclxuICAgICAgICAvLyBwb3NpdGlvbnMgaW4gdGhlIG1hc2suIEluICpndWlkZSogbW9kZSwgd2UgYXBwZW5kIHRoZSBsZWZ0IG92ZXIgY2hhcmFjdGVycyBpbiB0aGVcbiAgICAgICAgLy8gcGxhY2Vob2xkZXIgdG8gdGhlIGBjb25mb3JtZWRTdHJpbmdgLCBidXQgaW4gKm5vIGd1aWRlKiBtb2RlLCB3ZSBkb24ndCB3YW5uYSBkbyB0aGF0LlxuICAgICAgICAvL1xuICAgICAgICAvLyBUaGF0IGlzLCBmb3IgbWFzayBgKDExMSlgIGFuZCB1c2VyIGlucHV0IGAyYCwgd2Ugd2FudCB0byByZXR1cm4gYCgyYCwgbm90IGAoMl9fKWAuXG4gICAgICAgIGlmIChzdXBwcmVzc0d1aWRlID09PSBmYWxzZSkge1xuICAgICAgICAgIHJlc3VsdFN0ciArPSBjb25mb3JtU2V0dGluZ3MucGxhY2Vob2xkZXIuc3Vic3RyKGwsIHBsYWNlaG9sZGVyTGVuZ3RoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFuZCB3ZSBicmVha1xuICAgICAgICBicmVhaztcblxuICAgICAgICAvLyBFbHNlLCB0aGUgY2hhckluUGxhY2Vob2xkZXIgaXMgbm90IGEgcGxhY2Vob2xkZXJDaGFyLiBUaGF0IGlzLCB3ZSBjYW5ub3QgZmlsbCBpdFxuICAgICAgICAvLyB3aXRoIHVzZXIgaW5wdXQuIFNvIGFzIGxvbmcgYXMgaXQgZG9lc24ndCBleGlzdCBhdCB0aGUgcmF3VmFsdWUncyBjdXJyZW50IGluZGV4LFxuICAgICAgICAvLyB3ZSBqdXN0IG1hcCBpdCB0byB0aGUgZmluYWwgb3V0cHV0LlxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0U3RyICs9IGNoYXJJblBsYWNlaG9sZGVyO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFRoZSBmb2xsb3dpbmcgbG9naWMgaXMgbmVlZGVkIHRvIGRlYWwgd2l0aCB0aGUgY2FzZSBvZiBkZWxldGlvbiBpbiAqbm8gZ3VpZGUqIG1vZGUuXG4gICAgLy9cbiAgICAvLyBDb25zaWRlciB0aGUgc2lsbHkgbWFzayBgKDExMSkgLy8vIDFgLiBXaGF0IGlmIHVzZXIgdHJpZXMgdG8gZGVsZXRlIHRoZSBsYXN0IHBsYWNlaG9sZGVyXG4gICAgLy8gcG9zaXRpb24/IFNvbWV0aGluZyBsaWtlIGAoNTg5KSAvLy8gYC4gV2Ugd2FudCB0byBjb25mb3JtIHRoYXQgdG8gYCg1ODlgLiBOb3QgYCg1ODkpIC8vLyBgLlxuICAgIC8vIFRoYXQncyB3aHkgdGhlIGxvZ2ljIGJlbG93IGZpbmRzIHRoZSBsYXN0IGZpbGxlZCBwbGFjZWhvbGRlciBjaGFyYWN0ZXIsXG4gICAgLy8gYW5kIHJlbW92ZXMgZXZlcnl0aGluZyBmcm9tIHRoYXQgcG9pbnQgb24uXG4gICAgaWYgKHN1cHByZXNzR3VpZGUgJiYgaXNBZGRpdGlvbiA9PT0gZmFsc2UpIHtcbiAgICAgIGxldCBpbmRleE9mTGFzdEZpbGxlZFBsYWNlaG9sZGVyQ2hhciA9IG51bGw7XG5cbiAgICAgIC8vIEZpbmQgdGhlIGxhc3QgZmlsbGVkIHBsYWNlaG9sZGVyIHBvc2l0aW9uIGFuZCBzdWJzdHJpbmcgZnJvbSB0aGVyZVxuICAgICAgZm9yIChsZXQgbSA9IDA7IG0gPCByZXN1bHRTdHIubGVuZ3RoOyBtKyspIHtcbiAgICAgICAgaWYgKGNvbmZvcm1TZXR0aW5ncy5wbGFjZWhvbGRlclttXSA9PT0gcGxhY2Vob2xkZXJDaGFyKSB7XG4gICAgICAgICAgaW5kZXhPZkxhc3RGaWxsZWRQbGFjZWhvbGRlckNoYXIgPSBtO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChpbmRleE9mTGFzdEZpbGxlZFBsYWNlaG9sZGVyQ2hhciAhPT0gbnVsbCkge1xuICAgICAgICAvLyBXZSBzdWJzdHJpbmcgZnJvbSB0aGUgYmVnaW5uaW5nIHVudGlsIHRoZSBwb3NpdGlvbiBhZnRlciB0aGUgbGFzdCBmaWxsZWRcbiAgICAgICAgLy8gcGxhY2Vob2xkZXIgY2hhci5cbiAgICAgICAgcmVzdWx0U3RyID0gcmVzdWx0U3RyLnN1YnN0cigwLCBpbmRleE9mTGFzdEZpbGxlZFBsYWNlaG9sZGVyQ2hhciArIDEpO1xuICAgICAgfSBlbHNlIGlmIChyYXdWYWx1ZSAhPT0gJycgJiYgcmVzdWx0U3RyLmluZGV4T2YocmF3VmFsdWUpID4gLTEpIHtcbiAgICAgICAgLy8gVGhlIHJhdyB2YWx1ZSBwcm92aWRlZCBleGlzdHMgd2l0aGluIHRoZSBjaGFyYWN0ZXIgbGl0ZXJhbHMgbGVmdCBieSBwcm9jZXNzaW5nLCBzb1xuICAgICAgICAvLyB3ZSBzaW1wbHkgZG8gbm90aGluZyB0byB0aGUgcmVzdWx0cyBzdHJpbmcgaW4gdGhpcyBjYXNlLlxuICAgICAgICBjYXJldFBvcyArPSByYXdWYWx1ZS5sZW5ndGg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBJZiB3ZSBjb3VsZG4ndCBmaW5kIGBpbmRleE9mTGFzdEZpbGxlZFBsYWNlaG9sZGVyQ2hhcmAgdGhhdCBtZWFucyB0aGUgdXNlciBkZWxldGVkXG4gICAgICAgIC8vIHRoZSBmaXJzdCBjaGFyYWN0ZXIgaW4gdGhlIG1hc2suIFNvIHdlIHJldHVybiBhbiBlbXB0eSBzdHJpbmcuXG4gICAgICAgIHJlc3VsdFN0ciA9IEVNUFRZX1NUUklORztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgY2FyZXRQb3MsXG4gICAgICBjYXJldFRyYXBJbmRleGVzOiBjb25mb3JtU2V0dGluZ3MuY2FyZXRUcmFwSW5kZXhlcyxcbiAgICAgIGNvbmZvcm1lZFZhbHVlOiByZXN1bHRTdHIsXG4gICAgICBjaGFyYWN0ZXJzUmVqZWN0ZWQsXG4gICAgICBwbGFjZWhvbGRlcjogY29uZm9ybVNldHRpbmdzLnBsYWNlaG9sZGVyLFxuICAgICAgcGxhY2Vob2xkZXJDaGFyLFxuICAgICAgbWFza1Jlc3VsdDogdHJ1ZVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogRGV0ZWN0cyBDYXJldCBUcmFwcyBpbnNpZGUgb2YgYSBNYXNrIEFycmF5IGFuZCBpZGVudGlmaWVzIHRoZW0gd2l0aCBhIHJpY2ggb2JqZWN0XG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nfFJlZ0V4cD59IG1hc2sgdGhlIG1hc2sgYmVpbmcgY2hlY2tlZFxuICAgKiBAcmV0dXJucyB7b2JqZWN0fSBjb250YWluaW5nIGEgbW9kaWZpZWQgTWFzayBhcnJheSB3aXRob3V0IGNhcmV0IHRyYXBzLCBhbmQgYW4gYXJyYXkgb2ZcbiAgICogIGluZGljZXMgd2l0aCBsb2NhdGlvbnMgb2YgdGhlIGNhcmV0IHRyYXBzLlxuICAgKi9cbiAgcHJvY2Vzc0NhcmV0VHJhcHMobWFzazogYW55KSB7XG4gICAgY29uc3QgaW5kZXhlcyA9IFtdO1xuICAgIGxldCBpbmRleE9mQ2FyZXRUcmFwID0gbWFzay5pbmRleE9mKENBUkVUX1RSQVApO1xuXG4gICAgd2hpbGUgKGluZGV4T2ZDYXJldFRyYXAgIT09IC0xKSB7XG4gICAgICBpbmRleGVzLnB1c2goaW5kZXhPZkNhcmV0VHJhcCk7XG4gICAgICBtYXNrLnNwbGljZShpbmRleE9mQ2FyZXRUcmFwLCAxKTtcbiAgICAgIGluZGV4T2ZDYXJldFRyYXAgPSBtYXNrLmluZGV4T2YoQ0FSRVRfVFJBUCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIG1hc2tXaXRob3V0Q2FyZXRUcmFwczogbWFzayxcbiAgICAgIGluZGV4ZXNcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGFuIGFycmF5LWJhc2VkIG1hc2sgaW50byBhIHBsYWNlaG9sZGVyIHN0cmluZy5cbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheTxzdHJpbmd8UmVnRXhwPn0gbWFzayAtIGNvbnRhaW5zIHN0cmluZyBcImxpdGVyYWxcIiBjaGFyYWN0ZXJzIGFuZCBSZWdleCBtYXRjaGVycy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHBsYWNlaG9sZGVyQ2hhciAtIGEgY2hhcmFjdGVyIHRoYXQgd2lsbCBiZSB1c2VkIGFzIHRoZSBwbGFjZWhvbGRlci5cbiAgICogQHJldHVybnMge3N0cmluZ30gcmVwcmVzZW50aW5nIHRoZSBwbGFjZWhvbGRlclxuICAgKi9cbiAgY29udmVydE1hc2tUb1BsYWNlaG9sZGVyKG1hc2s6IEFycmF5PHN0cmluZyB8IFJlZ0V4cD4sIHBsYWNlaG9sZGVyQ2hhciA9IFBMQUNFSE9MREVSX0NIQVIpIHtcbiAgICByZXR1cm4gbWFzay5tYXAoKGNoYXI6IGFueSkgPT4gKChjaGFyIGluc3RhbmNlb2YgUmVnRXhwKVxuICAgICAgPyBwbGFjZWhvbGRlckNoYXIgOiBjaGFyKSkuam9pbihFTVBUWV9TVFJJTkcpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRha2VzIGFuIGluZGV4IHJlcHJlc2VudGluZyBhIGNhcmV0IGFuZCBjaGFuZ2VzIGl0IGJhc2VkIG9uIG1hc2sgbW9kaWZpY2F0aW9uc1xuICAgKiBAcGFyYW0ge29iamVjdH0gb3B0cyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY2FyZXQgcGxhY2VtZW50LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSB0aGUgaW5kZXggb2YgdGhlIHRleHQgY2FyZXQuXG4gICAqL1xuICBhZGp1c3RDYXJldFBvc2l0aW9uKG9wdHM6IGFueSkge1xuICAgIGlmIChvcHRzLmNhcmV0UG9zID09PSAwKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gY2hhciB0aGUgY2hhcmFjdGVyIHRvIGNoZWNrXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgdGhlIGNocmFjdGVyIGlzIG5vdCBhIHBsYWNlaG9sZGVyIGNoYXJhY3RlclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5vblBsYWNlaG9sZGVyRmlsdGVyKGNoYXI6IGFueSkge1xuICAgICAgcmV0dXJuIGNoYXIgIT09IG5vblBsYWNlaG9sZGVyRmlsdGVyO1xuICAgIH1cblxuICAgIC8vIFN0b3JlIGxlbmd0aHMgZm9yIGZhc3RlciBwZXJmb3JtYW5jZT9cbiAgICBjb25zdCByYXdWYWx1ZUxlbmd0aCA9IG9wdHMucmF3VmFsdWUubGVuZ3RoO1xuICAgIGNvbnN0IHByZXZpb3VzQ29uZm9ybWVkVmFsdWVMZW5ndGggPSBvcHRzLnByZXZpb3VzTWFza1Jlc3VsdC5sZW5ndGg7XG4gICAgY29uc3QgcGxhY2Vob2xkZXJMZW5ndGggPSBvcHRzLnBsYWNlaG9sZGVyID8gb3B0cy5wbGFjZWhvbGRlci5sZW5ndGggOiAwO1xuICAgIGNvbnN0IGNvbmZvcm1lZFZhbHVlTGVuZ3RoID0gb3B0cy5jb25mb3JtZWRWYWx1ZSA/IG9wdHMuY29uZm9ybWVkVmFsdWUubGVuZ3RoIDogMDtcblxuICAgIC8vIFRoaXMgdGVsbHMgdXMgaG93IGxvbmcgdGhlIGVkaXQgaXMuIElmIHVzZXIgbW9kaWZpZWQgaW5wdXQgZnJvbSBgKDJfXylgIHRvIGAoMjQzX18pYCxcbiAgICAvLyB3ZSBrbm93IHRoZSB1c2VyIGluIHRoaXMgaW5zdGFuY2UgcGFzdGVkIHR3byBjaGFyYWN0ZXJzXG4gICAgY29uc3QgZWRpdExlbmd0aCA9IHJhd1ZhbHVlTGVuZ3RoIC0gcHJldmlvdXNDb25mb3JtZWRWYWx1ZUxlbmd0aDtcblxuICAgIC8vIElmIHRoZSBlZGl0IGxlbmd0aCBpcyBwb3NpdGl2ZSwgdGhhdCBtZWFucyB0aGUgdXNlciBpcyBhZGRpbmcgY2hhcmFjdGVycywgbm90IGRlbGV0aW5nLlxuICAgIGNvbnN0IGlzQWRkaXRpb24gPSBlZGl0TGVuZ3RoID4gMDtcblxuICAgIC8vIFRoaXMgaXMgdGhlIGZpcnN0IHJhdyB2YWx1ZSB0aGUgdXNlciBlbnRlcmVkIHRoYXQgbmVlZHMgdG8gYmUgY29uZm9ybWVkIHRvIG1hc2tcbiAgICBjb25zdCBpc0ZpcnN0UmF3VmFsdWUgPSBwcmV2aW91c0NvbmZvcm1lZFZhbHVlTGVuZ3RoID09PSAwO1xuXG4gICAgLy8gQSBwYXJ0aWFsIG11bHRpLWNoYXJhY3RlciBlZGl0IGhhcHBlbnMgd2hlbiB0aGUgdXNlciBtYWtlcyBhIHBhcnRpYWwgc2VsZWN0aW9uIGluIHRoZWlyXG4gICAgLy8gaW5wdXQgYW5kIGVkaXRzIHRoYXQgc2VsZWN0aW9uLiBUaGF0IGlzIGdvaW5nIGZyb20gYCgxMjMpIDQzMi00MzQ4YCB0byBgKCkgNDMyLTQzNDhgIGJ5XG4gICAgLy8gc2VsZWN0aW5nIHRoZSBmaXJzdCAzIGRpZ2l0cyBhbmQgcHJlc3NpbmcgYmFja3NwYWNlLlxuICAgIC8vXG4gICAgLy8gU3VjaCBjYXNlcyBjYW4gYWxzbyBoYXBwZW4gd2hlbiB0aGUgdXNlciBwcmVzc2VzIHRoZSBiYWNrc3BhY2Ugd2hpbGUgaG9sZGluZyBkb3duIHRoZSBBTFRcbiAgICAvLyBrZXkuXG4gICAgY29uc3QgaXNQYXJ0aWFsTXVsdGlDaGFyRWRpdCA9IGVkaXRMZW5ndGggPiAxICYmICFpc0FkZGl0aW9uICYmICFpc0ZpcnN0UmF3VmFsdWU7XG5cbiAgICAvLyBUaGlzIGFsZ29yaXRobSBkb2Vzbid0IHN1cHBvcnQgYWxsIGNhc2VzIG9mIG11bHRpLWNoYXJhY3RlciBlZGl0cywgc28gd2UganVzdCByZXR1cm5cbiAgICAvLyB0aGUgY3VycmVudCBjYXJldCBwb3NpdGlvbi5cbiAgICAvL1xuICAgIC8vIFRoaXMgd29ya3MgZmluZSBmb3IgbW9zdCBjYXNlcy5cbiAgICBpZiAoaXNQYXJ0aWFsTXVsdGlDaGFyRWRpdCkge1xuICAgICAgcmV0dXJuIG9wdHMuY2FyZXRQb3M7XG4gICAgfVxuXG4gICAgLy8gRm9yIGEgbWFzayBsaWtlICgxMTEpLCBpZiB0aGUgYHByZXZpb3VzQ29uZm9ybWVkVmFsdWVgIGlzICgxX18pIGFuZCB1c2VyIGF0dGVtcHRzIHRvIGVudGVyXG4gICAgLy8gYGZgIHNvIHRoZSBgcmF3VmFsdWVgIGJlY29tZXMgKDFmX18pLCB0aGUgbmV3IGBjb25mb3JtZWRWYWx1ZWAgd291bGQgYmUgKDFfXyksIHdoaWNoIGlzIHRoZVxuICAgIC8vIHNhbWUgYXMgdGhlIG9yaWdpbmFsIGBwcmV2aW91c0NvbmZvcm1lZFZhbHVlYC4gV2UgaGFuZGxlIHRoaXMgY2FzZSBkaWZmZXJlbnRseSBmb3IgY2FyZXRcbiAgICAvLyBwb3NpdGlvbmluZy5cbiAgICBjb25zdCBwb3NzaWJseUhhc1JlamVjdGVkQ2hhciA9IGlzQWRkaXRpb24gJiYgKFxuICAgICAgb3B0cy5wcmV2aW91c01hc2tSZXN1bHQgPT09IG9wdHMuY29uZm9ybWVkVmFsdWVcbiAgICAgIHx8IG9wdHMuY29uZm9ybWVkVmFsdWUgPT09IG9wdHMucGxhY2Vob2xkZXJcbiAgICApO1xuXG4gICAgbGV0IHN0YXJ0aW5nU2VhcmNoSW5kZXggPSAwO1xuICAgIGxldCB0cmFja1JpZ2h0Q2hhcmFjdGVyO1xuICAgIGxldCB0YXJnZXRDaGFyOiBhbnk7XG5cbiAgICBpZiAocG9zc2libHlIYXNSZWplY3RlZENoYXIpIHtcbiAgICAgIHN0YXJ0aW5nU2VhcmNoSW5kZXggPSBvcHRzLmNhcmV0UG9zIC0gZWRpdExlbmd0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQXQgdGhpcyBwb2ludCBpbiB0aGUgYWxnb3JpdGhtLCB3ZSB3YW50IHRvIGtub3cgd2hlcmUgdGhlIGNhcmV0IGlzIHJpZ2h0XG4gICAgICAvLyBiZWZvcmUgdGhlIHJhdyBpbnB1dCBoYXMgYmVlbiBjb25mb3JtZWQsIGFuZCB0aGVuIHNlZSBpZiB3ZSBjYW4gZmluZCB0aGF0XG4gICAgICAvLyBzYW1lIHNwb3QgaW4gdGhlIGNvbmZvcm1lZCBpbnB1dC5cbiAgICAgIC8vXG4gICAgICAvLyBXZSBkbyB0aGF0IGJ5IHNlZWluZyB3aGF0IGNoYXJhY3RlciBsaWVzIGltbWVkaWF0ZWx5IGJlZm9yZSB0aGUgY2FyZXQsXG4gICAgICAvLyBhbmQgdGhlbiBsb29rIGZvciB0aGF0IHNhbWUgY2hhcmFjdGVyIGluIHRoZSBjb25mb3JtZWQgaW5wdXQgYW5kIHBsYWNlXG4gICAgICAvLyB0aGUgY2FyZXQgdGhlcmUuXG4gICAgICAvL1xuICAgICAgLy8gRmlyc3QsIHdlIG5lZWQgdG8gbm9ybWFsaXplIHRoZSBpbnB1dHMgc28gdGhhdCBsZXR0ZXIgY2FwaXRhbGl6YXRpb24gYmV0d2VlbiByYXcgaW5wdXQgYW5kXG4gICAgICAvLyBjb25mb3JtZWQgaW5wdXQgd291bGRuJ3QgbWF0dGVyLlxuICAgICAgY29uc3Qgbm9ybWFsaXplZENvbmZvcm1lZFZhbHVlID0gb3B0cy5jb25mb3JtZWRWYWx1ZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgY29uc3Qgbm9ybWFsaXplZFJhd1ZhbHVlID0gb3B0cy5yYXdWYWx1ZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAvLyBUaGVuIHdlIHRha2UgYWxsIGNoYXJhY3RlcnMgdGhhdCBjb21lIGJlZm9yZSB3aGVyZSB0aGUgY2FyZXQgY3VycmVudGx5IGlzLlxuICAgICAgY29uc3QgbGVmdEhhbGZDaGFycyA9IG5vcm1hbGl6ZWRSYXdWYWx1ZS5zdWJzdHIoMCwgb3B0cy5jYXJldFBvcykuc3BsaXQoRU1QVFlfU1RSSU5HKTtcblxuICAgICAgLy8gTm93IHdlIGZpbmQgYWxsIHRoZSBjaGFyYWN0ZXJzIGluIHRoZSBsZWZ0IGhhbGYgdGhhdCBleGlzdCBpbiB0aGUgY29uZm9ybWVkXG4gICAgICAvLyBpbnB1dC4gVGhpcyBzdGVwIGVuc3VyZXMgdGhhdCB3ZSBkb24ndCBsb29rIGZvciBhIGNoYXJhY3RlciB0aGF0IHdhcyBmaWx0ZXJlZFxuICAgICAgLy8gb3V0IG9yIHJlamVjdGVkIGJ5IGBjb25mb3JtVG9NYXNrYC5cbiAgICAgIGNvbnN0IGludGVyc2VjdGlvbiA9IGxlZnRIYWxmQ2hhcnMuZmlsdGVyKChjaGFyOiBhbnkpID0+IG5vcm1hbGl6ZWRDb25mb3JtZWRWYWx1ZS5pbmRleE9mKGNoYXIpICE9PSAtMSk7IC8vZXNsaW50LWRpc2FibGUtbGluZVxuXG4gICAgICAvLyBUaGUgbGFzdCBjaGFyYWN0ZXIgaW4gdGhlIGludGVyc2VjdGlvbiBpcyB0aGUgY2hhcmFjdGVyIHdlIHdhbnQgdG9cbiAgICAgIC8vIGxvb2sgZm9yIGluIHRoZSBjb25mb3JtZWQgdmFsdWUgYW5kIHRoZSBvbmUgd2Ugd2FudCB0byBhZGp1c3QgdGhlIGNhcmV0IGNsb3NlIHRvXG4gICAgICB0YXJnZXRDaGFyID0gaW50ZXJzZWN0aW9uW2ludGVyc2VjdGlvbi5sZW5ndGggLSAxXTtcblxuICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBudW1iZXIgb2YgbWFzayBjaGFyYWN0ZXJzIGluIHRoZSBwcmV2aW91cyBwbGFjZWhvbGRlclxuICAgICAgLy8gZnJvbSB0aGUgc3RhcnQgb2YgdGhlIHN0cmluZyB1cCB0byB0aGUgcGxhY2Ugd2hlcmUgdGhlIGNhcmV0IGlzXG4gICAgICBjb25zdCBwcmV2aW91c0xlZnRNYXNrQ2hhcnMgPSBvcHRzLnByZXZpb3VzUGxhY2Vob2xkZXJcbiAgICAgICAgLnN1YnN0cigwLCBpbnRlcnNlY3Rpb24ubGVuZ3RoKVxuICAgICAgICAuc3BsaXQoRU1QVFlfU1RSSU5HKVxuICAgICAgICAuZmlsdGVyKG5vblBsYWNlaG9sZGVyRmlsdGVyKVxuICAgICAgICAubGVuZ3RoO1xuXG4gICAgICAvLyBDYWxjdWxhdGUgdGhlIG51bWJlciBvZiBtYXNrIGNoYXJhY3RlcnMgaW4gdGhlIGN1cnJlbnQgcGxhY2Vob2xkZXJcbiAgICAgIC8vIGZyb20gdGhlIHN0YXJ0IG9mIHRoZSBzdHJpbmcgdXAgdG8gdGhlIHBsYWNlIHdoZXJlIHRoZSBjYXJldCBpc1xuICAgICAgY29uc3QgbGVmdE1hc2tDaGFycyA9IG9wdHMucGxhY2Vob2xkZXJcbiAgICAgICAgLnN1YnN0cigwLCBpbnRlcnNlY3Rpb24ubGVuZ3RoKVxuICAgICAgICAuc3BsaXQoRU1QVFlfU1RSSU5HKVxuICAgICAgICAuZmlsdGVyKG5vblBsYWNlaG9sZGVyRmlsdGVyKVxuICAgICAgICAubGVuZ3RoO1xuXG4gICAgICAvLyBIYXMgdGhlIG51bWJlciBvZiBtYXNrIGNoYXJhY3RlcnMgdXAgdG8gdGhlIGNhcmV0IGNoYW5nZWQ/XG4gICAgICBjb25zdCBtYXNrbGVuZ3RoQ2hhbmdlZCA9IGxlZnRNYXNrQ2hhcnMgIT09IHByZXZpb3VzTGVmdE1hc2tDaGFycztcblxuICAgICAgLy8gRGV0ZWN0IGlmIGB0YXJnZXRDaGFyYCBpcyBhIG1hc2sgY2hhcmFjdGVyIGFuZCBoYXMgbW92ZWQgdG8gdGhlIGxlZnRcbiAgICAgIGNvbnN0IHRhcmdldElzTWFza01vdmluZ0xlZnQgPSAoXG4gICAgICAgIG9wdHMucHJldmlvdXNQbGFjZWhvbGRlcltpbnRlcnNlY3Rpb24ubGVuZ3RoIC0gMV0gIT09IHVuZGVmaW5lZFxuICAgICAgICAmJiBvcHRzLnBsYWNlaG9sZGVyW2ludGVyc2VjdGlvbi5sZW5ndGggLSAyXSAhPT0gdW5kZWZpbmVkXG4gICAgICAgICYmIG9wdHMucHJldmlvdXNQbGFjZWhvbGRlcltpbnRlcnNlY3Rpb24ubGVuZ3RoIC0gMV0gIT09IG9wdHMucGxhY2Vob2xkZXJDaGFyXG4gICAgICAgICYmIG9wdHMucHJldmlvdXNQbGFjZWhvbGRlcltpbnRlcnNlY3Rpb24ubGVuZ3RoIC0gMV0gIT09IG9wdHMucGxhY2Vob2xkZXJbaW50ZXJzZWN0aW9uLmxlbmd0aCAtIDFdIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgICAgJiYgb3B0cy5wcmV2aW91c1BsYWNlaG9sZGVyW2ludGVyc2VjdGlvbi5sZW5ndGggLSAxXSA9PT0gb3B0cy5wbGFjZWhvbGRlcltpbnRlcnNlY3Rpb24ubGVuZ3RoIC0gMl0gLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgKTtcblxuICAgICAgLy8gSWYgZGVsZXRpbmcgYW5kIHRoZSBgdGFyZ2V0Q2hhcmAgYGlzIGEgbWFzayBjaGFyYWN0ZXIgYW5kIGBtYXNrbGVuZ3RoQ2hhbmdlZGAgaXMgdHJ1ZVxuICAgICAgLy8gb3IgdGhlIG1hc2sgaXMgbW92aW5nIHRvIHRoZSBsZWZ0LCB3ZSBjYW4ndCB1c2UgdGhlIHNlbGVjdGVkIGB0YXJnZXRDaGFyYCBhbnkgbG9uZ2VyXG4gICAgICAvLyBpZiB3ZSBhcmUgbm90IGF0IHRoZSBlbmQgb2YgdGhlIHN0cmluZy5cbiAgICAgIC8vIEluIHRoaXMgY2FzZSwgY2hhbmdlIHRyYWNraW5nIHN0cmF0ZWd5IGFuZCB0cmFjayB0aGUgY2hhcmFjdGVyIHRvIHRoZSByaWdodCBvZiB0aGUgY2FyZXQuXG4gICAgICBpZiAoXG4gICAgICAgICFpc0FkZGl0aW9uXG4gICAgICAgICYmIChtYXNrbGVuZ3RoQ2hhbmdlZCB8fCB0YXJnZXRJc01hc2tNb3ZpbmdMZWZ0KVxuICAgICAgICAmJiBwcmV2aW91c0xlZnRNYXNrQ2hhcnMgPiAwXG4gICAgICAgICYmIG9wdHMucGxhY2Vob2xkZXIuaW5kZXhPZih0YXJnZXRDaGFyKSA+IC0xXG4gICAgICAgICYmIG9wdHMucmF3VmFsdWVbb3B0cy5jYXJldFBvc10gIT09IHVuZGVmaW5lZFxuICAgICAgKSB7XG4gICAgICAgIHRyYWNrUmlnaHRDaGFyYWN0ZXIgPSB0cnVlO1xuICAgICAgICB0YXJnZXRDaGFyID0gb3B0cy5yYXdWYWx1ZVtvcHRzLmNhcmV0UG9zXTtcbiAgICAgIH1cblxuICAgICAgLy8gSXQgaXMgcG9zc2libGUgdGhhdCBgdGFyZ2V0Q2hhcmAgd2lsbCBhcHBlYXIgbXVsdGlwbGUgdGltZXMgaW4gdGhlIGNvbmZvcm1lZCB2YWx1ZS5cbiAgICAgIC8vIFdlIG5lZWQgdG8ga25vdyBub3QgdG8gc2VsZWN0IGEgY2hhcmFjdGVyIHRoYXQgbG9va3MgbGlrZSBvdXIgdGFyZ2V0IGNoYXJhY3RlclxuICAgICAgLy8gZnJvbSB0aGUgcGxhY2Vob2xkZXIgb3IgdGhlIHBpcGVkIGNoYXJhY3RlcnMsIHNvIHdlIGluc3BlY3QgdGhlIHBpcGVkIGNoYXJhY3RlcnNcbiAgICAgIC8vIGFuZCB0aGUgcGxhY2Vob2xkZXIgdG8gc2VlIGlmIHRoZXkgY29udGFpbiBjaGFyYWN0ZXJzIHRoYXQgbWF0Y2ggb3VyIHRhcmdldCBjaGFyYWN0ZXIuXG5cbiAgICAgIC8vIElmIHRoZSBgY29uZm9ybWVkVmFsdWVgIGdvdCBwaXBlZCwgd2UgbmVlZCB0byBrbm93IHdoaWNoIGNoYXJhY3RlcnMgd2VyZSBwaXBlZCBpbiBzb1xuICAgICAgLy8gdGhhdCB3aGVuIHdlIGxvb2sgZm9yIG91ciBgdGFyZ2V0Q2hhcmAsIHdlIGRvbid0IHNlbGVjdCBhIHBpcGVkIGNoYXIgYnkgbWlzdGFrZS5cbiAgICAgIGxldCBwaXBlZENoYXJzID0gW107XG4gICAgICBpZiAob3B0cy5pbmRleGVzT2ZQaXBlZENoYXJzKSB7XG4gICAgICAgIHBpcGVkQ2hhcnMgPSBvcHRzLmluZGV4ZXNPZlBpcGVkQ2hhcnMubWFwKChpbmRleDogYW55KSA9PiBub3JtYWxpemVkQ29uZm9ybWVkVmFsdWVbaW5kZXhdKTtcbiAgICAgIH1cblxuICAgICAgLy8gV2UgbmVlZCB0byBrbm93IGhvdyBtYW55IHRpbWVzIHRoZSBgdGFyZ2V0Q2hhcmAgb2NjdXJzIGluIHRoZSBwaXBlZCBjaGFyYWN0ZXJzLlxuICAgICAgY29uc3QgY291bnRUYXJnZXRDaGFySW5QaXBlZENoYXJzID0gcGlwZWRDaGFycy5maWx0ZXIoKGNoYXI6IGFueSkgPT4gY2hhciA9PT0gdGFyZ2V0Q2hhcikubGVuZ3RoO1xuXG4gICAgICAvLyBXZSBuZWVkIHRvIGtub3cgaG93IG1hbnkgdGltZXMgaXQgb2NjdXJzIGluIHRoZSBpbnRlcnNlY3Rpb25cbiAgICAgIGNvbnN0IGNvdW50VGFyZ2V0Q2hhckluSW50ZXJzZWN0aW9uID0gaW50ZXJzZWN0aW9uLmZpbHRlcigoY2hhcjogYW55KSA9PiBjaGFyID09PSB0YXJnZXRDaGFyKS5sZW5ndGg7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICAgICAgLy8gV2UgbmVlZCB0byBrbm93IGlmIHRoZSBwbGFjZWhvbGRlciBjb250YWlucyBjaGFyYWN0ZXJzIHRoYXQgbG9vayBsaWtlXG4gICAgICAvLyBvdXIgYHRhcmdldENoYXJgLCBzbyB3ZSBkb24ndCBzZWxlY3Qgb25lIG9mIHRob3NlIGJ5IG1pc3Rha2UuXG4gICAgICBjb25zdCBjb3VudFRhcmdldENoYXJJblBsYWNlaG9sZGVyID0gb3B0cy5wbGFjZWhvbGRlclxuICAgICAgICAuc3Vic3RyKDAsIG9wdHMucGxhY2Vob2xkZXIuaW5kZXhPZihvcHRzLnBsYWNlaG9sZGVyQ2hhcikpXG4gICAgICAgIC5zcGxpdChFTVBUWV9TVFJJTkcpXG4gICAgICAgIC8vIENoZWNrIGlmIGBjaGFyYCBpcyB0aGUgc2FtZSBhcyBvdXIgYHRhcmdldENoYXJgLCBzbyB3ZSBhY2NvdW50IGZvciBpdFxuICAgICAgICAvLyBidXQgYWxzbyBtYWtlIHN1cmUgdGhhdCBib3RoIHRoZSBgcmF3VmFsdWVgIGFuZCBwbGFjZWhvbGRlciBkb24ndCBoYXZlIHRoZSBzYW1lXG4gICAgICAgIC8vIGNoYXJhY3RlciBhdCB0aGUgc2FtZSBpbmRleCBiZWNhdXNlIGlmIHRoZXkgYXJlIGVxdWFsLCB0aGF0IG1lYW5zIHdlIGFyZSBhbHJlYWR5XG4gICAgICAgIC8vIGNvdW50aW5nIHRob3NlIGNoYXJhY3RlcnMgaW4gYGNvdW50VGFyZ2V0Q2hhckluSW50ZXJzZWN0aW9uYFxuICAgICAgICAuZmlsdGVyKChjaGFyOiBhbnksIGluZGV4OiBhbnkpID0+IGNoYXIgPT09IHRhcmdldENoYXIgJiYgb3B0cy5yYXdWYWx1ZVtpbmRleF0gIT09IGNoYXIpLmxlbmd0aDtcblxuICAgICAgLy8gVGhlIG51bWJlciBvZiB0aW1lcyB3ZSBuZWVkIHRvIHNlZSBvY2N1cnJlbmNlcyBvZiB0aGUgYHRhcmdldENoYXJgIGJlZm9yZSB3ZVxuICAgICAgLy8ga25vdyBpdCBpcyB0aGUgb25lIHdlJ3JlIGxvb2tpbmcgZm9yIGlzOlxuICAgICAgY29uc3QgcmVxdWlyZWROdW1iZXJPZk1hdGNoZXMgPSAoXG4gICAgICAgIGNvdW50VGFyZ2V0Q2hhckluUGxhY2Vob2xkZXJcbiAgICAgICAgKyBjb3VudFRhcmdldENoYXJJbkludGVyc2VjdGlvblxuICAgICAgICArIGNvdW50VGFyZ2V0Q2hhckluUGlwZWRDaGFyc1xuICAgICAgICAvLyBUaGUgY2hhcmFjdGVyIHRvIHRoZSByaWdodCBvZiB0aGUgY2FyZXQgaXNuJ3QgaW5jbHVkZWQgaW4gYGludGVyc2VjdGlvbmBcbiAgICAgICAgLy8gc28gYWRkIG9uZSBpZiB3ZSBhcmUgdHJhY2tpbmcgdGhlIGNoYXJhY3RlciB0byB0aGUgcmlnaHRcbiAgICAgICAgKyAodHJhY2tSaWdodENoYXJhY3RlciA/IDEgOiAwKVxuICAgICAgKTtcblxuICAgICAgLy8gTm93IHdlIHN0YXJ0IGxvb2tpbmcgZm9yIHRoZSBsb2NhdGlvbiBvZiB0aGUgYHRhcmdldENoYXJgLlxuICAgICAgLy8gV2Uga2VlcCBsb29waW5nIGZvcndhcmQgYW5kIHN0b3JlIHRoZSBpbmRleCBpbiBldmVyeSBpdGVyYXRpb24uIE9uY2Ugd2UgaGF2ZSBlbmNvdW50ZXJlZFxuICAgICAgLy8gZW5vdWdoIG9jY3VycmVuY2VzIG9mIHRoZSB0YXJnZXQgY2hhcmFjdGVyLCB3ZSBicmVhayBvdXQgb2YgdGhlIGxvb3BcbiAgICAgIC8vIElmIGFyZSBzZWFyY2hpbmcgZm9yIHRoZSBzZWNvbmQgYDFgIGluIGAxMjE0YCwgYHN0YXJ0aW5nU2VhcmNoSW5kZXhgIHdpbGwgcG9pbnQgYXQgYDRgLlxuICAgICAgbGV0IG51bWJlck9mRW5jb3VudGVyZWRNYXRjaGVzID0gMDtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29uZm9ybWVkVmFsdWVMZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBjb25mb3JtZWRWYWx1ZUNoYXIgPSBub3JtYWxpemVkQ29uZm9ybWVkVmFsdWVbaV07XG5cbiAgICAgICAgc3RhcnRpbmdTZWFyY2hJbmRleCA9IGkgKyAxO1xuXG4gICAgICAgIGlmIChjb25mb3JtZWRWYWx1ZUNoYXIgPT09IHRhcmdldENoYXIpIHtcbiAgICAgICAgICBudW1iZXJPZkVuY291bnRlcmVkTWF0Y2hlcysrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG51bWJlck9mRW5jb3VudGVyZWRNYXRjaGVzID49IHJlcXVpcmVkTnVtYmVyT2ZNYXRjaGVzKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBdCB0aGlzIHBvaW50LCBpZiB3ZSBzaW1wbHkgcmV0dXJuIGBzdGFydGluZ1NlYXJjaEluZGV4YCBhcyB0aGUgYWRqdXN0ZWQgY2FyZXQgcG9zaXRpb24sXG4gICAgLy8gbW9zdCBjYXNlcyB3b3VsZCBiZSBoYW5kbGVkLiBIb3dldmVyLCB3ZSB3YW50IHRvIGZhc3QgZm9yd2FyZCBvciByZXdpbmQgdGhlIGNhcmV0IHRvIHRoZVxuICAgIC8vIGNsb3Nlc3QgcGxhY2Vob2xkZXIgY2hhcmFjdGVyIGlmIGl0IGhhcHBlbnMgdG8gYmUgaW4gYSBub24tZWRpdGFibGUgc3BvdC5cbiAgICAvLyBUaGF0J3Mgd2hhdCB0aGUgbmV4dCBsb2dpYyBpcyBmb3IuXG4gICAgLy9cbiAgICAvLyBJbiBjYXNlIG9mIGFkZGl0aW9uLCB3ZSBmYXN0IGZvcndhcmQuXG4gICAgaWYgKGlzQWRkaXRpb24pIHtcbiAgICAgIC8vIFdlIHdhbnQgdG8gcmVtZW1iZXIgdGhlIGxhc3QgcGxhY2Vob2xkZXIgY2hhcmFjdGVyIGVuY291bnRlcmVkIHNvIHRoYXQgaWYgdGhlIG1hc2tcbiAgICAgIC8vIGNvbnRhaW5zIG1vcmUgY2hhcmFjdGVycyBhZnRlciB0aGUgbGFzdCBwbGFjZWhvbGRlciBjaGFyYWN0ZXIsIHdlIGRvbid0IGZvcndhcmQgdGhlIGNhcmV0XG4gICAgICAvLyB0aGF0IGZhciB0byB0aGUgcmlnaHQuIEluc3RlYWQsIHdlIHN0b3AgaXQgYXQgdGhlIGxhc3QgZW5jb3VudGVyZWQgcGxhY2Vob2xkZXIgY2hhcmFjdGVyLlxuICAgICAgbGV0IGxhc3RQbGFjZWhvbGRlckNoYXIgPSBzdGFydGluZ1NlYXJjaEluZGV4O1xuXG4gICAgICBmb3IgKGxldCBqID0gc3RhcnRpbmdTZWFyY2hJbmRleDsgaiA8PSBwbGFjZWhvbGRlckxlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmICghb3B0cy5wbGFjZWhvbGRlcikge1xuICAgICAgICAgIHJldHVybiBsYXN0UGxhY2Vob2xkZXJDaGFyO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdHMucGxhY2Vob2xkZXJbal0gPT09IG9wdHMucGxhY2Vob2xkZXJDaGFyKSB7XG4gICAgICAgICAgbGFzdFBsYWNlaG9sZGVyQ2hhciA9IGo7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgLy8gSWYgd2UncmUgYWRkaW5nLCB3ZSBjYW4gcG9zaXRpb24gdGhlIGNhcmV0IGF0IHRoZSBuZXh0IHBsYWNlaG9sZGVyIGNoYXJhY3Rlci5cbiAgICAgICAgICBvcHRzLnBsYWNlaG9sZGVyW2pdID09PSBvcHRzLnBsYWNlaG9sZGVyQ2hhclxuXG4gICAgICAgICAgLy8gSWYgYSBjYXJldCB0cmFwIHdhcyBzZXQgYnkgYSBtYXNrIGZ1bmN0aW9uLCB3ZSBuZWVkIHRvIHN0b3AgYXQgdGhlIHRyYXAuXG4gICAgICAgICAgfHwgb3B0cy5jYXJldFRyYXBJbmRleGVzLmluZGV4T2YoaikgIT09IC0xXG5cbiAgICAgICAgICAvLyBUaGlzIGlzIHRoZSBlbmQgb2YgdGhlIHBsYWNlaG9sZGVyLiBXZSBjYW5ub3QgbW92ZSBhbnkgZnVydGhlci5cbiAgICAgICAgICAvLyBMZXQncyBwdXQgdGhlIGNhcmV0IHRoZXJlLlxuICAgICAgICAgIHx8IGogPT09IHBsYWNlaG9sZGVyTGVuZ3RoXG4gICAgICAgICkge1xuICAgICAgICAgIHJldHVybiBsYXN0UGxhY2Vob2xkZXJDaGFyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEluIGNhc2Ugb2YgZGVsZXRpb24sIHdlIHJld2luZC5cbiAgICAgIGlmICh0cmFja1JpZ2h0Q2hhcmFjdGVyKSB7IC8vZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgICAvLyBTZWFyY2hpbmcgZm9yIHRoZSBjaGFyYWN0ZXIgdGhhdCB3YXMgdG8gdGhlIHJpZ2h0IG9mIHRoZSBjYXJldFxuICAgICAgICAvLyBXZSBzdGFydCBhdCBgc3RhcnRpbmdTZWFyY2hJbmRleGAgLSAxIGJlY2F1c2UgaXQgaW5jbHVkZXMgb25lIGNoYXJhY3RlclxuICAgICAgICAvLyBleHRyYSB0byB0aGUgcmlnaHRcbiAgICAgICAgZm9yIChsZXQgayA9IHN0YXJ0aW5nU2VhcmNoSW5kZXggLSAxOyBrID49IDA7IGstLSkge1xuICAgICAgICAgIC8vIElmIHRyYWNraW5nIHRoZSBjaGFyYWN0ZXIgdG8gdGhlIHJpZ2h0IG9mIHRoZSBjdXJzb3IsIHdlIG1vdmUgdG8gdGhlIGxlZnQgdW50aWxcbiAgICAgICAgICAvLyB3ZSBmb3VuZCB0aGUgY2hhcmFjdGVyIGFuZCB0aGVuIHBsYWNlIHRoZSBjYXJldCByaWdodCBiZWZvcmUgaXRcblxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIC8vIGB0YXJnZXRDaGFyYCBzaG91bGQgYmUgaW4gYGNvbmZvcm1lZFZhbHVlYCwgc2luY2UgaXQgd2FzIGluIGByYXdWYWx1ZWAsIGp1c3RcbiAgICAgICAgICAgIC8vIHRvIHRoZSByaWdodCBvZiB0aGUgY2FyZXRcbiAgICAgICAgICAgIG9wdHMuY29uZm9ybWVkVmFsdWVba10gPT09IHRhcmdldENoYXJcblxuICAgICAgICAgICAgLy8gSWYgYSBjYXJldCB0cmFwIHdhcyBzZXQgYnkgYSBtYXNrIGZ1bmN0aW9uLCB3ZSBuZWVkIHRvIHN0b3AgYXQgdGhlIHRyYXAuXG4gICAgICAgICAgICB8fCBvcHRzLmNhcmV0VHJhcEluZGV4ZXMuaW5kZXhPZihrKSAhPT0gLTFcblxuICAgICAgICAgICAgLy8gVGhpcyBpcyB0aGUgYmVnaW5uaW5nIG9mIHRoZSBwbGFjZWhvbGRlci4gV2UgY2Fubm90IG1vdmUgYW55IGZ1cnRoZXIuXG4gICAgICAgICAgICAvLyBMZXQncyBwdXQgdGhlIGNhcmV0IHRoZXJlLlxuICAgICAgICAgICAgfHwgayA9PT0gMFxuICAgICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIGs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBTZWFyY2hpbmcgZm9yIHRoZSBmaXJzdCBwbGFjZWhvbGRlciBvciBjYXJldCB0cmFwIHRvIHRoZSBsZWZ0XG5cbiAgICAgICAgZm9yIChsZXQgbCA9IHN0YXJ0aW5nU2VhcmNoSW5kZXg7IGwgPj0gMDsgbC0tKSB7XG4gICAgICAgICAgLy8gSWYgd2UncmUgZGVsZXRpbmcsIHdlIHN0b3AgdGhlIGNhcmV0IHJpZ2h0IGJlZm9yZSB0aGUgcGxhY2Vob2xkZXIgY2hhcmFjdGVyLlxuICAgICAgICAgIC8vIEZvciBleGFtcGxlLCBmb3IgbWFzayBgKDExMSkgMTFgLCBjdXJyZW50IGNvbmZvcm1lZCBpbnB1dCBgKDQ1NikgODZgLiBJZiB1c2VyXG4gICAgICAgICAgLy8gbW9kaWZpZXMgaW5wdXQgdG8gYCg0NTYgODZgLiBUaGF0IGlzLCB0aGV5IGRlbGV0ZWQgdGhlIGApYCwgd2UgcGxhY2UgdGhlIGNhcmV0XG4gICAgICAgICAgLy8gcmlnaHQgYWZ0ZXIgdGhlIGZpcnN0IGA2YFxuXG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgLy8gSWYgd2UncmUgZGVsZXRpbmcsIHdlIGNhbiBwb3NpdGlvbiB0aGUgY2FyZXQgcmlnaHQgYmVmb3JlIHRoZSBwbGFjZWhvbGRlciBjaGFyYWN0ZXJcbiAgICAgICAgICAgIG9wdHMucGxhY2Vob2xkZXJbbCAtIDFdID09PSBvcHRzLnBsYWNlaG9sZGVyQ2hhclxuXG4gICAgICAgICAgICAvLyBJZiBhIGNhcmV0IHRyYXAgd2FzIHNldCBieSBhIG1hc2sgZnVuY3Rpb24sIHdlIG5lZWQgdG8gc3RvcCBhdCB0aGUgdHJhcC5cbiAgICAgICAgICAgIHx8IG9wdHMuY2FyZXRUcmFwSW5kZXhlcy5pbmRleE9mKGwpICE9PSAtMVxuXG4gICAgICAgICAgICAvLyBUaGlzIGlzIHRoZSBiZWdpbm5pbmcgb2YgdGhlIHBsYWNlaG9sZGVyLiBXZSBjYW5ub3QgbW92ZSBhbnkgZnVydGhlci5cbiAgICAgICAgICAgIC8vIExldCdzIHB1dCB0aGUgY2FyZXQgdGhlcmUuXG4gICAgICAgICAgICB8fCBsID09PSAwXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBzYWZlIHJhdyB2YWx1ZSBvZiBhbiBpbnB1dCBmaWVsZFxuICAgKiBAcGFyYW0ge2FueX0gaW5wdXRWYWx1ZSB0aGUgb3JpZ2luYWwgdmFsdWUgdGhhdCBjYW1lIGZyb20gYW4gaW5wdXQgZmllbGQgb3Igb3RoZXIgc291cmNlXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IHRoZSBzdHJpbmctaWZpZWQgdmVyc2lvbiBvZiB0aGUgb3JpZ2luYWwgdmFsdWVcbiAgICovXG4gIGdldFNhZmVSYXdWYWx1ZShpbnB1dFZhbHVlOiBhbnkpIHtcbiAgICBpZiAodHlwZW9mIGlucHV0VmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gaW5wdXRWYWx1ZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBpbnB1dFZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuIFN0cmluZyhpbnB1dFZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuICcnO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE1hc2tBUEk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/components/ids-mask/ids-mask-api.ts\n");

/***/ }),

/***/ "./src/components/ids-mask/ids-mask-common.ts":
/*!****************************************************!*\
  !*** ./src/components/ids-mask/ids-mask-common.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ALPHAS_REGEX\": () => (/* binding */ ALPHAS_REGEX),\n/* harmony export */   \"ANY_REGEX\": () => (/* binding */ ANY_REGEX),\n/* harmony export */   \"CARET_TRAP\": () => (/* binding */ CARET_TRAP),\n/* harmony export */   \"DEFAULT_CONFORM_OPTIONS\": () => (/* binding */ DEFAULT_CONFORM_OPTIONS),\n/* harmony export */   \"DIGITS_REGEX\": () => (/* binding */ DIGITS_REGEX),\n/* harmony export */   \"EMPTY_STRING\": () => (/* binding */ EMPTY_STRING),\n/* harmony export */   \"NON_DIGITS_REGEX\": () => (/* binding */ NON_DIGITS_REGEX),\n/* harmony export */   \"PLACEHOLDER_CHAR\": () => (/* binding */ PLACEHOLDER_CHAR),\n/* harmony export */   \"convertPatternFromString\": () => (/* binding */ convertPatternFromString)\n/* harmony export */ });\nconst EMPTY_STRING = \"\";\nconst PLACEHOLDER_CHAR = \"_\";\nconst CARET_TRAP = \"[]\";\nconst NON_DIGITS_REGEX = /[^\\u0660-\\u06690-9\\u0966-\\u096F\\u2E80-\\u2FD5\\u3190-\\u319f\\u3400-\\u4DBF\\u4E00-\\u9FCC\\uF900-\\uFAAD]/g;\nconst DIGITS_REGEX = /[\\u0660-\\u06690-9\\u0966-\\u096F\\u2E80-\\u2FD5\\u3190-\\u319f\\u3400-\\u4DBF\\u4E00-\\u9FCC\\uF900-\\uFAAD]/;\nconst ALPHAS_REGEX = /[\\u00C0-\\u017Fa-zA-Z]/;\nconst ANY_REGEX = /[\\u00C0-\\u017Fa-zA-Z0-9]/;\nconst DEFAULT_CONFORM_OPTIONS = {\n  caretTrapIndexes: [],\n  guide: false,\n  previousMaskResult: EMPTY_STRING,\n  placeholderChar: PLACEHOLDER_CHAR,\n  placeholder: EMPTY_STRING,\n  selection: {\n    start: 0\n  },\n  keepCharacterPositions: false\n};\nfunction convertPatternFromString(pattern) {\n  if (typeof pattern !== \"string\" || !pattern.length) {\n    return void 0;\n  }\n  const firstChar = pattern.charAt(0);\n  const lastChar = pattern.charAt(pattern.length - 1);\n  if (firstChar === \"[\" && lastChar === \"]\") {\n    const patternArray = pattern.substring(1, pattern.length - 1).split(/, ?/g);\n    return patternArray.map((item) => {\n      if ([\"'\", '\"'].includes(item.charAt(0))) {\n        return item.substring(1, item.length - 1);\n      }\n      return new RegExp(item.substring(1, item.length - 1));\n    });\n  }\n  return void 0;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9pZHMtbWFzay9pZHMtbWFzay1jb21tb24udHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBMkJPLE1BQU0sZUFBZTtBQUtyQixNQUFNLG1CQUFtQjtBQUt6QixNQUFNLGFBQWE7QUFLbkIsTUFBTSxtQkFBbUI7QUFLekIsTUFBTSxlQUFlO0FBS3JCLE1BQU0sZUFBZTtBQUtyQixNQUFNLFlBQVk7QUFNbEIsTUFBTSwwQkFBMEI7QUFBQSxFQUNyQyxrQkFBa0IsQ0FBQztBQUFBLEVBQ25CLE9BQU87QUFBQSxFQUNQLG9CQUFvQjtBQUFBLEVBQ3BCLGlCQUFpQjtBQUFBLEVBQ2pCLGFBQWE7QUFBQSxFQUNiLFdBQVc7QUFBQSxJQUNULE9BQU87QUFBQSxFQUNUO0FBQUEsRUFDQSx3QkFBd0I7QUFDMUI7QUFNTyxTQUFTLHlCQUF5QixTQUFpQjtBQUN4RCxNQUFJLE9BQU8sWUFBWSxZQUFZLENBQUMsUUFBUSxRQUFRO0FBQ2xELFdBQU87QUFBQSxFQUNUO0FBRUEsUUFBTSxZQUFZLFFBQVEsT0FBTyxDQUFDO0FBQ2xDLFFBQU0sV0FBVyxRQUFRLE9BQU8sUUFBUSxTQUFTLENBQUM7QUFHbEQsTUFBSSxjQUFjLE9BQU8sYUFBYSxLQUFLO0FBQ3pDLFVBQU0sZUFBZSxRQUFRLFVBQVUsR0FBRyxRQUFRLFNBQVMsQ0FBQyxFQUFFLE1BQU0sTUFBTTtBQUMxRSxXQUFPLGFBQWEsSUFBSSxDQUFDLFNBQVM7QUFJaEMsVUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLFNBQVMsS0FBSyxPQUFPLENBQUMsQ0FBQyxHQUFHO0FBQ3ZDLGVBQU8sS0FBSyxVQUFVLEdBQUcsS0FBSyxTQUFTLENBQUM7QUFBQSxNQUMxQztBQUVBLGFBQU8sSUFBSSxPQUFPLEtBQUssVUFBVSxHQUFHLEtBQUssU0FBUyxDQUFDLENBQUM7QUFBQSxJQUN0RCxDQUFDO0FBQUEsRUFDSDtBQUlBLFNBQU87QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL2lkcy1lbnRlcnByaXNlLXdjLy4vc3JjL2NvbXBvbmVudHMvaWRzLW1hc2svaWRzLW1hc2stY29tbW9uLnRzPzcyNGYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb250YWlucyB2YXJpb3VzIE1hc2stcmVsYXRlZCB1dGlsaXRpZXMsIHNldHRpbmdzLCBtYXNraW5nIGZ1bmN0aW9ucywgZXRjLlxuICovXG5cbi8qKlxuICogSWRzTWFza09wdGlvbnMgYXJlIFBPSk9zIHRoYXQgY29udGFpbiBkaWZmZXJlbnQgcHJvcGVydGllcyBiYXNlZCBvbiB0aGUgbWFzayB0eXBlLlxuICogTWFzayBmdW5jdGlvbnMgY2FuIGJlIGNvbXBsZXRlbHkgdXNlci1kZWZpbmVkLCBzbyB0aGUgb3B0aW9ucyBuZWVkIHRvIGJlIGZsZXhpYmxlLlxuICovXG5leHBvcnQgdHlwZSBJZHNNYXNrT3B0aW9ucyA9IFJlY29yZDxzdHJpbmcsIGFueT47XG5cbmV4cG9ydCB0eXBlIElkc01hc2tUeXBlcyA9IHtcbiAgLyoqIEFkZHMgYSBtYXNrIHRvIHRoZSBpbnB1dCAqL1xuICBtYXNrOiBBcnJheTxSZWdFeHAgfCBzdHJpbmc+IHwgQ2FsbGFibGVGdW5jdGlvbiB8IHN0cmluZ1xuXG4gIC8qKiBBZGRzIG9wdGlvbnMgdGhhdCBhcmUgY29uc2lkZXJlZCBieSBhIG1hc2sgZnVuY3Rpb24gd2hlbiBnZW5lcmF0aW5nIGEgbWFzayAqL1xuICBtYXNrT3B0aW9ucz86IElkc01hc2tPcHRpb25zO1xuXG4gIC8qKiBJZiB0cnVlLCBkaXNwbGF5cyB0aGUgbGl0ZXJhbHMgYW5kIGZpbGxhYmxlIHNwYWNlIG9mIHRoZSBtYXNrIGFzIGEgcGxhY2Vob2xkZXIgaW5zaWRlIHRoZSBmaWVsZCAqL1xuICBtYXNrR3VpZGU/OiBib29sZWFuO1xuXG4gIC8qKiBJZiB0cnVlLCBjb21iaW5lZCB3aXRoIGBtYXNrR3VpZGVgLCBhdHRlbXB0cyB0byBrZWVwIHByZXZpb3VzbHktZW50ZXJlZCBpbnB1dCBmcm9tIHNoaWZ0aW5nIHdpdGhpbiB0aGUgZmllbGQgKi9cbiAgbWFza1JldGFpblBvc2l0aW9ucz86IGJvb2xlYW47XG59O1xuXG4vKipcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBFTVBUWV9TVFJJTkcganVzdCBhbiBlbXB0eSBzdHJpbmdcbiAqL1xuZXhwb3J0IGNvbnN0IEVNUFRZX1NUUklORyA9ICcnO1xuXG4vKipcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBQTEFDRUhPTERFUl9DSEFSIHRoZSBkZWZhdWx0IHBsYWNlaG9sZGVyIHVzZWQgaW4gZ3VpZGVzXG4gKi9cbmV4cG9ydCBjb25zdCBQTEFDRUhPTERFUl9DSEFSID0gJ18nO1xuXG4vKipcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBDQVJFVF9UUkFQIHRoZSBzdHJpbmcgb2YgY2hhcmFjdGVycyByZXByZXNlbnRpbmcgYSBjYXJldCB0cmFwIGluIG1hc2sgYXJyYXlzXG4gKi9cbmV4cG9ydCBjb25zdCBDQVJFVF9UUkFQID0gJ1tdJztcblxuLyoqXG4gKiBAcHJvcGVydHkge1JlZ0V4cH0gTk9OX0RJR0lUU19SRUdFWCByZWd1bGFyIGV4cHJlc3Npb24gbWF0Y2hpbmcgbm9uLWRpZ2l0IGNoYXJhY3RlcnNcbiAqL1xuZXhwb3J0IGNvbnN0IE5PTl9ESUdJVFNfUkVHRVggPSAvW15cXHUwNjYwLVxcdTA2NjkwLTlcXHUwOTY2LVxcdTA5NkZcXHUyRTgwLVxcdTJGRDVcXHUzMTkwLVxcdTMxOWZcXHUzNDAwLVxcdTREQkZcXHU0RTAwLVxcdTlGQ0NcXHVGOTAwLVxcdUZBQURdL2c7XG5cbi8qKlxuICogQHByb3BlcnR5IHtSZWdFeHB9IERJR0lUU19SRUdFWCByZWd1bGFyIGV4cHJlc3Npb24gbWF0Y2hpbmcgZGlnaXQgY2hhcmFjdGVyc1xuICovXG5leHBvcnQgY29uc3QgRElHSVRTX1JFR0VYID0gL1tcXHUwNjYwLVxcdTA2NjkwLTlcXHUwOTY2LVxcdTA5NkZcXHUyRTgwLVxcdTJGRDVcXHUzMTkwLVxcdTMxOWZcXHUzNDAwLVxcdTREQkZcXHU0RTAwLVxcdTlGQ0NcXHVGOTAwLVxcdUZBQURdLztcblxuLyoqXG4gKiBAcHJvcGVydHkge1JlZ0V4cH0gQUxQSEFTX1JFR0VYIHJlZ3VsYXIgZXhwcmVzc2lvbiBtYXRjaGluZyBhbHBoYWJldGljLCBub24tc3BlY2lhbCBjaGFyYWN0ZXJzXG4gKi9cbmV4cG9ydCBjb25zdCBBTFBIQVNfUkVHRVggPSAvW1xcdTAwQzAtXFx1MDE3RmEtekEtWl0vO1xuXG4vKipcbiAqIEBwcm9wZXJ0eSB7UmVnRXhwfSBBTllfUkVHRVggcmVndWxhciBleHByZXNzaW9uIG1hdGNoaW5nIGFueSBub24tc3BlY2lhbCBjaGFyYWN0ZXJzXG4gKi9cbmV4cG9ydCBjb25zdCBBTllfUkVHRVggPSAvW1xcdTAwQzAtXFx1MDE3RmEtekEtWjAtOV0vO1xuXG4vKipcbiAqIERlZmF1bHQgb3B0aW9ucyB0aGF0IGdldCBwYXNzZWQgZm9yIHRoZSBgbWFza0FQSS5jb25mb3JtVG9NYXNrKClgIG1ldGhvZC5cbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBERUZBVUxUX0NPTkZPUk1fT1BUSU9OUyBkZWZhdWx0IG9wdGlvbnNcbiAqL1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfQ09ORk9STV9PUFRJT05TID0ge1xuICBjYXJldFRyYXBJbmRleGVzOiBbXSxcbiAgZ3VpZGU6IGZhbHNlLFxuICBwcmV2aW91c01hc2tSZXN1bHQ6IEVNUFRZX1NUUklORyxcbiAgcGxhY2Vob2xkZXJDaGFyOiBQTEFDRUhPTERFUl9DSEFSLFxuICBwbGFjZWhvbGRlcjogRU1QVFlfU1RSSU5HLFxuICBzZWxlY3Rpb246IHtcbiAgICBzdGFydDogMFxuICB9LFxuICBrZWVwQ2hhcmFjdGVyUG9zaXRpb25zOiBmYWxzZVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0dGVybiBhIHN0cmluZyBjb250YWluaW5nIGEgcGF0dGVybiB0aGF0IG5lZWRzIHBhcnNpbmdcbiAqIEByZXR1cm5zIHtBcnJheTxzdHJpbmd8UmVnRXhwPnx1bmRlZmluZWR9IGEgdmFsaWQgbWFzayBvciBub3RoaW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0UGF0dGVybkZyb21TdHJpbmcocGF0dGVybjogc3RyaW5nKSB7XG4gIGlmICh0eXBlb2YgcGF0dGVybiAhPT0gJ3N0cmluZycgfHwgIXBhdHRlcm4ubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGNvbnN0IGZpcnN0Q2hhciA9IHBhdHRlcm4uY2hhckF0KDApO1xuICBjb25zdCBsYXN0Q2hhciA9IHBhdHRlcm4uY2hhckF0KHBhdHRlcm4ubGVuZ3RoIC0gMSk7XG5cbiAgLy8gRGV0ZWN0IGlubGluZWQgYXJyYXlzIChKU09OLWxpa2UpXG4gIGlmIChmaXJzdENoYXIgPT09ICdbJyAmJiBsYXN0Q2hhciA9PT0gJ10nKSB7XG4gICAgY29uc3QgcGF0dGVybkFycmF5ID0gcGF0dGVybi5zdWJzdHJpbmcoMSwgcGF0dGVybi5sZW5ndGggLSAxKS5zcGxpdCgvLCA/L2cpO1xuICAgIHJldHVybiBwYXR0ZXJuQXJyYXkubWFwKChpdGVtKSA9PiB7XG4gICAgICAvLyBSZW1vdmUgcXVvdGVzXG4gICAgICAvLyBOT1RFOiBuZWVkIHRvIGRldGVjdCBzaW5nbGUgYW5kIGRvdWJsZSBxdW90ZXMgaGVyZVxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBpZiAoW1wiJ1wiLCAnXCInXS5pbmNsdWRlcyhpdGVtLmNoYXJBdCgwKSkpIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0uc3Vic3RyaW5nKDEsIGl0ZW0ubGVuZ3RoIC0gMSk7XG4gICAgICB9XG4gICAgICAvLyBDb252ZXJ0IHN0cmluZy1iYXNlZCByZWdleCBpbnRvIFJlZ0V4cCBvYmplY3RzXG4gICAgICByZXR1cm4gbmV3IFJlZ0V4cChpdGVtLnN1YnN0cmluZygxLCBpdGVtLmxlbmd0aCAtIDEpKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIEBUT0RPOiBUcnkgdG8gZGV0ZWN0IG90aGVyIHR5cGVzIG9mIHN0cmluZyBpbnB1dFxuICAvLyBmb3Igbm93LCByZXR1cm4gYW4gZW1wdHkgbWFza1xuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/components/ids-mask/ids-mask-common.ts\n");

/***/ }),

/***/ "./src/components/ids-mask/ids-mask-global.ts":
/*!****************************************************!*\
  !*** ./src/components/ids-mask/ids-mask-global.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ids_mask_global_default)\n/* harmony export */ });\n/* harmony import */ var _ids_mask_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ids-mask-api */ \"./src/components/ids-mask/ids-mask-api.ts\");\n\nconst maskAPI = new _ids_mask_api__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\nvar ids_mask_global_default = maskAPI;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9pZHMtbWFzay9pZHMtbWFzay1nbG9iYWwudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBb0I7QUFFcEIsTUFBTSxVQUFVLElBQUkscURBQU8sQ0FBQztBQUU1QixJQUFPLDBCQUFRIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaWRzLWVudGVycHJpc2Utd2MvLi9zcmMvY29tcG9uZW50cy9pZHMtbWFzay9pZHMtbWFzay1nbG9iYWwudHM/NDI2YSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTWFza0FQSSBmcm9tICcuL2lkcy1tYXNrLWFwaSc7XG5cbmNvbnN0IG1hc2tBUEkgPSBuZXcgTWFza0FQSSgpO1xuXG5leHBvcnQgZGVmYXVsdCBtYXNrQVBJO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/components/ids-mask/ids-mask-global.ts\n");

/***/ }),

/***/ "./src/components/ids-mask/ids-masks.ts":
/*!**********************************************!*\
  !*** ./src/components/ids-mask/ids-masks.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DEFAULT_DATETIME_MASK_OPTIONS\": () => (/* binding */ DEFAULT_DATETIME_MASK_OPTIONS),\n/* harmony export */   \"DEFAULT_NUMBER_MASK_OPTIONS\": () => (/* binding */ DEFAULT_NUMBER_MASK_OPTIONS),\n/* harmony export */   \"autoCorrectedDatePipe\": () => (/* binding */ autoCorrectedDatePipe),\n/* harmony export */   \"dateMask\": () => (/* binding */ dateMask),\n/* harmony export */   \"numberMask\": () => (/* binding */ numberMask),\n/* harmony export */   \"rangeDateMask\": () => (/* binding */ rangeDateMask)\n/* harmony export */ });\n/* harmony import */ var _ids_mask_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ids-mask-common */ \"./src/components/ids-mask/ids-mask-common.ts\");\n/* harmony import */ var _utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/ids-string-utils/ids-string-utils */ \"./src/utils/ids-string-utils/ids-string-utils.ts\");\n/* harmony import */ var _utils_ids_deep_clone_utils_ids_deep_clone_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/ids-deep-clone-utils/ids-deep-clone-utils */ \"./src/utils/ids-deep-clone-utils/ids-deep-clone-utils.ts\");\n\n\n\nconst DEFAULT_NUMBER_MASK_OPTIONS = {\n  prefix: _ids_mask_common__WEBPACK_IMPORTED_MODULE_0__.EMPTY_STRING,\n  suffix: _ids_mask_common__WEBPACK_IMPORTED_MODULE_0__.EMPTY_STRING,\n  allowThousandsSeparator: true,\n  symbols: {\n    currency: \"$\",\n    decimal: \".\",\n    negative: \"-\",\n    thousands: \",\"\n  },\n  allowDecimal: false,\n  decimalLimit: 0,\n  locale: \"\",\n  requireDecimal: false,\n  allowNegative: false,\n  allowLeadingZeros: false,\n  integerLimit: null\n};\nfunction getLeadingZeros(formattedStr = \"\") {\n  const match = `${formattedStr}`.match(/^0*/);\n  return match ? match[0].length : 0;\n}\nfunction convertToMask(strNumber) {\n  return strNumber.split(_ids_mask_common__WEBPACK_IMPORTED_MODULE_0__.EMPTY_STRING).map((char) => _ids_mask_common__WEBPACK_IMPORTED_MODULE_0__.DIGITS_REGEX.test(char) ? _ids_mask_common__WEBPACK_IMPORTED_MODULE_0__.DIGITS_REGEX : char);\n}\nfunction addThousandsSeparator(n, options = {}, localeStringOpts = {}) {\n  if (n === \"\" || Number.isNaN(n)) {\n    return n;\n  }\n  let formatted = n;\n  if (options.locale) {\n    formatted = options.locale.formatNumber(n, localeStringOpts);\n  }\n  if (options.allowLeadingZeros && n.indexOf(\"0\") === 0) {\n    let zeros = getLeadingZeros(n);\n    if (formatted.indexOf(\"0\") === 0) {\n      formatted = formatted.substring(1);\n    }\n    while (zeros > 0) {\n      zeros -= 1;\n      formatted = `0${formatted}`;\n    }\n  }\n  return formatted;\n}\nfunction getRegexForPart(part, type) {\n  const types = {\n    any: _ids_mask_common__WEBPACK_IMPORTED_MODULE_0__.ANY_REGEX,\n    digits: _ids_mask_common__WEBPACK_IMPORTED_MODULE_0__.DIGITS_REGEX,\n    alphas: _ids_mask_common__WEBPACK_IMPORTED_MODULE_0__.ALPHAS_REGEX\n  };\n  if (!types[type]) {\n    type = \"any\";\n  }\n  let size = part.toString().length;\n  const arr = [];\n  while (size > 0) {\n    arr.push(types[type]);\n    size -= 1;\n  }\n  return arr;\n}\nfunction numberMask(rawValue = \"\", options = {}) {\n  let thisOptions = (0,_utils_ids_deep_clone_utils_ids_deep_clone_utils__WEBPACK_IMPORTED_MODULE_2__.deepClone)(DEFAULT_NUMBER_MASK_OPTIONS);\n  thisOptions = Object.assign(thisOptions, options);\n  const PREFIX = thisOptions.prefix;\n  const SUFFIX = thisOptions.suffix;\n  const DECIMAL = thisOptions.symbols.decimal;\n  const THOUSANDS = thisOptions.symbols.thousands;\n  const prefixLength = PREFIX?.length || 0;\n  const suffixLength = SUFFIX?.length || 0;\n  const thousandsSeparatorSymbolLength = THOUSANDS?.length || 0;\n  let thisRawValue = rawValue;\n  let mask;\n  if (typeof thisRawValue !== \"string\") {\n    thisRawValue = _ids_mask_common__WEBPACK_IMPORTED_MODULE_0__.EMPTY_STRING;\n  }\n  const rawValueLength = thisRawValue.length;\n  if (thisRawValue === _ids_mask_common__WEBPACK_IMPORTED_MODULE_0__.EMPTY_STRING || thisRawValue[0] === PREFIX[0] && rawValueLength === 1) {\n    mask = PREFIX.split(_ids_mask_common__WEBPACK_IMPORTED_MODULE_0__.EMPTY_STRING).concat([_ids_mask_common__WEBPACK_IMPORTED_MODULE_0__.DIGITS_REGEX]).concat(SUFFIX.split(_ids_mask_common__WEBPACK_IMPORTED_MODULE_0__.EMPTY_STRING));\n  }\n  if (thisRawValue === DECIMAL && thisOptions.allowDecimal) {\n    mask = PREFIX.split(_ids_mask_common__WEBPACK_IMPORTED_MODULE_0__.EMPTY_STRING).concat([\"0\", _ids_mask_common__WEBPACK_IMPORTED_MODULE_0__.CARET_TRAP, DECIMAL, _ids_mask_common__WEBPACK_IMPORTED_MODULE_0__.CARET_TRAP, _ids_mask_common__WEBPACK_IMPORTED_MODULE_0__.DIGITS_REGEX]).concat(SUFFIX.split(_ids_mask_common__WEBPACK_IMPORTED_MODULE_0__.EMPTY_STRING));\n  }\n  if (Array.isArray(mask)) {\n    return { mask };\n  }\n  const indexOfLastDecimal = thisRawValue.lastIndexOf(DECIMAL);\n  const hasDecimal = indexOfLastDecimal !== -1;\n  const isNegative = thisRawValue[0] === thisOptions.symbols.negative && thisOptions.allowNegative;\n  let integer;\n  let fraction;\n  if (thisRawValue.slice(suffixLength * -1) === SUFFIX) {\n    thisRawValue = thisRawValue.slice(0, suffixLength * -1);\n  }\n  if (hasDecimal) {\n    integer = thisRawValue.slice(thisRawValue.slice(0, prefixLength) === PREFIX ? prefixLength : 0, indexOfLastDecimal);\n    fraction = thisRawValue.slice(indexOfLastDecimal + 1, rawValueLength);\n    fraction = convertToMask(fraction.replace(_ids_mask_common__WEBPACK_IMPORTED_MODULE_0__.NON_DIGITS_REGEX, _ids_mask_common__WEBPACK_IMPORTED_MODULE_0__.EMPTY_STRING));\n  } else if (thisRawValue.slice(0, prefixLength) === PREFIX) {\n    integer = thisRawValue.slice(prefixLength);\n  } else {\n    integer = thisRawValue;\n  }\n  if (options.integerLimit && typeof options.integerLimit === \"number\") {\n    const thousandsSeparatorRegex = THOUSANDS === \".\" ? \"[.]\" : `${THOUSANDS}`;\n    const numberOfThousandSeparators = (integer.match(new RegExp(thousandsSeparatorRegex, \"g\")) || []).length;\n    integer = integer.slice(0, options.integerLimit + (isNegative ? 1 : 0) + numberOfThousandSeparators * thousandsSeparatorSymbolLength);\n  }\n  integer = integer.replace(_ids_mask_common__WEBPACK_IMPORTED_MODULE_0__.NON_DIGITS_REGEX, _ids_mask_common__WEBPACK_IMPORTED_MODULE_0__.EMPTY_STRING);\n  if (!options.allowLeadingZeros) {\n    integer = integer.replace(/^0+(0$|[^0])/, \"$1\");\n  }\n  if (options.allowThousandsSeparator) {\n    const localeOptions = {\n      maximumSignificantDigits: options.integerLimit,\n      style: \"decimal\",\n      useGrouping: options.allowThousandsSeparator\n    };\n    integer = addThousandsSeparator(integer, options, localeOptions);\n  }\n  mask = convertToMask(integer);\n  if (hasDecimal && options.allowDecimal || options.requireDecimal === true) {\n    if (thisRawValue[indexOfLastDecimal - 1] !== DECIMAL) {\n      mask.push(_ids_mask_common__WEBPACK_IMPORTED_MODULE_0__.CARET_TRAP);\n    }\n    mask.push(DECIMAL, _ids_mask_common__WEBPACK_IMPORTED_MODULE_0__.CARET_TRAP);\n    if (fraction) {\n      if (typeof options.decimalLimit === \"number\") {\n        fraction = fraction.slice(0, options.decimalLimit);\n      }\n      mask = mask.concat(fraction);\n    }\n    if (options.requireDecimal === true && thisRawValue[indexOfLastDecimal - 1] === DECIMAL) {\n      mask.push(_ids_mask_common__WEBPACK_IMPORTED_MODULE_0__.DIGITS_REGEX);\n    }\n  }\n  if (prefixLength > 0) {\n    mask = PREFIX.split(_ids_mask_common__WEBPACK_IMPORTED_MODULE_0__.EMPTY_STRING).concat(mask);\n  }\n  if (isNegative) {\n    if (mask.length === prefixLength) {\n      mask.push(_ids_mask_common__WEBPACK_IMPORTED_MODULE_0__.DIGITS_REGEX);\n    }\n    mask = [/-/].concat(mask);\n  }\n  if (SUFFIX.length > 0) {\n    mask = mask.concat(SUFFIX.split(_ids_mask_common__WEBPACK_IMPORTED_MODULE_0__.EMPTY_STRING));\n  }\n  return {\n    mask\n  };\n}\nconst DEFAULT_DATETIME_MASK_OPTIONS = {\n  format: \"M/d/yyyy\",\n  symbols: {\n    timeSeparator: \":\",\n    dayPeriodSeparator: \" \",\n    dateSeparator: \"/\"\n  }\n};\nconst DATE_MAX_VALUES = {\n  dd: 31,\n  d: 31,\n  MMM: void 0,\n  MM: 12,\n  M: 12,\n  yy: 99,\n  yyyy: 9999,\n  h: 12,\n  hh: 12,\n  H: 24,\n  HH: 24,\n  mm: 60,\n  ss: 60,\n  a: void 0\n};\nfunction getSplitterRegex(splitterStr) {\n  const arr = splitterStr.split(\"\");\n  const fixedArr = arr.map((c) => {\n    if (c === \" \") {\n      return \"\\\\s\";\n    }\n    if (c === \"-\") {\n      return \"\\\\-\";\n    }\n    return c;\n  });\n  return new RegExp(`[(${fixedArr.join(\"|\")})]+`);\n}\nfunction dateMask(rawValue = \"\", options = {}) {\n  let thisOptions = (0,_utils_ids_deep_clone_utils_ids_deep_clone_utils__WEBPACK_IMPORTED_MODULE_2__.deepClone)(DEFAULT_DATETIME_MASK_OPTIONS);\n  thisOptions = Object.assign(thisOptions, options);\n  let mask = [];\n  let thisRawValue = rawValue;\n  if (typeof rawValue !== \"string\") {\n    thisRawValue = \"\";\n  }\n  const digitRegex = _ids_mask_common__WEBPACK_IMPORTED_MODULE_0__.DIGITS_REGEX;\n  const format = thisOptions.format;\n  const splitterStr = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_1__.removeDuplicates)(format.replace(/[dMyHhmsa]+/g, \"\"));\n  const splitterRegex = getSplitterRegex(splitterStr);\n  const formatArray = format.match(/(d{1,2}|M{1,4}|y{1,4}|H{1,2}|h{1,2}|m{1,2}|s{1,2}|a{1}|z{1, 4}|E{1, 4})/g);\n  const rawValueArray = thisRawValue.split(splitterRegex);\n  const maxValue = DATE_MAX_VALUES;\n  formatArray.forEach((part, i) => {\n    const value = maxValue[part];\n    let size;\n    if (part === \"a\" || part === \"ah\") {\n      let am = \"AM\";\n      let pm = \"PM\";\n      if (options.locale.calendar()) {\n        am = options.locale.calendar().dayPeriods[0];\n        pm = options.locale.calendar().dayPeriods[1];\n        const apRegex = [];\n        for (let j = 0; j < am.length; j++) {\n          if (am[j] && pm[j] && am[j].toLowerCase() === pm[j].toLowerCase()) {\n            apRegex.push(am[j].toLowerCase());\n          } else {\n            apRegex.push(am[j].toLowerCase() + (pm[j] ? pm[j].toLowerCase() : \"\"));\n          }\n        }\n        for (let k = 0; k < apRegex.length; k++) {\n          mask.push(new RegExp(`[${apRegex[k]}]`, \"i\"));\n        }\n      } else {\n        mask.push(/[aApP]/, /[Mm]/);\n      }\n      if (part === \"ah\") {\n        const hourValue = rawValueArray[i].replace(am, \"\").replace(pm, \"\");\n        mask = mask.concat(getRegexForPart(hourValue, \"digits\"));\n      }\n    } else if (!value) {\n      mask = mask.concat(getRegexForPart(part, \"alphas\"));\n    } else if (rawValueArray[i]) {\n      const rawValueStr = rawValueArray[i].toString();\n      const rawValueFirstDigit = parseInt(rawValueStr.substr(0, 1), 10);\n      const maxFirstDigit = parseInt(maxValue[part].toString().substr(0, 1), 10);\n      if (part.length === 1 && rawValueFirstDigit > maxFirstDigit) {\n        mask.push(digitRegex);\n      } else if (rawValueStr !== \"0\" && rawValueStr.length === 1 && rawValueFirstDigit <= maxFirstDigit && rawValueArray[i + 1] !== void 0 && part.toUpperCase() !== \"HH\") {\n        mask.push(digitRegex);\n      } else {\n        mask = mask.concat(getRegexForPart(value, \"digits\"));\n      }\n    } else {\n      size = value.toString().length;\n      while (size > 0) {\n        mask.push(digitRegex);\n        size -= 1;\n      }\n    }\n    const nextPart = formatArray[i + 1];\n    if (nextPart !== void 0) {\n      const thisPartSize = part.toString().length;\n      const start = format.indexOf(part) + thisPartSize;\n      const end = format.indexOf(nextPart);\n      const literals = format.substring(start, end).split(_ids_mask_common__WEBPACK_IMPORTED_MODULE_0__.EMPTY_STRING);\n      const literalsWithCarets = [_ids_mask_common__WEBPACK_IMPORTED_MODULE_0__.CARET_TRAP].concat(literals.concat(_ids_mask_common__WEBPACK_IMPORTED_MODULE_0__.CARET_TRAP));\n      mask = mask.concat(literalsWithCarets);\n    }\n  });\n  return {\n    mask,\n    literals: splitterStr.split(\"\"),\n    literalRegex: splitterRegex\n  };\n}\nfunction rangeDateMask(rawValue = \"\", options = {}) {\n  const parts = rawValue.split(options.delimiter);\n  const delimiterArr = options.delimiter.split(\"\");\n  const firstDate = dateMask(parts[0], options);\n  const secondDate = dateMask(parts[1], options);\n  return {\n    mask: firstDate.mask.concat(delimiterArr.concat(secondDate.mask)),\n    literals: delimiterArr,\n    literalRegex: secondDate.literalRegex\n  };\n}\nfunction autoCorrectedDatePipe(processResult, options) {\n  options.dateFormat = \"M/d/yyyy\";\n  const conformedValueArr = processResult.conformedValue.split(\"\");\n  const indexesOfPipedChars = [];\n  const dateFormatArray = options.dateFormat.split(/[^dMy]+/);\n  const maxValue = {\n    d: 31,\n    M: 12,\n    yy: 99,\n    yyyy: 9999\n  };\n  const minValue = {\n    d: 1,\n    M: 1,\n    yy: 0,\n    yyyy: 1\n  };\n  dateFormatArray.forEach((format) => {\n    const position = options.dateFormat.indexOf(format);\n    const maxFirstDigit = parseInt(maxValue[format].toString().substr(0, 1), 10);\n    if (parseInt(conformedValueArr[position], 10) > maxFirstDigit) {\n      conformedValueArr[position + 1] = conformedValueArr[position];\n      conformedValueArr[position] = 0;\n      indexesOfPipedChars.push(position);\n    }\n  });\n  const placeholderRegex = new RegExp(`[^${processResult.placeholderChar}]`);\n  const maskPieces = processResult.placeholder.split(placeholderRegex);\n  const conformedPieces = processResult.conformedValue.split(/\\D/g);\n  const isInvalid = dateFormatArray.some((format, i) => {\n    const length = maskPieces[i].length > format.length ? maskPieces[i].length : format.length;\n    const textValue = conformedPieces[i] || \"\";\n    const value = parseInt(textValue, 10);\n    return value > maxValue[format] || textValue.length === length && value < minValue[format];\n  });\n  if (isInvalid) {\n    return false;\n  }\n  return {\n    value: conformedValueArr.join(\"\"),\n    characterIndexes: indexesOfPipedChars\n  };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/ids-mask/ids-masks.ts\n");

/***/ }),

/***/ "./src/components/ids-trigger-field/ids-trigger-button.ts":
/*!****************************************************************!*\
  !*** ./src/components/ids-trigger-field/ids-trigger-button.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ IdsTriggerButton)\n/* harmony export */ });\n/* harmony import */ var _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/ids-attributes */ \"./src/core/ids-attributes.ts\");\n/* harmony import */ var _core_ids_decorators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/ids-decorators */ \"./src/core/ids-decorators.ts\");\n/* harmony import */ var _utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/ids-string-utils/ids-string-utils */ \"./src/utils/ids-string-utils/ids-string-utils.ts\");\n/* harmony import */ var _mixins_ids_field_height_mixin_ids_field_height_mixin__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../mixins/ids-field-height-mixin/ids-field-height-mixin */ \"./src/mixins/ids-field-height-mixin/ids-field-height-mixin.ts\");\n/* harmony import */ var _ids_button_ids_button__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ids-button/ids-button */ \"./src/components/ids-button/ids-button.ts\");\n/* harmony import */ var _ids_trigger_button_scss__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ids-trigger-button.scss */ \"./src/components/ids-trigger-field/ids-trigger-button.scss\");\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result)\n    __defProp(target, key, result);\n  return result;\n};\n\n\n\n\n\n\nlet IdsTriggerButton = class extends (0,_mixins_ids_field_height_mixin_ids_field_height_mixin__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(_ids_button_ids_button__WEBPACK_IMPORTED_MODULE_4__[\"default\"]) {\n  /**\n   * Call the constructor and then initialize\n   */\n  constructor() {\n    super();\n  }\n  /**\n   * Return the attributes we handle as getters/setters\n   * @returns {Array<string>} The attributes in an array\n   */\n  static get attributes() {\n    return [\n      ...super.attributes,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.INLINE,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.INHERIT_COLOR,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.READONLY,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.TABBABLE\n    ];\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    this.inline = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.INLINE));\n  }\n  /**\n   * Figure out the classes\n   * @private\n   * @readonly\n   * @returns {Array<string>} containing classes used to identify this button prototype\n   */\n  get protoClasses() {\n    return [\"ids-trigger-button\"].concat(super.protoClasses);\n  }\n  /**\n   * Set if the trigger field is tabbable\n   * @param {boolean|string} value True of false depending if the trigger field is tabbable\n   */\n  set tabbable(value) {\n    const isTabbable = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(value);\n    const button = this.shadowRoot?.querySelector(\"button\");\n    if (isTabbable) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.TABBABLE, \"\");\n      if (button)\n        button.tabIndex = 0;\n      return;\n    }\n    this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.TABBABLE);\n    if (button)\n      button.tabIndex = -1;\n  }\n  get tabbable() {\n    return (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.TABBABLE));\n  }\n  /**\n   * Set the trigger button to readonly color\n   * @param {boolean|string} value True of false depending if the trigger button is readonly\n   */\n  set readonly(value) {\n    const isReadonly = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(value);\n    const button = this.shadowRoot?.querySelector(\"button\");\n    if (isReadonly) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.READONLY, \"\");\n      if (button)\n        button.tabIndex = -1;\n      return;\n    }\n    if (button)\n      button.tabIndex = this.tabbable ? 0 : -1;\n    this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.READONLY);\n  }\n  get readonly() {\n    return (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.READONLY));\n  }\n  /**\n   * @readonly\n   * @returns {string} containing an optional \"border\" class to apply to this button\n   */\n  get inlineCssClass() {\n    return this?.slot === \"trigger-start\" ? \"inline-start\" : \"inline-end\";\n  }\n  /**\n   * @param {boolean} val true if this trigger button should display \"inline\" instead of having its own full border\n   */\n  set inline(val) {\n    const showsBorder = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(val);\n    if (showsBorder) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.INLINE, \"\");\n      this.#setBorderClass();\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.INLINE);\n      this.#removeBorderClass();\n    }\n  }\n  /**\n   * @returns {boolean} true if this trigger button displays \"inline\" instead of having its own full border\n   */\n  get inline() {\n    return (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.INLINE));\n  }\n  #setBorderClass() {\n    this.button?.classList.add(\"style-inline\", this.inlineCssClass);\n  }\n  #removeBorderClass() {\n    this.button?.classList.remove(\"style-inline\", this.inlineCssClass);\n  }\n  /**\n   * @param {boolean} val true if this trigger button should inherit a parent component's text color for use internally\n   */\n  set inheritColor(val) {\n    if ((0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(val)) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.INHERIT_COLOR, \"\");\n      this.button?.classList.add(\"inherit-color\");\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.INHERIT_COLOR);\n      this.button?.classList.remove(\"inherit-color\");\n    }\n  }\n  /**\n   * @returns {boolean} true if this trigger button inherits a parent component's text color for use internally\n   */\n  get inheritColor() {\n    return this.hasAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.INHERIT_COLOR);\n  }\n};\nIdsTriggerButton = __decorateClass([\n  (0,_core_ids_decorators__WEBPACK_IMPORTED_MODULE_1__.customElement)(\"ids-trigger-button\"),\n  (0,_core_ids_decorators__WEBPACK_IMPORTED_MODULE_1__.scss)(_ids_trigger_button_scss__WEBPACK_IMPORTED_MODULE_5__[\"default\"])\n], IdsTriggerButton);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/ids-trigger-field/ids-trigger-button.ts\n");

/***/ }),

/***/ "./src/mixins/ids-clearable-mixin/ids-clearable-mixin.ts":
/*!***************************************************************!*\
  !*** ./src/mixins/ids-clearable-mixin/ids-clearable-mixin.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ids_clearable_mixin_default)\n/* harmony export */ });\n/* harmony import */ var _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/ids-attributes */ \"./src/core/ids-attributes.ts\");\n/* harmony import */ var _utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/ids-string-utils/ids-string-utils */ \"./src/utils/ids-string-utils/ids-string-utils.ts\");\n\n\nconst IdsClearableMixin = (superclass) => class extends superclass {\n  // Input clearable events\n  inputClearableEvents = [\"blur.clearmixin\", \"change.clearmixin\", \"keyup.clearmixin\"];\n  constructor(...args) {\n    super(...args);\n  }\n  static get attributes() {\n    return [\n      ...superclass.attributes,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.CLEARABLE,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.CLEARABLE_FORCED\n    ];\n  }\n  connectedCallback() {\n    super.connectedCallback?.();\n    this.render();\n    this.handleClearable();\n  }\n  /**\n   * Handle clearable\n   * @returns {void}\n   */\n  handleClearable() {\n    let isClearable = this.clearable && !(this.disabled || this.readonly);\n    isClearable = `${isClearable || this.clearableForced}`.toLowerCase() === \"true\";\n    if (isClearable) {\n      this.appendClearableButton();\n    } else {\n      this.destroyClearable();\n    }\n  }\n  refreshClearableButtonStyles() {\n    const xButton = this.shadowRoot?.querySelector(\".btn-clear\");\n    if (!xButton) {\n      this.removeClearableButton();\n      this.appendClearableButton();\n    }\n  }\n  #initClearableButton() {\n    const xButton = document.createElement(\"ids-trigger-button\");\n    const icon = document.createElement(\"ids-icon\");\n    const text = document.createElement(\"ids-text\");\n    icon.setAttribute(\"icon\", \"close\");\n    icon.setAttribute(\"size\", \"small\");\n    text.setAttribute(\"audible\", \"true\");\n    text.textContent = \"clear\";\n    xButton.appendChild(text);\n    xButton.appendChild(icon);\n    xButton.refreshProtoClasses();\n    if (this.colorVariant) {\n      xButton.colorVariant = this.colorVariant === \"app-menu\" ? \"alternate\" : this.colorVariant;\n    }\n    xButton.setAttribute(\"part\", \"clearable-button\");\n    xButton.className = \"btn-clear\";\n    xButton.noMargins = true;\n    return xButton;\n  }\n  /**\n   * Check if clearable x-icon button exists if not add it\n   * @private\n   * @returns {void}\n   */\n  appendClearableButton() {\n    if (!this.shadowRoot) {\n      return;\n    }\n    let xButton = this.shadowRoot.querySelector(\".btn-clear\");\n    if (!xButton) {\n      xButton = this.#initClearableButton();\n      const parent = this.shadowRoot.querySelector(\".ids-input, .ids-textarea\")?.querySelector(\".field-container\");\n      parent?.appendChild(xButton);\n      const input = this.shadowRoot?.querySelector(\".ids-input-field, .ids-textarea-field\");\n      input?.after(xButton);\n      this.attachClearableEvents();\n    }\n    this.container?.classList.add(\"has-clearable\");\n  }\n  /**\n   * Remove if clearable x-icon button exists\n   * @private\n   * @returns {void}\n   */\n  removeClearableButton() {\n    const xButton = this.shadowRoot?.querySelector(\".btn-clear\");\n    if (xButton) {\n      xButton.remove();\n      this.container?.classList.remove(\"has-clearable\");\n    }\n  }\n  /**\n   * Clears the contents of the input element\n   * @returns {void}\n   */\n  clear() {\n    const selfInput = this;\n    if (selfInput.input) {\n      selfInput.value = \"\";\n      selfInput.input.dispatchEvent(new Event(\"change\"));\n      selfInput.input.focus();\n      this.checkContents();\n      this.triggerEvent(\"cleared\", this, { detail: { elem: this, value: selfInput.value } });\n    }\n  }\n  /**\n   * Checks the contents of input element for empty\n   * @private\n   * @returns {void}\n   */\n  checkContents() {\n    const selfInput = this;\n    const xButton = this.shadowRoot?.querySelector(\".btn-clear\");\n    if (xButton) {\n      const text = selfInput.input?.value;\n      if (!text || !text.length) {\n        xButton.classList.add(\"is-empty\");\n      } else {\n        xButton.classList.remove(\"is-empty\");\n      }\n      this.triggerEvent(\"contents-checked\", this, { detail: { elem: this, value: selfInput.value } });\n    }\n  }\n  /**\n   * Handle clearable events\n   * @private\n   * @returns {void}\n   */\n  attachClearableEvents() {\n    this.handleClearBtnClick(\"\");\n    this.inputClearableEvents.forEach((e) => this.handleClearableInputEvents(e, \"\"));\n    this.checkContents();\n  }\n  /**\n   * Handle clearable x-icon button click event\n   * @private\n   * @param {string} option If 'remove', will remove attached events\n   * @returns {void}\n   */\n  handleClearBtnClick(option) {\n    const xButton = this.shadowRoot?.querySelector(\".btn-clear\");\n    if (xButton) {\n      const eventName = \"click\";\n      if (option === \"remove\") {\n        const handler = this?.handledEvents?.get(eventName);\n        if (handler && handler.target === xButton) {\n          this.offEvent(eventName, xButton);\n        }\n      } else {\n        this.onEvent(eventName, xButton, () => {\n          this.clear();\n        });\n      }\n    }\n  }\n  /**\n   * Handle clearable events (blur|change|keyup)\n   * @private\n   * @param {string} evt event name to attach/remove\n   * @param {string} option If 'remove', will remove attached events\n   * @returns {void}\n   */\n  handleClearableInputEvents(evt, option) {\n    const selfInput = this;\n    if (selfInput.input && evt && typeof evt === \"string\") {\n      const eventName = evt;\n      if (option === \"remove\") {\n        const handler = this.handledEvents?.get(eventName);\n        if (handler && handler.target === selfInput.input) {\n          this.offEvent(eventName, selfInput.input);\n        }\n      } else {\n        this.onEvent(eventName, selfInput.input, () => {\n          this.checkContents();\n        });\n      }\n    }\n  }\n  /**\n   * Destroy clearable actions\n   * @returns {void}\n   */\n  destroyClearable() {\n    this.input?.classList.remove(\"has-clearable\");\n    this.handleClearBtnClick(\"remove\");\n    this.inputClearableEvents.forEach((e) => this.handleClearableInputEvents(e, \"remove\"));\n    this.removeClearableButton();\n  }\n  /**\n   * When set the input will add a clearable x button\n   * @param {boolean|string} value If true will set `clearable` attribute\n   */\n  set clearable(value) {\n    const val = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_1__.stringToBool)(value);\n    if (val) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.CLEARABLE, val.toString());\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.CLEARABLE);\n    }\n    if (this.container)\n      this.handleClearable();\n  }\n  get clearable() {\n    return (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_1__.stringToBool)(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.CLEARABLE));\n  }\n  /**\n   * When set the input will force to add a clearable x button on readonly and disabled\n   * @param {boolean|string} value If true will set `clearable-forced` attribute\n   */\n  set clearableForced(value) {\n    const val = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_1__.stringToBool)(value);\n    if (val) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.CLEARABLE_FORCED, val.toString());\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.CLEARABLE_FORCED);\n    }\n    this.handleClearable();\n  }\n  get clearableForced() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.CLEARABLE_FORCED);\n  }\n};\nvar ids_clearable_mixin_default = IdsClearableMixin;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/mixins/ids-clearable-mixin/ids-clearable-mixin.ts\n");

/***/ }),

/***/ "./src/mixins/ids-field-height-mixin/ids-field-height-mixin.ts":
/*!*********************************************************************!*\
  !*** ./src/mixins/ids-field-height-mixin/ids-field-height-mixin.ts ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"FIELD_HEIGHTS\": () => (/* binding */ FIELD_HEIGHTS),\n/* harmony export */   \"default\": () => (/* binding */ ids_field_height_mixin_default)\n/* harmony export */ });\n/* harmony import */ var _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/ids-attributes */ \"./src/core/ids-attributes.ts\");\n/* harmony import */ var _utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/ids-string-utils/ids-string-utils */ \"./src/utils/ids-string-utils/ids-string-utils.ts\");\n\n\nconst FIELD_HEIGHTS = {\n  default: \"md\",\n  xs: \"xs\",\n  sm: \"sm\",\n  md: \"md\",\n  lg: \"lg\"\n};\nconst getFieldHeightClass = (val) => `field-height-${val}`;\nconst IdsFieldHeightMixin = (superclass) => class extends superclass {\n  constructor(...args) {\n    super(...args);\n    if (!this.state) {\n      this.state = {};\n    }\n    this.state.fieldHeight = FIELD_HEIGHTS.default;\n    this.state.compact = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_1__.stringToBool)(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.COMPACT)) || false;\n  }\n  static get attributes() {\n    return [\n      ...superclass.attributes,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.COMPACT,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.FIELD_HEIGHT\n    ];\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    if (this.hasAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.COMPACT)) {\n      this.compact = true;\n    } else {\n      this.container?.classList.add(getFieldHeightClass(this.fieldHeight));\n    }\n  }\n  /**\n   * @returns {string} that can be applied to an HTML element\n   * inside a template for determining the current Field Height class\n   */\n  templateFieldHeight() {\n    if (this.compact)\n      return \"\";\n    return this.fieldHeight ? `${getFieldHeightClass(this.fieldHeight)}` : \"\";\n  }\n  /**\n   *  Set the compact height\n   * @param {boolean|string} value If true will set `compact` attribute\n   */\n  set compact(value) {\n    const val = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_1__.stringToBool)(value);\n    if (val !== this.state.compact) {\n      this.state.compact = val;\n      if (val) {\n        this.fieldHeight = \"\";\n        this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.COMPACT, \"\");\n        this.container?.classList.add(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.COMPACT);\n        this.#doFieldHeightChange(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.COMPACT);\n      } else {\n        this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.COMPACT);\n        this.container?.classList.remove(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.COMPACT);\n        this.#doFieldHeightChange(\"\");\n      }\n    }\n  }\n  get compact() {\n    return (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_1__.stringToBool)(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.COMPACT));\n  }\n  /**\n   * Set the fieldHeight (height) of input\n   * @param {string} value [xs, sm, md, lg]\n   */\n  set fieldHeight(value) {\n    if (!value) {\n      this.state.fieldHeight = FIELD_HEIGHTS.default;\n      this.clearHeightClasses();\n      this.container?.classList.add(getFieldHeightClass(FIELD_HEIGHTS.default));\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.FIELD_HEIGHT);\n    } else {\n      const fieldHeight = FIELD_HEIGHTS[value];\n      if (fieldHeight && this.state.fieldHeight !== fieldHeight) {\n        this.state.fieldHeight = fieldHeight;\n        this.clearHeightClasses();\n        this.compact = false;\n        this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.FIELD_HEIGHT, fieldHeight);\n        this.container?.classList.add(getFieldHeightClass(fieldHeight));\n        this.#doFieldHeightChange(fieldHeight);\n      }\n    }\n  }\n  get fieldHeight() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.FIELD_HEIGHT) ?? FIELD_HEIGHTS.default;\n  }\n  /**\n   * Clears all existing field height classes defined on this component\n   * @returns {void}\n   */\n  clearHeightClasses() {\n    const heightClasses = Object.values(FIELD_HEIGHTS).map((h) => getFieldHeightClass(h));\n    this.container?.classList.remove(...heightClasses);\n  }\n  /**\n   * Runs optional `onFieldHeightChange` callback, if possible\n   * @param {string} fieldHeight the incoming `fieldHeight` or `compact` setting\n   */\n  #doFieldHeightChange(fieldHeight) {\n    if (typeof this.onFieldHeightChange === \"function\") {\n      this.onFieldHeightChange(fieldHeight);\n    }\n  }\n};\nvar ids_field_height_mixin_default = IdsFieldHeightMixin;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/mixins/ids-field-height-mixin/ids-field-height-mixin.ts\n");

/***/ }),

/***/ "./src/mixins/ids-label-state-mixin/ids-label-state-common.ts":
/*!********************************************************************!*\
  !*** ./src/mixins/ids-label-state-mixin/ids-label-state-common.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"IdsLabelStateAttributes\": () => (/* binding */ IdsLabelStateAttributes),\n/* harmony export */   \"isLabelRequiredValid\": () => (/* binding */ isLabelRequiredValid),\n/* harmony export */   \"isLabelStateValid\": () => (/* binding */ isLabelStateValid)\n/* harmony export */ });\n/* harmony import */ var _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/ids-attributes */ \"./src/core/ids-attributes.ts\");\n/* harmony import */ var _utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/ids-string-utils/ids-string-utils */ \"./src/utils/ids-string-utils/ids-string-utils.ts\");\n\n\nconst IdsLabelStateAttributes = [\n  _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.LABEL,\n  _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.LABEL_REQUIRED,\n  _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.LABEL_STATE\n];\nconst isLabelStateValid = (value) => value === null || [\"hidden\", \"collapsed\"].includes(value);\nconst isLabelRequiredValid = (value) => {\n  const isValid = typeof value !== \"undefined\" && value !== null;\n  return isValid ? (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_1__.stringToBool)(value) : true;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbWl4aW5zL2lkcy1sYWJlbC1zdGF0ZS1taXhpbi9pZHMtbGFiZWwtc3RhdGUtY29tbW9uLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTJCO0FBQ0U7QUFJdEIsTUFBTSwwQkFBMEI7QUFBQSxFQUNyQyxrRUFBZ0I7QUFBTCxFQUNYLDJFQUF5QjtBQUFkLEVBQ1gsd0VBQXNCO0FBQ3hCO0FBRU8sTUFBTSxvQkFBb0IsQ0FBQyxVQUF5QixVQUFVLFFBQVEsQ0FBQyxVQUFVLFdBQVcsRUFBRSxTQUFTLEtBQUs7QUFFNUcsTUFBTSx1QkFBdUIsQ0FBQyxVQUE0QztBQUMvRSxRQUFNLFVBQVUsT0FBTyxVQUFVLGVBQWUsVUFBVTtBQUMxRCxTQUFPLFVBQVUsc0ZBQVksQ0FBQyxLQUFLLElBQUk7QUFDekMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pZHMtZW50ZXJwcmlzZS13Yy8uL3NyYy9taXhpbnMvaWRzLWxhYmVsLXN0YXRlLW1peGluL2lkcy1sYWJlbC1zdGF0ZS1jb21tb24udHM/YWY3MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhdHRyaWJ1dGVzIH0gZnJvbSAnLi4vLi4vY29yZS9pZHMtYXR0cmlidXRlcyc7XG5pbXBvcnQgeyBzdHJpbmdUb0Jvb2wgfSBmcm9tICcuLi8uLi91dGlscy9pZHMtc3RyaW5nLXV0aWxzL2lkcy1zdHJpbmctdXRpbHMnO1xuXG5leHBvcnQgdHlwZSBJZHNMYWJlbFN0YXRlTW9kZSA9IG51bGwgfCAnaGlkZGVuJyB8ICdjb2xsYXBzZWQnO1xuXG5leHBvcnQgY29uc3QgSWRzTGFiZWxTdGF0ZUF0dHJpYnV0ZXMgPSBbXG4gIGF0dHJpYnV0ZXMuTEFCRUwsXG4gIGF0dHJpYnV0ZXMuTEFCRUxfUkVRVUlSRUQsXG4gIGF0dHJpYnV0ZXMuTEFCRUxfU1RBVEVcbl07XG5cbmV4cG9ydCBjb25zdCBpc0xhYmVsU3RhdGVWYWxpZCA9ICh2YWx1ZTogc3RyaW5nIHwgbnVsbCkgPT4gdmFsdWUgPT09IG51bGwgfHwgWydoaWRkZW4nLCAnY29sbGFwc2VkJ10uaW5jbHVkZXModmFsdWUpO1xuXG5leHBvcnQgY29uc3QgaXNMYWJlbFJlcXVpcmVkVmFsaWQgPSAodmFsdWU6IHN0cmluZyB8IGJvb2xlYW4gfCBudWxsKTogYm9vbGVhbiA9PiB7XG4gIGNvbnN0IGlzVmFsaWQgPSB0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnICYmIHZhbHVlICE9PSBudWxsO1xuICByZXR1cm4gaXNWYWxpZCA/IHN0cmluZ1RvQm9vbCh2YWx1ZSkgOiB0cnVlO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/mixins/ids-label-state-mixin/ids-label-state-common.ts\n");

/***/ }),

/***/ "./src/mixins/ids-label-state-mixin/ids-label-state-mixin.ts":
/*!*******************************************************************!*\
  !*** ./src/mixins/ids-label-state-mixin/ids-label-state-mixin.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ids_label_state_mixin_default)\n/* harmony export */ });\n/* harmony import */ var _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/ids-attributes */ \"./src/core/ids-attributes.ts\");\n/* harmony import */ var _utils_ids_xss_utils_ids_xss_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/ids-xss-utils/ids-xss-utils */ \"./src/utils/ids-xss-utils/ids-xss-utils.ts\");\n/* harmony import */ var _ids_label_state_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ids-label-state-common */ \"./src/mixins/ids-label-state-mixin/ids-label-state-common.ts\");\n\n\n\nconst IdsLabelStateMixin = (superclass) => class extends superclass {\n  constructor(...args) {\n    super(...args);\n    if (!this.state) {\n      this.state = {};\n    }\n    this.state.label = \"\";\n  }\n  connectedCallback() {\n    super.connectedCallback?.();\n    this.state.labelState = null;\n    if (this.hasAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.LABEL_STATE)) {\n      this.labelState = this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.LABEL_STATE);\n    }\n  }\n  static get attributes() {\n    return [\n      ...superclass.attributes,\n      ..._ids_label_state_common__WEBPACK_IMPORTED_MODULE_2__.IdsLabelStateAttributes\n    ];\n  }\n  /**\n   * Set the `label` text\n   * @param {string} value of the `label` text property\n   */\n  set label(value) {\n    const newValue = (0,_utils_ids_xss_utils_ids_xss_utils__WEBPACK_IMPORTED_MODULE_1__.stripHTML)(value);\n    const currentValue = this.label;\n    if (newValue !== currentValue) {\n      if (this.state)\n        this.state.label = newValue;\n      if (newValue) {\n        this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.LABEL, `${newValue}`);\n      } else {\n        this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.LABEL);\n      }\n      this.setLabelText(newValue);\n    }\n  }\n  get label() {\n    return this.state?.label || \"\";\n  }\n  /**\n   * Used for setting the text contents of the shadowroot label\n   * @param {string} [value] of label\n   * @param {string} [selector] used to target a specific element in the shadowroot by CSS selector\n   * @returns {void}\n   */\n  setLabelText(value = this.state?.label, selector = \"label\") {\n    const sanitizedValue = (0,_utils_ids_xss_utils_ids_xss_utils__WEBPACK_IMPORTED_MODULE_1__.stripHTML)(value);\n    const labelEl = this.shadowRoot?.querySelector(selector);\n    if (labelEl) {\n      const textEl = labelEl.querySelector(\"ids-text\");\n      if (!this.labelState) {\n        if (textEl)\n          textEl.innerHTML = sanitizedValue || \"\";\n        labelEl.classList[sanitizedValue ? \"remove\" : \"add\"](\"empty\");\n      } else {\n        if (textEl)\n          textEl.innerHTML = \"\";\n        labelEl.classList.add(\"empty\");\n      }\n    }\n  }\n  /**\n   * Set `label-required` attribute\n   * @param {string} value The `label-required` attribute\n   */\n  set labelRequired(value) {\n    const safeValue = (0,_ids_label_state_common__WEBPACK_IMPORTED_MODULE_2__.isLabelRequiredValid)(value);\n    if (value !== null) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.LABEL_REQUIRED, safeValue.toString());\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.LABEL_REQUIRED);\n    }\n    this.labelEl?.classList[!safeValue ? \"add\" : \"remove\"](\"no-required-indicator\");\n    if (this.textInput)\n      this.textInput.labelRequired = this.labelRequired;\n  }\n  get labelRequired() {\n    return (0,_ids_label_state_common__WEBPACK_IMPORTED_MODULE_2__.isLabelRequiredValid)(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.LABEL_REQUIRED));\n  }\n  /**\n   * @returns {Array<IdsLabelStateMode>} List of available hidden label states\n   */\n  labelStates = [\"hidden\", \"collapsed\"];\n  /**\n   * @returns {IdsLabelStateMode} the current state of the field label's visibility\n   */\n  get labelState() {\n    return this.state?.labelState || null;\n  }\n  /**\n   * @param {IdsLabelStateMode} val the type of label visibility to apply to the field\n   */\n  set labelState(val) {\n    let safeValue = null;\n    if (typeof val === \"string\") {\n      safeValue = (0,_utils_ids_xss_utils_ids_xss_utils__WEBPACK_IMPORTED_MODULE_1__.stripTags)(val, \"\");\n    }\n    const currentValue = this.state.labelState;\n    if (currentValue !== safeValue) {\n      if (safeValue !== null && this.labelStates.includes(safeValue)) {\n        this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.LABEL_STATE, `${safeValue}`);\n      } else {\n        this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.LABEL_STATE);\n        safeValue = null;\n      }\n      this.state.labelState = safeValue;\n      this.#refreshLabelState(currentValue, safeValue);\n    }\n  }\n  /**\n   * Refreshes the component's label state, driven by\n   * a CSS class on the WebComponent's `container` element\n   * @param {string} oldVariantName the variant name to \"remove\" from the style\n   * @param {string} newVariantName the variant name to \"add\" to the style\n   * @returns {void}\n   */\n  #refreshLabelState(oldVariantName, newVariantName) {\n    if (!this.container)\n      return;\n    const cl = this.container.classList;\n    if (oldVariantName)\n      cl.remove(`label-state-${oldVariantName}`);\n    if (newVariantName)\n      cl.add(`label-state-${newVariantName}`);\n    this.#setlabelState(newVariantName);\n    if (typeof this.onLabelStateChange === \"function\") {\n      this.onLabelStateChange(newVariantName);\n    }\n  }\n  #setlabelState(doHide = null) {\n    if (doHide) {\n      this.#hideLabel();\n      this.input?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.htmlAttributes.ARIA_LABEL, this.label);\n    } else {\n      this.#showLabel();\n      this.input?.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.htmlAttributes.ARIA_LABEL);\n    }\n  }\n  #hideLabel() {\n    this.setLabelText?.(\"\");\n  }\n  #showLabel() {\n    const existingLabel = this.shadowRoot?.querySelector(\"label\");\n    const thisAsInput = this;\n    if (!existingLabel && !thisAsInput.labelEl) {\n      if (thisAsInput.fieldContainer) {\n        thisAsInput.fieldContainer?.insertAdjacentHTML(\"beforebegin\", `<label for=\"${this.id}-input\" class=\"ids-label-text\">\n          <ids-text part=\"label\" label=\"true\" color-unset>${this.label}</ids-text>\n        </label>`);\n      }\n    } else {\n      this.setLabelText?.(this.label);\n    }\n  }\n};\nvar ids_label_state_mixin_default = IdsLabelStateMixin;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/mixins/ids-label-state-mixin/ids-label-state-mixin.ts\n");

/***/ }),

/***/ "./src/mixins/ids-mask-mixin/ids-mask-mixin.ts":
/*!*****************************************************!*\
  !*** ./src/mixins/ids-mask-mixin/ids-mask-mixin.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ids_mask_mixin_default)\n/* harmony export */ });\n/* harmony import */ var _components_ids_mask_ids_mask_global__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../components/ids-mask/ids-mask-global */ \"./src/components/ids-mask/ids-mask-global.ts\");\n/* harmony import */ var _components_ids_mask_ids_mask_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../components/ids-mask/ids-mask-common */ \"./src/components/ids-mask/ids-mask-common.ts\");\n/* harmony import */ var _components_ids_mask_ids_masks__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../components/ids-mask/ids-masks */ \"./src/components/ids-mask/ids-masks.ts\");\n/* harmony import */ var _core_ids_attributes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/ids-attributes */ \"./src/core/ids-attributes.ts\");\n/* harmony import */ var _utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/ids-string-utils/ids-string-utils */ \"./src/utils/ids-string-utils/ids-string-utils.ts\");\n\n\n\n\n\nconst MASK_ATTRIBUTES = [\n  _core_ids_attributes__WEBPACK_IMPORTED_MODULE_3__.attributes.MASK,\n  _core_ids_attributes__WEBPACK_IMPORTED_MODULE_3__.attributes.MASK_GUIDE,\n  _core_ids_attributes__WEBPACK_IMPORTED_MODULE_3__.attributes.MASK_RETAIN_POSITIONS,\n  _core_ids_attributes__WEBPACK_IMPORTED_MODULE_3__.attributes.MASK_OPTIONS\n];\nconst IdsMaskMixin = (superclass) => class extends superclass {\n  maskState = {\n    guide: false,\n    keepCharacterPositions: false,\n    options: {},\n    previousMaskResult: \"\",\n    previousPlaceholder: \"\"\n  };\n  constructor(...args) {\n    super(...args);\n  }\n  /**\n   * @returns {Array<string>} IdsInput component observable attributes\n   */\n  static get attributes() {\n    return [\n      ...superclass.attributes,\n      ...MASK_ATTRIBUTES\n    ];\n  }\n  connectedCallback() {\n    super.connectedCallback?.();\n    this.handleMaskEvents();\n    this.processMaskWithCurrentValue();\n  }\n  /**\n   * @readonly\n   * @returns {maskAPI} reference to a global IDS Mask instance\n   */\n  get maskAPI() {\n    return _components_ids_mask_ids_mask_global__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n  }\n  set maskGuide(val) {\n    const trueVal = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_4__.stringToBool)(val);\n    this.maskState.guide = trueVal;\n    this.processMaskWithCurrentValue();\n  }\n  get maskGuide() {\n    return this.maskState.guide;\n  }\n  /**\n   * @returns {object} defined Mask options\n   */\n  get maskOptions() {\n    return this.maskState.options;\n  }\n  /**\n   * @param {object} val incoming Mask options\n   */\n  set maskOptions(val) {\n    if (typeof val === \"object\") {\n      this.maskState.options = val;\n    }\n  }\n  /**\n   * @returns {Function} a Pipe Function for modifying Mask output\n   */\n  get maskPipe() {\n    return this.maskState.pipe;\n  }\n  /**\n   * @param {Function} val a Pipe Function for modifying Mask output\n   */\n  set maskPipe(val) {\n    if (typeof val === \"function\") {\n      this.maskState.pipe = val;\n    }\n  }\n  set maskRetainPositions(val) {\n    const trueVal = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_4__.stringToBool)(val);\n    this.maskState.keepCharacterPositions = trueVal;\n  }\n  get maskRetainPositions() {\n    return this.maskState.keepCharacterPositions;\n  }\n  /**\n   * Retrieves the currently-stored mask pattern.\n   * @returns {string|Function|Array<string|RegExp>} representing the stored mask pattern\n   */\n  get mask() {\n    return this.maskState.pattern;\n  }\n  /**\n   * Sets the Mask pattern to be used.\n   * @param {string|Function|Array<string|RegExp>} val the mask pattern on which to conform input\n   */\n  set mask(val) {\n    let trueVal;\n    if (Array.isArray(val) || typeof val === \"function\") {\n      trueVal = val;\n    } else {\n      switch (val) {\n        case \"date\":\n        case \"time\":\n          trueVal = _components_ids_mask_ids_masks__WEBPACK_IMPORTED_MODULE_2__.dateMask;\n          this.onLocaleChange = (locale) => {\n            if (!this.maskOptions.format) {\n              this.maskOptions.format = locale.calendar().dateFormat.short;\n            }\n          };\n          break;\n        case \"rangeDate\":\n          trueVal = _components_ids_mask_ids_masks__WEBPACK_IMPORTED_MODULE_2__.rangeDateMask;\n          this.onLocaleChange = (locale) => {\n            if (!this.maskOptions.format) {\n              this.maskOptions.format = locale.calendar().dateFormat.short;\n            }\n          };\n          break;\n        case \"number\":\n          trueVal = _components_ids_mask_ids_masks__WEBPACK_IMPORTED_MODULE_2__.numberMask;\n          this.onLocaleChange = (locale) => {\n            const newLocale = locale.locale;\n            this.maskOptions.symbols = {\n              currency: newLocale.options.currencySign,\n              decimal: newLocale.options.numbers.decimal,\n              negative: newLocale.options.numbers.minusSign,\n              thousands: newLocale.options.numbers.group\n            };\n          };\n          break;\n        default:\n          trueVal = (0,_components_ids_mask_ids_mask_common__WEBPACK_IMPORTED_MODULE_1__.convertPatternFromString)(val);\n          this.onLocaleChange = void 0;\n          break;\n      }\n    }\n    this.maskState.pattern = trueVal;\n    if (typeof this.onLocaleChange === \"function\" && this.locale) {\n      this.onLocaleChange(this.localeAPI);\n    }\n  }\n  handleMaskEvents() {\n    this.onEvent(\"input\", this, () => this.processMaskWithCurrentValue());\n  }\n  /**\n   * Uses an input value and pattern options to process a masked string.\n   * @param {string} rawValue the value to be checked for masking.\n   * @param {IdsMaskOptions} opts various options that can be passed to the masking process.\n   * @param {boolean} [doSetValue=false] if true, attempts to set input state when masking completes\n   * @returns {string|boolean} the result of the mask.  If no masking was performed, return `false`\n   */\n  processMask = (rawValue, opts = {}, doSetValue = false) => {\n    if (!this.mask) {\n      return false;\n    }\n    const previousValue = this.maskState.previousMaskResult;\n    if (rawValue === previousValue) {\n      return false;\n    }\n    const posBegin = this.input.selectionStart || 0;\n    const posEnd = this.input.selectionEnd || 0;\n    rawValue = _components_ids_mask_ids_mask_global__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getSafeRawValue(rawValue);\n    const processOptions = {\n      caretTrapIndexes: [],\n      guide: this.maskState.guide,\n      locale: this.localeAPI,\n      keepCharacterPositions: this.maskState.keepCharacterPositions,\n      pattern: this.mask,\n      patternOptions: opts,\n      placeholderChar: _components_ids_mask_ids_mask_common__WEBPACK_IMPORTED_MODULE_1__.PLACEHOLDER_CHAR,\n      previousMaskResult: previousValue,\n      selection: {\n        start: posBegin,\n        end: posEnd,\n        contents: \"\"\n      }\n    };\n    if (posBegin !== posEnd) {\n      processOptions.selection.contents = rawValue.substring(posBegin, posEnd);\n    }\n    if (typeof this.maskPipe === \"function\") {\n      processOptions.pipe = this.maskPipe;\n    }\n    const processed = _components_ids_mask_ids_mask_global__WEBPACK_IMPORTED_MODULE_0__[\"default\"].process(rawValue, processOptions);\n    if (!processed.maskResult) {\n      return false;\n    }\n    let finalValue = processed.conformedValue;\n    if (processed.pipedValue) {\n      finalValue = processed.pipedValue;\n    }\n    if (finalValue !== \"\" && opts.suffix && !finalValue.includes(opts.suffix)) {\n      finalValue += `${opts.suffix}`;\n    }\n    const adjustCaretOpts = {\n      conformedValue: finalValue,\n      rawValue,\n      caretPos: processed.caretPos,\n      placeholder: processed.placeholder,\n      placeholderChar: processOptions.placeholderChar,\n      previousMaskResult: previousValue,\n      previousPlaceholder: this.maskState.previousPlaceholder\n    };\n    if (processed.pipedCharacterIndexes) {\n      adjustCaretOpts.indexesOfPipedChars = processed.pipedCharIndexes;\n    }\n    if (processed.caretTrapIndexes) {\n      adjustCaretOpts.caretTrapIndexes = processed.caretTrapIndexes;\n    }\n    processed.caretPos = _components_ids_mask_ids_mask_global__WEBPACK_IMPORTED_MODULE_0__[\"default\"].adjustCaretPosition(adjustCaretOpts);\n    this.maskState.previousMaskResult = finalValue;\n    this.maskState.previousPlaceholder = processed.placeholder;\n    if (doSetValue) {\n      this.value = finalValue;\n      this.safelySetSelection(this.shadowRoot, processed.caretPos, processed.caretPos);\n    }\n    return finalValue;\n  };\n  /**\n   * Uses this current input value and pattern options defined to process a\n   * masked string, also setting input state.\n   * @returns {object} the result of the mask\n   */\n  processMaskWithCurrentValue() {\n    return this.processMask(this.value, this.maskOptions, true);\n  }\n  /**\n   * Uses a provided value with stored mask options to process a masked string,\n   * without setting input state.\n   * @param {string} rawValue a text value to process against the mask\n   * @returns {object} the result of the mask\n   */\n  processMaskFromProperty(rawValue = \"\") {\n    return this.processMask(rawValue, this.maskOptions, false);\n  }\n  /**\n   * @private\n   * @param {ShadowRoot|Document} host either the Document, or a relevant Shadow Root\n   * @param {number} startPos starting position\n   * @param {number} endPos end position\n   * @returns {void}\n   */\n  safelySetSelection(host = document, startPos = 0, endPos = 0) {\n    if (host?.activeElement === this.input) {\n      this.input.setSelectionRange(startPos, endPos, \"none\");\n    }\n  }\n};\nvar ids_mask_mixin_default = IdsMaskMixin;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/mixins/ids-mask-mixin/ids-mask-mixin.ts\n");

/***/ }),

/***/ "./src/components/ids-list-box/ids-list-box-option.scss":
/*!**************************************************************!*\
  !*** ./src/components/ids-list-box/ids-list-box-option.scss ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n\n        const styles = `/* Styling for Dropdown List Options */ /* Sass scss styles. Keep Base very small */\n/* Global variables (might want these to become tokens) */\n:host {\n  width: 100%;\n  cursor: pointer;\n  display: block;\n  color: var(--ids-color-palette-slate-100);\n  font-family: source sans pro, helvetica, arial, sans-serif;\n  font-size: 16px;\n  line-height: 36px;\n  outline: none;\n  min-height: 32px;\n  padding: 0;\n  text-indent: 8px;\n  user-select: none;\n  min-width: 73px;\n  max-width: 298px;\n  text-transform: capitalize;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n:host(.multiselect-option) {\n  display: flex;\n}\n:host(.multiselect-option) ::slotted(ids-icon) {\n  margin: 0;\n  margin-inline-start: 8px;\n}\n\n:host(.is-selected:not(.multiselect-option)) {\n  background-color: var(--ids-color-palette-azure-60);\n  color: var(--ids-color-palette-white);\n}\n\n:host(:hover:not(.is-selected):not([group-label]):not(.multiselect-option)),\n:host(.is-focused),\n:host(.multiselect-option:focus),\n:host(.multiselect-option.is-selected),\n:host(.multiselect-option:hover) {\n  background-color: var(--ids-color-palette-slate-20);\n}\n\n::slotted(ids-icon) {\n  vertical-align: middle;\n  margin: 0 7px 2px 0;\n}\n\n::slotted(ids-icon[dir=rtl]) {\n  margin: 0 0 2px 7px;\n}\n\n:host([mode=dark]) {\n  color: var(--ids-color-palette-white);\n}\n\n:host([mode=dark]:hover:not(.is-selected):not([group-label]):not(.multiselect-option)),\n:host([mode=dark]:hover:not(.is-selected)),\n:host([mode=dark].multiselect-option:focus),\n:host([mode=dark].multiselect-option.is-selected),\n:host([mode=dark].multiselect-option:hover) {\n  background-color: var(--ids-color-palette-slate-80);\n}\n\n:host([mode=contrast].is-selected:not(.multiselect-option)) {\n  background-color: var(--ids-color-palette-azure-100);\n  color: var(--ids-color-palette-white);\n}\n\n:host([mode=contrast]:hover:not(.is-selected)),\n:host([mode=contrast].multiselect-option:focus),\n:host([mode=contrast].multiselect-option.is-selected),\n:host([mode=contrast].multiselect-option:hover) {\n  background-color: var(--ids-color-palette-slate-20);\n}\n\n::slotted(ids-check-box) {\n  line-height: normal;\n}\n\n::slotted(.highlight) {\n  font-weight: var(--ids-number-font-weight-bold);\n}\n\n:host([group-label]) {\n  cursor: default;\n  color: var(--ids-color-palette-slate-80);\n  font-weight: 600;\n}\n\n:host([mode=dark][group-label]) {\n  color: var(--ids-color-palette-slate-20);\n}\n\n:host([mode=contrast][group-label]) {\n  color: var(--ids-color-palette-slate-100);\n}\n\n:host([group-label]:not(:first-child)),\n:host(.multiselect-border) {\n  border-top: 1px solid var(--ids-color-palette-slate-30);\n  margin-top: 5px;\n}\n\n:host([mode=dark][group-label]:not(:first-child)),\n:host([mode=dark].multiselect-border) {\n  border-top: 1px solid var(--ids-color-palette-slate-50);\n}\n\n:host([mode=contrast][group-label]:not(:first-child)),\n:host([mode=contrast].multiselect-border) {\n  border-top: 1px solid var(--ids-color-palette-slate-60);\n}`;\n        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (styles);\n    //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/ids-list-box/ids-list-box-option.scss\n");

/***/ }),

/***/ "./src/components/ids-list-box/ids-list-box.scss":
/*!*******************************************************!*\
  !*** ./src/components/ids-list-box/ids-list-box.scss ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n\n        const styles = `/* Styling for Dropdown List Options */ /* Sass scss styles. Keep Base very small */\n/* Global variables (might want these to become tokens) */\n:host {\n  width: 100%;\n  display: block;\n  overflow-x: hidden;\n  overflow-y: auto;\n  max-height: 300px;\n  scroll-behavior: smooth;\n  min-width: 73px;\n  max-width: 298px;\n}\n\n:host([size=xs]),\n:host([size=xs]) ::slotted(ids-list-box-option) {\n  max-width: 73px;\n}\n\n:host([size=sm]),\n:host([size=sm]) ::slotted(ids-list-box-option) {\n  max-width: 148px;\n}\n\n:host([size=md]),\n:host([size=md]) ::slotted(ids-list-box-option) {\n  max-width: 298px;\n}\n\n:host([size=mm]),\n:host([size=mm]) ::slotted(ids-list-box-option) {\n  max-width: 223px;\n}\n\n:host([size=lg]),\n:host([size=lg]) ::slotted(ids-list-box-option) {\n  max-width: 398px;\n}\n\n:host([size=full]),\n:host([size=full]) ::slotted(ids-list-box-option) {\n  max-width: 100%;\n}\n\n:host([compact]) ::slotted(ids-list-box-option),\n:host([field-height=xs]) ::slotted(ids-list-box-option) {\n  font-size: 14px;\n  min-height: 26px;\n  line-height: 26px;\n}\n\n:host([field-height=sm]) ::slotted(ids-list-box-option) {\n  min-height: 28px;\n  line-height: 28px;\n}\n\n:host([field-height=md]) ::slotted(ids-list-box-option) {\n  min-height: 36px;\n  line-height: 36px;\n}\n\n:host([field-height=lg]) ::slotted(ids-list-box-option) {\n  min-height: 46px;\n  line-height: 46px;\n}`;\n        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (styles);\n    //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/ids-list-box/ids-list-box.scss\n");

/***/ })

}]);