/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/components/ids-treemap/demos/index.ts":
/*!***************************************************!*\
  !*** ./src/components/ids-treemap/demos/index.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _ids_treemap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ids-treemap */ \"./src/components/ids-treemap/ids-treemap.ts\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9pZHMtdHJlZW1hcC9kZW1vcy9pbmRleC50cy5qcyIsIm1hcHBpbmdzIjoiOztBQUFPIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaWRzLWVudGVycHJpc2Utd2MvLi9zcmMvY29tcG9uZW50cy9pZHMtdHJlZW1hcC9kZW1vcy9pbmRleC50cz80ZmY1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnLi4vaWRzLXRyZWVtYXAnO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/components/ids-treemap/demos/index.ts\n");

/***/ }),

/***/ "./src/components/ids-treemap/ids-treemap.ts":
/*!***************************************************!*\
  !*** ./src/components/ids-treemap/ids-treemap.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ IdsTreeMap)\n/* harmony export */ });\n/* harmony import */ var _core_ids_decorators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/ids-decorators */ \"./src/core/ids-decorators.ts\");\n/* harmony import */ var _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/ids-attributes */ \"./src/core/ids-attributes.ts\");\n/* harmony import */ var _mixins_ids_events_mixin_ids_events_mixin__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../mixins/ids-events-mixin/ids-events-mixin */ \"./src/mixins/ids-events-mixin/ids-events-mixin.ts\");\n/* harmony import */ var _mixins_ids_theme_mixin_ids_theme_mixin__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../mixins/ids-theme-mixin/ids-theme-mixin */ \"./src/mixins/ids-theme-mixin/ids-theme-mixin.ts\");\n/* harmony import */ var _mixins_ids_locale_mixin_ids_locale_mixin__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../mixins/ids-locale-mixin/ids-locale-mixin */ \"./src/mixins/ids-locale-mixin/ids-locale-mixin.ts\");\n/* harmony import */ var _core_ids_element__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/ids-element */ \"./src/core/ids-element.ts\");\n/* harmony import */ var _ids_treemap_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ids-treemap.scss */ \"./src/components/ids-treemap/ids-treemap.scss\");\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result)\n    __defProp(target, key, result);\n  return result;\n};\n\n\n\n\n\n\n\nconst DEFAULT_HEIGHT = 300;\nconst Base = (0,_mixins_ids_theme_mixin_ids_theme_mixin__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(\n  (0,_mixins_ids_locale_mixin_ids_locale_mixin__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(\n    (0,_mixins_ids_events_mixin_ids_events_mixin__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\n      _core_ids_element__WEBPACK_IMPORTED_MODULE_5__[\"default\"]\n    )\n  )\n);\nlet IdsTreeMap = class extends Base {\n  d = [];\n  height = DEFAULT_HEIGHT;\n  width = NaN;\n  Rectangle = {\n    data: [],\n    xBeginning: 0,\n    yBeginning: 0,\n    totalWidth: NaN,\n    totalHeight: DEFAULT_HEIGHT\n  };\n  initialData = [];\n  constructor() {\n    super();\n  }\n  /**\n   * Invoked each time the custom element is appended into a document-connected element.\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    this.resizeTreemap();\n  }\n  /**\n   * Return the attributes we handle as getters/setters\n   * @returns {Array} The attributes in an array\n   */\n  static get attributes() {\n    return [\n      ...super.attributes,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DATA,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.TITLE\n    ];\n  }\n  /**\n   * Set the data attribute\n   * @param {TreemapDataSet[]} value of the treemap data object\n   * @memberof IdsTreeMap\n   */\n  set data(value) {\n    this.d = value;\n    this.render(true);\n  }\n  /**\n   * Get the data attribute\n   * @returns {TreemapDataSet[]} data of the treemap data object\n   * @readonly\n   * @memberof IdsTreeMap\n   */\n  get data() {\n    return this.d;\n  }\n  /**\n   * Handles title attribute changes\n   * @param {string} value title value\n   */\n  onTitleChange(value) {\n    const titleText = this.shadowRoot?.querySelector('[part=\"title\"]');\n    if (titleText)\n      titleText.innerHTML = value || \"\";\n  }\n  /**\n   * Create the Template for the contents\n   * @returns {string} The template\n   */\n  template() {\n    const treemap = `\n      <div class=\"treemap-container\">\n        <div class=\"treemap-title\">\n          ${this.templateTitle()}\n        </div>\n        ${this.templateSvg(this.data)}\n      </div>\n    `;\n    return treemap;\n  }\n  /**\n   * Render SVG markup\n   * @param {TreemapDataSet[]} data data array\n   * @returns {string} svg\n   * @memberof IdsTreeMap\n   */\n  templateSvg(data) {\n    let svg = `<svg>Sorry, your browser does not support inline SVG.</svg>`;\n    if (data !== void 0) {\n      svg = `\n        <svg width='${this.width}' height='${this.height}' stroke-width=\".5\">\n          ${data?.map((rect) => this.templateGroups(rect)).join(\"\")}\n        </svg>\n      `;\n    }\n    return svg;\n  }\n  /**\n   * Render the group markup\n   * @param {TreemapDataSet} rect item in the data array\n   * @returns {string} svg group\n   * @memberof IdsTreeMap\n   */\n  templateGroups(rect) {\n    const textOffset = 8;\n    return `\n      <g\n        fill=${rect?.data?.color || \"#003876\"}\n        class=\"treemap-rect\"\n      >\n        <rect\n          x=${rect.x}\n          y=${rect.y}\n          width=${rect.width}\n          height=${rect.height}\n        >\n        </rect>\n        <text\n          fill=\"white\"\n          x=\"${rect.x + textOffset * 2}\"\n          y=\"${rect.y + textOffset * 3}\"\n          stroke-width=\"0\"\n        >\n          ${rect?.data?.text || \"Empty\"}\n        </text>\n        <text\n          fill=\"white\"\n          x=\"${rect.x + textOffset * 2}\"\n          y=\"${rect.y + textOffset * 6}\"\n          stroke-width=\"0\"\n        >\n          ${rect?.data?.label || \"0%\"}\n        </text>\n      </g>\n    `;\n  }\n  /**\n   * Render the title markup\n   * @returns {string} Title banner markup\n   * @memberof IdsTreeMap\n   */\n  templateTitle() {\n    return `\n      <ids-text type=\"span\" font-weight=\"bold\" part=\"title\">\n        ${typeof this.title === \"string\" ? this.title : \"Add Treemap Title\"}\n      </ids-text>`;\n  }\n  /**\n   * Get max number\n   * @param {number[]} array row\n   * @returns {number} max number\n   * @memberof IdsTreeMap\n   * @private\n   */\n  #getMaximum = (array) => Math.max(...array);\n  /**\n   * Get min number\n   * @param {number[]} array row\n   * @returns {number} min number\n   * @memberof IdsTreeMap\n   * @private\n   */\n  #getMinimum = (array) => Math.min(...array);\n  /**\n   * Sum Reducer\n   * @param {number} acc row\n   * @param {number} cur row\n   * @returns {Array} reduced array\n   * @memberof IdsTreeMap\n   * @private\n   */\n  #sumReducer = (acc, cur) => acc + cur;\n  /**\n   * Round Value and preserve 2 decimals\n   * @param {number} number row\n   * @returns {number} round value array\n   * @memberof IdsTreeMap\n   * @private\n   */\n  #roundValue = (number) => Math.max(Math.round(number * 100) / 100, 0);\n  /**\n   * Validate the treemap object.\n   * @param {TreemapDataSet} treemap { data, height }\n   * @param {Data[]} treemap.data array that contains the treemap block definitions\n   * @param {number} treemap.height total hieght of the treemap\n   * @memberof IdsTreeMap\n   * @private\n   */\n  #validateArguments = (treemap) => {\n    const data = treemap.data;\n    const height = treemap.height;\n    if (typeof height !== \"number\" || height <= 0) {\n      throw new Error(\"You need to specify the height of your treemap\");\n    }\n    if (!Array.isArray(data) || data.length === 0 || !data.every((dataPoint) => Object.prototype.hasOwnProperty.call(dataPoint, \"value\") && typeof dataPoint.value === \"number\" && dataPoint.value >= 0)) {\n      throw new Error(\"Your data must be in this format [{ value: 1 }, { value: 2 }], 'value' being a positive number\");\n    }\n  };\n  /**\n   * Calculate worst ratio\n   * @param {number[]} row array\n   * @param {number} width of row\n   * @returns {number} worst ratio number\n   * @memberof IdsTreeMap\n   * @private\n   */\n  #worstRatio = (row, width) => {\n    const sum = row.reduce(this.#sumReducer, 0);\n    const rowMax = this.#getMaximum(row);\n    const rowMin = this.#getMinimum(row);\n    return Math.max(width ** 2 * rowMax / sum ** 2, sum ** 2 / (width ** 2 * rowMin));\n  };\n  /**\n   * Get the min width\n   * @returns {RectMinWidth} the minWidth object\n   * @memberof IdsTreeMap\n   * @private\n   */\n  #getMinWidth = () => {\n    if (this.Rectangle.totalHeight ** 2 > this.Rectangle.totalWidth ** 2) {\n      return { value: this.Rectangle.totalWidth, vertical: false };\n    }\n    return { value: this.Rectangle.totalHeight, vertical: true };\n  };\n  /**\n   * Layout Row\n   * @param {number[]} row array\n   * @param {number} width number\n   * @param {boolean} vertical boolean\n   * @memberof IdsTreeMap\n   * @private\n   */\n  #layoutRow = (row, width, vertical) => {\n    const rowHeight = row.reduce(this.#sumReducer, 0) / width;\n    row.forEach((rowItem) => {\n      const rowWidth = rowItem / rowHeight;\n      const { xBeginning } = this.Rectangle;\n      const { yBeginning } = this.Rectangle;\n      let data;\n      if (vertical) {\n        data = {\n          x: xBeginning,\n          y: yBeginning,\n          width: rowHeight,\n          height: rowWidth,\n          data: this.initialData[this.Rectangle.data.length]\n        };\n        this.Rectangle.yBeginning += rowWidth;\n      } else {\n        data = {\n          x: xBeginning,\n          y: yBeginning,\n          width: rowWidth,\n          height: rowHeight,\n          data: this.initialData[this.Rectangle.data.length]\n        };\n        this.Rectangle.xBeginning += rowWidth;\n      }\n      this.Rectangle.data.push(data);\n    });\n    if (vertical) {\n      this.Rectangle.xBeginning += rowHeight;\n      this.Rectangle.yBeginning -= width;\n      this.Rectangle.totalWidth -= rowHeight;\n    } else {\n      this.Rectangle.xBeginning -= width;\n      this.Rectangle.yBeginning += rowHeight;\n      this.Rectangle.totalHeight -= rowHeight;\n    }\n  };\n  /**\n   * Layout last row\n   * @param {number[]} rows array\n   * @param {number[]} children array\n   * @param {number} width number\n   * @memberof IdsTreeMap\n   * @private\n   */\n  #layoutLastRow = (rows, children, width) => {\n    const { vertical } = this.#getMinWidth();\n    this.#layoutRow(rows, width, vertical);\n    this.#layoutRow(children, width, vertical);\n  };\n  /**\n   * Squarify\n   * @param {number[]} children array\n   * @param {number[]} row array\n   * @param {number} width number\n   * @returns {any} squarified row\n   * @memberof IdsTreeMap\n   * @private\n   */\n  #squarify = (children, row, width) => {\n    if (children.length === 1) {\n      return this.#layoutLastRow(row, children, width);\n    }\n    const rowWithChild = [...row, children[0]];\n    if (row.length === 0 || this.#worstRatio(row, width) >= this.#worstRatio(rowWithChild, width)) {\n      children.shift();\n      return this.#squarify(children, rowWithChild, width);\n    }\n    this.#layoutRow(row, width, this.#getMinWidth().vertical);\n    return this.#squarify(children, [], this.#getMinWidth().value);\n  };\n  /**\n   * Create the Treemap\n   * @param {TreemapDataSet} treemap object that contains config for the treemap\n   * @param {Data[]} treemap.data array that contains the treemap block definitions\n   * @param {number} treemap.height total hieght of the treemap\n   * @returns {TreemapDataSet[]} treemap array\n   * @memberof IdsTreeMap\n   */\n  treeMap(treemap) {\n    if (treemap && treemap.data.length > 0) {\n      const height = treemap.height;\n      const data = treemap.data;\n      this.#validateArguments({ data, height });\n      this.width = this.container?.offsetWidth ?? NaN;\n      this.height = height;\n      this.Rectangle = {\n        data: [],\n        xBeginning: 0,\n        yBeginning: 0,\n        totalWidth: this.width,\n        totalHeight: this.height\n      };\n      this.initialData = data;\n      const totalValue = data.map((dataPoint) => dataPoint.value).reduce(this.#sumReducer, 0);\n      const dataScaled = data.map((dataPoint) => dataPoint.value * this.height * this.width / totalValue);\n      this.#squarify(dataScaled, [], this.#getMinWidth().value);\n      return this.Rectangle.data.map((dataPoint) => ({\n        ...dataPoint,\n        x: this.#roundValue(dataPoint.x),\n        y: this.#roundValue(dataPoint.y),\n        width: this.#roundValue(dataPoint.width),\n        height: this.#roundValue(dataPoint.height)\n      }));\n    }\n    return [];\n  }\n  /**\n   * Resize the treemap based on screen size\n   * @memberof IdsTreeMap\n   */\n  resizeTreemap() {\n    const resizeObserver = new ResizeObserver((entries) => {\n      for (const entry of entries) {\n        this.width = entry.target.offsetWidth;\n        const updatedObj = {\n          data: this.initialData,\n          width: this.width,\n          height: this.height\n        };\n        const newData = this.treeMap(updatedObj);\n        if (newData) {\n          this.data = this.treeMap(updatedObj);\n        }\n      }\n    });\n    resizeObserver.observe(this);\n  }\n};\nIdsTreeMap = __decorateClass([\n  (0,_core_ids_decorators__WEBPACK_IMPORTED_MODULE_0__.customElement)(\"ids-treemap\"),\n  (0,_core_ids_decorators__WEBPACK_IMPORTED_MODULE_0__.scss)(_ids_treemap_scss__WEBPACK_IMPORTED_MODULE_6__[\"default\"])\n], IdsTreeMap);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/ids-treemap/ids-treemap.ts\n");

/***/ }),

/***/ "./src/mixins/ids-locale-mixin/ids-locale-mixin.ts":
/*!*********************************************************!*\
  !*** ./src/mixins/ids-locale-mixin/ids-locale-mixin.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ids_locale_mixin_default)\n/* harmony export */ });\n/* harmony import */ var _components_ids_locale_ids_locale__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../components/ids-locale/ids-locale */ \"./src/components/ids-locale/ids-locale.ts\");\n/* harmony import */ var _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/ids-attributes */ \"./src/core/ids-attributes.ts\");\n\n\nconst IdsLocaleMixin = (superclass) => class extends superclass {\n  localeAPI = new _components_ids_locale_ids_locale__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n  constructor(...args) {\n    super(...args);\n  }\n  connectedCallback() {\n    super.connectedCallback?.();\n    if (this.localeAPI.state.language !== \"en\")\n      this.setAttribute(\"language\", this.localeAPI.state.language);\n    if (this.localeAPI.state.localeName !== \"en-US\")\n      this.setAttribute(\"locale\", this.localeAPI.state.localeName);\n  }\n  static get attributes() {\n    return [\n      ...superclass.attributes,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.LANGUAGE,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.LOCALE\n    ];\n  }\n  /**\n   * Set the language for a component and wait for it to finish (async)\n   * @param {string} value The language string value\n   */\n  async setLanguage(value) {\n    await this.localeAPI.setLanguage(value);\n    if (this.nodeName === \"IDS-CONTAINER\")\n      this.localeAPI.setDocumentLangAttribute(this, value);\n    this.setAttribute(\"language\", value);\n    if (typeof this.onLanguageChange === \"function\" && this.previousLanguage !== value) {\n      this.onLanguageChange(this.localeAPI);\n    }\n    if (this.previousLanguage !== value) {\n      this.triggerEvent(\"languagechange\", this, { detail: { elem: this, language: this.language, locale: this.state?.locale } });\n    }\n    const previous = this.previousLanguage;\n    if (this.children.length > 0) {\n      this.#notifyChildrenLanguage(this.querySelectorAll(\"*\"), value, previous);\n    }\n    if (this.shadowRoot && this.shadowRoot?.children?.length > 0) {\n      this.#notifyChildrenLanguage(this.shadowRoot.querySelectorAll(\"*\"), value, previous);\n    }\n    this.localeAPI.updateDirectionAttribute(this, value);\n    this.setDirection();\n    this.previousLanguage = value;\n  }\n  /** Holds the last set language */\n  previousLanguage = \"en\";\n  /**\n   * Set the language for a component\n   * @param {string} value The language string value\n   */\n  set language(value) {\n    if (value && value !== this.language.name) {\n      this.setLanguage(value);\n    }\n  }\n  /**\n   * Get the language data keys and message for the current language\n   * @returns {object} The language data object\n   */\n  get language() {\n    return {\n      name: this.getAttribute(\"language\") || \"en\",\n      messages: this?.localeAPI?.language.messages\n    };\n  }\n  /**\n   * Set the setter on all children\n   * @param {NodeListOf<HTMLElement>} children the children to set\n   * @param {string} language The language string value\n   * @param {string} previousLanguage The previous language string value\n   */\n  #notifyChildrenLanguage(children, language, previousLanguage) {\n    children.forEach((element) => {\n      if (element.language && element.language.name === previousLanguage) {\n        element.language = language;\n      }\n    });\n  }\n  /** Holds the last set locale */\n  previousLocale = \"en-US\";\n  /**\n   * Set the locale for a component and wait for it to finish (async)\n   * @param {string} value The locale string value\n   */\n  async setLocale(value) {\n    if (value) {\n      await this.localeAPI.setLocale(value);\n      const lang = this.localeAPI.correctLanguage(value);\n      this.setAttribute(\"locale\", value);\n      if (this.nodeName === \"IDS-CONTAINER\")\n        this.localeAPI.setDocumentLangAttribute(this, lang);\n      await this.setLanguage(lang);\n      if (typeof this.onLocaleChange === \"function\" && this.previousLocale !== value) {\n        this.onLocaleChange(this.localeAPI);\n      }\n      if (this.previousLocale !== value) {\n        this.triggerEvent(\"localechange\", this, { detail: { elem: this, language: this.language, locale: this.state?.locale } });\n      }\n      if (this.children.length > 0) {\n        const previous = this.previousLocale;\n        requestAnimationFrame(() => {\n          this.#notifyChildrenLocale(this.querySelectorAll(\"*\"), value, previous);\n        });\n      }\n    }\n    this.previousLocale = value;\n  }\n  /**\n   * Set the locale for a component\n   * @param {string} value The locale string value\n   */\n  set locale(value) {\n    if (value && value !== this.locale && typeof value === \"string\") {\n      this.setLocale(value);\n    }\n  }\n  get locale() {\n    return this.localeAPI.state.localeName;\n  }\n  /**\n   * Set the setter on all children\n   * @param {NodeListOf<HTMLElement>} children the children to set\n   * @param {string} locale The locale string value\n   * @param {string} previousLocale The previous locale string value\n   */\n  #notifyChildrenLocale(children, locale, previousLocale) {\n    children.forEach((element) => {\n      if (element.locale && element.locale === previousLocale) {\n        element.locale = locale;\n      }\n    });\n  }\n  /**\n   * Set the direction attribute\n   */\n  setDirection() {\n    if (this.localeAPI?.isRTL()) {\n      this.setAttribute(\"dir\", \"rtl\");\n      this.container?.classList.add(\"rtl\");\n    } else {\n      this.removeAttribute(\"dir\");\n      this.container?.classList.remove(\"rtl\");\n    }\n  }\n};\nvar ids_locale_mixin_default = IdsLocaleMixin;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/mixins/ids-locale-mixin/ids-locale-mixin.ts\n");

/***/ }),

/***/ "./src/mixins/ids-theme-mixin/ids-theme-mixin.ts":
/*!*******************************************************!*\
  !*** ./src/mixins/ids-theme-mixin/ids-theme-mixin.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"THEME_MODES\": () => (/* binding */ THEME_MODES),\n/* harmony export */   \"default\": () => (/* binding */ ids_theme_mixin_default)\n/* harmony export */ });\n/* harmony import */ var _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/ids-attributes */ \"./src/core/ids-attributes.ts\");\n\nconst THEME_MODES = [\"light\", \"dark\", \"contrast\"];\nconst IdsThemeMixin = (superclass) => class extends superclass {\n  switcher = null;\n  constructor(...args) {\n    super(...args);\n  }\n  static get attributes() {\n    return [\n      ...superclass.attributes,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.MODE\n    ];\n  }\n  connectedCallback() {\n    super.connectedCallback?.();\n    this.initThemeHandlers();\n  }\n  disconnectedCallback() {\n    this.offEvent(\"themechanged\");\n    this.switcher = null;\n    super.disconnectedCallback?.();\n  }\n  /**\n   * Init the mixin events and states\n   * @private\n   */\n  initThemeHandlers() {\n    this.switcher = document.querySelector(\"ids-theme-switcher\");\n    if (!this.switcher) {\n      return;\n    }\n    this.mode = this.switcher.mode;\n    this.onEvent(\"themechanged\", this.switcher, (e) => {\n      this.mode = e.detail.mode;\n    });\n  }\n  /**\n   * Set the mode of the current theme\n   * @param {string} value The mode value for example: light, dark, or contrast\n   */\n  set mode(value) {\n    if (!THEME_MODES.includes(value))\n      value = \"light\";\n    this.setAttribute(\"mode\", value);\n    this.container?.setAttribute(\"mode\", value);\n  }\n  /**\n   * Get the mode of the current theme\n   * @returns {string} light, dark, or contrast\n   */\n  get mode() {\n    return this.getAttribute(\"mode\") || \"light\";\n  }\n};\nvar ids_theme_mixin_default = IdsThemeMixin;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbWl4aW5zL2lkcy10aGVtZS1taXhpbi9pZHMtdGhlbWUtbWl4aW4udHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTJCO0FBT3BCLE1BQU0sY0FBYyxDQUFDLFNBQVMsUUFBUSxVQUFVO0FBT3ZELE1BQU0sZ0JBQWdCLENBQXdCLGVBQWtCLGNBQWMsV0FBVztBQUFBLEVBQ3ZGLFdBQW9DO0FBQUEsRUFFcEMsZUFBZSxNQUFhO0FBQzFCLFVBQU0sR0FBRyxJQUFJO0FBQUEsRUFDZjtBQUFBLEVBRUEsV0FBVyxhQUFhO0FBQ3RCLFdBQU87QUFBQSxNQUNMLEdBQUksV0FBbUI7QUFBQSxNQUN2QixpRUFBZTtBQUFKLElBQ2I7QUFBQSxFQUNGO0FBQUEsRUFFQSxvQkFBb0I7QUFDbEIsVUFBTSxvQkFBb0I7QUFDMUIsU0FBSyxrQkFBa0I7QUFBQSxFQUN6QjtBQUFBLEVBRUEsdUJBQXVCO0FBQ3JCLFNBQUssU0FBUyxjQUFjO0FBQzVCLFNBQUssV0FBVztBQUNoQixVQUFNLHVCQUF1QjtBQUFBLEVBQy9CO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU1BLG9CQUFvQjtBQUNsQixTQUFLLFdBQVcsU0FBUyxjQUFnQyxvQkFBb0I7QUFDN0UsUUFBSSxDQUFDLEtBQUssVUFBVTtBQUNsQjtBQUFBLElBQ0Y7QUFFQSxTQUFLLE9BQU8sS0FBSyxTQUFTO0FBRTFCLFNBQUssUUFBUSxnQkFBZ0IsS0FBSyxVQUFVLENBQUMsTUFBbUI7QUFDOUQsV0FBSyxPQUFPLEVBQUUsT0FBTztBQUFBLElBQ3ZCLENBQUM7QUFBQSxFQUNIO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU1BLElBQUksS0FBSyxPQUFlO0FBQ3RCLFFBQUksQ0FBQyxZQUFZLFNBQVMsS0FBSztBQUFHLGNBQVE7QUFDMUMsU0FBSyxhQUFhLFFBQVEsS0FBSztBQUMvQixTQUFLLFdBQVcsYUFBYSxRQUFRLEtBQUs7QUFBQSxFQUM1QztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNQSxJQUFJLE9BQWU7QUFDakIsV0FBTyxLQUFLLGFBQWEsTUFBTSxLQUFLO0FBQUEsRUFDdEM7QUFDRjtBQUVBLElBQU8sMEJBQVEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pZHMtZW50ZXJwcmlzZS13Yy8uL3NyYy9taXhpbnMvaWRzLXRoZW1lLW1peGluL2lkcy10aGVtZS1taXhpbi50cz8yZGIyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGF0dHJpYnV0ZXMgfSBmcm9tICcuLi8uLi9jb3JlL2lkcy1hdHRyaWJ1dGVzJztcbmltcG9ydCB7IEV2ZW50c01peGluSW50ZXJmYWNlIH0gZnJvbSAnLi4vaWRzLWV2ZW50cy1taXhpbi9pZHMtZXZlbnRzLW1peGluJztcbmltcG9ydCB7IElkc0NvbnN0cnVjdG9yIH0gZnJvbSAnLi4vLi4vY29yZS9pZHMtZWxlbWVudCc7XG5pbXBvcnQgdHlwZSBJZHNUaGVtZVN3aXRjaGVyIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvaWRzLXRoZW1lLXN3aXRjaGVyL2lkcy10aGVtZS1zd2l0Y2hlcic7XG5cbnR5cGUgQ29uc3RyYWludHMgPSBJZHNDb25zdHJ1Y3RvcjxFdmVudHNNaXhpbkludGVyZmFjZT47XG5cbmV4cG9ydCBjb25zdCBUSEVNRV9NT0RFUyA9IFsnbGlnaHQnLCAnZGFyaycsICdjb250cmFzdCddO1xuXG4vKipcbiAqIEEgbWl4aW4gdGhhdCBhZGRzIHRoZW1pbmcgZnVuY3Rpb25hbGl0eSB0byBjb21wb25lbnRzXG4gKiBAcGFyYW0ge2FueX0gc3VwZXJjbGFzcyBBY2NlcHRzIGEgc3VwZXJjbGFzcyBhbmQgY3JlYXRlcyBhIG5ldyBzdWJjbGFzcyBmcm9tIGl0XG4gKiBAcmV0dXJucyB7YW55fSBUaGUgZXh0ZW5kZWQgb2JqZWN0XG4gKi9cbmNvbnN0IElkc1RoZW1lTWl4aW4gPSA8VCBleHRlbmRzIENvbnN0cmFpbnRzPihzdXBlcmNsYXNzOiBUKSA9PiBjbGFzcyBleHRlbmRzIHN1cGVyY2xhc3Mge1xuICBzd2l0Y2hlcjogSWRzVGhlbWVTd2l0Y2hlciB8IG51bGwgPSBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKC4uLmFyZ3M6IGFueVtdKSB7XG4gICAgc3VwZXIoLi4uYXJncyk7XG4gIH1cblxuICBzdGF0aWMgZ2V0IGF0dHJpYnV0ZXMoKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIC4uLihzdXBlcmNsYXNzIGFzIGFueSkuYXR0cmlidXRlcyxcbiAgICAgIGF0dHJpYnV0ZXMuTU9ERVxuICAgIF07XG4gIH1cblxuICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaz8uKCk7XG4gICAgdGhpcy5pbml0VGhlbWVIYW5kbGVycygpO1xuICB9XG5cbiAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgdGhpcy5vZmZFdmVudCgndGhlbWVjaGFuZ2VkJyk7XG4gICAgdGhpcy5zd2l0Y2hlciA9IG51bGw7XG4gICAgc3VwZXIuZGlzY29ubmVjdGVkQ2FsbGJhY2s/LigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXQgdGhlIG1peGluIGV2ZW50cyBhbmQgc3RhdGVzXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBpbml0VGhlbWVIYW5kbGVycygpIHtcbiAgICB0aGlzLnN3aXRjaGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcjxJZHNUaGVtZVN3aXRjaGVyPignaWRzLXRoZW1lLXN3aXRjaGVyJyk7XG4gICAgaWYgKCF0aGlzLnN3aXRjaGVyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5tb2RlID0gdGhpcy5zd2l0Y2hlci5tb2RlO1xuXG4gICAgdGhpcy5vbkV2ZW50KCd0aGVtZWNoYW5nZWQnLCB0aGlzLnN3aXRjaGVyLCAoZTogQ3VzdG9tRXZlbnQpID0+IHtcbiAgICAgIHRoaXMubW9kZSA9IGUuZGV0YWlsLm1vZGU7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBtb2RlIG9mIHRoZSBjdXJyZW50IHRoZW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSBUaGUgbW9kZSB2YWx1ZSBmb3IgZXhhbXBsZTogbGlnaHQsIGRhcmssIG9yIGNvbnRyYXN0XG4gICAqL1xuICBzZXQgbW9kZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgaWYgKCFUSEVNRV9NT0RFUy5pbmNsdWRlcyh2YWx1ZSkpIHZhbHVlID0gJ2xpZ2h0JztcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnbW9kZScsIHZhbHVlKTtcbiAgICB0aGlzLmNvbnRhaW5lcj8uc2V0QXR0cmlidXRlKCdtb2RlJywgdmFsdWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgbW9kZSBvZiB0aGUgY3VycmVudCB0aGVtZVxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBsaWdodCwgZGFyaywgb3IgY29udHJhc3RcbiAgICovXG4gIGdldCBtb2RlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlKCdtb2RlJykgfHwgJ2xpZ2h0JztcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgSWRzVGhlbWVNaXhpbjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/mixins/ids-theme-mixin/ids-theme-mixin.ts\n");

/***/ }),

/***/ "./src/components/ids-treemap/ids-treemap.scss":
/*!*****************************************************!*\
  !*** ./src/components/ids-treemap/ids-treemap.scss ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n\n        const styles = `/* Ids Text Css */ /* Sass scss styles. Keep Base very small */\n/* Global variables (might want these to become tokens) */\n:host {\n  display: block;\n  width: 100%;\n}\n\ntext {\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  display: block;\n  font-weight: 400;\n  font-family: source sans pro, helvetica, arial, sans-serif;\n  margin: 0;\n  font-size: 16px;\n  color: currentColor;\n}\n\nsvg {\n  stroke: var(--ids-color-palette-white);\n}\n\n.treemap-title {\n  background-color: var(--ids-color-palette-slate-60);\n  padding: 8px;\n  color: var(--ids-color-palette-white);\n  text-align: center;\n}\n\n:host([mode=dark]) .treemap-title {\n  background-color: var(--ids-color-palette-slate-30);\n  color: var(--ids-color-palette-slate-100);\n}\n:host([mode=dark]) svg {\n  stroke: var(--ids-color-palette-slate-90);\n}\n\n:host([mode=contrast]) .treemap-title {\n  background-color: var(--ids-color-palette-slate-80);\n  color: var(--ids-color-palette-white);\n}\n:host([mode=contrast]) svg {\n  stroke: var(--ids-color-palette-slate-10);\n}`;\n        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (styles);\n    //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/ids-treemap/ids-treemap.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/getFullHash */
/******/ 	(() => {
/******/ 		__webpack_require__.h = () => ("919871523b4f16874939")
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"ids-treemap": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunkids_enterprise_wc"] = self["webpackChunkids_enterprise_wc"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	__webpack_require__.O(undefined, ["vendors-node_modules_webpack-dev-server_client_index_js_protocol_ws_3A_hostname_0_0_0_0_port_-ebf8ca","src_core_ids-attributes_ts-src_core_ids-decorators_ts-src_core_ids-element_ts","src_mixins_ids-events-mixin_ids-events-mixin_ts","src_components_ids-locale_ids-locale_ts"], () => (__webpack_require__("./node_modules/webpack-dev-server/client/index.js?protocol=ws%3A&hostname=0.0.0.0&port=4300&pathname=%2Fws&logging=error&overlay=true&reconnect=10&hot=false&live-reload=true")))
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["vendors-node_modules_webpack-dev-server_client_index_js_protocol_ws_3A_hostname_0_0_0_0_port_-ebf8ca","src_core_ids-attributes_ts-src_core_ids-decorators_ts-src_core_ids-element_ts","src_mixins_ids-events-mixin_ids-events-mixin_ts","src_components_ids-locale_ids-locale_ts"], () => (__webpack_require__("./src/components/ids-treemap/demos/index.ts")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;