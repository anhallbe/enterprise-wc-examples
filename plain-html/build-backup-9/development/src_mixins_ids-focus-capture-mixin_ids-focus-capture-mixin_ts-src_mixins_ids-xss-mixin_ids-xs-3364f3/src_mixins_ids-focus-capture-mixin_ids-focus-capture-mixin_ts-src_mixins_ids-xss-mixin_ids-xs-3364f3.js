"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkids_enterprise_wc"] = self["webpackChunkids_enterprise_wc"] || []).push([["src_mixins_ids-focus-capture-mixin_ids-focus-capture-mixin_ts-src_mixins_ids-xss-mixin_ids-xs-3364f3"],{

/***/ "./src/mixins/ids-focus-capture-mixin/ids-focus-capture-mixin.ts":
/*!***********************************************************************!*\
  !*** ./src/mixins/ids-focus-capture-mixin/ids-focus-capture-mixin.ts ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ids_focus_capture_mixin_default)\n/* harmony export */ });\n/* harmony import */ var _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/ids-attributes */ \"./src/core/ids-attributes.ts\");\n/* harmony import */ var _utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/ids-string-utils/ids-string-utils */ \"./src/utils/ids-string-utils/ids-string-utils.ts\");\n/* harmony import */ var _utils_ids_dom_utils_ids_dom_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/ids-dom-utils/ids-dom-utils */ \"./src/utils/ids-dom-utils/ids-dom-utils.ts\");\n\n\n\nconst FOCUS_CAPTURE_EVENTNAME = \"keydown.focus-capture\";\nconst IdsFocusCaptureMixin = (superclass) => class extends superclass {\n  constructor(...args) {\n    super(...args);\n  }\n  static get attributes() {\n    return [\n      ...superclass.attributes,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.CAPTURES_FOCUS,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.CYCLES_FOCUS,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.FOCUS_INLINE\n    ];\n  }\n  /**\n   * @property {Node} hostNode the top-level node responsible for hosting focus.\n   * This is normally `document` but can also be another component's Shadow Root.\n   */\n  #hostNode = document;\n  connectedCallback() {\n    super.connectedCallback?.();\n    if (this.hasAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.FOCUS_INLINE))\n      this.syncInline(true);\n  }\n  disconnectedCallback() {\n    super.disconnectedCallback?.();\n    this.#removeFocusEvents();\n    this.#hostNode = void 0;\n    this.#focusableElementsInDocument = null;\n  }\n  /**\n   * @property {boolean} capturesFocus If true, retains focus within the host component.\n   * If focus is attempted on an element outside of this one, it will be \"captured\" and\n   * placed on an element inside of this component.\n   */\n  #capturesFocus = false;\n  set capturesFocus(val) {\n    const currentVal = this.#capturesFocus;\n    const newVal = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_1__.stringToBool)(val);\n    if (currentVal !== newVal) {\n      this.#capturesFocus = newVal;\n      if (newVal) {\n        this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.CAPTURES_FOCUS, `${newVal}`);\n      } else {\n        this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.CAPTURES_FOCUS);\n      }\n      this.#updateFocusEvents();\n    }\n  }\n  get capturesFocus() {\n    return this.#capturesFocus;\n  }\n  /**\n   * @property {boolean} cyclesFocus If true, while `capturesFocus` is true, cycles the focus\n   * target element to the opposite end of the container.\n   */\n  #cyclesFocus = true;\n  set cyclesFocus(val) {\n    const currentVal = this.#cyclesFocus;\n    const newVal = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_1__.stringToBool)(val);\n    if (currentVal !== newVal) {\n      this.#cyclesFocus = newVal;\n      if (newVal) {\n        this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.CYCLES_FOCUS, `${newVal}`);\n        this.gainFocus();\n      } else {\n        this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.CYCLES_FOCUS);\n      }\n    }\n  }\n  get cyclesFocus() {\n    return this.#cyclesFocus;\n  }\n  /**\n   * Connects the focus event to this component\n   * @returns {void}\n   */\n  #attachFocusEvents() {\n    const keydownEventHandler = (e) => {\n      const isOnFirst = this.#hostNode.activeElement?.isEqualNode(this.firstFocusableElement);\n      const isOnLast = this.#hostNode.activeElement?.isEqualNode(this.lastFocusableElement);\n      switch (e.key) {\n        case \"Tab\":\n          if (isOnFirst && e.shiftKey) {\n            e.preventDefault();\n            requestAnimationFrame(() => {\n              const targetElem = this.cyclesFocus ? this.lastFocusableElement : this.firstFocusableElement;\n              targetElem.focus();\n            });\n          }\n          if (isOnLast && !e.shiftKey) {\n            e.preventDefault();\n            requestAnimationFrame(() => {\n              const targetElem = this.cyclesFocus ? this.firstFocusableElement : this.lastFocusableElement;\n              targetElem.focus();\n            });\n          }\n          break;\n        default:\n          break;\n      }\n      return true;\n    };\n    this.onEvent(FOCUS_CAPTURE_EVENTNAME, this.#hostNode, keydownEventHandler.bind(this));\n  }\n  /**\n   * Disconnects the focus event from this component\n   * @returns {void}\n   */\n  #removeFocusEvents() {\n    this.offEvent(FOCUS_CAPTURE_EVENTNAME);\n  }\n  /**\n   * Adds/Removes the focus event based on component state\n   */\n  #updateFocusEvents() {\n    this.#removeFocusEvents();\n    if (this.capturesFocus) {\n      this.gainFocus();\n      this.#attachFocusEvents();\n    }\n  }\n  #focusableSelectors = [\n    \"button\",\n    \"ids-button\",\n    \"ids-dropdown\",\n    \"ids-menu-button\",\n    \"ids-modal-button\",\n    \"ids-toggle-button\",\n    \"[href]\",\n    \"input\",\n    \"ids-input\",\n    \"ids-checkbox\",\n    \"ids-radio\",\n    \"ids-switch\",\n    \"select\",\n    \"textarea\",\n    \"ids-textarea\",\n    '[tabindex]:not([tabindex=\"-1\"]'\n  ];\n  get focusableSelectors() {\n    return this.#focusableSelectors;\n  }\n  set focusableSelectors(val) {\n    if (Array.isArray(val)) {\n      this.#focusableSelectors = val;\n    }\n  }\n  /**\n   * @property {Array<HTMLElement>} focusable reference to all focusable elements on the document\n   */\n  #focusableElementsInDocument = [];\n  /**\n   * @readonly\n   * @returns {Array<HTMLElement>} all possible focusable elements within Light DOM on the current page\n   */\n  get focusableElementsInDocument() {\n    if (!this.#focusableElementsInDocument.length && this.focusableSelectors.length)\n      this.refreshFocusableElements();\n    return this.#focusableElementsInDocument;\n  }\n  refreshFocusableElements() {\n    const selectorStr = this.focusableSelectors.join(\", \");\n    this.#focusableElementsInDocument = [...this.#hostNode.querySelectorAll(selectorStr)].filter((i) => !i.hasAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.HIDDEN));\n  }\n  /**\n   * @readonly\n   * @returns {Array<HTMLElement>} focusable elements inside of this WebComponent's Light DOM\n   */\n  get focusableElements() {\n    if (this.focusInline)\n      return this.focusableElementsInDocument;\n    return this.focusableElementsInDocument.filter((i) => this.contains(i));\n  }\n  /**\n   * @readonly\n   * @returns {HTMLElement} the first focusable child element inside this component\n   */\n  get firstFocusableElement() {\n    return this.focusableElements[0];\n  }\n  /**\n   * @readonly\n   * @returns {HTMLElement} the next focusable child element inside this component\n   */\n  get nextFocusableElement() {\n    if (!this.focusableElements.length) {\n      return void 0;\n    }\n    const thisIndex = this.focusableElementsInDocument.indexOf(this.#hostNode.activeElement);\n    const nextElem = this.focusableElementsInDocument[thisIndex + 1];\n    if (!this.contains(nextElem) && this.cyclesFocus) {\n      return this.firstFocusableElement;\n    }\n    return nextElem;\n  }\n  /**\n   * @readonly\n   * @returns {HTMLElement} the previous focusable child element inside this component\n   */\n  get previousFocusableElement() {\n    if (!this.focusableElements.length) {\n      return void 0;\n    }\n    const thisIndex = this.focusableElementsInDocument.indexOf(this.#hostNode.activeElement);\n    const prevElem = this.focusableElementsInDocument[thisIndex - 1];\n    if (!this.contains(prevElem) && this.cyclesFocus) {\n      return this.lastFocusableElement;\n    }\n    return prevElem;\n  }\n  /**\n   * @readonly\n   * @returns {HTMLElement} the last focusable child element inside this component\n   */\n  get lastFocusableElement() {\n    return this.focusableElements.slice(-1)[0];\n  }\n  /**\n   * Focuses the first-possible element within the Modal\n   * @param {number|string} index the desired focusable element index to use\n   * @returns {void}\n   */\n  setFocus(index = 0) {\n    const focusable = this.focusableElements;\n    const focusedEl = this.#hostNode.activeElement;\n    const focusedIndex = this.focusableElements.indexOf(focusedEl);\n    let safeIndex = 0;\n    if (focusable.length) {\n      switch (index) {\n        case \"last\":\n          safeIndex = focusable.length - 1;\n          break;\n        case \"first\":\n        case \"\":\n          break;\n        default:\n          safeIndex = typeof index === \"string\" ? parseInt(index) : index;\n          break;\n      }\n      requestAnimationFrame(() => {\n        focusable[safeIndex].focus();\n      });\n    }\n    return focusedIndex === safeIndex;\n  }\n  /**\n   * Retrieves focus from elements outside of this one, and attaches\n   * focus to a specified element index.\n   * @param {number|string} index the desired focusable element index to use\n   * @returns {void}\n   */\n  gainFocus(index = 0) {\n    if (!this.contains(this.#hostNode.activeElement)) {\n      this.setFocus(index);\n    }\n  }\n  /**\n   * Sets the correct host node to use for focus detection\n   * @param {boolean | null} val if truthy, uses this component's shadow root for focus detection\n   */\n  syncInline(val) {\n    if (val)\n      this.#hostNode = this.shadowRoot;\n    else\n      this.#hostNode = (0,_utils_ids_dom_utils_ids_dom_utils__WEBPACK_IMPORTED_MODULE_2__.getClosestContainerNode)(this);\n  }\n  /**\n   * @param {boolean | string} val true if focus detection should only occur within this component's shadow root\n   */\n  set focusInline(val) {\n    const newValue = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_1__.stringToBool)(val);\n    if (newValue) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.FOCUS_INLINE, \"true\");\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.FOCUS_INLINE);\n    }\n    this.syncInline(newValue);\n  }\n  /**\n   * @returns {boolean} true if this component should only capture focus within its shadow root\n   */\n  get focusInline() {\n    return this.hasAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.FOCUS_INLINE);\n  }\n};\nvar ids_focus_capture_mixin_default = IdsFocusCaptureMixin;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/mixins/ids-focus-capture-mixin/ids-focus-capture-mixin.ts\n");

/***/ }),

/***/ "./src/mixins/ids-xss-mixin/ids-xss-mixin.ts":
/*!***************************************************!*\
  !*** ./src/mixins/ids-xss-mixin/ids-xss-mixin.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ids_xss_mixin_default)\n/* harmony export */ });\n/* harmony import */ var _utils_ids_xss_utils_ids_xss_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/ids-xss-utils/ids-xss-utils */ \"./src/utils/ids-xss-utils/ids-xss-utils.ts\");\n/* harmony import */ var _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/ids-attributes */ \"./src/core/ids-attributes.ts\");\n\n\nconst IdsXssMixin = (superclass) => class extends superclass {\n  constructor(...args) {\n    super(...args);\n    if (!this.state) {\n      this.state = {};\n    }\n    this.state.xssIgnoredTags = \"<a><b><br><br/><del><em><i><ins><mark><small><strong><sub><sup>\";\n  }\n  static get attributes() {\n    return [\n      ...superclass.attributes,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.XSS_IGNORED_TAGS\n    ];\n  }\n  /**\n   * @returns {void}\n   */\n  connectedCallback() {\n    super.connectedCallback?.();\n    if (this.hasAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.XSS_IGNORED_TAGS)) {\n      this.xssIgnoredTags = this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.XSS_IGNORED_TAGS);\n    }\n  }\n  /**\n   * @param {string} val string containing a list of allowed HTML Tags\n   */\n  set xssIgnoredTags(val) {\n    if (typeof val === \"string\" && val !== this.state.xssIgnoredTags) {\n      this.state.xssIgnoredTags = (0,_utils_ids_xss_utils_ids_xss_utils__WEBPACK_IMPORTED_MODULE_0__.sanitizeHTML)(val);\n    }\n  }\n  /**\n   * @returns {string} containing a list of HTML tags that will be ignored\n   *   by this component when processing for XSS attacks\n   */\n  get xssIgnoredTags() {\n    return this.state.xssIgnoredTags;\n  }\n  /**\n   * Uses the stored list of ignored HTML tags while processing a text string for XSS attacks.\n   * @param {string} str the string to check\n   * @returns {string} the \"fixed\" string with XSS attack vectors removed\n   */\n  xssSanitize(str) {\n    const ignored = this.xssIgnoredTags;\n    if (ignored?.length) {\n      return (0,_utils_ids_xss_utils_ids_xss_utils__WEBPACK_IMPORTED_MODULE_0__.stripTags)(str, ignored);\n    }\n    return (0,_utils_ids_xss_utils_ids_xss_utils__WEBPACK_IMPORTED_MODULE_0__.stripHTML)(str);\n  }\n};\nvar ids_xss_mixin_default = IdsXssMixin;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbWl4aW5zL2lkcy14c3MtbWl4aW4vaWRzLXhzcy1taXhpbi50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFJTztBQUNvQjtBQUczQixNQUFNLGNBQWMsQ0FBK0IsZUFBa0IsY0FBYyxXQUFXO0FBQUEsRUFDNUYsZUFBZSxNQUFhO0FBQzFCLFVBQU0sR0FBRyxJQUFJO0FBQ2IsUUFBSSxDQUFDLEtBQUssT0FBTztBQUNmLFdBQUssUUFBUSxDQUFDO0FBQUEsSUFDaEI7QUFDQSxTQUFLLE1BQU0saUJBQWlCO0FBQUEsRUFDOUI7QUFBQSxFQUVBLFdBQVcsYUFBYTtBQUN0QixXQUFPO0FBQUEsTUFDTCxHQUFJLFdBQW1CO0FBQUEsTUFDdkIsNkVBQTJCO0FBQWhCLElBQ2I7QUFBQSxFQUNGO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFLQSxvQkFBb0I7QUFDbEIsVUFBTSxvQkFBb0I7QUFFMUIsUUFBSSxLQUFLLGFBQWEsNkVBQTJCLEdBQUc7QUFDbEQsV0FBSyxpQkFBaUIsS0FBSyxhQUFhLDZFQUEyQjtBQUFBLElBQ3JFO0FBQUEsRUFDRjtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS0EsSUFBSSxlQUFlLEtBQUs7QUFDdEIsUUFBSSxPQUFPLFFBQVEsWUFBWSxRQUFRLEtBQUssTUFBTSxnQkFBZ0I7QUFDaEUsV0FBSyxNQUFNLGlCQUFpQixnRkFBWSxDQUFDLEdBQUc7QUFBQSxJQUM5QztBQUFBLEVBQ0Y7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsSUFBSSxpQkFBaUI7QUFDbkIsV0FBTyxLQUFLLE1BQU07QUFBQSxFQUNwQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU9BLFlBQVksS0FBYTtBQUN2QixVQUFNLFVBQVUsS0FBSztBQUNyQixRQUFJLFNBQVMsUUFBUTtBQUNuQixhQUFPLDZFQUFTLENBQUMsS0FBSyxPQUFPO0FBQUEsSUFDL0I7QUFDQSxXQUFPLDZFQUFTLENBQUMsR0FBRztBQUFBLEVBQ3RCO0FBQ0Y7QUFFQSxJQUFPLHdCQUFRIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaWRzLWVudGVycHJpc2Utd2MvLi9zcmMvbWl4aW5zL2lkcy14c3MtbWl4aW4vaWRzLXhzcy1taXhpbi50cz8zZTI2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIHNhbml0aXplSFRNTCxcbiAgc3RyaXBIVE1MLFxuICBzdHJpcFRhZ3Ncbn0gZnJvbSAnLi4vLi4vdXRpbHMvaWRzLXhzcy11dGlscy9pZHMteHNzLXV0aWxzJztcbmltcG9ydCB7IGF0dHJpYnV0ZXMgfSBmcm9tICcuLi8uLi9jb3JlL2lkcy1hdHRyaWJ1dGVzJztcbmltcG9ydCB7IElkc0Jhc2VDb25zdHJ1Y3RvciB9IGZyb20gJy4uLy4uL2NvcmUvaWRzLWVsZW1lbnQnO1xuXG5jb25zdCBJZHNYc3NNaXhpbiA9IDxUIGV4dGVuZHMgSWRzQmFzZUNvbnN0cnVjdG9yPihzdXBlcmNsYXNzOiBUKSA9PiBjbGFzcyBleHRlbmRzIHN1cGVyY2xhc3Mge1xuICBjb25zdHJ1Y3RvciguLi5hcmdzOiBhbnlbXSkge1xuICAgIHN1cGVyKC4uLmFyZ3MpO1xuICAgIGlmICghdGhpcy5zdGF0ZSkge1xuICAgICAgdGhpcy5zdGF0ZSA9IHt9O1xuICAgIH1cbiAgICB0aGlzLnN0YXRlLnhzc0lnbm9yZWRUYWdzID0gJzxhPjxiPjxicj48YnIvPjxkZWw+PGVtPjxpPjxpbnM+PG1hcms+PHNtYWxsPjxzdHJvbmc+PHN1Yj48c3VwPic7XG4gIH1cblxuICBzdGF0aWMgZ2V0IGF0dHJpYnV0ZXMoKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIC4uLihzdXBlcmNsYXNzIGFzIGFueSkuYXR0cmlidXRlcyxcbiAgICAgIGF0dHJpYnV0ZXMuWFNTX0lHTk9SRURfVEFHU1xuICAgIF07XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaz8uKCk7XG5cbiAgICBpZiAodGhpcy5oYXNBdHRyaWJ1dGUoYXR0cmlidXRlcy5YU1NfSUdOT1JFRF9UQUdTKSkge1xuICAgICAgdGhpcy54c3NJZ25vcmVkVGFncyA9IHRoaXMuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZXMuWFNTX0lHTk9SRURfVEFHUyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWwgc3RyaW5nIGNvbnRhaW5pbmcgYSBsaXN0IG9mIGFsbG93ZWQgSFRNTCBUYWdzXG4gICAqL1xuICBzZXQgeHNzSWdub3JlZFRhZ3ModmFsKSB7XG4gICAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnICYmIHZhbCAhPT0gdGhpcy5zdGF0ZS54c3NJZ25vcmVkVGFncykge1xuICAgICAgdGhpcy5zdGF0ZS54c3NJZ25vcmVkVGFncyA9IHNhbml0aXplSFRNTCh2YWwpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBjb250YWluaW5nIGEgbGlzdCBvZiBIVE1MIHRhZ3MgdGhhdCB3aWxsIGJlIGlnbm9yZWRcbiAgICogICBieSB0aGlzIGNvbXBvbmVudCB3aGVuIHByb2Nlc3NpbmcgZm9yIFhTUyBhdHRhY2tzXG4gICAqL1xuICBnZXQgeHNzSWdub3JlZFRhZ3MoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUueHNzSWdub3JlZFRhZ3M7XG4gIH1cblxuICAvKipcbiAgICogVXNlcyB0aGUgc3RvcmVkIGxpc3Qgb2YgaWdub3JlZCBIVE1MIHRhZ3Mgd2hpbGUgcHJvY2Vzc2luZyBhIHRleHQgc3RyaW5nIGZvciBYU1MgYXR0YWNrcy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0ciB0aGUgc3RyaW5nIHRvIGNoZWNrXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IHRoZSBcImZpeGVkXCIgc3RyaW5nIHdpdGggWFNTIGF0dGFjayB2ZWN0b3JzIHJlbW92ZWRcbiAgICovXG4gIHhzc1Nhbml0aXplKHN0cjogc3RyaW5nKSB7XG4gICAgY29uc3QgaWdub3JlZCA9IHRoaXMueHNzSWdub3JlZFRhZ3M7XG4gICAgaWYgKGlnbm9yZWQ/Lmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHN0cmlwVGFncyhzdHIsIGlnbm9yZWQpO1xuICAgIH1cbiAgICByZXR1cm4gc3RyaXBIVE1MKHN0cik7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IElkc1hzc01peGluO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/mixins/ids-xss-mixin/ids-xss-mixin.ts\n");

/***/ })

}]);