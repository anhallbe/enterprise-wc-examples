"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkids_enterprise_wc"] = self["webpackChunkids_enterprise_wc"] || []).push([["src_components_ids-upload-advanced_ids-upload-advanced_ts-src_mixins_ids-hitbox-mixin_ids-hit-bca870"],{

/***/ "./src/components/ids-alert/ids-alert.ts":
/*!***********************************************!*\
  !*** ./src/components/ids-alert/ids-alert.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ IdsAlert)\n/* harmony export */ });\n/* harmony import */ var _core_ids_decorators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/ids-decorators */ \"./src/core/ids-decorators.ts\");\n/* harmony import */ var _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/ids-attributes */ \"./src/core/ids-attributes.ts\");\n/* harmony import */ var _utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/ids-string-utils/ids-string-utils */ \"./src/utils/ids-string-utils/ids-string-utils.ts\");\n/* harmony import */ var _ids_icon_ids_icon_attributes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ids-icon/ids-icon-attributes */ \"./src/components/ids-icon/ids-icon-attributes.ts\");\n/* harmony import */ var _mixins_ids_events_mixin_ids_events_mixin__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../mixins/ids-events-mixin/ids-events-mixin */ \"./src/mixins/ids-events-mixin/ids-events-mixin.ts\");\n/* harmony import */ var _mixins_ids_theme_mixin_ids_theme_mixin__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../mixins/ids-theme-mixin/ids-theme-mixin */ \"./src/mixins/ids-theme-mixin/ids-theme-mixin.ts\");\n/* harmony import */ var _mixins_ids_tooltip_mixin_ids_tooltip_mixin__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../mixins/ids-tooltip-mixin/ids-tooltip-mixin */ \"./src/mixins/ids-tooltip-mixin/ids-tooltip-mixin.ts\");\n/* harmony import */ var _core_ids_element__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../core/ids-element */ \"./src/core/ids-element.ts\");\n/* harmony import */ var _ids_icon_ids_icon__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../ids-icon/ids-icon */ \"./src/components/ids-icon/ids-icon.ts\");\n/* harmony import */ var _ids_alert_scss__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./ids-alert.scss */ \"./src/components/ids-alert/ids-alert.scss\");\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result)\n    __defProp(target, key, result);\n  return result;\n};\n\n\n\n\n\n\n\n\n\n\nlet IdsAlert = class extends (0,_mixins_ids_tooltip_mixin_ids_tooltip_mixin__WEBPACK_IMPORTED_MODULE_6__[\"default\"])((0,_mixins_ids_theme_mixin_ids_theme_mixin__WEBPACK_IMPORTED_MODULE_5__[\"default\"])((0,_mixins_ids_events_mixin_ids_events_mixin__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(_core_ids_element__WEBPACK_IMPORTED_MODULE_7__[\"default\"]))) {\n  constructor() {\n    super();\n  }\n  connectedCallback() {\n    super.connectedCallback();\n  }\n  /**\n   * Setup some special config for the tooltip\n   * @param {any} tooltip the tooltip element\n   */\n  beforeTooltipShow(tooltip) {\n    if (tooltip.popup) {\n      const hasColor = this.toolTipTarget.getAttribute(\"color\");\n      tooltip.popup?.container?.classList.add(`${hasColor || this.toolTipTarget.getAttribute(\"icon\")}-color`);\n      tooltip.popup.y = 12;\n    }\n  }\n  /**\n   * Return the attributes we handle as getters/setters\n   * @returns {Array} The propertires in an array\n   */\n  static get attributes() {\n    return [\n      ...super.attributes,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.COLOR,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ICON,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.TOOLTIP,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SIZE\n    ];\n  }\n  /**\n   * Create the Template for the contents\n   * @returns {string} The template\n   */\n  template() {\n    const cssClass = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(this.disabled) ? ' class=\"disabled\"' : \"\";\n    return `<ids-icon size=\"${this.size}\"${cssClass} icon=\"${this.icon}\" part=\"icon\"></ids-icon>`;\n  }\n  /**\n   * Set the alert color\n   * @param {string|null} value The color to use between: error, success, info, alert, amber, amethyst\n   */\n  set color(value) {\n    if (value) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.COLOR, value);\n      this.shadowRoot?.querySelector(\"ids-icon\")?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.COLOR, value);\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.COLOR);\n    }\n  }\n  get color() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.COLOR);\n  }\n  /**\n   * Sets to disabled\n   * @param {boolean|string} value If true will set `disabled` attribute\n   */\n  set disabled(value) {\n    const icon = this.shadowRoot?.querySelector(\"ids-icon\");\n    const val = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(value);\n    if (val) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED, val.toString());\n      icon?.classList.add(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED);\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED);\n      icon?.classList.remove(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED);\n    }\n  }\n  get disabled() {\n    return (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED));\n  }\n  /**\n   * Return the icon of the alert.\n   * @returns {string | null} the path data\n   */\n  get icon() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ICON);\n  }\n  /**\n   * Set the icon\n   * @param {string | null} value The Icon Type [success, info, error, warning]\n   */\n  set icon(value) {\n    if (value) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ICON, value);\n      this.shadowRoot?.querySelector(\"ids-icon\")?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ICON, value);\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ICON);\n    }\n  }\n  /**\n   * Return the size. May be large, normal/medium or small\n   * @returns {string} the size\n   */\n  get size() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SIZE) || \"normal\";\n  }\n  set size(value) {\n    if (value && _ids_icon_ids_icon_attributes__WEBPACK_IMPORTED_MODULE_3__.sizes[value]) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SIZE, value);\n      this.container?.querySelector(\"ids-icon\")?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SIZE, value);\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SIZE);\n      this.container?.querySelector(\"ids-icon\")?.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SIZE);\n    }\n  }\n};\nIdsAlert = __decorateClass([\n  (0,_core_ids_decorators__WEBPACK_IMPORTED_MODULE_0__.customElement)(\"ids-alert\"),\n  (0,_core_ids_decorators__WEBPACK_IMPORTED_MODULE_0__.scss)(_ids_alert_scss__WEBPACK_IMPORTED_MODULE_9__[\"default\"])\n], IdsAlert);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/ids-alert/ids-alert.ts\n");

/***/ }),

/***/ "./src/components/ids-progress-bar/ids-progress-bar.ts":
/*!*************************************************************!*\
  !*** ./src/components/ids-progress-bar/ids-progress-bar.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ IdsProgressBar)\n/* harmony export */ });\n/* harmony import */ var _core_ids_decorators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/ids-decorators */ \"./src/core/ids-decorators.ts\");\n/* harmony import */ var _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/ids-attributes */ \"./src/core/ids-attributes.ts\");\n/* harmony import */ var _utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/ids-string-utils/ids-string-utils */ \"./src/utils/ids-string-utils/ids-string-utils.ts\");\n/* harmony import */ var _mixins_ids_events_mixin_ids_events_mixin__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../mixins/ids-events-mixin/ids-events-mixin */ \"./src/mixins/ids-events-mixin/ids-events-mixin.ts\");\n/* harmony import */ var _core_ids_element__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/ids-element */ \"./src/core/ids-element.ts\");\n/* harmony import */ var _ids_progress_bar_scss__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ids-progress-bar.scss */ \"./src/components/ids-progress-bar/ids-progress-bar.scss\");\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result)\n    __defProp(target, key, result);\n  return result;\n};\n\n\n\n\n\n\nconst Base = (0,_mixins_ids_events_mixin_ids_events_mixin__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(\n  _core_ids_element__WEBPACK_IMPORTED_MODULE_4__[\"default\"]\n);\nconst ID = \"ids-progress-bar-id\";\nconst MAX = \"100\";\nconst VALUE = \"0\";\nlet IdsProgressBar = class extends Base {\n  constructor() {\n    super();\n  }\n  /**\n   * Return the attributes we handle as getters/setters\n   * @returns {Array} The attributes in an array\n   */\n  static get attributes() {\n    return [\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.LABEL,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.LABEL_AUDIBLE,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.MAX,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.VALUE\n    ];\n  }\n  /**\n   * Inner template contents\n   * @returns {string} The template\n   */\n  template() {\n    const audible = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(this.labelAudible) ? ' audible=\"true\"' : \"\";\n    let rootClass = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(this.disabled) ? \" disabled\" : \"\";\n    rootClass += (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(this.labelAudible) ? \" label-audible\" : \"\";\n    return `\n      <div class=\"ids-progress-bar${rootClass}\">\n        <label for=\"${ID}\" class=\"progress-label\">\n          <ids-text${audible}>${this.label}</ids-text>\n        </label>\n        <progress class=\"progress-bar\" id=\"${ID}\" max=\"${this.max}\" value=\"${this.value}\">${this.completed}</progress>\n      </div>`;\n  }\n  /**\n   * Update value\n   * @private\n   * @param {string} val the value\n   * @returns {void}\n   */\n  #updateValue(val) {\n    const bar = this.shadowRoot?.querySelector(\".progress-bar\");\n    if (bar) {\n      const v = bar.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.VALUE);\n      if (val !== null && v !== val.toString()) {\n        bar.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.VALUE, val.toString());\n        bar.innerHTML = this.completed;\n        this.triggerEvent(\"updated\", this, {\n          detail: {\n            elem: this,\n            completed: this.completed,\n            max: this.max,\n            value: this.value\n          }\n        });\n      }\n    }\n  }\n  /**\n   * Get calculated completed value\n   * @returns {string} The completed value and percentage sign\n   */\n  get completed() {\n    const partial = parseFloat(this.value);\n    const total = parseFloat(this.max);\n    return `${Math.round(100 * partial / total)}%`;\n  }\n  /**\n   * Sets the component to disabled\n   * @param {boolean|string} value If true will set `disabled` attribute\n   */\n  set disabled(value) {\n    const rootEl = this.shadowRoot?.querySelector(\".ids-progress-bar\");\n    const val = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(value);\n    if (val) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED, val.toString());\n      rootEl?.classList.add(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED);\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED);\n      rootEl?.classList.remove(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED);\n    }\n  }\n  get disabled() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED);\n  }\n  /**\n   * Set the `label` text\n   * @param {string} value of the `label` text property\n   */\n  set label(value) {\n    if (value) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.LABEL, value.toString());\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.LABEL);\n    }\n    const labelText = this.shadowRoot?.querySelector(\".progress-label ids-text\");\n    if (labelText) {\n      labelText.innerHTML = value ? value.toString() : \"\";\n    }\n  }\n  get label() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.LABEL) || \"\";\n  }\n  /**\n   * Sets to label text as audible\n   * @param {boolean|string} value If true will set `label-audible` attribute\n   */\n  set labelAudible(value) {\n    const rootEl = this.shadowRoot?.querySelector(\".ids-progress-bar\");\n    const labelText = this.shadowRoot?.querySelector(\".progress-label ids-text\");\n    const val = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(value);\n    if (val) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.LABEL_AUDIBLE, val.toString());\n      rootEl?.classList.add(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.LABEL_AUDIBLE);\n      labelText?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.AUDIBLE, val.toString());\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.LABEL_AUDIBLE);\n      rootEl?.classList.remove(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.LABEL_AUDIBLE);\n      labelText?.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.AUDIBLE);\n    }\n  }\n  get labelAudible() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.LABEL_AUDIBLE);\n  }\n  /**\n   * Set the `max` attribute of progress\n   * @param {string} value of the `max` property\n   */\n  set max(value) {\n    const bar = this.shadowRoot?.querySelector(\".progress-bar\");\n    const v = (value || MAX).toString();\n    this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.MAX, v);\n    bar?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.MAX, v);\n  }\n  get max() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.MAX) || MAX;\n  }\n  /**\n   * Set the `value` attribute of progress\n   * @param {string} val the value property\n   */\n  set value(val) {\n    this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.VALUE, (val || VALUE).toString());\n    this.#updateValue(val);\n  }\n  get value() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.VALUE) || VALUE;\n  }\n};\nIdsProgressBar = __decorateClass([\n  (0,_core_ids_decorators__WEBPACK_IMPORTED_MODULE_0__.customElement)(\"ids-progress-bar\"),\n  (0,_core_ids_decorators__WEBPACK_IMPORTED_MODULE_0__.scss)(_ids_progress_bar_scss__WEBPACK_IMPORTED_MODULE_5__[\"default\"])\n], IdsProgressBar);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9pZHMtcHJvZ3Jlc3MtYmFyL2lkcy1wcm9ncmVzcy1iYXIudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQW9DO0FBQ1Q7QUFDRTtBQUNGO0FBQ0o7QUFFSjtBQUVuQixNQUFNLE9BQU8scUZBQWM7QUFBZCxFQUNYLHlEQUFVO0FBQ1o7QUFHQSxNQUFNLEtBQUs7QUFDWCxNQUFNLE1BQU07QUFDWixNQUFNLFFBQVE7QUFVZCxJQUFxQixpQkFBckIsY0FBNEMsS0FBSztBQUFBLEVBQy9DLGNBQWM7QUFDWixVQUFNO0FBQUEsRUFDUjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNQSxXQUFXLGFBQTRCO0FBQ3JDLFdBQU87QUFBQSxNQUNMLHFFQUFtQjtBQUFSLE1BQ1gsa0VBQWdCO0FBQUwsTUFDWCwwRUFBd0I7QUFBYixNQUNYLGdFQUFjO0FBQUgsTUFDWCxrRUFBZ0I7QUFBTCxJQUNiO0FBQUEsRUFDRjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNQSxXQUFtQjtBQUNqQixVQUFNLFVBQVUsc0ZBQVksQ0FBQyxLQUFLLFlBQVksSUFBSSxvQkFBb0I7QUFDdEUsUUFBSSxZQUFZLHNGQUFZLENBQUMsS0FBSyxRQUFRLElBQUksY0FBYztBQUM1RCxpQkFBYSxzRkFBWSxDQUFDLEtBQUssWUFBWSxJQUFJLG1CQUFtQjtBQUNsRSxXQUFPO0FBQUEsb0NBQ3lCO0FBQUEsc0JBQ2Q7QUFBQSxxQkFDRCxXQUFXLEtBQUs7QUFBQTtBQUFBLDZDQUVRLFlBQVksS0FBSyxlQUFlLEtBQUssVUFBVSxLQUFLO0FBQUE7QUFBQSxFQUUvRjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBUUEsYUFBYSxLQUFtQjtBQUM5QixVQUFNLE1BQU0sS0FBSyxZQUFZLGNBQWMsZUFBZTtBQUMxRCxRQUFJLEtBQUs7QUFDUCxZQUFNLElBQUksSUFBSSxhQUFhLGtFQUFnQjtBQUMzQyxVQUFJLFFBQVEsUUFB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QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTXJFLElBQUksTUFBTSxLQUFhO0FBQ3JCLFNBQUssYUFBYSxrRUFBZ0IsR0FBRyxPQUFPLE9BQU8sU0FBUyxDQUFDO0FBQzdELFNBQUssYUFBYSxHQUFHO0FBQUEsRUFDdkI7QUFBQSxFQUVBLElBQUksUUFBZ0I7QUFBRSxXQUFPLEtBQUssYUFBYSxrRUFBZ0IsS0FBSztBQUFBLEVBQU87QUFDN0U7QUEzSnFCLGlCQUFyQjtBQUFBLEVBRkMsbUVBQWEsQ0FBQyxrQkFBa0I7QUFBQSxFQUNoQywwREFBSSxDQUFDLDhEQUFNO0FBQUEsR0FDUyIsInNvdXJjZXMiOlsid2VicGFjazovL2lkcy1lbnRlcnByaXNlLXdjLy4vc3JjL2NvbXBvbmVudHMvaWRzLXByb2dyZXNzLWJhci9pZHMtcHJvZ3Jlc3MtYmFyLnRzPzMyZDQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3VzdG9tRWxlbWVudCwgc2NzcyB9IGZyb20gJy4uLy4uL2NvcmUvaWRzLWRlY29yYXRvcnMnO1xuaW1wb3J0IHsgYXR0cmlidXRlcyB9IGZyb20gJy4uLy4uL2NvcmUvaWRzLWF0dHJpYnV0ZXMnO1xuaW1wb3J0IHsgc3RyaW5nVG9Cb29sIH0gZnJvbSAnLi4vLi4vdXRpbHMvaWRzLXN0cmluZy11dGlscy9pZHMtc3RyaW5nLXV0aWxzJztcbmltcG9ydCBJZHNFdmVudHNNaXhpbiBmcm9tICcuLi8uLi9taXhpbnMvaWRzLWV2ZW50cy1taXhpbi9pZHMtZXZlbnRzLW1peGluJztcbmltcG9ydCBJZHNFbGVtZW50IGZyb20gJy4uLy4uL2NvcmUvaWRzLWVsZW1lbnQnO1xuXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vaWRzLXByb2dyZXNzLWJhci5zY3NzJztcblxuY29uc3QgQmFzZSA9IElkc0V2ZW50c01peGluKFxuICBJZHNFbGVtZW50XG4pO1xuXG4vLyBEZWZhdWx0c1xuY29uc3QgSUQgPSAnaWRzLXByb2dyZXNzLWJhci1pZCc7XG5jb25zdCBNQVggPSAnMTAwJztcbmNvbnN0IFZBTFVFID0gJzAnO1xuXG4vKipcbiAqIElEUyBQcm9ncmVzcyBCYXIgQ29tcG9uZW50XG4gKiBAdHlwZSB7SWRzUHJvZ3Jlc3NCYXJ9XG4gKiBAaW5oZXJpdHMgSWRzRWxlbWVudFxuICogQG1peGVzIElkc0V2ZW50c01peGluXG4gKi9cbkBjdXN0b21FbGVtZW50KCdpZHMtcHJvZ3Jlc3MtYmFyJylcbkBzY3NzKHN0eWxlcylcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIElkc1Byb2dyZXNzQmFyIGV4dGVuZHMgQmFzZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBhdHRyaWJ1dGVzIHdlIGhhbmRsZSBhcyBnZXR0ZXJzL3NldHRlcnNcbiAgICogQHJldHVybnMge0FycmF5fSBUaGUgYXR0cmlidXRlcyBpbiBhbiBhcnJheVxuICAgKi9cbiAgc3RhdGljIGdldCBhdHRyaWJ1dGVzKCk6IEFycmF5PHN0cmluZz4ge1xuICAgIHJldHVybiBbXG4gICAgICBhdHRyaWJ1dGVzLkRJU0FCTEVELFxuICAgICAgYXR0cmlidXRlcy5MQUJFTCxcbiAgICAgIGF0dHJpYnV0ZXMuTEFCRUxfQVVESUJMRSxcbiAgICAgIGF0dHJpYnV0ZXMuTUFYLFxuICAgICAgYXR0cmlidXRlcy5WQUxVRVxuICAgIF07XG4gIH1cblxuICAvKipcbiAgICogSW5uZXIgdGVtcGxhdGUgY29udGVudHNcbiAgICogQHJldHVybnMge3N0cmluZ30gVGhlIHRlbXBsYXRlXG4gICAqL1xuICB0ZW1wbGF0ZSgpOiBzdHJpbmcge1xuICAgIGNvbnN0IGF1ZGlibGUgPSBzdHJpbmdUb0Jvb2wodGhpcy5sYWJlbEF1ZGlibGUpID8gJyBhdWRpYmxlPVwidHJ1ZVwiJyA6ICcnO1xuICAgIGxldCByb290Q2xhc3MgPSBzdHJpbmdUb0Jvb2wodGhpcy5kaXNhYmxlZCkgPyAnIGRpc2FibGVkJyA6ICcnO1xuICAgIHJvb3RDbGFzcyArPSBzdHJpbmdUb0Jvb2wodGhpcy5sYWJlbEF1ZGlibGUpID8gJyBsYWJlbC1hdWRpYmxlJyA6ICcnO1xuICAgIHJldHVybiBgXG4gICAgICA8ZGl2IGNsYXNzPVwiaWRzLXByb2dyZXNzLWJhciR7cm9vdENsYXNzfVwiPlxuICAgICAgICA8bGFiZWwgZm9yPVwiJHtJRH1cIiBjbGFzcz1cInByb2dyZXNzLWxhYmVsXCI+XG4gICAgICAgICAgPGlkcy10ZXh0JHthdWRpYmxlfT4ke3RoaXMubGFiZWx9PC9pZHMtdGV4dD5cbiAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPHByb2dyZXNzIGNsYXNzPVwicHJvZ3Jlc3MtYmFyXCIgaWQ9XCIke0lEfVwiIG1heD1cIiR7dGhpcy5tYXh9XCIgdmFsdWU9XCIke3RoaXMudmFsdWV9XCI+JHt0aGlzLmNvbXBsZXRlZH08L3Byb2dyZXNzPlxuICAgICAgPC9kaXY+YDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgdmFsdWVcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbCB0aGUgdmFsdWVcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICAjdXBkYXRlVmFsdWUodmFsOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBjb25zdCBiYXIgPSB0aGlzLnNoYWRvd1Jvb3Q/LnF1ZXJ5U2VsZWN0b3IoJy5wcm9ncmVzcy1iYXInKTtcbiAgICBpZiAoYmFyKSB7XG4gICAgICBjb25zdCB2ID0gYmFyLmdldEF0dHJpYnV0ZShhdHRyaWJ1dGVzLlZBTFVFKTtcbiAgICAgIGlmICh2YWwgIT09IG51bGwgJiYgdiAhPT0gdmFsLnRvU3RyaW5nKCkpIHtcbiAgICAgICAgYmFyLnNldEF0dHJpYnV0ZShhdHRyaWJ1dGVzLlZBTFVFLCB2YWwudG9TdHJpbmcoKSk7XG4gICAgICAgIGJhci5pbm5lckhUTUwgPSB0aGlzLmNvbXBsZXRlZDtcbiAgICAgICAgdGhpcy50cmlnZ2VyRXZlbnQoJ3VwZGF0ZWQnLCB0aGlzLCB7XG4gICAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgICBlbGVtOiB0aGlzLFxuICAgICAgICAgICAgY29tcGxldGVkOiB0aGlzLmNvbXBsZXRlZCxcbiAgICAgICAgICAgIG1heDogdGhpcy5tYXgsXG4gICAgICAgICAgICB2YWx1ZTogdGhpcy52YWx1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBjYWxjdWxhdGVkIGNvbXBsZXRlZCB2YWx1ZVxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tcGxldGVkIHZhbHVlIGFuZCBwZXJjZW50YWdlIHNpZ25cbiAgICovXG4gIGdldCBjb21wbGV0ZWQoKTogc3RyaW5nIHtcbiAgICBjb25zdCBwYXJ0aWFsID0gcGFyc2VGbG9hdCh0aGlzLnZhbHVlKTtcbiAgICBjb25zdCB0b3RhbCA9IHBhcnNlRmxvYXQodGhpcy5tYXgpO1xuICAgIHJldHVybiBgJHtNYXRoLnJvdW5kKCgxMDAgKiBwYXJ0aWFsKSAvIHRvdGFsKX0lYDtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBjb21wb25lbnQgdG8gZGlzYWJsZWRcbiAgICogQHBhcmFtIHtib29sZWFufHN0cmluZ30gdmFsdWUgSWYgdHJ1ZSB3aWxsIHNldCBgZGlzYWJsZWRgIGF0dHJpYnV0ZVxuICAgKi9cbiAgc2V0IGRpc2FibGVkKHZhbHVlOiBib29sZWFuIHwgc3RyaW5nIHwgbnVsbCkge1xuICAgIGNvbnN0IHJvb3RFbCA9IHRoaXMuc2hhZG93Um9vdD8ucXVlcnlTZWxlY3RvcignLmlkcy1wcm9ncmVzcy1iYXInKTtcbiAgICBjb25zdCB2YWwgPSBzdHJpbmdUb0Jvb2wodmFsdWUpO1xuICAgIGlmICh2YWwpIHtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZXMuRElTQUJMRUQsIHZhbC50b1N0cmluZygpKTtcbiAgICAgIHJvb3RFbD8uY2xhc3NMaXN0LmFkZChhdHRyaWJ1dGVzLkRJU0FCTEVEKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlcy5ESVNBQkxFRCk7XG4gICAgICByb290RWw/LmNsYXNzTGlzdC5yZW1vdmUoYXR0cmlidXRlcy5ESVNBQkxFRCk7XG4gICAgfVxuICB9XG5cbiAgZ2V0IGRpc2FibGVkKCk6IHN0cmluZyB8IG51bGwge1xuICAgIHJldHVybiB0aGlzLmdldEF0dHJpYnV0ZShhdHRyaWJ1dGVzLkRJU0FCTEVEKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIGBsYWJlbGAgdGV4dFxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgb2YgdGhlIGBsYWJlbGAgdGV4dCBwcm9wZXJ0eVxuICAgKi9cbiAgc2V0IGxhYmVsKHZhbHVlOiBzdHJpbmcpIHtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZXMuTEFCRUwsIHZhbHVlLnRvU3RyaW5nKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGVzLkxBQkVMKTtcbiAgICB9XG4gICAgY29uc3QgbGFiZWxUZXh0ID0gdGhpcy5zaGFkb3dSb290Py5xdWVyeVNlbGVjdG9yKCcucHJvZ3Jlc3MtbGFiZWwgaWRzLXRleHQnKTtcbiAgICBpZiAobGFiZWxUZXh0KSB7XG4gICAgICBsYWJlbFRleHQuaW5uZXJIVE1MID0gdmFsdWUgPyB2YWx1ZS50b1N0cmluZygpIDogJyc7XG4gICAgfVxuICB9XG5cbiAgZ2V0IGxhYmVsKCk6IHN0cmluZyB7IHJldHVybiB0aGlzLmdldEF0dHJpYnV0ZShhdHRyaWJ1dGVzLkxBQkVMKSB8fCAnJzsgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRvIGxhYmVsIHRleHQgYXMgYXVkaWJsZVxuICAgKiBAcGFyYW0ge2Jvb2xlYW58c3RyaW5nfSB2YWx1ZSBJZiB0cnVlIHdpbGwgc2V0IGBsYWJlbC1hdWRpYmxlYCBhdHRyaWJ1dGVcbiAgICovXG4gIHNldCBsYWJlbEF1ZGlibGUodmFsdWU6IGJvb2xlYW4gfCBzdHJpbmcgfCBudWxsKSB7XG4gICAgY29uc3Qgcm9vdEVsID0gdGhpcy5zaGFkb3dSb290Py5xdWVyeVNlbGVjdG9yKCcuaWRzLXByb2dyZXNzLWJhcicpO1xuICAgIGNvbnN0IGxhYmVsVGV4dCA9IHRoaXMuc2hhZG93Um9vdD8ucXVlcnlTZWxlY3RvcignLnByb2dyZXNzLWxhYmVsIGlkcy10ZXh0Jyk7XG4gICAgY29uc3QgdmFsID0gc3RyaW5nVG9Cb29sKHZhbHVlKTtcbiAgICBpZiAodmFsKSB7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZShhdHRyaWJ1dGVzLkxBQkVMX0FVRElCTEUsIHZhbC50b1N0cmluZygpKTtcbiAgICAgIHJvb3RFbD8uY2xhc3NMaXN0LmFkZChhdHRyaWJ1dGVzLkxBQkVMX0FVRElCTEUpO1xuICAgICAgbGFiZWxUZXh0Py5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlcy5BVURJQkxFLCB2YWwudG9TdHJpbmcoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZXMuTEFCRUxfQVVESUJMRSk7XG4gICAgICByb290RWw/LmNsYXNzTGlzdC5yZW1vdmUoYXR0cmlidXRlcy5MQUJFTF9BVURJQkxFKTtcbiAgICAgIGxhYmVsVGV4dD8ucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZXMuQVVESUJMRSk7XG4gICAgfVxuICB9XG5cbiAgZ2V0IGxhYmVsQXVkaWJsZSgpOiBzdHJpbmcgfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlcy5MQUJFTF9BVURJQkxFKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIGBtYXhgIGF0dHJpYnV0ZSBvZiBwcm9ncmVzc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgb2YgdGhlIGBtYXhgIHByb3BlcnR5XG4gICAqL1xuICBzZXQgbWF4KHZhbHVlOiBzdHJpbmcpIHtcbiAgICBjb25zdCBiYXIgPSB0aGlzLnNoYWRvd1Jvb3Q/LnF1ZXJ5U2VsZWN0b3IoJy5wcm9ncmVzcy1iYXInKTtcbiAgICBjb25zdCB2ID0gKHZhbHVlIHx8IE1BWCkudG9TdHJpbmcoKTtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZShhdHRyaWJ1dGVzLk1BWCwgdik7XG4gICAgYmFyPy5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlcy5NQVgsIHYpO1xuICB9XG5cbiAgZ2V0IG1heCgpOiBzdHJpbmcgeyByZXR1cm4gdGhpcy5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlcy5NQVgpIHx8IE1BWDsgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIGB2YWx1ZWAgYXR0cmlidXRlIG9mIHByb2dyZXNzXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWwgdGhlIHZhbHVlIHByb3BlcnR5XG4gICAqL1xuICBzZXQgdmFsdWUodmFsOiBzdHJpbmcpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZShhdHRyaWJ1dGVzLlZBTFVFLCAodmFsIHx8IFZBTFVFKS50b1N0cmluZygpKTtcbiAgICB0aGlzLiN1cGRhdGVWYWx1ZSh2YWwpO1xuICB9XG5cbiAgZ2V0IHZhbHVlKCk6IHN0cmluZyB7IHJldHVybiB0aGlzLmdldEF0dHJpYnV0ZShhdHRyaWJ1dGVzLlZBTFVFKSB8fCBWQUxVRTsgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/components/ids-progress-bar/ids-progress-bar.ts\n");

/***/ }),

/***/ "./src/components/ids-trigger-field/ids-trigger-button.ts":
/*!****************************************************************!*\
  !*** ./src/components/ids-trigger-field/ids-trigger-button.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ IdsTriggerButton)\n/* harmony export */ });\n/* harmony import */ var _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/ids-attributes */ \"./src/core/ids-attributes.ts\");\n/* harmony import */ var _core_ids_decorators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/ids-decorators */ \"./src/core/ids-decorators.ts\");\n/* harmony import */ var _utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/ids-string-utils/ids-string-utils */ \"./src/utils/ids-string-utils/ids-string-utils.ts\");\n/* harmony import */ var _mixins_ids_field_height_mixin_ids_field_height_mixin__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../mixins/ids-field-height-mixin/ids-field-height-mixin */ \"./src/mixins/ids-field-height-mixin/ids-field-height-mixin.ts\");\n/* harmony import */ var _ids_button_ids_button__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ids-button/ids-button */ \"./src/components/ids-button/ids-button.ts\");\n/* harmony import */ var _ids_trigger_button_scss__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ids-trigger-button.scss */ \"./src/components/ids-trigger-field/ids-trigger-button.scss\");\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result)\n    __defProp(target, key, result);\n  return result;\n};\n\n\n\n\n\n\nlet IdsTriggerButton = class extends (0,_mixins_ids_field_height_mixin_ids_field_height_mixin__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(_ids_button_ids_button__WEBPACK_IMPORTED_MODULE_4__[\"default\"]) {\n  /**\n   * Call the constructor and then initialize\n   */\n  constructor() {\n    super();\n  }\n  /**\n   * Return the attributes we handle as getters/setters\n   * @returns {Array<string>} The attributes in an array\n   */\n  static get attributes() {\n    return [\n      ...super.attributes,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.INLINE,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.INHERIT_COLOR,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.READONLY,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.TABBABLE\n    ];\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    this.inline = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.INLINE));\n  }\n  /**\n   * Figure out the classes\n   * @private\n   * @readonly\n   * @returns {Array<string>} containing classes used to identify this button prototype\n   */\n  get protoClasses() {\n    return [\"ids-trigger-button\"].concat(super.protoClasses);\n  }\n  /**\n   * Set if the trigger field is tabbable\n   * @param {boolean|string} value True of false depending if the trigger field is tabbable\n   */\n  set tabbable(value) {\n    const isTabbable = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(value);\n    const button = this.shadowRoot?.querySelector(\"button\");\n    if (isTabbable) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.TABBABLE, \"\");\n      if (button)\n        button.tabIndex = 0;\n      return;\n    }\n    this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.TABBABLE);\n    if (button)\n      button.tabIndex = -1;\n  }\n  get tabbable() {\n    return (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.TABBABLE));\n  }\n  /**\n   * Set the trigger button to readonly color\n   * @param {boolean|string} value True of false depending if the trigger button is readonly\n   */\n  set readonly(value) {\n    const isReadonly = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(value);\n    const button = this.shadowRoot?.querySelector(\"button\");\n    if (isReadonly) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.READONLY, \"\");\n      if (button)\n        button.tabIndex = -1;\n      return;\n    }\n    if (button)\n      button.tabIndex = this.tabbable ? 0 : -1;\n    this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.READONLY);\n  }\n  get readonly() {\n    return (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.READONLY));\n  }\n  /**\n   * @readonly\n   * @returns {string} containing an optional \"border\" class to apply to this button\n   */\n  get inlineCssClass() {\n    return this?.slot === \"trigger-start\" ? \"inline-start\" : \"inline-end\";\n  }\n  /**\n   * @param {boolean} val true if this trigger button should display \"inline\" instead of having its own full border\n   */\n  set inline(val) {\n    const showsBorder = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(val);\n    if (showsBorder) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.INLINE, \"\");\n      this.#setBorderClass();\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.INLINE);\n      this.#removeBorderClass();\n    }\n  }\n  /**\n   * @returns {boolean} true if this trigger button displays \"inline\" instead of having its own full border\n   */\n  get inline() {\n    return (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.INLINE));\n  }\n  #setBorderClass() {\n    this.button?.classList.add(\"style-inline\", this.inlineCssClass);\n  }\n  #removeBorderClass() {\n    this.button?.classList.remove(\"style-inline\", this.inlineCssClass);\n  }\n  /**\n   * @param {boolean} val true if this trigger button should inherit a parent component's text color for use internally\n   */\n  set inheritColor(val) {\n    if ((0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(val)) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.INHERIT_COLOR, \"\");\n      this.button?.classList.add(\"inherit-color\");\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.INHERIT_COLOR);\n      this.button?.classList.remove(\"inherit-color\");\n    }\n  }\n  /**\n   * @returns {boolean} true if this trigger button inherits a parent component's text color for use internally\n   */\n  get inheritColor() {\n    return this.hasAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.INHERIT_COLOR);\n  }\n};\nIdsTriggerButton = __decorateClass([\n  (0,_core_ids_decorators__WEBPACK_IMPORTED_MODULE_1__.customElement)(\"ids-trigger-button\"),\n  (0,_core_ids_decorators__WEBPACK_IMPORTED_MODULE_1__.scss)(_ids_trigger_button_scss__WEBPACK_IMPORTED_MODULE_5__[\"default\"])\n], IdsTriggerButton);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/ids-trigger-field/ids-trigger-button.ts\n");

/***/ }),

/***/ "./src/components/ids-upload-advanced/ids-upload-advanced-file.ts":
/*!************************************************************************!*\
  !*** ./src/components/ids-upload-advanced/ids-upload-advanced-file.ts ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ IdsUploadAdvancedFile)\n/* harmony export */ });\n/* harmony import */ var _core_ids_decorators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/ids-decorators */ \"./src/core/ids-decorators.ts\");\n/* harmony import */ var _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/ids-attributes */ \"./src/core/ids-attributes.ts\");\n/* harmony import */ var _utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/ids-string-utils/ids-string-utils */ \"./src/utils/ids-string-utils/ids-string-utils.ts\");\n/* harmony import */ var _mixins_ids_events_mixin_ids_events_mixin__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../mixins/ids-events-mixin/ids-events-mixin */ \"./src/mixins/ids-events-mixin/ids-events-mixin.ts\");\n/* harmony import */ var _mixins_ids_theme_mixin_ids_theme_mixin__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../mixins/ids-theme-mixin/ids-theme-mixin */ \"./src/mixins/ids-theme-mixin/ids-theme-mixin.ts\");\n/* harmony import */ var _mixins_ids_locale_mixin_ids_locale_mixin__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../mixins/ids-locale-mixin/ids-locale-mixin */ \"./src/mixins/ids-locale-mixin/ids-locale-mixin.ts\");\n/* harmony import */ var _core_ids_element__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/ids-element */ \"./src/core/ids-element.ts\");\n/* harmony import */ var _ids_alert_ids_alert__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ids-alert/ids-alert */ \"./src/components/ids-alert/ids-alert.ts\");\n/* harmony import */ var _ids_trigger_field_ids_trigger_button__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../ids-trigger-field/ids-trigger-button */ \"./src/components/ids-trigger-field/ids-trigger-button.ts\");\n/* harmony import */ var _ids_progress_bar_ids_progress_bar__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../ids-progress-bar/ids-progress-bar */ \"./src/components/ids-progress-bar/ids-progress-bar.ts\");\n/* harmony import */ var _ids_upload_advanced_shared__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./ids-upload-advanced-shared */ \"./src/components/ids-upload-advanced/ids-upload-advanced-shared.ts\");\n/* harmony import */ var _ids_upload_advanced_file_scss__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./ids-upload-advanced-file.scss */ \"./src/components/ids-upload-advanced/ids-upload-advanced-file.scss\");\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result)\n    __defProp(target, key, result);\n  return result;\n};\n\n\n\n\n\n\n\n\n\n\n\n\nconst Base = (0,_mixins_ids_theme_mixin_ids_theme_mixin__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(\n  (0,_mixins_ids_locale_mixin_ids_locale_mixin__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(\n    (0,_mixins_ids_events_mixin_ids_events_mixin__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(\n      _core_ids_element__WEBPACK_IMPORTED_MODULE_6__[\"default\"]\n    )\n  )\n);\nlet IdsUploadAdvancedFile = class extends Base {\n  constructor() {\n    super();\n  }\n  /**\n   * Return the attributes we handle as getters/setters\n   * @returns {Array} The attributes in an array\n   */\n  static get attributes() {\n    return [\n      ...super.attributes,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ERROR,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.FILE_NAME,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SIZE,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.STATUS,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.VALUE\n    ];\n  }\n  /**\n   * Custom Element `connectedCallback` implementation\n   * @returns {void}\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    this.#attachEventHandlers();\n  }\n  /**\n   * Inner template contents\n   * @returns {string} The template\n   */\n  template() {\n    const toBool = _utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool;\n    const d = _ids_upload_advanced_shared__WEBPACK_IMPORTED_MODULE_10__[\"default\"].DEFAULTS;\n    const disabled = toBool(this.disabled) ? \" disabled\" : \"\";\n    const hiddenArea = `\n      <div class=\"hidden\">\n        <slot name=\"text-btn-cancel\">${d.textBtnCancel}</slot>\n        <slot name=\"text-btn-close-error\">${d.textBtnCloseError}</slot>\n        <slot name=\"text-btn-remove\">${d.textBtnRemove}</slot>\n        <slot name=\"text-btn-start\">${d.textBtnStart}</slot>\n        <slot name=\"text-droparea\">${d.textDroparea}</slot>\n        <slot name=\"text-droparea-with-browse\">${d.textDropareaWithBrowse}</slot>\n        <slot name=\"text-droparea-with-browse-link\">${d.textDropareaWithBrowseLink}</slot>\n        <slot name=\"text-progress-label\">${d.textProgressLabel}</slot>\n        <slot name=\"error-accept-file-type\">${d.errorAcceptFileType}</slot>\n        <slot name=\"error-max-files\">${d.errorMaxFiles}</slot>\n        <slot name=\"error-max-files-in-process\">${d.errorMaxFilesInProcess}</slot>\n        <slot name=\"error-max-file-size\">${d.errorMaxFileSize}</slot>\n        <slot name=\"error-url\">${d.errorUrl}</slot>\n      </div>`;\n    return `\n      <div class=\"ids-upload-advanced-file${disabled}\">\n        ${hiddenArea}\n        <div class=\"container\" part=\"container\">\n          <div class=\"file-row\" part=\"file-row\">\n            <div class=\"status\" part=\"status\">\n              <ids-alert class=\"not-started\" part=\"not-started-icon\" icon=\"info\"></ids-alert>\n              <ids-alert class=\"in-process\" part=\"in-process-icon\" icon=\"in-progress\"></ids-alert>\n              <ids-alert class=\"completed\" part=\"completed-icon\" icon=\"success\"></ids-alert>\n              <ids-alert class=\"errored\" part=\"errored-icon\" icon=\"error\"></ids-alert>\n            </div>\n            <div class=\"file-name\" part=\"file-name\"><span>${this.fileName}</span></div>\n            <div class=\"file-progress\" part=\"file-progress\"><ids-text class=\"size\">${this.sizeFormatted}</ids-text><div class=\"progress-text\"><span class=\"bar\">|</span><span class=\"percent\">0%</span></div></div>\n            <ids-button class=\"btn-close\" part=\"btn-close\">\n              <span class=\"audible\">${this.closeButtonText}</span>\n              <ids-icon icon=\"close\" size=\"xsmall\" part=\"btn-close-icon\"></ids-icon>\n            </ids-button>\n          </div>\n          <div class=\"progress-row\" part=\"progress-row\">\n            <ids-progress-bar class=\"progress-bar\" label=\"${this.progressLabelText}\" label-audible=\"true\" value=\"${this.value || 0}\"></ids-progress-bar>\n          </div>\n          <div class=\"error-row\" part=\"error-row\">\n            <ids-text class=\"error-msg\"></ids-text>\n          </div>\n        </div>\n      </div>`;\n  }\n  /**\n   * Dispatch event\n   * @private\n   * @param {string} eventName The event name\n   * @param {object} e Actual event\n   * @returns {void}\n   */\n  dispatchChangeEvent(eventName, e = null) {\n    this.triggerEvent(eventName, this, {\n      detail: {\n        elem: this,\n        error: this.errorHtml,\n        loaded: this.loaded,\n        loadedFormatted: this.loadedFormatted,\n        nativeEvent: e,\n        size: this.size,\n        sizeFormatted: this.sizeFormatted,\n        status: this.status,\n        value: this.value\n      }\n    });\n  }\n  /**\n   * Toggle disabled\n   * @private\n   * @param {boolean|string} value If true will set `disabled`\n   * @returns {void}\n   */\n  toggleDisabled(value) {\n    if (!this.shadowRoot)\n      return;\n    const el = {\n      root: this.shadowRoot.querySelector(\".ids-upload-advanced-file\"),\n      progress: this.shadowRoot.querySelector(\"ids-progress-bar\"),\n      btnClose: this.shadowRoot.querySelector(\".btn-close\"),\n      alerts: [].slice.call(this.shadowRoot.querySelectorAll(\".status ids-alert\"))\n    };\n    const val = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(value);\n    if (val) {\n      el.root?.classList.add(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED);\n      el.progress?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED, val.toString());\n      el.btnClose?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED, val.toString());\n      el.alerts.forEach((alert) => {\n        alert?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED, val.toString());\n      });\n    } else {\n      el.root?.classList.remove(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED);\n      el.progress?.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED);\n      el.btnClose?.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED);\n      el.alerts.forEach((alert) => {\n        alert?.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED);\n      });\n    }\n  }\n  /**\n   * Set current status\n   * @private\n   * @returns {void}\n   */\n  setStatus() {\n    if (this.status === _ids_upload_advanced_shared__WEBPACK_IMPORTED_MODULE_10__[\"default\"].STATUS.aborted) {\n      return;\n    }\n    const rootEl = this.shadowRoot?.querySelector(\".ids-upload-advanced-file\");\n    const progress = this.shadowRoot?.querySelector(\"ids-progress-bar\");\n    const btnStart = this.shadowRoot?.querySelector(\".btn-start\");\n    const closeButtonTextEl = this.shadowRoot?.querySelector(\".btn-close .audible\");\n    let value = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToNumber)(this.value);\n    value = value > -1 ? value : 0;\n    let shouldTrigger = true;\n    if (btnStart && this.status !== _ids_upload_advanced_shared__WEBPACK_IMPORTED_MODULE_10__[\"default\"].STATUS.notStarted) {\n      btnStart.remove();\n    }\n    if (this.error) {\n      const errorMsg = this.shadowRoot?.querySelector(\".error-row .error-msg\");\n      if (errorMsg) {\n        errorMsg.innerHTML = this.errorHtml;\n      }\n      if (this.status === _ids_upload_advanced_shared__WEBPACK_IMPORTED_MODULE_10__[\"default\"].STATUS.errored) {\n        shouldTrigger = false;\n        this.dispatchChangeEvent(\"error\");\n      } else {\n        this.status = _ids_upload_advanced_shared__WEBPACK_IMPORTED_MODULE_10__[\"default\"].STATUS.errored;\n      }\n    } else if (this.status === _ids_upload_advanced_shared__WEBPACK_IMPORTED_MODULE_10__[\"default\"].STATUS.notStarted) {\n      if (!btnStart) {\n        const progressRow = this.shadowRoot?.querySelector(\".progress-row\");\n        progressRow?.insertAdjacentHTML(\"beforeend\", `\n          <ids-button class=\"btn-start\">\n            <span class=\"audible\">${this.startButtonText}</span>\n            <ids-icon icon=\"play\" size=\"xsmall\"></ids-icon>\n          </ids-button>`);\n      }\n    } else if (value < 100) {\n      this.status = _ids_upload_advanced_shared__WEBPACK_IMPORTED_MODULE_10__[\"default\"].STATUS.inProcess;\n    }\n    const progressText = this.shadowRoot?.querySelector(\".progress-text\");\n    if (progressText) {\n      const percentText = progressText.querySelector(\".percent\");\n      if (percentText)\n        percentText.textContent = `${Math.round(value)}%`;\n      if (this.status === _ids_upload_advanced_shared__WEBPACK_IMPORTED_MODULE_10__[\"default\"].STATUS.completed) {\n        progressText.remove();\n      }\n    }\n    if (closeButtonTextEl)\n      closeButtonTextEl.innerHTML = this.closeButtonText;\n    progress?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.VALUE, value.toString());\n    progress?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.LABEL, this.progressLabelText);\n    rootEl?.classList.remove(...Object.values(_ids_upload_advanced_shared__WEBPACK_IMPORTED_MODULE_10__[\"default\"].STATUS));\n    rootEl?.classList.add(this.status ?? \"\");\n    if (shouldTrigger && this.status !== _ids_upload_advanced_shared__WEBPACK_IMPORTED_MODULE_10__[\"default\"].STATUS.inProcess) {\n      const events = { notStarted: \"notstarted\", errored: \"error\", completed: \"complete\" };\n      if (this.status)\n        this.dispatchChangeEvent(events[(0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.camelCase)(this.status)]);\n    }\n  }\n  /**\n   * Handle events\n   * @private\n   * @returns {void}\n   */\n  #attachEventHandlers() {\n    this.onEvent(\"click\", this.container, (e) => {\n      const classList = e?.target?.classList;\n      if (classList?.contains(\"btn-start\")) {\n        this.dispatchChangeEvent(\"startbuttonclick\", e);\n      }\n      if (classList?.contains(\"btn-close\")) {\n        this.dispatchChangeEvent(\"closebuttonclick\", e);\n      }\n    });\n  }\n  /**\n   * Start uploading process\n   * @returns {void}\n   */\n  start() {\n    if (this.status === _ids_upload_advanced_shared__WEBPACK_IMPORTED_MODULE_10__[\"default\"].STATUS.notStarted) {\n      this.dispatchChangeEvent(\"start\");\n    }\n  }\n  /**\n   * Cancel upload and remove from files list\n   * @returns {void}\n   */\n  cancel() {\n    if (this.status === _ids_upload_advanced_shared__WEBPACK_IMPORTED_MODULE_10__[\"default\"].STATUS.notStarted) {\n      this.dispatchChangeEvent(\"cancel\");\n    }\n  }\n  /**\n   * Abort handler\n   * @param {any} e The event\n   * @returns {void}\n   */\n  abortHandler(e = null) {\n    if (this.status === _ids_upload_advanced_shared__WEBPACK_IMPORTED_MODULE_10__[\"default\"].STATUS.inProcess) {\n      this.status = _ids_upload_advanced_shared__WEBPACK_IMPORTED_MODULE_10__[\"default\"].STATUS.aborted;\n      this.dispatchChangeEvent(\"abort\", e);\n    }\n  }\n  /**\n   * Progress handler\n   * @param {any} e The event\n   * @returns {void}\n   */\n  progressHandler(e) {\n    this.value = e.loaded / e.total * 100;\n  }\n  /**\n   * Complete handler\n   * @param {any} e The event\n   * @returns {void}\n   */\n  completeHandler(e) {\n    if (e.target.readyState === 4 && e.target.status === 200) {\n      this.value = \"100\";\n      this.status = _ids_upload_advanced_shared__WEBPACK_IMPORTED_MODULE_10__[\"default\"].STATUS.completed;\n      this.setStatus();\n    } else {\n      if (this.value === \"100\") {\n        this.value = \"0\";\n      }\n      this.errorHandler(e);\n    }\n  }\n  /**\n   * Error handler\n   * @param {any} e The event\n   * @returns {void}\n   */\n  errorHandler(e) {\n    let err = \"Failed to upload, server issue\";\n    if (typeof e === \"string\" && e !== \"\") {\n      err = e;\n    } else if (typeof e === \"object\") {\n      err = `${e.target.status} - ${e.target.statusText}`;\n    }\n    this.status = _ids_upload_advanced_shared__WEBPACK_IMPORTED_MODULE_10__[\"default\"].STATUS.errored;\n    this.error = err;\n  }\n  /**\n   * Get the bytes of the file is uploaded\n   * @private\n   * @returns {number} The close button text\n   */\n  get loaded() {\n    const percent = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToNumber)(this.value);\n    const total = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToNumber)(this.size);\n    return percent * total / 100;\n  }\n  /**\n   * Get the bytes loaded value formatted (for example 10M)\n   * @private\n   * @returns {string} The close button text\n   */\n  get loadedFormatted() {\n    return _ids_upload_advanced_shared__WEBPACK_IMPORTED_MODULE_10__[\"default\"].formatBytes(this.loaded);\n  }\n  /**\n   * Get formatted size value\n   * @private\n   * @returns {string} The close button text\n   */\n  get sizeFormatted() {\n    return _ids_upload_advanced_shared__WEBPACK_IMPORTED_MODULE_10__[\"default\"].formatBytes((0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToNumber)(this.size));\n  }\n  /**\n   * Get text for close button\n   * @private\n   * @returns {string} The close button text\n   */\n  get closeButtonText() {\n    let text = _ids_upload_advanced_shared__WEBPACK_IMPORTED_MODULE_10__[\"default\"].slotVal(this.shadowRoot, \"text-btn-cancel\");\n    if (this.status === _ids_upload_advanced_shared__WEBPACK_IMPORTED_MODULE_10__[\"default\"].STATUS.errored) {\n      text = _ids_upload_advanced_shared__WEBPACK_IMPORTED_MODULE_10__[\"default\"].slotVal(this.shadowRoot, \"text-btn-close-error\");\n    } else if (this.status === _ids_upload_advanced_shared__WEBPACK_IMPORTED_MODULE_10__[\"default\"].STATUS.completed) {\n      text = _ids_upload_advanced_shared__WEBPACK_IMPORTED_MODULE_10__[\"default\"].slotVal(this.shadowRoot, \"text-btn-remove\");\n    }\n    return text;\n  }\n  /**\n   * Get text for start button\n   * @private\n   * @returns {string} The start button text\n   */\n  get startButtonText() {\n    return _ids_upload_advanced_shared__WEBPACK_IMPORTED_MODULE_10__[\"default\"].slotVal(this.shadowRoot, \"text-btn-start\");\n  }\n  /**\n   * Get text for progress label\n   * @private\n   * @returns {string} The progress label text\n   */\n  get progressLabelText() {\n    return _ids_upload_advanced_shared__WEBPACK_IMPORTED_MODULE_10__[\"default\"].slotVal(this.shadowRoot, \"text-progress-label\").replace(\"{file-name}\", this.fileName).replace(\"{loaded}\", this.loadedFormatted.toString()).replace(\"{size}\", this.sizeFormatted.toString()).replace(\"{percent}\", this.value?.toString());\n  }\n  /**\n   * Get error html\n   * @private\n   * @returns {string} The error\n   */\n  get errorHtml() {\n    const isInSlot = Object.values(_ids_upload_advanced_shared__WEBPACK_IMPORTED_MODULE_10__[\"default\"].ERRORS).indexOf(this.error) > -1;\n    return isInSlot ? _ids_upload_advanced_shared__WEBPACK_IMPORTED_MODULE_10__[\"default\"].slotVal(this.shadowRoot, this.error) : this.error;\n  }\n  /**\n   * Sets the whole file element to disabled\n   * @param {boolean|string} value If true will set disabled attribute\n   */\n  set disabled(value) {\n    const val = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(value);\n    if (val) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED, val.toString());\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED);\n    }\n    this.toggleDisabled(val);\n  }\n  get disabled() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED);\n  }\n  /**\n   * Sets the file state to show there was an error during the file operations\n   * @param {string} value error attribute\n   */\n  set error(value) {\n    if (value) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ERROR, value.toString());\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ERROR);\n    }\n    this.setStatus();\n  }\n  get error() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ERROR);\n  }\n  /**\n   * Sets the file name\n   * @param {string | null} value file-name attribute\n   */\n  set fileName(value) {\n    if (value) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.FILE_NAME, value.toString());\n      const el = this.shadowRoot?.querySelector(\".file-name span\");\n      if (el)\n        el.innerHTML = this.fileName;\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.FILE_NAME);\n    }\n  }\n  get fileName() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.FILE_NAME) || \"\";\n  }\n  /**\n   * Sets the file size in bytes\n   * @param {string|number} value size attribute\n   */\n  set size(value) {\n    if (value) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SIZE, value.toString());\n      const el = this.shadowRoot?.querySelector(\".size\");\n      if (el)\n        el.innerHTML = this.sizeFormatted;\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SIZE);\n    }\n  }\n  get size() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SIZE);\n  }\n  /**\n   * Sets the file status\n   * @param {string} value status attribute\n   */\n  set status(value) {\n    if (this.status === value)\n      return;\n    if (Object.values(_ids_upload_advanced_shared__WEBPACK_IMPORTED_MODULE_10__[\"default\"].STATUS).indexOf(value) > -1) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.STATUS, String(value));\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.STATUS);\n    }\n    this.setStatus();\n  }\n  get status() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.STATUS);\n  }\n  /**\n   * Sets the progress bar value\n   * @param {string|number| null} val value attribute\n   */\n  set value(val) {\n    if (val) {\n      if (!this.status || this.status === _ids_upload_advanced_shared__WEBPACK_IMPORTED_MODULE_10__[\"default\"].STATUS.inProcess) {\n        this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.VALUE, val.toString());\n      }\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.VALUE);\n    }\n    this.setStatus();\n  }\n  get value() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.VALUE);\n  }\n};\nIdsUploadAdvancedFile = __decorateClass([\n  (0,_core_ids_decorators__WEBPACK_IMPORTED_MODULE_0__.customElement)(\"ids-upload-advanced-file\"),\n  (0,_core_ids_decorators__WEBPACK_IMPORTED_MODULE_0__.scss)(_ids_upload_advanced_file_scss__WEBPACK_IMPORTED_MODULE_11__[\"default\"])\n], IdsUploadAdvancedFile);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9pZHMtdXBsb2FkLWFkdmFuY2VkL2lkcy11cGxvYWQtYWR2YW5jZWQtZmlsZS50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBb0M7QUFDVDtBQUM2QjtBQUU3QjtBQUNEO0FBQ0M7QUFDSjtBQUVoQjtBQUNBO0FBQ0E7QUFDNkI7QUFFakI7QUFFbkIsTUFBTSxPQUFPLG1GQUFhO0FBQWIsRUFDWCxxRkFBYztBQUFkLElBQ0UscUZBQWM7QUFBZCxNQUNFLHlEQUFVO0FBQVYsSUFDRjtBQUFBLEVBQ0Y7QUFDRjtBQXVCQSxJQUFxQix3QkFBckIsY0FBbUQsS0FBSztBQUFBLEVBQ3RELGNBQWM7QUFDWixVQUFNO0FBQUEsRUFDUjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNQSxXQUFXLGFBQWE7QUFDdEIsV0FBTztBQUFBLE1BQ0wsR0FBRyxNQUFNO0FBQUEsTUFDVCxxRUFBbUI7QUFBUixNQUNYLGtFQUFnQjtBQUFMLE1BQ1gsc0VBQW9CO0FBQVQsTUFDWCxpRUFBZTtBQUFKLE1BQ1gsbUVBQWlCO0FBQU4sTUFDWCxrRUFBZ0I7QUFBTCxJQUNiO0FBQUEsRUFDRjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNQSxvQkFBb0I7QUFDbEIsVUFBTSxrQkFBa0I7QUFDeEIsU0FBSyxxQkFBcUI7QUFBQSxFQUM1QjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNQSxXQUFXO0FBQ1QsVUFBTSxTQUFTLGtGQUFZO0FBQzNCLFVBQU0sSUFBSSw2RUFBZ0M7QUFDMUMsVUFBTSxXQUFXLE9BQU8sS0FBSyxRQUFRLElBQUksY0FBYztBQUN2RCxVQUFNLGFBQWE7QUFBQTtBQUFBLHVDQUVnQixFQUFFO0FBQUEsNENBQ0csRUFBRTtBQUFBLHVDQUNQLEVBQUU7QUFBQSxzQ0FDSCxFQUFFO0FBQUEscUNBQ0gsRUFBRTtBQUFBLGlEQUNVLEVBQUU7QUFBQSxzREFDRyxFQUFFO0FBQUEsMkNBQ2IsRUFB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LEVBTUEsSUFBSSxPQUFPLE9BQWtDO0FBQzNDLFFBQUksS0FBSyxXQUFXO0FBQU87QUFDM0IsUUFBSSxPQUFPLE9BQU8sMkVBQThCLEVBQUUsUUFBUyxLQUFnQixJQUFJLElBQUk7QUFDakYsV0FBSyxhQUFhLG1FQUFpQixFQUFFLE9BQU8sS0FBSyxDQUFDO0FBQUEsSUFDcEQsT0FBTztBQUNMLFdBQUssZ0JBQWdCLG1FQUFpQjtBQUFBLElBQ3hDO0FBQ0EsU0FBSyxVQUFVO0FBQUEsRUFDakI7QUFBQSxFQUVBLElBQUksU0FBd0I7QUFDMUIsV0FBTyxLQUFLLGFBQWEsbUVBQWlCO0FBQUEsRUFDNUM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsSUFBSSxNQUFNLEtBQTZCO0FBQ3JDLFFBQUksS0FBSztBQUNQLFVBQUksQ0FBQyxLQUFLLFVBQVUsS0FBSyxXQUFXLHFGQUF3QyxFQUFFO0FBQzVFLGFBQUssYUFBYSxrRUFBZ0IsRUFBRSxJQUFJLFNBQVMsQ0FBQztBQUFBLE1BQ3BEO0FBQUEsSUFDRixPQUFPO0FBQ0wsV0FBSyxnQkFBZ0Isa0VBQWdCO0FBQUEsSUFDdkM7QUFDQSxTQUFLLFVBQVU7QUFBQSxFQUNqQjtBQUFBLEVBRUEsSUFBSSxRQUFnQztBQUNsQyxXQUFPLEtBQUssYUFBYSxrRUFBZ0I7QUFBQSxFQUMzQztBQUNGO0FBOWRxQix3QkFBckI7QUFBQSxFQUZDLG1FQUFhLENBQUMsMEJBQTBCO0FBQUEsRUFDeEMsMERBQUksQ0FBQyx1RUFBTTtBQUFBLEdBQ1MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pZHMtZW50ZXJwcmlzZS13Yy8uL3NyYy9jb21wb25lbnRzL2lkcy11cGxvYWQtYWR2YW5jZWQvaWRzLXVwbG9hZC1hZHZhbmNlZC1maWxlLnRzP2I2OTkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3VzdG9tRWxlbWVudCwgc2NzcyB9IGZyb20gJy4uLy4uL2NvcmUvaWRzLWRlY29yYXRvcnMnO1xuaW1wb3J0IHsgYXR0cmlidXRlcyB9IGZyb20gJy4uLy4uL2NvcmUvaWRzLWF0dHJpYnV0ZXMnO1xuaW1wb3J0IHsgY2FtZWxDYXNlLCBzdHJpbmdUb0Jvb2wsIHN0cmluZ1RvTnVtYmVyIH0gZnJvbSAnLi4vLi4vdXRpbHMvaWRzLXN0cmluZy11dGlscy9pZHMtc3RyaW5nLXV0aWxzJztcblxuaW1wb3J0IElkc0V2ZW50c01peGluIGZyb20gJy4uLy4uL21peGlucy9pZHMtZXZlbnRzLW1peGluL2lkcy1ldmVudHMtbWl4aW4nO1xuaW1wb3J0IElkc1RoZW1lTWl4aW4gZnJvbSAnLi4vLi4vbWl4aW5zL2lkcy10aGVtZS1taXhpbi9pZHMtdGhlbWUtbWl4aW4nO1xuaW1wb3J0IElkc0xvY2FsZU1peGluIGZyb20gJy4uLy4uL21peGlucy9pZHMtbG9jYWxlLW1peGluL2lkcy1sb2NhbGUtbWl4aW4nO1xuaW1wb3J0IElkc0VsZW1lbnQgZnJvbSAnLi4vLi4vY29yZS9pZHMtZWxlbWVudCc7XG5cbmltcG9ydCAnLi4vaWRzLWFsZXJ0L2lkcy1hbGVydCc7XG5pbXBvcnQgJy4uL2lkcy10cmlnZ2VyLWZpZWxkL2lkcy10cmlnZ2VyLWJ1dHRvbic7XG5pbXBvcnQgJy4uL2lkcy1wcm9ncmVzcy1iYXIvaWRzLXByb2dyZXNzLWJhcic7XG5pbXBvcnQgSWRzVXBsb2FkQWR2YW5jZWRTaGFyZWQgZnJvbSAnLi9pZHMtdXBsb2FkLWFkdmFuY2VkLXNoYXJlZCc7XG5cbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9pZHMtdXBsb2FkLWFkdmFuY2VkLWZpbGUuc2Nzcyc7XG5cbmNvbnN0IEJhc2UgPSBJZHNUaGVtZU1peGluKFxuICBJZHNMb2NhbGVNaXhpbihcbiAgICBJZHNFdmVudHNNaXhpbihcbiAgICAgIElkc0VsZW1lbnRcbiAgICApXG4gIClcbik7XG5cbi8qKlxuICogSURTIFVwbG9hZEFkdmFuY2VkRmlsZSBDb21wb25lbnRcbiAqIEB0eXBlIHtJZHNVcGxvYWRBZHZhbmNlZEZpbGV9XG4gKiBAaW5oZXJpdHMgSWRzRWxlbWVudFxuICogQG1peGVzIElkc0V2ZW50c01peGluXG4gKiBAcGFydCBjb250YWluZXIgLSB0aGUgbWFpbiBjb250YWluZXIgZWxlbWVudFxuICogQHBhcnQgZmlsZS1yb3cgLSB0aGUgZmlsZSByb3cgZWxlbWVudFxuICogQHBhcnQgc3RhdHVzIC0gdGhlIHN0YXR1cyBlbGVtZW50XG4gKiBAcGFydCBub3Qtc3RhcnRlZC1pY29uIC0gdGhlIG5vdCBzdGFydGVkIGljb24gZWxlbWVudFxuICogQHBhcnQgaW4tcHJvY2Vzcy1pY29uIC0gdGhlIGluIHByb2Nlc3MgaWNvbiBlbGVtZW50XG4gKiBAcGFydCBjb21wbGV0ZWQtaWNvbiAtIHRoZSBjb21wbGV0ZWQgaWNvbiBlbGVtZW50XG4gKiBAcGFydCBlcnJvcmVkLWljb24gLSB0aGUgZXJyb3JlZCBpY29uIGVsZW1lbnRcbiAqIEBwYXJ0IGZpbGUtbmFtZSAtIHRoZSBmaWxlIG5hbWUgZWxlbWVudFxuICogQHBhcnQgZmlsZS1wcm9ncmVzcyAtIHRoZSBmaWxlIHByb2dyZXNzIGVsZW1lbnRcbiAqIEBwYXJ0IGJ0bi1jbG9zZSAtIHRoZSAgY2xvc2UgYnV0dG9uIGVsZW1lbnRcbiAqIEBwYXJ0IGJ0bi1jbG9zZS1pY29uZSAtIHRoZSAgY2xvc2UgYnV0dG9uIGljb24gZWxlbWVudFxuICogQHBhcnQgcHJvZ3Jlc3Mtcm93IC0gdGhlIHByb2dyZXNzIHJvdyBlbGVtZW50XG4gKiBAcGFydCBlcnJvci1yb3cgLSB0aGUgZXJyb3Igcm93IGVsZW1lbnRcbiAqL1xuQGN1c3RvbUVsZW1lbnQoJ2lkcy11cGxvYWQtYWR2YW5jZWQtZmlsZScpXG5Ac2NzcyhzdHlsZXMpXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJZHNVcGxvYWRBZHZhbmNlZEZpbGUgZXh0ZW5kcyBCYXNlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIGF0dHJpYnV0ZXMgd2UgaGFuZGxlIGFzIGdldHRlcnMvc2V0dGVyc1xuICAgKiBAcmV0dXJucyB7QXJyYXl9IFRoZSBhdHRyaWJ1dGVzIGluIGFuIGFycmF5XG4gICAqL1xuICBzdGF0aWMgZ2V0IGF0dHJpYnV0ZXMoKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIC4uLnN1cGVyLmF0dHJpYnV0ZXMsXG4gICAgICBhdHRyaWJ1dGVzLkRJU0FCTEVELFxuICAgICAgYXR0cmlidXRlcy5FUlJPUixcbiAgICAgIGF0dHJpYnV0ZXMuRklMRV9OQU1FLFxuICAgICAgYXR0cmlidXRlcy5TSVpFLFxuICAgICAgYXR0cmlidXRlcy5TVEFUVVMsXG4gICAgICBhdHRyaWJ1dGVzLlZBTFVFXG4gICAgXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDdXN0b20gRWxlbWVudCBgY29ubmVjdGVkQ2FsbGJhY2tgIGltcGxlbWVudGF0aW9uXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICB0aGlzLiNhdHRhY2hFdmVudEhhbmRsZXJzKCk7XG4gIH1cblxuICAvKipcbiAgICogSW5uZXIgdGVtcGxhdGUgY29udGVudHNcbiAgICogQHJldHVybnMge3N0cmluZ30gVGhlIHRlbXBsYXRlXG4gICAqL1xuICB0ZW1wbGF0ZSgpIHtcbiAgICBjb25zdCB0b0Jvb2wgPSBzdHJpbmdUb0Jvb2w7XG4gICAgY29uc3QgZCA9IElkc1VwbG9hZEFkdmFuY2VkU2hhcmVkLkRFRkFVTFRTO1xuICAgIGNvbnN0IGRpc2FibGVkID0gdG9Cb29sKHRoaXMuZGlzYWJsZWQpID8gJyBkaXNhYmxlZCcgOiAnJztcbiAgICBjb25zdCBoaWRkZW5BcmVhID0gYFxuICAgICAgPGRpdiBjbGFzcz1cImhpZGRlblwiPlxuICAgICAgICA8c2xvdCBuYW1lPVwidGV4dC1idG4tY2FuY2VsXCI+JHtkLnRleHRCdG5DYW5jZWx9PC9zbG90PlxuICAgICAgICA8c2xvdCBuYW1lPVwidGV4dC1idG4tY2xvc2UtZXJyb3JcIj4ke2QudGV4dEJ0bkNsb3NlRXJyb3J9PC9zbG90PlxuICAgICAgICA8c2xvdCBuYW1lPVwidGV4dC1idG4tcmVtb3ZlXCI+JHtkLnRleHRCdG5SZW1vdmV9PC9zbG90PlxuICAgICAgICA8c2xvdCBuYW1lPVwidGV4dC1idG4tc3RhcnRcIj4ke2QudGV4dEJ0blN0YXJ0fTwvc2xvdD5cbiAgICAgICAgPHNsb3QgbmFtZT1cInRleHQtZHJvcGFyZWFcIj4ke2QudGV4dERyb3BhcmVhfTwvc2xvdD5cbiAgICAgICAgPHNsb3QgbmFtZT1cInRleHQtZHJvcGFyZWEtd2l0aC1icm93c2VcIj4ke2QudGV4dERyb3BhcmVhV2l0aEJyb3dzZX08L3Nsb3Q+XG4gICAgICAgIDxzbG90IG5hbWU9XCJ0ZXh0LWRyb3BhcmVhLXdpdGgtYnJvd3NlLWxpbmtcIj4ke2QudGV4dERyb3BhcmVhV2l0aEJyb3dzZUxpbmt9PC9zbG90PlxuICAgICAgICA8c2xvdCBuYW1lPVwidGV4dC1wcm9ncmVzcy1sYWJlbFwiPiR7ZC50ZXh0UHJvZ3Jlc3NMYWJlbH08L3Nsb3Q+XG4gICAgICAgIDxzbG90IG5hbWU9XCJlcnJvci1hY2NlcHQtZmlsZS10eXBlXCI+JHtkLmVycm9yQWNjZXB0RmlsZVR5cGV9PC9zbG90PlxuICAgICAgICA8c2xvdCBuYW1lPVwiZXJyb3ItbWF4LWZpbGVzXCI+JHtkLmVycm9yTWF4RmlsZXN9PC9zbG90PlxuICAgICAgICA8c2xvdCBuYW1lPVwiZXJyb3ItbWF4LWZpbGVzLWluLXByb2Nlc3NcIj4ke2QuZXJyb3JNYXhGaWxlc0luUHJvY2Vzc308L3Nsb3Q+XG4gICAgICAgIDxzbG90IG5hbWU9XCJlcnJvci1tYXgtZmlsZS1zaXplXCI+JHtkLmVycm9yTWF4RmlsZVNpemV9PC9zbG90PlxuICAgICAgICA8c2xvdCBuYW1lPVwiZXJyb3ItdXJsXCI+JHtkLmVycm9yVXJsfTwvc2xvdD5cbiAgICAgIDwvZGl2PmA7XG5cbiAgICByZXR1cm4gYFxuICAgICAgPGRpdiBjbGFzcz1cImlkcy11cGxvYWQtYWR2YW5jZWQtZmlsZSR7ZGlzYWJsZWR9XCI+XG4gICAgICAgICR7aGlkZGVuQXJlYX1cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbnRhaW5lclwiIHBhcnQ9XCJjb250YWluZXJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmlsZS1yb3dcIiBwYXJ0PVwiZmlsZS1yb3dcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzdGF0dXNcIiBwYXJ0PVwic3RhdHVzXCI+XG4gICAgICAgICAgICAgIDxpZHMtYWxlcnQgY2xhc3M9XCJub3Qtc3RhcnRlZFwiIHBhcnQ9XCJub3Qtc3RhcnRlZC1pY29uXCIgaWNvbj1cImluZm9cIj48L2lkcy1hbGVydD5cbiAgICAgICAgICAgICAgPGlkcy1hbGVydCBjbGFzcz1cImluLXByb2Nlc3NcIiBwYXJ0PVwiaW4tcHJvY2Vzcy1pY29uXCIgaWNvbj1cImluLXByb2dyZXNzXCI+PC9pZHMtYWxlcnQ+XG4gICAgICAgICAgICAgIDxpZHMtYWxlcnQgY2xhc3M9XCJjb21wbGV0ZWRcIiBwYXJ0PVwiY29tcGxldGVkLWljb25cIiBpY29uPVwic3VjY2Vzc1wiPjwvaWRzLWFsZXJ0PlxuICAgICAgICAgICAgICA8aWRzLWFsZXJ0IGNsYXNzPVwiZXJyb3JlZFwiIHBhcnQ9XCJlcnJvcmVkLWljb25cIiBpY29uPVwiZXJyb3JcIj48L2lkcy1hbGVydD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZpbGUtbmFtZVwiIHBhcnQ9XCJmaWxlLW5hbWVcIj48c3Bhbj4ke3RoaXMuZmlsZU5hbWV9PC9zcGFuPjwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZpbGUtcHJvZ3Jlc3NcIiBwYXJ0PVwiZmlsZS1wcm9ncmVzc1wiPjxpZHMtdGV4dCBjbGFzcz1cInNpemVcIj4ke3RoaXMuc2l6ZUZvcm1hdHRlZH08L2lkcy10ZXh0PjxkaXYgY2xhc3M9XCJwcm9ncmVzcy10ZXh0XCI+PHNwYW4gY2xhc3M9XCJiYXJcIj58PC9zcGFuPjxzcGFuIGNsYXNzPVwicGVyY2VudFwiPjAlPC9zcGFuPjwvZGl2PjwvZGl2PlxuICAgICAgICAgICAgPGlkcy1idXR0b24gY2xhc3M9XCJidG4tY2xvc2VcIiBwYXJ0PVwiYnRuLWNsb3NlXCI+XG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiYXVkaWJsZVwiPiR7dGhpcy5jbG9zZUJ1dHRvblRleHR9PC9zcGFuPlxuICAgICAgICAgICAgICA8aWRzLWljb24gaWNvbj1cImNsb3NlXCIgc2l6ZT1cInhzbWFsbFwiIHBhcnQ9XCJidG4tY2xvc2UtaWNvblwiPjwvaWRzLWljb24+XG4gICAgICAgICAgICA8L2lkcy1idXR0b24+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInByb2dyZXNzLXJvd1wiIHBhcnQ9XCJwcm9ncmVzcy1yb3dcIj5cbiAgICAgICAgICAgIDxpZHMtcHJvZ3Jlc3MtYmFyIGNsYXNzPVwicHJvZ3Jlc3MtYmFyXCIgbGFiZWw9XCIke3RoaXMucHJvZ3Jlc3NMYWJlbFRleHR9XCIgbGFiZWwtYXVkaWJsZT1cInRydWVcIiB2YWx1ZT1cIiR7dGhpcy52YWx1ZSB8fCAwfVwiPjwvaWRzLXByb2dyZXNzLWJhcj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiZXJyb3Itcm93XCIgcGFydD1cImVycm9yLXJvd1wiPlxuICAgICAgICAgICAgPGlkcy10ZXh0IGNsYXNzPVwiZXJyb3ItbXNnXCI+PC9pZHMtdGV4dD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5gO1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3BhdGNoIGV2ZW50XG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWUgVGhlIGV2ZW50IG5hbWVcbiAgICogQHBhcmFtIHtvYmplY3R9IGUgQWN0dWFsIGV2ZW50XG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgZGlzcGF0Y2hDaGFuZ2VFdmVudChldmVudE5hbWU6IHN0cmluZywgZTogYW55ID0gbnVsbCk6IHZvaWQge1xuICAgIHRoaXMudHJpZ2dlckV2ZW50KGV2ZW50TmFtZSwgdGhpcywge1xuICAgICAgZGV0YWlsOiB7XG4gICAgICAgIGVsZW06IHRoaXMsXG4gICAgICAgIGVycm9yOiB0aGlzLmVycm9ySHRtbCxcbiAgICAgICAgbG9hZGVkOiB0aGlzLmxvYWRlZCxcbiAgICAgICAgbG9hZGVkRm9ybWF0dGVkOiB0aGlzLmxvYWRlZEZvcm1hdHRlZCxcbiAgICAgICAgbmF0aXZlRXZlbnQ6IGUsXG4gICAgICAgIHNpemU6IHRoaXMuc2l6ZSxcbiAgICAgICAgc2l6ZUZvcm1hdHRlZDogdGhpcy5zaXplRm9ybWF0dGVkLFxuICAgICAgICBzdGF0dXM6IHRoaXMuc3RhdHVzLFxuICAgICAgICB2YWx1ZTogdGhpcy52YWx1ZVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFRvZ2dsZSBkaXNhYmxlZFxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge2Jvb2xlYW58c3RyaW5nfSB2YWx1ZSBJZiB0cnVlIHdpbGwgc2V0IGBkaXNhYmxlZGBcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICB0b2dnbGVEaXNhYmxlZCh2YWx1ZTogYm9vbGVhbiB8IHN0cmluZyk6IHZvaWQge1xuICAgIGlmICghdGhpcy5zaGFkb3dSb290KSByZXR1cm47XG5cbiAgICBjb25zdCBlbCA9IHtcbiAgICAgIHJvb3Q6IHRoaXMuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKCcuaWRzLXVwbG9hZC1hZHZhbmNlZC1maWxlJyksXG4gICAgICBwcm9ncmVzczogdGhpcy5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoJ2lkcy1wcm9ncmVzcy1iYXInKSxcbiAgICAgIGJ0bkNsb3NlOiB0aGlzLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcignLmJ0bi1jbG9zZScpLFxuICAgICAgYWxlcnRzOiBbXS5zbGljZS5jYWxsKHRoaXMuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yQWxsKCcuc3RhdHVzIGlkcy1hbGVydCcpKSxcbiAgICB9O1xuICAgIGNvbnN0IHZhbCA9IHN0cmluZ1RvQm9vbCh2YWx1ZSk7XG4gICAgaWYgKHZhbCkge1xuICAgICAgZWwucm9vdD8uY2xhc3NMaXN0LmFkZChhdHRyaWJ1dGVzLkRJU0FCTEVEKTtcbiAgICAgIGVsLnByb2dyZXNzPy5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlcy5ESVNBQkxFRCwgdmFsLnRvU3RyaW5nKCkpO1xuICAgICAgZWwuYnRuQ2xvc2U/LnNldEF0dHJpYnV0ZShhdHRyaWJ1dGVzLkRJU0FCTEVELCB2YWwudG9TdHJpbmcoKSk7XG4gICAgICBlbC5hbGVydHMuZm9yRWFjaCgoYWxlcnQ6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICAgIGFsZXJ0Py5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlcy5ESVNBQkxFRCwgdmFsLnRvU3RyaW5nKCkpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnJvb3Q/LmNsYXNzTGlzdC5yZW1vdmUoYXR0cmlidXRlcy5ESVNBQkxFRCk7XG4gICAgICBlbC5wcm9ncmVzcz8ucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZXMuRElTQUJMRUQpO1xuICAgICAgZWwuYnRuQ2xvc2U/LnJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGVzLkRJU0FCTEVEKTtcbiAgICAgIGVsLmFsZXJ0cy5mb3JFYWNoKChhbGVydDogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgICAgYWxlcnQ/LnJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGVzLkRJU0FCTEVEKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgY3VycmVudCBzdGF0dXNcbiAgICogQHByaXZhdGVcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBzZXRTdGF0dXMoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuc3RhdHVzID09PSBJZHNVcGxvYWRBZHZhbmNlZFNoYXJlZC5TVEFUVVMuYWJvcnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHJvb3RFbCA9IHRoaXMuc2hhZG93Um9vdD8ucXVlcnlTZWxlY3RvcignLmlkcy11cGxvYWQtYWR2YW5jZWQtZmlsZScpO1xuICAgIGNvbnN0IHByb2dyZXNzID0gdGhpcy5zaGFkb3dSb290Py5xdWVyeVNlbGVjdG9yKCdpZHMtcHJvZ3Jlc3MtYmFyJyk7XG4gICAgY29uc3QgYnRuU3RhcnQgPSB0aGlzLnNoYWRvd1Jvb3Q/LnF1ZXJ5U2VsZWN0b3IoJy5idG4tc3RhcnQnKTtcbiAgICBjb25zdCBjbG9zZUJ1dHRvblRleHRFbCA9IHRoaXMuc2hhZG93Um9vdD8ucXVlcnlTZWxlY3RvcignLmJ0bi1jbG9zZSAuYXVkaWJsZScpO1xuICAgIGxldCB2YWx1ZSA9IHN0cmluZ1RvTnVtYmVyKCh0aGlzLnZhbHVlIGFzIGFueSkpO1xuICAgIHZhbHVlID0gdmFsdWUgPiAtMSA/IHZhbHVlIDogMDtcbiAgICBsZXQgc2hvdWxkVHJpZ2dlciA9IHRydWU7XG5cbiAgICBpZiAoYnRuU3RhcnQgJiYgdGhpcy5zdGF0dXMgIT09IElkc1VwbG9hZEFkdmFuY2VkU2hhcmVkLlNUQVRVUy5ub3RTdGFydGVkKSB7XG4gICAgICBidG5TdGFydC5yZW1vdmUoKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuZXJyb3IpIHtcbiAgICAgIGNvbnN0IGVycm9yTXNnID0gdGhpcy5zaGFkb3dSb290Py5xdWVyeVNlbGVjdG9yKCcuZXJyb3Itcm93IC5lcnJvci1tc2cnKTtcbiAgICAgIGlmIChlcnJvck1zZykge1xuICAgICAgICBlcnJvck1zZy5pbm5lckhUTUwgPSB0aGlzLmVycm9ySHRtbDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnN0YXR1cyA9PT0gSWRzVXBsb2FkQWR2YW5jZWRTaGFyZWQuU1RBVFVTLmVycm9yZWQpIHtcbiAgICAgICAgc2hvdWxkVHJpZ2dlciA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRpc3BhdGNoQ2hhbmdlRXZlbnQoJ2Vycm9yJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnN0YXR1cyA9IElkc1VwbG9hZEFkdmFuY2VkU2hhcmVkLlNUQVRVUy5lcnJvcmVkO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0dXMgPT09IElkc1VwbG9hZEFkdmFuY2VkU2hhcmVkLlNUQVRVUy5ub3RTdGFydGVkKSB7XG4gICAgICBpZiAoIWJ0blN0YXJ0KSB7XG4gICAgICAgIGNvbnN0IHByb2dyZXNzUm93ID0gdGhpcy5zaGFkb3dSb290Py5xdWVyeVNlbGVjdG9yKCcucHJvZ3Jlc3Mtcm93Jyk7XG4gICAgICAgIHByb2dyZXNzUm93Py5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsIGBcbiAgICAgICAgICA8aWRzLWJ1dHRvbiBjbGFzcz1cImJ0bi1zdGFydFwiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJhdWRpYmxlXCI+JHt0aGlzLnN0YXJ0QnV0dG9uVGV4dH08L3NwYW4+XG4gICAgICAgICAgICA8aWRzLWljb24gaWNvbj1cInBsYXlcIiBzaXplPVwieHNtYWxsXCI+PC9pZHMtaWNvbj5cbiAgICAgICAgICA8L2lkcy1idXR0b24+YCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh2YWx1ZSA8IDEwMCkge1xuICAgICAgdGhpcy5zdGF0dXMgPSBJZHNVcGxvYWRBZHZhbmNlZFNoYXJlZC5TVEFUVVMuaW5Qcm9jZXNzO1xuICAgIH1cblxuICAgIGNvbnN0IHByb2dyZXNzVGV4dCA9IHRoaXMuc2hhZG93Um9vdD8ucXVlcnlTZWxlY3RvcignLnByb2dyZXNzLXRleHQnKTtcbiAgICBpZiAocHJvZ3Jlc3NUZXh0KSB7XG4gICAgICBjb25zdCBwZXJjZW50VGV4dCA9IHByb2dyZXNzVGV4dC5xdWVyeVNlbGVjdG9yKCcucGVyY2VudCcpO1xuICAgICAgaWYgKHBlcmNlbnRUZXh0KSBwZXJjZW50VGV4dC50ZXh0Q29udGVudCA9IGAke01hdGgucm91bmQodmFsdWUpfSVgO1xuXG4gICAgICBpZiAodGhpcy5zdGF0dXMgPT09IElkc1VwbG9hZEFkdmFuY2VkU2hhcmVkLlNUQVRVUy5jb21wbGV0ZWQpIHtcbiAgICAgICAgcHJvZ3Jlc3NUZXh0LnJlbW92ZSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjbG9zZUJ1dHRvblRleHRFbCkgY2xvc2VCdXR0b25UZXh0RWwuaW5uZXJIVE1MID0gdGhpcy5jbG9zZUJ1dHRvblRleHQ7XG4gICAgcHJvZ3Jlc3M/LnNldEF0dHJpYnV0ZShhdHRyaWJ1dGVzLlZBTFVFLCB2YWx1ZS50b1N0cmluZygpKTtcbiAgICBwcm9ncmVzcz8uc2V0QXR0cmlidXRlKGF0dHJpYnV0ZXMuTEFCRUwsIHRoaXMucHJvZ3Jlc3NMYWJlbFRleHQpO1xuICAgIHJvb3RFbD8uY2xhc3NMaXN0LnJlbW92ZSguLi5PYmplY3QudmFsdWVzKElkc1VwbG9hZEFkdmFuY2VkU2hhcmVkLlNUQVRVUykpO1xuICAgIHJvb3RFbD8uY2xhc3NMaXN0LmFkZCh0aGlzLnN0YXR1cyA/PyAnJyk7XG5cbiAgICBpZiAoc2hvdWxkVHJpZ2dlciAmJiB0aGlzLnN0YXR1cyAhPT0gSWRzVXBsb2FkQWR2YW5jZWRTaGFyZWQuU1RBVFVTLmluUHJvY2Vzcykge1xuICAgICAgY29uc3QgZXZlbnRzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0geyBub3RTdGFydGVkOiAnbm90c3RhcnRlZCcsIGVycm9yZWQ6ICdlcnJvcicsIGNvbXBsZXRlZDogJ2NvbXBsZXRlJyB9O1xuICAgICAgaWYgKHRoaXMuc3RhdHVzKSB0aGlzLmRpc3BhdGNoQ2hhbmdlRXZlbnQoZXZlbnRzW2NhbWVsQ2FzZSh0aGlzLnN0YXR1cyldKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlIGV2ZW50c1xuICAgKiBAcHJpdmF0ZVxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gICNhdHRhY2hFdmVudEhhbmRsZXJzKCk6IHZvaWQge1xuICAgIHRoaXMub25FdmVudCgnY2xpY2snLCB0aGlzLmNvbnRhaW5lciwgKGU6IGFueSkgPT4ge1xuICAgICAgY29uc3QgY2xhc3NMaXN0ID0gZT8udGFyZ2V0Py5jbGFzc0xpc3Q7XG4gICAgICBpZiAoY2xhc3NMaXN0Py5jb250YWlucygnYnRuLXN0YXJ0JykpIHtcbiAgICAgICAgdGhpcy5kaXNwYXRjaENoYW5nZUV2ZW50KCdzdGFydGJ1dHRvbmNsaWNrJywgZSk7XG4gICAgICB9XG4gICAgICBpZiAoY2xhc3NMaXN0Py5jb250YWlucygnYnRuLWNsb3NlJykpIHtcbiAgICAgICAgdGhpcy5kaXNwYXRjaENoYW5nZUV2ZW50KCdjbG9zZWJ1dHRvbmNsaWNrJywgZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogU3RhcnQgdXBsb2FkaW5nIHByb2Nlc3NcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBzdGFydCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5zdGF0dXMgPT09IElkc1VwbG9hZEFkdmFuY2VkU2hhcmVkLlNUQVRVUy5ub3RTdGFydGVkKSB7XG4gICAgICB0aGlzLmRpc3BhdGNoQ2hhbmdlRXZlbnQoJ3N0YXJ0Jyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENhbmNlbCB1cGxvYWQgYW5kIHJlbW92ZSBmcm9tIGZpbGVzIGxpc3RcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBjYW5jZWwoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuc3RhdHVzID09PSBJZHNVcGxvYWRBZHZhbmNlZFNoYXJlZC5TVEFUVVMubm90U3RhcnRlZCkge1xuICAgICAgdGhpcy5kaXNwYXRjaENoYW5nZUV2ZW50KCdjYW5jZWwnKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQWJvcnQgaGFuZGxlclxuICAgKiBAcGFyYW0ge2FueX0gZSBUaGUgZXZlbnRcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBhYm9ydEhhbmRsZXIoZSA9IG51bGwpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5zdGF0dXMgPT09IElkc1VwbG9hZEFkdmFuY2VkU2hhcmVkLlNUQVRVUy5pblByb2Nlc3MpIHtcbiAgICAgIHRoaXMuc3RhdHVzID0gSWRzVXBsb2FkQWR2YW5jZWRTaGFyZWQuU1RBVFVTLmFib3J0ZWQ7XG4gICAgICB0aGlzLmRpc3BhdGNoQ2hhbmdlRXZlbnQoJ2Fib3J0JywgZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFByb2dyZXNzIGhhbmRsZXJcbiAgICogQHBhcmFtIHthbnl9IGUgVGhlIGV2ZW50XG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgcHJvZ3Jlc3NIYW5kbGVyKGU6IGFueSk6IHZvaWQge1xuICAgIHRoaXMudmFsdWUgPSAoZS5sb2FkZWQgLyBlLnRvdGFsKSAqIDEwMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb21wbGV0ZSBoYW5kbGVyXG4gICAqIEBwYXJhbSB7YW55fSBlIFRoZSBldmVudFxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIGNvbXBsZXRlSGFuZGxlcihlOiBhbnkpOiB2b2lkIHtcbiAgICBpZiAoZS50YXJnZXQucmVhZHlTdGF0ZSA9PT0gNCAmJiBlLnRhcmdldC5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgdGhpcy52YWx1ZSA9ICcxMDAnO1xuICAgICAgdGhpcy5zdGF0dXMgPSBJZHNVcGxvYWRBZHZhbmNlZFNoYXJlZC5TVEFUVVMuY29tcGxldGVkO1xuICAgICAgdGhpcy5zZXRTdGF0dXMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMudmFsdWUgPT09ICcxMDAnKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSAnMCc7XG4gICAgICB9XG4gICAgICB0aGlzLmVycm9ySGFuZGxlcihlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRXJyb3IgaGFuZGxlclxuICAgKiBAcGFyYW0ge2FueX0gZSBUaGUgZXZlbnRcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBlcnJvckhhbmRsZXIoZTogYW55KTogdm9pZCB7XG4gICAgbGV0IGVyciA9ICdGYWlsZWQgdG8gdXBsb2FkLCBzZXJ2ZXIgaXNzdWUnO1xuICAgIGlmICh0eXBlb2YgZSA9PT0gJ3N0cmluZycgJiYgZSAhPT0gJycpIHtcbiAgICAgIGVyciA9IGU7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGVyciA9IGAke2UudGFyZ2V0LnN0YXR1c30gLSAke2UudGFyZ2V0LnN0YXR1c1RleHR9YDtcbiAgICB9XG4gICAgdGhpcy5zdGF0dXMgPSBJZHNVcGxvYWRBZHZhbmNlZFNoYXJlZC5TVEFUVVMuZXJyb3JlZDtcbiAgICB0aGlzLmVycm9yID0gZXJyO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgYnl0ZXMgb2YgdGhlIGZpbGUgaXMgdXBsb2FkZWRcbiAgICogQHByaXZhdGVcbiAgICogQHJldHVybnMge251bWJlcn0gVGhlIGNsb3NlIGJ1dHRvbiB0ZXh0XG4gICAqL1xuICBnZXQgbG9hZGVkKCk6IG51bWJlciB7XG4gICAgY29uc3QgcGVyY2VudCA9IHN0cmluZ1RvTnVtYmVyKHRoaXMudmFsdWUpO1xuICAgIGNvbnN0IHRvdGFsID0gc3RyaW5nVG9OdW1iZXIodGhpcy5zaXplKTtcbiAgICByZXR1cm4gKHBlcmNlbnQgKiB0b3RhbCkgLyAxMDA7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBieXRlcyBsb2FkZWQgdmFsdWUgZm9ybWF0dGVkIChmb3IgZXhhbXBsZSAxME0pXG4gICAqIEBwcml2YXRlXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjbG9zZSBidXR0b24gdGV4dFxuICAgKi9cbiAgZ2V0IGxvYWRlZEZvcm1hdHRlZCgpOiBzdHJpbmcgeyByZXR1cm4gSWRzVXBsb2FkQWR2YW5jZWRTaGFyZWQuZm9ybWF0Qnl0ZXModGhpcy5sb2FkZWQpOyB9XG5cbiAgLyoqXG4gICAqIEdldCBmb3JtYXR0ZWQgc2l6ZSB2YWx1ZVxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY2xvc2UgYnV0dG9uIHRleHRcbiAgICovXG4gIGdldCBzaXplRm9ybWF0dGVkKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIElkc1VwbG9hZEFkdmFuY2VkU2hhcmVkLmZvcm1hdEJ5dGVzKHN0cmluZ1RvTnVtYmVyKHRoaXMuc2l6ZSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0ZXh0IGZvciBjbG9zZSBidXR0b25cbiAgICogQHByaXZhdGVcbiAgICogQHJldHVybnMge3N0cmluZ30gVGhlIGNsb3NlIGJ1dHRvbiB0ZXh0XG4gICAqL1xuICBnZXQgY2xvc2VCdXR0b25UZXh0KCk6IHN0cmluZyB7XG4gICAgbGV0IHRleHQgPSBJZHNVcGxvYWRBZHZhbmNlZFNoYXJlZC5zbG90VmFsKHRoaXMuc2hhZG93Um9vdCwgJ3RleHQtYnRuLWNhbmNlbCcpO1xuICAgIGlmICh0aGlzLnN0YXR1cyA9PT0gSWRzVXBsb2FkQWR2YW5jZWRTaGFyZWQuU1RBVFVTLmVycm9yZWQpIHtcbiAgICAgIHRleHQgPSBJZHNVcGxvYWRBZHZhbmNlZFNoYXJlZC5zbG90VmFsKHRoaXMuc2hhZG93Um9vdCwgJ3RleHQtYnRuLWNsb3NlLWVycm9yJyk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnN0YXR1cyA9PT0gSWRzVXBsb2FkQWR2YW5jZWRTaGFyZWQuU1RBVFVTLmNvbXBsZXRlZCkge1xuICAgICAgdGV4dCA9IElkc1VwbG9hZEFkdmFuY2VkU2hhcmVkLnNsb3RWYWwodGhpcy5zaGFkb3dSb290LCAndGV4dC1idG4tcmVtb3ZlJyk7XG4gICAgfVxuICAgIHJldHVybiB0ZXh0O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0ZXh0IGZvciBzdGFydCBidXR0b25cbiAgICogQHByaXZhdGVcbiAgICogQHJldHVybnMge3N0cmluZ30gVGhlIHN0YXJ0IGJ1dHRvbiB0ZXh0XG4gICAqL1xuICBnZXQgc3RhcnRCdXR0b25UZXh0KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIElkc1VwbG9hZEFkdmFuY2VkU2hhcmVkLnNsb3RWYWwodGhpcy5zaGFkb3dSb290LCAndGV4dC1idG4tc3RhcnQnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGV4dCBmb3IgcHJvZ3Jlc3MgbGFiZWxcbiAgICogQHByaXZhdGVcbiAgICogQHJldHVybnMge3N0cmluZ30gVGhlIHByb2dyZXNzIGxhYmVsIHRleHRcbiAgICovXG4gIGdldCBwcm9ncmVzc0xhYmVsVGV4dCgpOiBzdHJpbmcge1xuICAgIHJldHVybiBJZHNVcGxvYWRBZHZhbmNlZFNoYXJlZC5zbG90VmFsKHRoaXMuc2hhZG93Um9vdCwgJ3RleHQtcHJvZ3Jlc3MtbGFiZWwnKVxuICAgICAgLnJlcGxhY2UoJ3tmaWxlLW5hbWV9JywgdGhpcy5maWxlTmFtZSlcbiAgICAgIC5yZXBsYWNlKCd7bG9hZGVkfScsIHRoaXMubG9hZGVkRm9ybWF0dGVkLnRvU3RyaW5nKCkpXG4gICAgICAucmVwbGFjZSgne3NpemV9JywgdGhpcy5zaXplRm9ybWF0dGVkLnRvU3RyaW5nKCkpXG4gICAgICAucmVwbGFjZSgne3BlcmNlbnR9JywgdGhpcy52YWx1ZT8udG9TdHJpbmcoKSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGVycm9yIGh0bWxcbiAgICogQHByaXZhdGVcbiAgICogQHJldHVybnMge3N0cmluZ30gVGhlIGVycm9yXG4gICAqL1xuICBnZXQgZXJyb3JIdG1sKCk6IHN0cmluZyB7XG4gICAgY29uc3QgaXNJblNsb3QgPSBPYmplY3QudmFsdWVzKElkc1VwbG9hZEFkdmFuY2VkU2hhcmVkLkVSUk9SUykuaW5kZXhPZigodGhpcy5lcnJvciBhcyBhbnkpKSA+IC0xO1xuICAgIHJldHVybiBpc0luU2xvdCA/IElkc1VwbG9hZEFkdmFuY2VkU2hhcmVkLnNsb3RWYWwodGhpcy5zaGFkb3dSb290LCAodGhpcy5lcnJvciBhcyBhbnkpKSA6IHRoaXMuZXJyb3I7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgd2hvbGUgZmlsZSBlbGVtZW50IHRvIGRpc2FibGVkXG4gICAqIEBwYXJhbSB7Ym9vbGVhbnxzdHJpbmd9IHZhbHVlIElmIHRydWUgd2lsbCBzZXQgZGlzYWJsZWQgYXR0cmlidXRlXG4gICAqL1xuICBzZXQgZGlzYWJsZWQodmFsdWU6IHN0cmluZyB8IGJvb2xlYW4gfCBudWxsKSB7XG4gICAgY29uc3QgdmFsID0gc3RyaW5nVG9Cb29sKHZhbHVlKTtcbiAgICBpZiAodmFsKSB7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZShhdHRyaWJ1dGVzLkRJU0FCTEVELCB2YWwudG9TdHJpbmcoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZXMuRElTQUJMRUQpO1xuICAgIH1cblxuICAgIHRoaXMudG9nZ2xlRGlzYWJsZWQodmFsKTtcbiAgfVxuXG4gIGdldCBkaXNhYmxlZCgpOiBzdHJpbmcgfCBudWxsIHsgcmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZXMuRElTQUJMRUQpOyB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGZpbGUgc3RhdGUgdG8gc2hvdyB0aGVyZSB3YXMgYW4gZXJyb3IgZHVyaW5nIHRoZSBmaWxlIG9wZXJhdGlvbnNcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIGVycm9yIGF0dHJpYnV0ZVxuICAgKi9cbiAgc2V0IGVycm9yKHZhbHVlOiBzdHJpbmcgfCBudWxsKSB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZShhdHRyaWJ1dGVzLkVSUk9SLCB2YWx1ZS50b1N0cmluZygpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlcy5FUlJPUik7XG4gICAgfVxuICAgIHRoaXMuc2V0U3RhdHVzKCk7XG4gIH1cblxuICBnZXQgZXJyb3IoKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZXMuRVJST1IpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGZpbGUgbmFtZVxuICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bGx9IHZhbHVlIGZpbGUtbmFtZSBhdHRyaWJ1dGVcbiAgICovXG4gIHNldCBmaWxlTmFtZSh2YWx1ZTogc3RyaW5nIHwgbnVsbCkge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlcy5GSUxFX05BTUUsIHZhbHVlLnRvU3RyaW5nKCkpO1xuICAgICAgY29uc3QgZWwgPSB0aGlzLnNoYWRvd1Jvb3Q/LnF1ZXJ5U2VsZWN0b3I8SFRNTEVsZW1lbnQ+KCcuZmlsZS1uYW1lIHNwYW4nKTtcbiAgICAgIGlmIChlbCkgZWwuaW5uZXJIVE1MID0gdGhpcy5maWxlTmFtZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlcy5GSUxFX05BTUUpO1xuICAgIH1cbiAgfVxuXG4gIGdldCBmaWxlTmFtZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmdldEF0dHJpYnV0ZShhdHRyaWJ1dGVzLkZJTEVfTkFNRSkgfHwgJyc7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgZmlsZSBzaXplIGluIGJ5dGVzXG4gICAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gdmFsdWUgc2l6ZSBhdHRyaWJ1dGVcbiAgICovXG4gIHNldCBzaXplKHZhbHVlOiBzdHJpbmcgfCBudW1iZXIgfCBudWxsKSB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZShhdHRyaWJ1dGVzLlNJWkUsIHZhbHVlLnRvU3RyaW5nKCkpO1xuICAgICAgY29uc3QgZWwgPSB0aGlzLnNoYWRvd1Jvb3Q/LnF1ZXJ5U2VsZWN0b3IoJy5zaXplJyk7XG4gICAgICBpZiAoZWwpIGVsLmlubmVySFRNTCA9IHRoaXMuc2l6ZUZvcm1hdHRlZDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlcy5TSVpFKTtcbiAgICB9XG4gIH1cblxuICBnZXQgc2l6ZSgpOiBzdHJpbmcgfCBudW1iZXIgfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlcy5TSVpFKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBmaWxlIHN0YXR1c1xuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgc3RhdHVzIGF0dHJpYnV0ZVxuICAgKi9cbiAgc2V0IHN0YXR1cyh2YWx1ZTogc3RyaW5nIHwgdW5kZWZpbmVkIHwgbnVsbCkge1xuICAgIGlmICh0aGlzLnN0YXR1cyA9PT0gdmFsdWUpIHJldHVybjtcbiAgICBpZiAoT2JqZWN0LnZhbHVlcyhJZHNVcGxvYWRBZHZhbmNlZFNoYXJlZC5TVEFUVVMpLmluZGV4T2YoKHZhbHVlIGFzIHN0cmluZykpID4gLTEpIHtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZXMuU1RBVFVTLCBTdHJpbmcodmFsdWUpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlcy5TVEFUVVMpO1xuICAgIH1cbiAgICB0aGlzLnNldFN0YXR1cygpO1xuICB9XG5cbiAgZ2V0IHN0YXR1cygpOiBzdHJpbmcgfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlcy5TVEFUVVMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHByb2dyZXNzIGJhciB2YWx1ZVxuICAgKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ8IG51bGx9IHZhbCB2YWx1ZSBhdHRyaWJ1dGVcbiAgICovXG4gIHNldCB2YWx1ZSh2YWw6IHN0cmluZyB8IG51bWJlciB8IG51bGwpIHtcbiAgICBpZiAodmFsKSB7XG4gICAgICBpZiAoIXRoaXMuc3RhdHVzIHx8IHRoaXMuc3RhdHVzID09PSBJZHNVcGxvYWRBZHZhbmNlZFNoYXJlZC5TVEFUVVMuaW5Qcm9jZXNzKSB7XG4gICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZXMuVkFMVUUsIHZhbC50b1N0cmluZygpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlcy5WQUxVRSk7XG4gICAgfVxuICAgIHRoaXMuc2V0U3RhdHVzKCk7XG4gIH1cblxuICBnZXQgdmFsdWUoKTogc3RyaW5nIHwgbnVtYmVyIHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZXMuVkFMVUUpO1xuICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/components/ids-upload-advanced/ids-upload-advanced-file.ts\n");

/***/ }),

/***/ "./src/components/ids-upload-advanced/ids-upload-advanced-shared.ts":
/*!**************************************************************************!*\
  !*** ./src/components/ids-upload-advanced/ids-upload-advanced-shared.ts ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ids_upload_advanced_shared_default)\n/* harmony export */ });\n/* harmony import */ var _utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/ids-string-utils/ids-string-utils */ \"./src/utils/ids-string-utils/ids-string-utils.ts\");\n\nconst IdsUploadAdvancedShared = {\n  DEFAULTS: {\n    autoStart: true,\n    // allow automatic start upload, after files have been dropped or added\n    paramName: \"myfile\",\n    // variable name to read from server\n    icon: \"upload\",\n    // Droparea icon\n    maxFileSize: -1,\n    // max file size in bytes, -1 for unlimited\n    maxFiles: 99999,\n    // max files can be upload\n    maxFilesInProcess: 99999,\n    // max files can be upload while in process,\n    method: \"POST\",\n    // Sets the method to use component XMLHttpRequest method to send files\n    showBrowseLink: true,\n    // Browse files to upload\n    // Text strings\n    textBtnCancel: \"Cancel uploading this file\",\n    textBtnCancelAll: \"Cancel\",\n    textBtnCloseError: \"Close this error\",\n    textBtnRemove: \"Remove this file from UI list\",\n    textBtnStart: \"Start uploading this file\",\n    textBtnStartAll: \"Start\",\n    textDroparea: \"Drag and Drop Files to Upload\",\n    textDropareaWithBrowse: \"Drag and Drop or {browseLink} to Upload\",\n    textDropareaWithBrowseLink: \"Select Files\",\n    textProgressLabel: \"{file-name} uploaded {loaded} out of {size} ({percent}%)\",\n    // Error strings\n    errorMaxFiles: \"<em>Error</em>: Cannot upload more than the maximum number of files ({maxFiles}).\",\n    errorMaxFilesInProcess: \"<em>Error</em>: Exceeded maximum files allowed limit\",\n    errorAcceptFileType: \"<em>Error</em>: File type is not allowed\",\n    errorMaxFileSize: \"<em>Error</em>: Exceeded file size limit\",\n    errorUrl: \"<em>Error</em>: Url not found!\",\n    errorXhrHeaders: \"<em>Error</em>: XHR Headers must be a valid JSON string contains array of name/value objects.\",\n    // Extra headers to use with XMLHttpRequest (JSON)\n    xhrHeaders: \"\"\n  },\n  ERRORS: {\n    errorMaxFiles: \"error-max-files\",\n    errorMaxFilesInProcess: \"error-max-files-in-process\",\n    errorAcceptFileType: \"error-accept-file-type\",\n    errorMaxFileSize: \"error-max-file-size\",\n    errorUrl: \"error-url\",\n    errorXhrHeaders: \"error-xhr-headers\"\n  },\n  STATUS: {\n    notStarted: \"not-started\",\n    inProcess: \"in-process\",\n    aborted: \"aborted\",\n    errored: \"errored\",\n    completed: \"completed\"\n  },\n  /**\n   * Formats the file size to human readable.\n   * @private\n   * @param {number} bytes The size value in bytes.\n   * @param {number} decimals The decimal point.\n   * @returns {string} formated to use in ui.\n   */\n  formatBytes(bytes, decimals = 2) {\n    const units = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"];\n    if (typeof bytes !== \"number\") {\n      return \"\";\n    }\n    let index;\n    const multiplier = 1e3;\n    let val = bytes;\n    for (index = 0; val > multiplier; index++) {\n      val /= multiplier;\n    }\n    return `${parseFloat(val.toFixed(decimals))} ${units[index]}`;\n  },\n  /**\n   * Get the value for given slot.\n   * @private\n   * @param {object} shadowRoot The shadow root.\n   * @param {string} slotName The slot name.\n   * @returns {string} The slot val.\n   */\n  slotVal(shadowRoot, slotName) {\n    const d = this.DEFAULTS;\n    const html = (slot2) => slot2?.assignedNodes()[0]?.innerHTML;\n    const slot = shadowRoot?.querySelector(`slot[name=\"${slotName}\"]`);\n    return html(slot) || d[(0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_0__.camelCase)(slotName)];\n  }\n};\nvar ids_upload_advanced_shared_default = IdsUploadAdvancedShared;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9pZHMtdXBsb2FkLWFkdmFuY2VkL2lkcy11cGxvYWQtYWR2YW5jZWQtc2hhcmVkLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTBCO0FBTzFCLE1BQU0sMEJBQTBCO0FBQUEsRUFDOUIsVUFBVTtBQUFBLElBQ1IsV0FBVztBQUFBO0FBQUEsSUFDWCxXQUFXO0FBQUE7QUFBQSxJQUNYLE1BQU07QUFBQTtBQUFBLElBQ04sYUFBYTtBQUFBO0FBQUEsSUFDYixVQUFVO0FBQUE7QUFBQSxJQUNWLG1CQUFtQjtBQUFBO0FBQUEsSUFDbkIsUUFBUTtBQUFBO0FBQUEsSUFDUixnQkFBZ0I7QUFBQTtBQUFBO0FBQUEsSUFHaEIsZUFBZTtBQUFBLElBQ2Ysa0JBQWtCO0FBQUEsSUFDbEIsbUJBQW1CO0FBQUEsSUFDbkIsZUFBZTtBQUFBLElBQ2YsY0FBYztBQUFBLElBQ2QsaUJBQWlCO0FBQUEsSUFDakIsY0FBYztBQUFBLElBQ2Qsd0JBQXdCO0FBQUEsSUFDeEIsNEJBQTRCO0FBQUEsSUFDNUIsbUJBQW1CO0FBQUE7QUFBQSxJQUduQixlQUFlO0FBQUEsSUFDZix3QkFBd0I7QUFBQSxJQUN4QixxQkFBcUI7QUFBQSxJQUNyQixrQkFBa0I7QUFBQSxJQUNsQixVQUFVO0FBQUEsSUFDVixpQkFBaUI7QUFBQTtBQUFBLElBR2pCLFlBQVk7QUFBQSxFQUNkO0FBQUEsRUFDQSxRQUFRO0FBQUEsSUFDTixlQUFlO0FBQUEsSUFDZix3QkFBd0I7QUFBQSxJQUN4QixxQkFBcUI7QUFBQSxJQUNyQixrQkFBa0I7QUFBQSxJQUNsQixVQUFVO0FBQUEsSUFDVixpQkFBaUI7QUFBQSxFQUNuQjtBQUFBLEVBQ0EsUUFBUTtBQUFBLElBQ04sWUFBWTtBQUFBLElBQ1osV0FBVztBQUFBLElBQ1gsU0FBUztBQUFBLElBQ1QsU0FBUztBQUFBLElBQ1QsV0FBVztBQUFBLEVBQ2I7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBU0EsWUFBWSxPQUFlLFdBQVcsR0FBRztBQUN2QyxVQUFNLFFBQVEsQ0FBQyxTQUFTLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sSUFBSTtBQUN0RSxRQUFJLE9BQU8sVUFBVSxVQUFVO0FBQzdCLGFBQU87QUFBQSxJQUNUO0FBQ0EsUUFBSTtBQUNKLFVBQU0sYUFBYTtBQUNuQixRQUFJLE1BQU07QUFDVixTQUFLLFFBQVEsR0FBRyxNQUFNLFlBQVksU0FBUztBQUN6QyxhQUFPO0FBQUEsSUFDVDtBQUNBLFdBQU8sR0FBRyxXQUFXLElBQUksUUFBUSxRQUFRLENBQUMsS0FBSyxNQUFNLEtBQUs7QUFBQSxFQUM1RDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFTQSxRQUFRLFlBQWlCLFVBQWtCO0FBQ3pDLFVBQU0sSUFBUyxLQUFLO0FBQ3BCLFVBQU0sT0FBTyxDQUFDQSxVQUFjQSxPQUFNLGNBQWMsRUFBRSxDQUFDLEdBQUc7QUFDdEQsVUFBTSxPQUFPLFlBQVksY0FBYyxjQUFjLFlBQVk7QUFDakUsV0FBTyxLQUFLLElBQUksS0FBSyxFQUFFLG1GQUFTLENBQUMsUUFBUSxDQUFDO0FBQUEsRUFDNUM7QUFDRjtBQUVBLElBQU8scUNBQVEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pZHMtZW50ZXJwcmlzZS13Yy8uL3NyYy9jb21wb25lbnRzL2lkcy11cGxvYWQtYWR2YW5jZWQvaWRzLXVwbG9hZC1hZHZhbmNlZC1zaGFyZWQudHM/YmExNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjYW1lbENhc2UgfSBmcm9tICcuLi8uLi91dGlscy9pZHMtc3RyaW5nLXV0aWxzL2lkcy1zdHJpbmctdXRpbHMnO1xuXG4vKipcbiAqIFNoYXJlZCBpbiBiZXR3ZWVuIHVwbG9hZCBhZHZhbmNlZC5cbiAqIEBwcml2YXRlXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuY29uc3QgSWRzVXBsb2FkQWR2YW5jZWRTaGFyZWQgPSB7XG4gIERFRkFVTFRTOiB7XG4gICAgYXV0b1N0YXJ0OiB0cnVlLCAvLyBhbGxvdyBhdXRvbWF0aWMgc3RhcnQgdXBsb2FkLCBhZnRlciBmaWxlcyBoYXZlIGJlZW4gZHJvcHBlZCBvciBhZGRlZFxuICAgIHBhcmFtTmFtZTogJ215ZmlsZScsIC8vIHZhcmlhYmxlIG5hbWUgdG8gcmVhZCBmcm9tIHNlcnZlclxuICAgIGljb246ICd1cGxvYWQnLCAvLyBEcm9wYXJlYSBpY29uXG4gICAgbWF4RmlsZVNpemU6IC0xLCAvLyBtYXggZmlsZSBzaXplIGluIGJ5dGVzLCAtMSBmb3IgdW5saW1pdGVkXG4gICAgbWF4RmlsZXM6IDk5OTk5LCAvLyBtYXggZmlsZXMgY2FuIGJlIHVwbG9hZFxuICAgIG1heEZpbGVzSW5Qcm9jZXNzOiA5OTk5OSwgLy8gbWF4IGZpbGVzIGNhbiBiZSB1cGxvYWQgd2hpbGUgaW4gcHJvY2VzcyxcbiAgICBtZXRob2Q6ICdQT1NUJywgLy8gU2V0cyB0aGUgbWV0aG9kIHRvIHVzZSBjb21wb25lbnQgWE1MSHR0cFJlcXVlc3QgbWV0aG9kIHRvIHNlbmQgZmlsZXNcbiAgICBzaG93QnJvd3NlTGluazogdHJ1ZSwgLy8gQnJvd3NlIGZpbGVzIHRvIHVwbG9hZFxuXG4gICAgLy8gVGV4dCBzdHJpbmdzXG4gICAgdGV4dEJ0bkNhbmNlbDogJ0NhbmNlbCB1cGxvYWRpbmcgdGhpcyBmaWxlJyxcbiAgICB0ZXh0QnRuQ2FuY2VsQWxsOiAnQ2FuY2VsJyxcbiAgICB0ZXh0QnRuQ2xvc2VFcnJvcjogJ0Nsb3NlIHRoaXMgZXJyb3InLFxuICAgIHRleHRCdG5SZW1vdmU6ICdSZW1vdmUgdGhpcyBmaWxlIGZyb20gVUkgbGlzdCcsXG4gICAgdGV4dEJ0blN0YXJ0OiAnU3RhcnQgdXBsb2FkaW5nIHRoaXMgZmlsZScsXG4gICAgdGV4dEJ0blN0YXJ0QWxsOiAnU3RhcnQnLFxuICAgIHRleHREcm9wYXJlYTogJ0RyYWcgYW5kIERyb3AgRmlsZXMgdG8gVXBsb2FkJyxcbiAgICB0ZXh0RHJvcGFyZWFXaXRoQnJvd3NlOiAnRHJhZyBhbmQgRHJvcCBvciB7YnJvd3NlTGlua30gdG8gVXBsb2FkJyxcbiAgICB0ZXh0RHJvcGFyZWFXaXRoQnJvd3NlTGluazogJ1NlbGVjdCBGaWxlcycsXG4gICAgdGV4dFByb2dyZXNzTGFiZWw6ICd7ZmlsZS1uYW1lfSB1cGxvYWRlZCB7bG9hZGVkfSBvdXQgb2Yge3NpemV9ICh7cGVyY2VudH0lKScsXG5cbiAgICAvLyBFcnJvciBzdHJpbmdzXG4gICAgZXJyb3JNYXhGaWxlczogJzxlbT5FcnJvcjwvZW0+OiBDYW5ub3QgdXBsb2FkIG1vcmUgdGhhbiB0aGUgbWF4aW11bSBudW1iZXIgb2YgZmlsZXMgKHttYXhGaWxlc30pLicsXG4gICAgZXJyb3JNYXhGaWxlc0luUHJvY2VzczogJzxlbT5FcnJvcjwvZW0+OiBFeGNlZWRlZCBtYXhpbXVtIGZpbGVzIGFsbG93ZWQgbGltaXQnLFxuICAgIGVycm9yQWNjZXB0RmlsZVR5cGU6ICc8ZW0+RXJyb3I8L2VtPjogRmlsZSB0eXBlIGlzIG5vdCBhbGxvd2VkJyxcbiAgICBlcnJvck1heEZpbGVTaXplOiAnPGVtPkVycm9yPC9lbT46IEV4Y2VlZGVkIGZpbGUgc2l6ZSBsaW1pdCcsXG4gICAgZXJyb3JVcmw6ICc8ZW0+RXJyb3I8L2VtPjogVXJsIG5vdCBmb3VuZCEnLFxuICAgIGVycm9yWGhySGVhZGVyczogJzxlbT5FcnJvcjwvZW0+OiBYSFIgSGVhZGVycyBtdXN0IGJlIGEgdmFsaWQgSlNPTiBzdHJpbmcgY29udGFpbnMgYXJyYXkgb2YgbmFtZS92YWx1ZSBvYmplY3RzLicsXG5cbiAgICAvLyBFeHRyYSBoZWFkZXJzIHRvIHVzZSB3aXRoIFhNTEh0dHBSZXF1ZXN0IChKU09OKVxuICAgIHhockhlYWRlcnM6ICcnXG4gIH0sXG4gIEVSUk9SUzoge1xuICAgIGVycm9yTWF4RmlsZXM6ICdlcnJvci1tYXgtZmlsZXMnLFxuICAgIGVycm9yTWF4RmlsZXNJblByb2Nlc3M6ICdlcnJvci1tYXgtZmlsZXMtaW4tcHJvY2VzcycsXG4gICAgZXJyb3JBY2NlcHRGaWxlVHlwZTogJ2Vycm9yLWFjY2VwdC1maWxlLXR5cGUnLFxuICAgIGVycm9yTWF4RmlsZVNpemU6ICdlcnJvci1tYXgtZmlsZS1zaXplJyxcbiAgICBlcnJvclVybDogJ2Vycm9yLXVybCcsXG4gICAgZXJyb3JYaHJIZWFkZXJzOiAnZXJyb3IteGhyLWhlYWRlcnMnXG4gIH0sXG4gIFNUQVRVUzoge1xuICAgIG5vdFN0YXJ0ZWQ6ICdub3Qtc3RhcnRlZCcsXG4gICAgaW5Qcm9jZXNzOiAnaW4tcHJvY2VzcycsXG4gICAgYWJvcnRlZDogJ2Fib3J0ZWQnLFxuICAgIGVycm9yZWQ6ICdlcnJvcmVkJyxcbiAgICBjb21wbGV0ZWQ6ICdjb21wbGV0ZWQnXG4gIH0sXG5cbiAgLyoqXG4gICAqIEZvcm1hdHMgdGhlIGZpbGUgc2l6ZSB0byBodW1hbiByZWFkYWJsZS5cbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtudW1iZXJ9IGJ5dGVzIFRoZSBzaXplIHZhbHVlIGluIGJ5dGVzLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZGVjaW1hbHMgVGhlIGRlY2ltYWwgcG9pbnQuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IGZvcm1hdGVkIHRvIHVzZSBpbiB1aS5cbiAgICovXG4gIGZvcm1hdEJ5dGVzKGJ5dGVzOiBudW1iZXIsIGRlY2ltYWxzID0gMikge1xuICAgIGNvbnN0IHVuaXRzID0gWydCeXRlcycsICdLQicsICdNQicsICdHQicsICdUQicsICdQQicsICdFQicsICdaQicsICdZQiddO1xuICAgIGlmICh0eXBlb2YgYnl0ZXMgIT09ICdudW1iZXInKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIGxldCBpbmRleDtcbiAgICBjb25zdCBtdWx0aXBsaWVyID0gMTAwMDtcbiAgICBsZXQgdmFsID0gYnl0ZXM7XG4gICAgZm9yIChpbmRleCA9IDA7IHZhbCA+IG11bHRpcGxpZXI7IGluZGV4KyspIHtcbiAgICAgIHZhbCAvPSBtdWx0aXBsaWVyO1xuICAgIH1cbiAgICByZXR1cm4gYCR7cGFyc2VGbG9hdCh2YWwudG9GaXhlZChkZWNpbWFscykpfSAke3VuaXRzW2luZGV4XX1gO1xuICB9LFxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHZhbHVlIGZvciBnaXZlbiBzbG90LlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge29iamVjdH0gc2hhZG93Um9vdCBUaGUgc2hhZG93IHJvb3QuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzbG90TmFtZSBUaGUgc2xvdCBuYW1lLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgc2xvdCB2YWwuXG4gICAqL1xuICBzbG90VmFsKHNoYWRvd1Jvb3Q6IGFueSwgc2xvdE5hbWU6IHN0cmluZykge1xuICAgIGNvbnN0IGQ6IGFueSA9IHRoaXMuREVGQVVMVFM7XG4gICAgY29uc3QgaHRtbCA9IChzbG90OiBhbnkpID0+IHNsb3Q/LmFzc2lnbmVkTm9kZXMoKVswXT8uaW5uZXJIVE1MO1xuICAgIGNvbnN0IHNsb3QgPSBzaGFkb3dSb290Py5xdWVyeVNlbGVjdG9yKGBzbG90W25hbWU9XCIke3Nsb3ROYW1lfVwiXWApO1xuICAgIHJldHVybiBodG1sKHNsb3QpIHx8IGRbY2FtZWxDYXNlKHNsb3ROYW1lKV07XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IElkc1VwbG9hZEFkdmFuY2VkU2hhcmVkO1xuIl0sIm5hbWVzIjpbInNsb3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/components/ids-upload-advanced/ids-upload-advanced-shared.ts\n");

/***/ }),

/***/ "./src/components/ids-upload-advanced/ids-upload-advanced.ts":
/*!*******************************************************************!*\
  !*** ./src/components/ids-upload-advanced/ids-upload-advanced.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ IdsUploadAdvanced)\n/* harmony export */ });\n/* harmony import */ var _core_ids_decorators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/ids-decorators */ \"./src/core/ids-decorators.ts\");\n/* harmony import */ var _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/ids-attributes */ \"./src/core/ids-attributes.ts\");\n/* harmony import */ var _utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/ids-string-utils/ids-string-utils */ \"./src/utils/ids-string-utils/ids-string-utils.ts\");\n/* harmony import */ var _mixins_ids_events_mixin_ids_events_mixin__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../mixins/ids-events-mixin/ids-events-mixin */ \"./src/mixins/ids-events-mixin/ids-events-mixin.ts\");\n/* harmony import */ var _mixins_ids_theme_mixin_ids_theme_mixin__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../mixins/ids-theme-mixin/ids-theme-mixin */ \"./src/mixins/ids-theme-mixin/ids-theme-mixin.ts\");\n/* harmony import */ var _mixins_ids_locale_mixin_ids_locale_mixin__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../mixins/ids-locale-mixin/ids-locale-mixin */ \"./src/mixins/ids-locale-mixin/ids-locale-mixin.ts\");\n/* harmony import */ var _core_ids_element__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/ids-element */ \"./src/core/ids-element.ts\");\n/* harmony import */ var _ids_upload_advanced_file__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ids-upload-advanced-file */ \"./src/components/ids-upload-advanced/ids-upload-advanced-file.ts\");\n/* harmony import */ var _ids_hyperlink_ids_hyperlink__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../ids-hyperlink/ids-hyperlink */ \"./src/components/ids-hyperlink/ids-hyperlink.ts\");\n/* harmony import */ var _ids_upload_advanced_shared__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./ids-upload-advanced-shared */ \"./src/components/ids-upload-advanced/ids-upload-advanced-shared.ts\");\n/* harmony import */ var _ids_upload_advanced_scss__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./ids-upload-advanced.scss */ \"./src/components/ids-upload-advanced/ids-upload-advanced.scss\");\n/* harmony import */ var _ids_toolbar_ids_toolbar__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../ids-toolbar/ids-toolbar */ \"./src/components/ids-toolbar/ids-toolbar.ts\");\n/* harmony import */ var _ids_button_ids_button__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../ids-button/ids-button */ \"./src/components/ids-button/ids-button.ts\");\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result)\n    __defProp(target, key, result);\n  return result;\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst shared = _ids_upload_advanced_shared__WEBPACK_IMPORTED_MODULE_9__[\"default\"];\nconst Base = (0,_mixins_ids_theme_mixin_ids_theme_mixin__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(\n  (0,_mixins_ids_locale_mixin_ids_locale_mixin__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(\n    (0,_mixins_ids_events_mixin_ids_events_mixin__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(\n      _core_ids_element__WEBPACK_IMPORTED_MODULE_6__[\"default\"]\n    )\n  )\n);\nlet IdsUploadAdvanced = class extends Base {\n  fileInput;\n  droparea;\n  files = [];\n  xhrHeaders;\n  send;\n  constructor() {\n    super();\n  }\n  /**\n   * Return the attributes we handle as getters/setters\n   * @returns {Array} The attributes in an array\n   */\n  static get attributes() {\n    return [\n      ...super.attributes,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ACCEPT,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.AUTO_START,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ICON,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ICON_SIZE,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.MAX_FILE_SIZE,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.MAX_FILES,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.MAX_FILES_IN_PROCESS,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.METHOD,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.PARAM_NAME,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SHOW_BROWSE_LINK,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.URL,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.MODE\n    ];\n  }\n  /**\n   * Custom Element `connectedCallback` implementation\n   * @returns {void}\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    this.fileInput = this.shadowRoot?.querySelector(\".file-input\");\n    this.droparea = this.shadowRoot?.querySelector(\".droparea\");\n    this.files = [];\n    this.#attachEventHandlers();\n  }\n  /**\n   * Inner template contents\n   * @returns {string} The template\n   */\n  template() {\n    const toBool = _utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool;\n    const d = shared.DEFAULTS;\n    const hiddenClass = (opt) => opt ? \" hidden\" : \"\";\n    const accept = this.accept ? ` accept=\"${this.accept}\"` : \"\";\n    const disabled = toBool(this.disabled) ? \" disabled\" : \"\";\n    const multiple = Number(this.maxFilesInProcess) > 1 ? \" multiple\" : \"\";\n    const hiddenArea = `\n      <div class=\"hidden\">\n        <slot name=\"text-btn-cancel\">${d.textBtnCancel}</slot>\n        <slot name=\"text-btn-cancel-all\">${d.textBtnCancelAll}</slot>\n        <slot name=\"text-btn-close-error\">${d.textBtnCloseError}</slot>\n        <slot name=\"text-btn-remove\">${d.textBtnRemove}</slot>\n        <slot name=\"text-btn-start-all\">${d.textBtnStartAll}</slot>\n        <slot name=\"text-droparea\">${d.textDroparea}</slot>\n        <slot name=\"text-droparea-with-browse\">${d.textDropareaWithBrowse}</slot>\n        <slot name=\"text-droparea-with-browse-link\">${d.textDropareaWithBrowseLink}</slot>\n        <slot name=\"text-progress-label\">${d.textProgressLabel}</slot>\n        <slot name=\"error-accept-file-type\">${d.errorAcceptFileType}</slot>\n        <slot name=\"error-max-files\">${d.errorMaxFiles}</slot>\n        <slot name=\"error-max-files-in-process\">${d.errorMaxFilesInProcess}</slot>\n        <slot name=\"error-max-file-size\">${d.errorMaxFileSize}</slot>\n        <slot name=\"error-url\">${d.errorUrl}</slot>\n        <slot name=\"error-xhr-headers\">${d.errorXhrHeaders}</slot>\n        <slot name=\"xhr-headers\">${d.xhrHeaders}</slot>\n      </div>`;\n    const content = `\n      <div class=\"content\">\n        <div class=\"no-browse-link${hiddenClass(this.showBrowseLinkVal)}\">\n          <span class=\"droparea-label\">${this.getDropareaLabel(null)}</span>\n        </div>\n        <div class=\"has-browse-link${hiddenClass(!this.showBrowseLinkVal)}\">\n          <label>\n            <input type=\"file\" class=\"file-input\"${accept}\"${multiple}${disabled} />\n            <span class=\"droparea-label\" part=\"label\">${this.getDropareaLabel(true)}</span>\n          </label>\n        </div>\n      </div>`;\n    return `\n      <div class=\"ids-upload-advanced${disabled}\">\n        ${hiddenArea}\n        <div class=\"droparea\" part=\"container\">\n          <ids-icon icon=\"${this.icon}\" class=\"icon\"></ids-icon>\n          ${content}\n        </div>\n        <div class=\"errorarea\" part=\"errorarea\"></div>\n        <div class=\"filesarea\" part=\"filesarea\"></div>\n      </div>`;\n  }\n  /**\n   * Send file to server, by XMLHttpRequest\n   * Must have url value\n   * @private\n   * @param {object} formData - Contains the form data / file data.\n   * @param {object} uiElem The ui element\n   * @returns {void}\n   */\n  sendByXHR(formData, uiElem) {\n    const xhr = new XMLHttpRequest();\n    xhr.upload.addEventListener(\"progress\", uiElem.progressHandler.bind(uiElem), false);\n    xhr.addEventListener(\"load\", uiElem.completeHandler.bind(uiElem), false);\n    xhr.addEventListener(\"error\", uiElem.errorHandler.bind(uiElem), false);\n    xhr.addEventListener(\"abort\", uiElem.abortHandler.bind(uiElem), false);\n    xhr.open(this.method, this.url);\n    xhr.setRequestHeader(\"param-name\", this.paramName);\n    if (this.xhrHeaders) {\n      const isValid = (h) => h && h.name !== \"\";\n      this.xhrHeaders.forEach((h) => {\n        if (isValid(h)) {\n          xhr.setRequestHeader(h.name, h.value);\n        }\n      });\n    }\n    xhr.send(formData);\n    uiElem?.addEventListener(\"abort\", () => {\n      xhr.abort();\n    });\n    uiElem?.addEventListener(\"error\", () => {\n      xhr.abort();\n      this.setToolbar();\n    });\n  }\n  /**\n   * Set xhr headers value\n   * @private\n   * @returns {void}\n   */\n  setXhrHeaders() {\n    const errorarea = this.shadowRoot?.querySelector(\".errorarea\");\n    if (errorarea)\n      errorarea.innerHTML = \"\";\n    let xhrHeaders = shared.slotVal(this.shadowRoot, \"xhr-headers\");\n    let isValid = true;\n    try {\n      xhrHeaders = JSON.parse(xhrHeaders.trim());\n    } catch (e) {\n      isValid = false;\n    }\n    if (!isValid) {\n      const error = shared.slotVal(this.shadowRoot, \"error-xhr-headers\");\n      this.errorMessage({ error, data: xhrHeaders.toString() });\n      this.xhrHeaders = null;\n    } else if (!Array.isArray(xhrHeaders) && typeof xhrHeaders === \"object\" && xhrHeaders.name && xhrHeaders.value) {\n      this.xhrHeaders = [xhrHeaders];\n    } else {\n      this.errorMessage({ remove: true });\n      this.xhrHeaders = xhrHeaders;\n    }\n  }\n  /**\n   * Dispatch event\n   * @private\n   * @param {string} eventName The event name\n   * @param {object} e Actual event\n   * @param {string} id The id\n   * @param {string} file The file\n   * @returns {void}\n   */\n  dispatchFileEvent(eventName, e, id, file) {\n    this.triggerEvent(eventName, this, {\n      detail: {\n        id,\n        file,\n        elem: this,\n        error: this.getErrorValue(e.detail.error),\n        loaded: e.detail.loaded,\n        loadedFormatted: e.detail.loadedFormatted,\n        nativeEvent: e.detail.nativeEvent,\n        size: e.detail.size,\n        sizeFormatted: e.detail.sizeFormatted,\n        status: e.detail.status,\n        value: e.detail.value\n      }\n    });\n  }\n  /**\n   * Get droparea label html\n   * @private\n   * @param {boolean} hasBrowse if true, use with browse link\n   * @returns {string} The html output\n   */\n  getDropareaLabel(hasBrowse) {\n    const text = shared.slotVal(this.shadowRoot, \"text-droparea\");\n    const textHasBrowse = shared.slotVal(this.shadowRoot, \"text-droparea-with-browse\");\n    const link = shared.slotVal(this.shadowRoot, \"text-droparea-with-browse-link\");\n    let browseLabelHtml = \"\";\n    if (!(0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(hasBrowse)) {\n      browseLabelHtml = `<ids-text class=\"inline\">${text}</ids-text>`;\n    } else {\n      const textArray = textHasBrowse.split(\"{browseLink}\");\n      if (textArray.length === 2) {\n        browseLabelHtml = `\n          <ids-text class=\"inline\">${textArray[0]}</ids-text>\n          <ids-hyperlink part=\"link\" class=\"inline hyperlink\">${link}</ids-hyperlink>\n          <ids-text class=\"inline\">${textArray[1]}</ids-text>`;\n      } else {\n        browseLabelHtml = textArray[0];\n      }\n    }\n    return browseLabelHtml;\n  }\n  /**\n   * Set droparea label html\n   * @private\n   * @returns {void}\n   */\n  setDropareaLabel() {\n    const hasBrowse = this.showBrowseLinkVal;\n    const className = \"hidden\";\n    const sel = {\n      noBrowse: \".no-browse-link\",\n      hasBrowse: \".has-browse-link\"\n    };\n    const elem = {\n      noBrowse: this.shadowRoot?.querySelector(`${sel.noBrowse} .droparea-label`),\n      hasBrowse: this.shadowRoot?.querySelector(`${sel.hasBrowse} .droparea-label`),\n      noBrowseContainer: this.shadowRoot?.querySelector(sel.noBrowse),\n      hasBrowseContainer: this.shadowRoot?.querySelector(sel.hasBrowse)\n    };\n    if (hasBrowse) {\n      if (elem.hasBrowse)\n        elem.hasBrowse.innerHTML = this.getDropareaLabel(true);\n      elem.noBrowseContainer?.classList.add(className);\n      elem.hasBrowseContainer?.classList.remove(className);\n    } else {\n      if (elem.noBrowse)\n        elem.noBrowse.innerHTML = this.getDropareaLabel(null);\n      elem.noBrowseContainer?.classList.remove(className);\n      elem.hasBrowseContainer?.classList.add(className);\n    }\n  }\n  /**\n   * Set an arbitrary error message\n   * @param {any} opt The error message options.\n   * @returns {void}\n   */\n  setError(opt = {}) {\n    const { message, fileNodes } = opt;\n    if (message) {\n      if (fileNodes) {\n        const setErrorMessage = (n) => {\n          const el = /ids-upload-advanced-file/gi.test(n.nodeName) ? n : n?.uiElem;\n          if (el && (typeof el.status === \"undefined\" || el.status === shared.STATUS.notStarted || el.status === shared.STATUS.inProcess)) {\n            el.error = message;\n          }\n        };\n        if (fileNodes.constructor === Array) {\n          fileNodes.forEach((n) => setErrorMessage(n));\n        } else {\n          setErrorMessage(fileNodes);\n        }\n      } else {\n        this.errorMessage({ error: message });\n      }\n    }\n  }\n  /**\n   * Show/Hide given error message\n   * @private\n   * @param {any} opt The error message options.\n   * @returns {void}\n   */\n  errorMessage(opt) {\n    const {\n      error,\n      // The error message\n      data,\n      // The data to show with message if any\n      remove\n      // If set true, will remove error message\n    } = opt;\n    const errorarea = this.shadowRoot?.querySelector(\".errorarea\");\n    errorarea?.classList.remove(\"has-error\");\n    if (errorarea)\n      errorarea.innerHTML = \"\";\n    if (!remove) {\n      const disabled = this.disabled ? ` disabled=\"true\"` : \"\";\n      const textCloseBtnError = shared.slotVal(this.shadowRoot, \"text-btn-close-error\");\n      let dataHtml = \"\";\n      if (data) {\n        dataHtml = `\n          <div class=\"error-data-container\" part=\"error-data-container\">\n            <ids-text class=\"error-data\">${data}</ids-text>\n          </div>`;\n      }\n      const html = `\n        <div class=\"status\" part=\"error-status\">\n          <ids-alert class=\"errored\" icon=\"error\" part=\"error-status-icon\"${disabled}></ids-alert>\n        </div>\n        <div class=\"error-row\" part=\"error-row\">\n          <ids-text class=\"error-msg\">${error}</ids-text>\n          ${dataHtml}\n        </div>\n        <div class=\"btn-close\">\n          <ids-button id=\"btn-close-error\" part=\"btn-close-error\">\n            <span class=\"audible\">${textCloseBtnError}</span>\n            <ids-icon icon=\"close\" size=\"xsmall\"></ids-icon>\n          </ids-button>\n        </div>\n      `;\n      errorarea?.classList.add(\"has-error\");\n      errorarea?.insertAdjacentHTML(\"afterbegin\", html);\n    }\n  }\n  /**\n   * Get status filter files\n   * @private\n   * @param {string} status The status\n   * @returns {Array} The filter files\n   */\n  statusFiles(status) {\n    return this.files.filter((file) => file.status === status);\n  }\n  /**\n   * Set Disabled\n   * NOTE: Making Disabled while In-Process uploading, will NOT stop uploading files.\n   * @private\n   * @returns {void}\n   */\n  setDisabled() {\n    if (!this.shadowRoot)\n      return;\n    const rootEl = this.shadowRoot.querySelector(\".ids-upload-advanced\");\n    const alertError = this.shadowRoot.querySelector(\".errorarea .status ids-alert\");\n    const link = this.shadowRoot.querySelector(\"ids-hyperlink\");\n    const uiElemArr = [].slice.call(this.shadowRoot.querySelectorAll(\"ids-upload-advanced-file\"));\n    const attr = (el, val2) => {\n      if (val2) {\n        el?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED, val2.toString());\n      } else {\n        el?.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED);\n      }\n    };\n    const val = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(this.disabled);\n    if (val) {\n      attr(this.fileInput, val);\n      attr(alertError, val);\n      uiElemArr.forEach((uiElem) => attr(uiElem, val));\n      rootEl?.classList.add(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED);\n      link?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED, \"true\");\n    } else {\n      attr(this.fileInput, null);\n      attr(alertError, null);\n      uiElemArr.forEach((uiElem) => attr(uiElem, null));\n      rootEl?.classList.remove(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED);\n      link?.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED);\n    }\n  }\n  /**\n   * Get error value\n   * @private\n   * @param {string} error The error\n   * @returns {string} The error value\n   */\n  getErrorValue(error) {\n    const isInSlot = Object.values(shared.ERRORS).indexOf(error) > -1;\n    if (isInSlot) {\n      return error === shared.ERRORS.errorMaxFiles ? this.errorMaxFilesVal : shared.slotVal(this.shadowRoot, error);\n    }\n    return error || \"\";\n  }\n  /**\n   * Check if file type or extension is allowed to accept\n   * @private\n   * @param {any} file to check types\n   * @returns {boolean} true if allowed to uploaded\n   */\n  validateAcceptFile(file) {\n    const fileExt = file.name.match(/\\.[^\\.]*$|$/)[0];\n    const sel = this.accept?.replace(/[, ]+/g, \"|\")?.replace(/\\/\\*/g, \"/.*\");\n    const re = new RegExp(`^(${sel})$`, \"i\");\n    if (this.accept && !(re.test(file.type) || re.test(fileExt))) {\n      return false;\n    }\n    return true;\n  }\n  /**\n   * Check for all type of validation requird before upload\n   * @private\n   * @param {any} file The file to check\n   * @returns {object} The result of validation isValid: true|false, error: msg if false\n   */\n  validation(file) {\n    const inProcess = this.inProcess.length;\n    const completed = inProcess + this.completed.length;\n    let r = { isValid: true };\n    if (typeof this.send !== \"function\" && !this.url) {\n      r = { isValid: false, error: shared.ERRORS.errorUrl };\n    } else if (completed >= Number(this.maxFiles)) {\n      r = { isValid: false, error: shared.ERRORS.errorMaxFiles };\n    } else if (inProcess >= Number(this.maxFilesInProcess)) {\n      r = { isValid: false, error: shared.ERRORS.errorMaxFilesInProcess };\n    } else if (!this.validateAcceptFile(file)) {\n      r = { isValid: false, error: shared.ERRORS.errorAcceptFileType };\n    } else if (Number(this.maxFileSize) !== shared.DEFAULTS.maxFileSize && file.size > this.maxFileSize) {\n      r = { isValid: false, error: shared.ERRORS.errorMaxFileSize };\n    }\n    return r;\n  }\n  /**\n   * Start given file node in to process\n   * @private\n   * @param {object} fileNode Filenode related to file element.\n   * @returns {void}\n   */\n  startInProcess(fileNode) {\n    const status = fileNode?.status;\n    if (typeof status === \"undefined\" || status === shared.STATUS.notStarted) {\n      const { id, file, uiElem } = fileNode;\n      const detail = {\n        id,\n        file,\n        elem: this,\n        size: file.size,\n        sizeFormatted: shared.formatBytes((0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToNumber)(file.size)),\n        status: shared.STATUS.inProcess,\n        value: \"0\"\n      };\n      fileNode.status = shared.STATUS.inProcess;\n      uiElem.status = shared.STATUS.inProcess;\n      const formData = new FormData();\n      const paramName = this.paramName.replace(\"[]\", \"\");\n      formData.append(`${paramName}[]`, file);\n      if (typeof this.send === \"function\") {\n        this.send(formData, uiElem);\n      } else {\n        this.sendByXHR(formData, uiElem);\n      }\n      this.triggerEvent(\"beginupload\", uiElem, { detail });\n      this.triggerEvent(\"beginupload\", this, { detail });\n    }\n  }\n  /**\n   * Read the file contents using HTML5 FormData()\n   * @private\n   * @param {object} files File object containing uploaded files.\n   * @returns {void}\n   */\n  handleFileUpload(files) {\n    const filesarea = this.shadowRoot?.querySelector(\".filesarea\");\n    for (let i = 0, l = files.length; i < l; i++) {\n      const file = files[i];\n      const validation = this.validation(file);\n      const id = `file-${this.all.length}`;\n      const args = { elem: this, value: 0, file, id };\n      const html = this.fileTemplate.replace(\"{id}\", id).replace(\"{value}\", \"0\").replace(\"{file-name}\", file.name).replace(\"{size}\", file.size);\n      this.files.push(args);\n      const fileNode = this.files[this.files.length - 1];\n      filesarea?.insertAdjacentHTML(\"afterbegin\", html);\n      const uiElem = filesarea?.querySelector(`#${id}`);\n      fileNode.uiElem = uiElem;\n      this.handleFileEvent(uiElem);\n      if (validation.isValid) {\n        if (this.autoStart) {\n          this.startInProcess(fileNode);\n        } else {\n          fileNode.status = shared.STATUS.notStarted;\n          uiElem.status = shared.STATUS.notStarted;\n          const detail = {\n            id,\n            file,\n            elem: this,\n            size: file.size,\n            sizeFormatted: shared.formatBytes((0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToNumber)(file.size)),\n            status: shared.STATUS.inProcess,\n            value: \"0\"\n          };\n          this.triggerEvent(\"notstartedupload\", uiElem, { detail });\n          this.triggerEvent(\"notstartedupload\", this, { detail });\n        }\n      } else {\n        fileNode.status = shared.STATUS.errored;\n        uiElem.error = validation.error;\n      }\n    }\n    this.setToolbar();\n    if (this.fileInput)\n      this.fileInput.value = \"\";\n  }\n  /**\n   * Set toolbar\n   * @private\n   * @returns {void}\n   */\n  setToolbar() {\n    const toolbarEl = this.shadowRoot?.querySelector(\".toolbararea\");\n    if (this.notStarted.length > 0) {\n      if (!toolbarEl) {\n        const template = document.createElement(\"template\");\n        template.innerHTML = this.toolbarTemplate;\n        const refEl = this.shadowRoot?.querySelector(\".errorarea\");\n        if (refEl)\n          this.container?.insertBefore(template.content.cloneNode(true), refEl);\n      }\n    } else {\n      toolbarEl?.classList.add(\"before-remove-transition\");\n      this.onEvent(\"transitionend\", toolbarEl, () => {\n        toolbarEl?.remove();\n      });\n    }\n  }\n  /**\n   * Handle slotchange event\n   * @private\n   * @returns {void}\n   */\n  handleSlotchangeEvent() {\n    const dropareaLabelSlotsName = [\n      \"text-droparea\",\n      \"text-droparea-with-browse\",\n      \"text-droparea-with-browse-link\"\n    ];\n    dropareaLabelSlotsName.forEach((slotName) => {\n      const slot = this.shadowRoot?.querySelector(`slot[name=\"${slotName}\"]`);\n      this.onEvent(\"slotchange\", slot, () => {\n        this.setDropareaLabel();\n      });\n    });\n    const xhrHeadersSlot = this.shadowRoot?.querySelector(`slot[name=\"xhr-headers\"]`);\n    this.onEvent(\"slotchange\", xhrHeadersSlot, () => {\n      this.setXhrHeaders();\n    });\n  }\n  /**\n   * Handle label click event\n   * @private\n   * @returns {void}\n   */\n  handleLabelClickEvent() {\n    const label = this.shadowRoot?.querySelector(\"label\");\n    this.onEvent(\"click\", label, (e) => {\n      const hasClass = (c) => e.target?.classList?.contains(c);\n      if (!(hasClass(\"hyperlink\") || hasClass(\"file-input\"))) {\n        e.preventDefault();\n      }\n    });\n    const errorarea = this.shadowRoot?.querySelector(\".errorarea\");\n    this.onEvent(\"click\", errorarea, (e) => {\n      const id = e.target?.getAttribute(\"id\");\n      if (id === \"btn-close-error\")\n        this.errorMessage({ remove: true });\n    });\n  }\n  /**\n   * Handle fileInput change event\n   * @private\n   * @returns {void}\n   */\n  handleFileInputChangeEvent() {\n    this.onEvent(\"change\", this.fileInput, () => {\n      this.handleFileUpload(this.fileInput?.files);\n    });\n  }\n  /**\n   * Handle droparea dragenter event\n   * @private\n   * @returns {void}\n   */\n  handleDropareaDragenterEvent() {\n    this.onEvent(\"dragenter\", this.droparea, (e) => {\n      e.stopPropagation();\n      e.preventDefault();\n      if (this.disabled) {\n        return;\n      }\n      this.triggerEvent(\"filesdragenter\", this, { detail: { elem: this } });\n      this.droparea?.classList.add(\"dragenter\");\n    });\n  }\n  /**\n   * Handle droparea dragover event\n   * @private\n   * @returns {void}\n   */\n  handleDropareaDragoverEvent() {\n    this.onEvent(\"dragover\", this.droparea, (e) => {\n      e.stopPropagation();\n      e.preventDefault();\n    });\n  }\n  /**\n   * Handle droparea drop event\n   * @private\n   * @returns {void}\n   */\n  handleDropareaDropEvent() {\n    this.onEvent(\"drop\", this.droparea, (e) => {\n      e.preventDefault();\n      if (this.disabled) {\n        return;\n      }\n      this.droparea?.classList.remove(\"dragenter\");\n      const files = e.dataTransfer.files;\n      this.triggerEvent(\"filesdrop\", this, { detail: { elem: this, files } });\n      this.handleFileUpload(files);\n    });\n  }\n  /**\n   * Handle document drag-drop events\n   * If the files are dropped outside the div, files will open in the browser window.\n   * To avoid this prevent 'drop' event on document.\n   * @private\n   * @returns {void}\n   */\n  handleDocumentDragDropEvents() {\n    const events = [\"dragenter\", \"dragover\", \"drop\"];\n    events.forEach((eventName) => {\n      this.onEvent(eventName, document, (e) => {\n        e.stopPropagation();\n        e.preventDefault();\n        if (e.type === \"dragover\") {\n          this.droparea?.classList.remove(\"dragenter\");\n        }\n      });\n    });\n  }\n  /**\n   * Handle file event\n   * @private\n   * @param {object} uiElem The ui element\n   * @returns {void}\n   */\n  handleFileEvent(uiElem) {\n    const events = [\"error\", \"complete\", \"abort\", \"cancel\", \"start\", \"closebuttonclick\", \"startbuttonclick\"];\n    events.forEach((eventName) => {\n      this.onEvent(eventName, uiElem, (e) => {\n        const target = { node: {}, idx: -1 };\n        for (let i = 0; i < this.files.length; i++) {\n          if (uiElem.id === this.files[i].id) {\n            this.files[i] = { ...this.files[i], ...e.detail };\n            target.node = this.files[i];\n            target.idx = i;\n          }\n        }\n        this.dispatchFileEvent(eventName, e, target.node.id, target.node.file);\n        if (/closebuttonclick|abort|cancel/g.test(eventName)) {\n          uiElem?.abortHandler();\n          uiElem?.remove();\n          if (target.node.status === shared.STATUS.notStarted) {\n            this.files.splice(target.idx, 1);\n          }\n          this.setToolbar();\n        }\n        if (/startbuttonclick|start/g.test(eventName)) {\n          this.startInProcess(target.node);\n          this.setToolbar();\n        }\n        if (eventName === \"error\") {\n          this.setToolbar();\n        }\n      });\n    });\n  }\n  /**\n   * Handle toolbar events\n   * @private\n   * @returns {void}\n   */\n  handleToolbarEvents() {\n    this.onEvent(\"selected\", this.container, (e) => {\n      const doAction = (action) => {\n        this.notStarted.forEach((fileNode) => fileNode.uiElem[action]());\n      };\n      const id = e?.detail?.elem?.getAttribute(\"id\");\n      if (id === \"btn-start-all\")\n        doAction(\"start\");\n      if (id === \"btn-cancel-all\")\n        doAction(\"cancel\");\n    });\n  }\n  /**\n   * Handle events\n   * @private\n   * @returns {void}\n   */\n  #attachEventHandlers() {\n    this.handleSlotchangeEvent();\n    this.handleLabelClickEvent();\n    this.handleFileInputChangeEvent();\n    this.handleDropareaDragenterEvent();\n    this.handleDropareaDragoverEvent();\n    this.handleDropareaDropEvent();\n    this.handleDocumentDragDropEvents();\n    this.handleToolbarEvents();\n  }\n  /**\n   * Get list of all added files\n   * @returns {Array} list of all added files\n   */\n  get all() {\n    return this.files;\n  }\n  /**\n   * Get list of not started files\n   * @returns {Array} list of not started files\n   */\n  get notStarted() {\n    return this.statusFiles(shared.STATUS.notStarted);\n  }\n  /**\n   * Get list of in process files\n   * @returns {Array} list of in process files\n   */\n  get inProcess() {\n    return this.statusFiles(shared.STATUS.inProcess);\n  }\n  /**\n   * Get list of aborted files\n   * @returns {Array} list of aborted files\n   */\n  get aborted() {\n    return this.statusFiles(shared.STATUS.aborted);\n  }\n  /**\n   * Get list of errored files\n   * @returns {Array} list of errored files\n   */\n  get errored() {\n    return this.statusFiles(shared.STATUS.errored);\n  }\n  /**\n   * Get list of completed files\n   * @returns {Array} list of completed files\n   */\n  get completed() {\n    return this.statusFiles(shared.STATUS.completed);\n  }\n  /**\n   * Get template for current slots to use in file element\n   * @private\n   * @returns {string} The slots template\n   */\n  get fileSlotsTemplate() {\n    const slotNames = [\n      \"text-btn-cancel\",\n      \"text-btn-close-error\",\n      \"text-btn-remove\",\n      \"error-accept-file-type\",\n      \"error-max-files-in-process\",\n      \"error-max-file-size\",\n      \"error-url\"\n    ];\n    let html = \"\";\n    slotNames.forEach((slotName) => {\n      html += `<span slot=\"${slotName}\">${shared.slotVal(this.shadowRoot, slotName)}</span>`;\n    });\n    html += `<span slot=\"error-max-files\">${this.errorMaxFilesVal}</span>`;\n    return html;\n  }\n  /**\n   * Get template for file element\n   * @private\n   * @returns {string} The slots template\n   */\n  get fileTemplate() {\n    return `\n      <ids-upload-advanced-file id=\"{id}\" value=\"{value}\" file-name=\"{file-name}\" size=\"{size}\">\n      ${this.fileSlotsTemplate}\n      </ids-upload-advanced-file>\n    `;\n  }\n  /**\n   * Get template for toolbar element\n   * @private\n   * @returns {string} The slots template\n   */\n  get toolbarTemplate() {\n    const text = {\n      start: shared.slotVal(this.shadowRoot, \"text-btn-start-all\"),\n      cancel: shared.slotVal(this.shadowRoot, \"text-btn-cancel-all\")\n    };\n    return `\n      <div class=\"toolbararea\" part=\"toolbararea\">\n        <ids-toolbar>\n          <ids-toolbar-section type=\"buttonset\" align=\"end\">\n            <ids-button id=\"btn-cancel-all\" part=\"btn-cancel-all\" role=\"button\" no-padding>\n              <span>${text.cancel}</span>\n            </ids-button>\n            <ids-button id=\"btn-start-all\" part=\"btn-start-all\" role=\"button\" no-padding>\n              <span>${text.start}</span>\n            </ids-button>\n          </ids-toolbar-section>\n        </ids-toolbar>\n      </div>\n    `;\n  }\n  /**\n   * Get error max files value\n   * @private\n   * @returns {string} The value of max files and error string\n   */\n  get errorMaxFilesVal() {\n    const val = shared.slotVal(this.shadowRoot, \"error-max-files\");\n    return val.replace(\"{maxFiles}\", this.maxFiles.toString());\n  }\n  /**\n   * Get show browse link value\n   * @private\n   * @returns {boolean} true, if show browse link true or its null\n   */\n  get showBrowseLinkVal() {\n    return this.showBrowseLink === null ? shared.DEFAULTS.showBrowseLink : (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(this.showBrowseLink);\n  }\n  /**\n   * Sets limit the file types to be uploaded\n   * @param {string} value The accept value\n   */\n  set accept(value) {\n    if (value) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ACCEPT, value.toString());\n      this.fileInput?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ACCEPT, value.toString());\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ACCEPT);\n      this.fileInput?.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ACCEPT);\n    }\n  }\n  get accept() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ACCEPT);\n  }\n  /**\n   * Allow automatic start upload, after files have been dropped or added\n   * @param {boolean|string|undefined} value The value\n   */\n  set autoStart(value) {\n    if (typeof value === \"boolean\" || typeof value === \"string\") {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.AUTO_START, value.toString());\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.AUTO_START);\n    }\n  }\n  get autoStart() {\n    const value = this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.AUTO_START);\n    return value !== null ? (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(value) : shared.DEFAULTS.autoStart;\n  }\n  /**\n   * Sets the whole element to disabled\n   * @param {boolean|string} value The disabled value\n   */\n  set disabled(value) {\n    const val = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(value);\n    if (val) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED, val.toString());\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED);\n    }\n    this.setDisabled();\n  }\n  get disabled() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED);\n  }\n  /**\n   * Sets the icon to be use in main drop area\n   * @param {string | undefined} value The icon value\n   */\n  set icon(value) {\n    const icon = this.shadowRoot?.querySelector(\".icon\");\n    if (value) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ICON, value.toString());\n      icon?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ICON, value.toString());\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ICON);\n      icon?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ICON, shared.DEFAULTS.icon);\n    }\n  }\n  get icon() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ICON) || shared.DEFAULTS.icon;\n  }\n  /**\n   * Sets the icon size to be use in main drop area\n   * @param {string | undefined | null} value The icon size value\n   */\n  set iconSize(value) {\n    const icon = this.shadowRoot?.querySelector(\".icon\");\n    if (value) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ICON_SIZE, value.toString());\n      icon?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SIZE, value.toString());\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ICON_SIZE);\n      icon?.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SIZE);\n    }\n  }\n  get iconSize() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ICON_SIZE);\n  }\n  /**\n   * Sets the max file size in bytes\n   * @param {number|string} value  The max-file-size value\n   */\n  set maxFileSize(value) {\n    if (value) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.MAX_FILE_SIZE, value.toString());\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.MAX_FILE_SIZE);\n    }\n  }\n  get maxFileSize() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.MAX_FILE_SIZE) || shared.DEFAULTS.maxFileSize;\n  }\n  /**\n   * Sets the max number of files can be uploaded\n   * @param {string | number | null} value The max-files value\n   */\n  set maxFiles(value) {\n    if (value) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.MAX_FILES, value.toString());\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.MAX_FILES);\n    }\n  }\n  get maxFiles() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.MAX_FILES) || shared.DEFAULTS.maxFiles;\n  }\n  /**\n   * Sets the max number of files can be uploaded while in process\n   * @param {string | number | null} value The max-files-in-process value\n   */\n  set maxFilesInProcess(value) {\n    if (value) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.MAX_FILES_IN_PROCESS, value.toString());\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.MAX_FILES_IN_PROCESS);\n    }\n  }\n  get maxFilesInProcess() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.MAX_FILES_IN_PROCESS) || shared.DEFAULTS.maxFilesInProcess;\n  }\n  /**\n   * Sets the method to use component XMLHttpRequest method to send files\n   * @param {string | undefined} value The method value\n   */\n  set method(value) {\n    if (value) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.METHOD, value.toString());\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.METHOD);\n    }\n  }\n  get method() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.METHOD) || shared.DEFAULTS.method;\n  }\n  /**\n   * Sets the variable name to read from server\n   * @param {string | undefined} value The param-name value\n   */\n  set paramName(value) {\n    if (value) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.PARAM_NAME, value.toString());\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.PARAM_NAME);\n    }\n  }\n  get paramName() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.PARAM_NAME) || shared.DEFAULTS.paramName;\n  }\n  /**\n   * Sets a link to browse files to upload\n   * @param {boolean|string} value The show-browse-link value\n   */\n  set showBrowseLink(value) {\n    if (value) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SHOW_BROWSE_LINK, value.toString());\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SHOW_BROWSE_LINK);\n    }\n    this.setDropareaLabel();\n  }\n  get showBrowseLink() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SHOW_BROWSE_LINK);\n  }\n  /**\n   * Sets the url to use component XMLHttpRequest method to send files\n   * @param {string} value The url value\n   */\n  set url(value) {\n    if (value) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.URL, value.toString());\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.URL);\n    }\n  }\n  get url() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.URL);\n  }\n};\nIdsUploadAdvanced = __decorateClass([\n  (0,_core_ids_decorators__WEBPACK_IMPORTED_MODULE_0__.customElement)(\"ids-upload-advanced\"),\n  (0,_core_ids_decorators__WEBPACK_IMPORTED_MODULE_0__.scss)(_ids_upload_advanced_scss__WEBPACK_IMPORTED_MODULE_10__[\"default\"])\n], IdsUploadAdvanced);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/ids-upload-advanced/ids-upload-advanced.ts\n");

/***/ }),

/***/ "./src/mixins/ids-field-height-mixin/ids-field-height-mixin.ts":
/*!*********************************************************************!*\
  !*** ./src/mixins/ids-field-height-mixin/ids-field-height-mixin.ts ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"FIELD_HEIGHTS\": () => (/* binding */ FIELD_HEIGHTS),\n/* harmony export */   \"default\": () => (/* binding */ ids_field_height_mixin_default)\n/* harmony export */ });\n/* harmony import */ var _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/ids-attributes */ \"./src/core/ids-attributes.ts\");\n/* harmony import */ var _utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/ids-string-utils/ids-string-utils */ \"./src/utils/ids-string-utils/ids-string-utils.ts\");\n\n\nconst FIELD_HEIGHTS = {\n  default: \"md\",\n  xs: \"xs\",\n  sm: \"sm\",\n  md: \"md\",\n  lg: \"lg\"\n};\nconst getFieldHeightClass = (val) => `field-height-${val}`;\nconst IdsFieldHeightMixin = (superclass) => class extends superclass {\n  constructor(...args) {\n    super(...args);\n    if (!this.state) {\n      this.state = {};\n    }\n    this.state.fieldHeight = FIELD_HEIGHTS.default;\n    this.state.compact = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_1__.stringToBool)(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.COMPACT)) || false;\n  }\n  static get attributes() {\n    return [\n      ...superclass.attributes,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.COMPACT,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.FIELD_HEIGHT\n    ];\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    if (this.hasAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.COMPACT)) {\n      this.compact = true;\n    } else {\n      this.container?.classList.add(getFieldHeightClass(this.fieldHeight));\n    }\n  }\n  /**\n   * @returns {string} that can be applied to an HTML element\n   * inside a template for determining the current Field Height class\n   */\n  templateFieldHeight() {\n    if (this.compact)\n      return \"\";\n    return this.fieldHeight ? `${getFieldHeightClass(this.fieldHeight)}` : \"\";\n  }\n  /**\n   *  Set the compact height\n   * @param {boolean|string} value If true will set `compact` attribute\n   */\n  set compact(value) {\n    const val = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_1__.stringToBool)(value);\n    if (val !== this.state.compact) {\n      this.state.compact = val;\n      if (val) {\n        this.fieldHeight = \"\";\n        this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.COMPACT, \"\");\n        this.container?.classList.add(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.COMPACT);\n        this.#doFieldHeightChange(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.COMPACT);\n      } else {\n        this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.COMPACT);\n        this.container?.classList.remove(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.COMPACT);\n        this.#doFieldHeightChange(\"\");\n      }\n    }\n  }\n  get compact() {\n    return (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_1__.stringToBool)(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.COMPACT));\n  }\n  /**\n   * Set the fieldHeight (height) of input\n   * @param {string} value [xs, sm, md, lg]\n   */\n  set fieldHeight(value) {\n    if (!value) {\n      this.state.fieldHeight = FIELD_HEIGHTS.default;\n      this.clearHeightClasses();\n      this.container?.classList.add(getFieldHeightClass(FIELD_HEIGHTS.default));\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.FIELD_HEIGHT);\n    } else {\n      const fieldHeight = FIELD_HEIGHTS[value];\n      if (fieldHeight && this.state.fieldHeight !== fieldHeight) {\n        this.state.fieldHeight = fieldHeight;\n        this.clearHeightClasses();\n        this.compact = false;\n        this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.FIELD_HEIGHT, fieldHeight);\n        this.container?.classList.add(getFieldHeightClass(fieldHeight));\n        this.#doFieldHeightChange(fieldHeight);\n      }\n    }\n  }\n  get fieldHeight() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.FIELD_HEIGHT) ?? FIELD_HEIGHTS.default;\n  }\n  /**\n   * Clears all existing field height classes defined on this component\n   * @returns {void}\n   */\n  clearHeightClasses() {\n    const heightClasses = Object.values(FIELD_HEIGHTS).map((h) => getFieldHeightClass(h));\n    this.container?.classList.remove(...heightClasses);\n  }\n  /**\n   * Runs optional `onFieldHeightChange` callback, if possible\n   * @param {string} fieldHeight the incoming `fieldHeight` or `compact` setting\n   */\n  #doFieldHeightChange(fieldHeight) {\n    if (typeof this.onFieldHeightChange === \"function\") {\n      this.onFieldHeightChange(fieldHeight);\n    }\n  }\n};\nvar ids_field_height_mixin_default = IdsFieldHeightMixin;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/mixins/ids-field-height-mixin/ids-field-height-mixin.ts\n");

/***/ }),

/***/ "./src/mixins/ids-hitbox-mixin/ids-hitbox-mixin.ts":
/*!*********************************************************!*\
  !*** ./src/mixins/ids-hitbox-mixin/ids-hitbox-mixin.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ids_hitbox_mixin_default)\n/* harmony export */ });\n/* harmony import */ var _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/ids-attributes */ \"./src/core/ids-attributes.ts\");\n/* harmony import */ var _utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/ids-string-utils/ids-string-utils */ \"./src/utils/ids-string-utils/ids-string-utils.ts\");\n\n\nconst IdsHitboxMixin = (superclass) => class extends superclass {\n  constructor(...args) {\n    super(...args);\n  }\n  static get attributes() {\n    return [\n      ...superclass.attributes,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.HITBOX\n    ];\n  }\n  connectedCallback() {\n    super.connectedCallback?.();\n    this.#setHitbox();\n  }\n  /**\n   * Sets the checkbox to add hitbox style.\n   * @param {boolean|string} value If true, it will apply the hitbox stylings.\n   */\n  set hitbox(value) {\n    const val = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_1__.stringToBool)(value);\n    if (val) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.HITBOX, val.toString());\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.HITBOX);\n    }\n    this.#setHitbox();\n  }\n  get hitbox() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.HITBOX);\n  }\n  #setHitbox() {\n    this.container?.classList.toggle(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.HITBOX, Boolean(this.hitbox));\n  }\n};\nvar ids_hitbox_mixin_default = IdsHitboxMixin;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbWl4aW5zL2lkcy1oaXRib3gtbWl4aW4vaWRzLWhpdGJveC1taXhpbi50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBMkI7QUFFRTtBQVE3QixNQUFNLGlCQUFpQixDQUErQixlQUFrQixjQUFjLFdBQVc7QUFBQSxFQUMvRixlQUFlLE1BQWE7QUFDMUIsVUFBTSxHQUFHLElBQUk7QUFBQSxFQUNmO0FBQUEsRUFFQSxXQUFXLGFBQWE7QUFDdEIsV0FBTztBQUFBLE1BQ0wsR0FBSSxXQUFtQjtBQUFBLE1BQ3ZCLG1FQUFpQjtBQUFOLElBQ2I7QUFBQSxFQUNGO0FBQUEsRUFFQSxvQkFBMEI7QUFDeEIsVUFBTSxvQkFBb0I7QUFDMUIsU0FBSyxXQUFXO0FBQUEsRUFDbEI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsSUFBSSxPQUFPLE9BQU87QUFDaEIsVUFBTSxNQUFNLHNGQUFZLENBQUMsS0FBSztBQUM5QixRQUFJLEtBQUs7QUFDUCxXQUFLLGFBQWEsbUVBQWlCLEVBQUUsSUFBSSxTQUFTLENBQUM7QUFBQSxJQUNyRCxPQUFPO0FBQ0wsV0FBSyxnQkFBZ0IsbUVBQWlCO0FBQUEsSUFDeEM7QUFFQSxTQUFLLFdBQVc7QUFBQSxFQUNsQjtBQUFBLEVBRUEsSUFBSSxTQUFTO0FBQUUsV0FBTyxLQUFLLGFBQWEsbUVBQWlCO0FBQUEsRUFBRztBQUFBLEVBRTVELGFBQWE7QUFDWCxTQUFLLFdBQVcsVUFBVSxPQUFPLG1FQUFpQixFQUFFLFFBQVEsS0FBSyxNQUFNLENBQUM7QUFBQSxFQUMxRTtBQUNGO0FBRUEsSUFBTywyQkFBUSIsInNvdXJjZXMiOlsid2VicGFjazovL2lkcy1lbnRlcnByaXNlLXdjLy4vc3JjL21peGlucy9pZHMtaGl0Ym94LW1peGluL2lkcy1oaXRib3gtbWl4aW4udHM/YTcxZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhdHRyaWJ1dGVzIH0gZnJvbSAnLi4vLi4vY29yZS9pZHMtYXR0cmlidXRlcyc7XG5pbXBvcnQgeyBJZHNCYXNlQ29uc3RydWN0b3IgfSBmcm9tICcuLi8uLi9jb3JlL2lkcy1lbGVtZW50JztcbmltcG9ydCB7IHN0cmluZ1RvQm9vbCB9IGZyb20gJy4uLy4uL3V0aWxzL2lkcy1zdHJpbmctdXRpbHMvaWRzLXN0cmluZy11dGlscyc7XG5cbi8qKlxuICogQSBtaXhpbiB0aGF0IHdpbGwgYWRkIGhpdGJveCBzdHlsaW5ncyB0byB0aGUgY29tcG9uZW50IGVsZW1lbnQuXG4gKiBAbWl4aW4gSWRzSGl0Ym94TWl4aW5cbiAqIEBwYXJhbSB7YW55fSBzdXBlcmNsYXNzIEFjY2VwdHMgYSBzdXBlcmNsYXNzIGFuZCBjcmVhdGVzIGEgbmV3IHN1YmNsYXNzIGZyb20gaXQuXG4gKiBAcmV0dXJucyB7YW55fSBUaGUgZXh0ZW5kZWQgb2JqZWN0XG4gKi9cbmNvbnN0IElkc0hpdGJveE1peGluID0gPFQgZXh0ZW5kcyBJZHNCYXNlQ29uc3RydWN0b3I+KHN1cGVyY2xhc3M6IFQpID0+IGNsYXNzIGV4dGVuZHMgc3VwZXJjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKC4uLmFyZ3M6IGFueVtdKSB7XG4gICAgc3VwZXIoLi4uYXJncyk7XG4gIH1cblxuICBzdGF0aWMgZ2V0IGF0dHJpYnV0ZXMoKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIC4uLihzdXBlcmNsYXNzIGFzIGFueSkuYXR0cmlidXRlcyxcbiAgICAgIGF0dHJpYnV0ZXMuSElUQk9YXG4gICAgXTtcbiAgfVxuXG4gIGNvbm5lY3RlZENhbGxiYWNrKCk6IHZvaWQge1xuICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrPy4oKTtcbiAgICB0aGlzLiNzZXRIaXRib3goKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBjaGVja2JveCB0byBhZGQgaGl0Ym94IHN0eWxlLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW58c3RyaW5nfSB2YWx1ZSBJZiB0cnVlLCBpdCB3aWxsIGFwcGx5IHRoZSBoaXRib3ggc3R5bGluZ3MuXG4gICAqL1xuICBzZXQgaGl0Ym94KHZhbHVlKSB7XG4gICAgY29uc3QgdmFsID0gc3RyaW5nVG9Cb29sKHZhbHVlKTtcbiAgICBpZiAodmFsKSB7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZShhdHRyaWJ1dGVzLkhJVEJPWCwgdmFsLnRvU3RyaW5nKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGVzLkhJVEJPWCk7XG4gICAgfVxuXG4gICAgdGhpcy4jc2V0SGl0Ym94KCk7XG4gIH1cblxuICBnZXQgaGl0Ym94KCkgeyByZXR1cm4gdGhpcy5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlcy5ISVRCT1gpOyB9XG5cbiAgI3NldEhpdGJveCgpIHtcbiAgICB0aGlzLmNvbnRhaW5lcj8uY2xhc3NMaXN0LnRvZ2dsZShhdHRyaWJ1dGVzLkhJVEJPWCwgQm9vbGVhbih0aGlzLmhpdGJveCkpO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBJZHNIaXRib3hNaXhpbjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/mixins/ids-hitbox-mixin/ids-hitbox-mixin.ts\n");

/***/ }),

/***/ "./node_modules/ids-identity/dist/theme-new/tokens/web/ui.config.font-sizes.ts":
/*!*************************************************************************************!*\
  !*** ./node_modules/ids-identity/dist/theme-new/tokens/web/ui.config.font-sizes.ts ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst fontSizes = [\n  { 10: '10px' },\n  { 12: '12px' },\n  { 14: '14px' },\n  { 16: '16px' },\n  { 20: '20px' },\n  { 24: '24px' },\n  { 28: '28px' },\n  { 32: '32px' },\n  { 40: '40px' },\n  { 48: '48px' },\n  { 60: '60px' },\n  { 72: '72px' }\n];\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (fontSizes);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaWRzLWlkZW50aXR5L2Rpc3QvdGhlbWUtbmV3L3Rva2Vucy93ZWIvdWkuY29uZmlnLmZvbnQtc2l6ZXMudHMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0EsSUFBSSxZQUFZO0FBQ2hCLElBQUksWUFBWTtBQUNoQixJQUFJLFlBQVk7QUFDaEIsSUFBSSxZQUFZO0FBQ2hCLElBQUksWUFBWTtBQUNoQixJQUFJLFlBQVk7QUFDaEIsSUFBSSxZQUFZO0FBQ2hCLElBQUksWUFBWTtBQUNoQixJQUFJLFlBQVk7QUFDaEIsSUFBSSxZQUFZO0FBQ2hCLElBQUksWUFBWTtBQUNoQixJQUFJO0FBQ0o7O0FBRUEsaUVBQWUsU0FBUyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaWRzLWVudGVycHJpc2Utd2MvLi9ub2RlX21vZHVsZXMvaWRzLWlkZW50aXR5L2Rpc3QvdGhlbWUtbmV3L3Rva2Vucy93ZWIvdWkuY29uZmlnLmZvbnQtc2l6ZXMudHM/OTQ0ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBmb250U2l6ZXMgPSBbXG4gIHsgMTA6ICcxMHB4JyB9LFxuICB7IDEyOiAnMTJweCcgfSxcbiAgeyAxNDogJzE0cHgnIH0sXG4gIHsgMTY6ICcxNnB4JyB9LFxuICB7IDIwOiAnMjBweCcgfSxcbiAgeyAyNDogJzI0cHgnIH0sXG4gIHsgMjg6ICcyOHB4JyB9LFxuICB7IDMyOiAnMzJweCcgfSxcbiAgeyA0MDogJzQwcHgnIH0sXG4gIHsgNDg6ICc0OHB4JyB9LFxuICB7IDYwOiAnNjBweCcgfSxcbiAgeyA3MjogJzcycHgnIH1cbl07XG5cbmV4cG9ydCBkZWZhdWx0IGZvbnRTaXplcztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/ids-identity/dist/theme-new/tokens/web/ui.config.font-sizes.ts\n");

/***/ })

}]);