"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkids_enterprise_wc"] = self["webpackChunkids_enterprise_wc"] || []).push([["src_components_ids-popup_ids-popup_ts"],{

/***/ "./src/components/ids-popup/ids-popup-attributes.ts":
/*!**********************************************************!*\
  !*** ./src/components/ids-popup/ids-popup-attributes.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ALIGNMENTS_EDGES_X\": () => (/* binding */ ALIGNMENTS_EDGES_X),\n/* harmony export */   \"ALIGNMENTS_EDGES_Y\": () => (/* binding */ ALIGNMENTS_EDGES_Y),\n/* harmony export */   \"ALIGNMENTS_X\": () => (/* binding */ ALIGNMENTS_X),\n/* harmony export */   \"ALIGNMENTS_Y\": () => (/* binding */ ALIGNMENTS_Y),\n/* harmony export */   \"ALIGNMENT_EDGES\": () => (/* binding */ ALIGNMENT_EDGES),\n/* harmony export */   \"ANIMATION_STYLES\": () => (/* binding */ ANIMATION_STYLES),\n/* harmony export */   \"ARROW_TYPES\": () => (/* binding */ ARROW_TYPES),\n/* harmony export */   \"CENTER\": () => (/* binding */ CENTER),\n/* harmony export */   \"DEFAULT_ALIGN_EDGE\": () => (/* binding */ DEFAULT_ALIGN_EDGE),\n/* harmony export */   \"POPUP_MAXHEIGHT_PROPNAME\": () => (/* binding */ POPUP_MAXHEIGHT_PROPNAME),\n/* harmony export */   \"POPUP_PROPERTIES\": () => (/* binding */ POPUP_PROPERTIES),\n/* harmony export */   \"POSITION_STYLES\": () => (/* binding */ POSITION_STYLES),\n/* harmony export */   \"TYPES\": () => (/* binding */ TYPES),\n/* harmony export */   \"formatAlignAttribute\": () => (/* binding */ formatAlignAttribute),\n/* harmony export */   \"onPlace\": () => (/* binding */ onPlace)\n/* harmony export */ });\n/* harmony import */ var _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/ids-attributes */ \"./src/core/ids-attributes.ts\");\n\nconst CENTER = \"center\";\nconst DEFAULT_ALIGN_EDGE = CENTER;\nconst ALIGNMENT_EDGES = [CENTER, \"bottom\", \"top\", \"left\", \"right\"];\nconst ALIGNMENTS_X = [CENTER, \"left\", \"right\"];\nconst ALIGNMENTS_Y = [CENTER, \"top\", \"bottom\"];\nconst ALIGNMENTS_EDGES_X = ALIGNMENTS_X.filter((x) => x !== CENTER);\nconst ALIGNMENTS_EDGES_Y = ALIGNMENTS_Y.filter((y) => y !== CENTER);\nconst ANIMATION_STYLES = [\n  \"fade\",\n  \"scale-in\"\n];\nconst ARROW_TYPES = [\"none\", \"bottom\", \"top\", \"left\", \"right\"];\nconst POSITION_STYLES = [\"fixed\", \"absolute\", \"viewport\"];\nconst TYPES = [\"none\", \"menu\", \"menu-alt\", \"modal\", \"tooltip\", \"tooltip-alt\", \"custom\", \"dropdown\"];\nconst POPUP_PROPERTIES = [\n  _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.ALIGN,\n  _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.ALIGN_X,\n  _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.ALIGN_Y,\n  _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.ALIGN_EDGE,\n  _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.ALIGN_TARGET,\n  _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.ARROW,\n  _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.ARROW_TARGET,\n  _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.ANIMATED,\n  _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.ANIMATION_STYLE,\n  _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.BLEED,\n  _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.HEIGHT,\n  _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.MAX_HEIGHT,\n  _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.POSITION_STYLE,\n  _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.TYPE,\n  _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.VISIBLE,\n  _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.WIDTH,\n  _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.X,\n  _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.Y\n];\nconst POPUP_MAXHEIGHT_PROPNAME = \"--ids-popup-maxheight\";\nfunction formatAlignAttribute(alignX, alignY, edge) {\n  if (ALIGNMENTS_EDGES_Y.includes(edge)) {\n    if (!alignX || !alignX.length || alignX === CENTER) {\n      return `${edge}`;\n    }\n    return `${edge}, ${alignX}`;\n  }\n  if (!alignY || !alignY.length || alignY === CENTER) {\n    return `${alignX}`;\n  }\n  if (edge === CENTER) {\n    return `${alignY}`;\n  }\n  return `${edge}, ${alignY}`;\n}\nfunction onPlace(popupRect) {\n  return popupRect;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9pZHMtcG9wdXAvaWRzLXBvcHVwLWF0dHJpYnV0ZXMudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUMyQjtBQUkzQixNQUFNLFNBQVM7QUFFZixNQUFNLHFCQUFxQjtBQUczQixNQUFNLGtCQUFrQixDQUFDLFFBQVEsVUFBVSxPQUFPLFFBQVEsT0FBTztBQUdqRSxNQUFNLGVBQWUsQ0FBQyxRQUFRLFFBQVEsT0FBTztBQUM3QyxNQUFNLGVBQWUsQ0FBQyxRQUFRLE9BQU8sUUFBUTtBQUM3QyxNQUFNLHFCQUFxQixhQUFhLE9BQU8sQ0FBQyxNQUFNLE1BQU0sTUFBTTtBQUNsRSxNQUFNLHFCQUFxQixhQUFhLE9BQU8sQ0FBQyxNQUFNLE1BQU0sTUFBTTtBQUdsRSxNQUFNLG1CQUFtQjtBQUFBLEVBQ3ZCO0FBQUEsRUFDQTtBQUNGO0FBR0EsTUFBTSxjQUFjLENBQUMsUUFBUSxVQUFVLE9BQU8sUUFBUSxPQUFPO0FBRzdELE1BQU0sa0JBQWtCLENBQUMsU0FBUyxZQUFZLFVBQVU7QUFHeEQsTUFBTSxRQUFRLENBQUMsUUFBUSxRQUFRLFlBQVksU0FBUyxXQUFXLGVBQWUsVUFBVSxVQUFVO0FBSWxHLE1BQU0sbUJBQW1CO0FBQUEsRUFDdkIsa0VBQWdCO0FBQUwsRUFDWCxvRUFBa0I7QUFBUCxFQUNYLG9FQUFrQjtBQUFQLEVBQ1gsdUVBQXFCO0FBQVYsRUFDWCx5RUFBdUI7QUFBWixFQUNYLGtFQUFnQjtBQUFMLEVBQ1gseUVBQXVCO0FBQVosRUFDWCxxRUFBbUI7QUFBUixFQUNYLDRFQUEwQjtBQUFmLEVBQ1gsa0VBQWdCO0FBQUwsRUFDWCxtRUFBaUI7QUFBTixFQUNYLHVFQUFxQjtBQUFWLEVBQ1gsMkVBQXlCO0FBQWQsRUFDWCxpRUFBZTtBQUFKLEVBQ1gsb0VBQWtCO0FBQVAsRUFDWCxrRUFBZ0I7QUFBTCxFQUNYLDhEQUFZO0FBQUQsRUFDWCw4REFBWTtBQUNkO0FBRUEsTUFBTSwyQkFBMkI7QUFzQmpDLFNBQVMscUJBQXFCLFFBQWdCLFFBQWdCLE1BQXNCO0FBRWxGLE1BQUksbUJBQW1CLFNBQVMsSUFBSSxHQUFHO0FBQ3JDLFFBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxVQUFVLFdBQVcsUUFBUTtBQUNsRCxhQUFPLEdBQUc7QUFBQSxJQUNaO0FBQ0EsV0FBTyxHQUFHLFNBQVM7QUFBQSxFQUNyQjtBQUdBLE1BQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxVQUFVLFdBQVcsUUFBUTtBQUNsRCxXQUFPLEdBQUc7QUFBQSxFQUNaO0FBQ0EsTUFBSSxTQUFTLFFBQVE7QUFDbkIsV0FBTyxHQUFHO0FBQUEsRUFDWjtBQUNBLFNBQU8sR0FBRyxTQUFTO0FBQ3JCO0FBUUEsU0FBUyxRQUFRLFdBQTZCO0FBQzVDLFNBQU87QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL2lkcy1lbnRlcnByaXNlLXdjLy4vc3JjL2NvbXBvbmVudHMvaWRzLXBvcHVwL2lkcy1wb3B1cC1hdHRyaWJ1dGVzLnRzP2M5MWYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgSWRzRWxlbWVudCBmcm9tICcuLi8uLi9jb3JlL2lkcy1lbGVtZW50JztcbmltcG9ydCB7IGF0dHJpYnV0ZXMgfSBmcm9tICcuLi8uLi9jb3JlL2lkcy1hdHRyaWJ1dGVzJztcblxuZXhwb3J0IHR5cGUgSWRzUG9wdXBFbGVtZW50UmVmID0gSWRzRWxlbWVudCB8IEhUTUxFbGVtZW50IHwgU1ZHRWxlbWVudCB8IG51bGw7XG5cbmNvbnN0IENFTlRFUiA9ICdjZW50ZXInO1xuXG5jb25zdCBERUZBVUxUX0FMSUdOX0VER0UgPSBDRU5URVI7XG5cbi8vIExvY2F0aW9ucyBpbiB3aGljaCBhIHBhcmVudC1wb3NpdGlvbmVkIFBvcHVwIGNhbiBiZSBsb2NhdGVkXG5jb25zdCBBTElHTk1FTlRfRURHRVMgPSBbQ0VOVEVSLCAnYm90dG9tJywgJ3RvcCcsICdsZWZ0JywgJ3JpZ2h0J107XG5cbi8vIE1ldGhvZHMgZm9yIFgvWS1jb29yZGluYXRlIGFsaWdubWVudCBhZ2FpbnN0IGEgcGFyZW50XG5jb25zdCBBTElHTk1FTlRTX1ggPSBbQ0VOVEVSLCAnbGVmdCcsICdyaWdodCddO1xuY29uc3QgQUxJR05NRU5UU19ZID0gW0NFTlRFUiwgJ3RvcCcsICdib3R0b20nXTtcbmNvbnN0IEFMSUdOTUVOVFNfRURHRVNfWCA9IEFMSUdOTUVOVFNfWC5maWx0ZXIoKHgpID0+IHggIT09IENFTlRFUik7XG5jb25zdCBBTElHTk1FTlRTX0VER0VTX1kgPSBBTElHTk1FTlRTX1kuZmlsdGVyKCh5KSA9PiB5ICE9PSBDRU5URVIpO1xuXG4vLyBQb3NzaWJsZSBhbmltYXRpb24gc3R5bGVzIGZvciB0aGUgUG9wdXBcbmNvbnN0IEFOSU1BVElPTl9TVFlMRVMgPSBbXG4gICdmYWRlJyxcbiAgJ3NjYWxlLWluJ1xuXTtcblxuLy8gQXJyb3cgRGlyZWN0aW9ucyAoZGVmYXVsdHMgdG8gJ25vbmUnKVxuY29uc3QgQVJST1dfVFlQRVMgPSBbJ25vbmUnLCAnYm90dG9tJywgJ3RvcCcsICdsZWZ0JywgJ3JpZ2h0J107XG5cbi8vIFBvc2l0aW9uIHR5cGVzXG5jb25zdCBQT1NJVElPTl9TVFlMRVMgPSBbJ2ZpeGVkJywgJ2Fic29sdXRlJywgJ3ZpZXdwb3J0J107XG5cbi8vIFR5cGVzIG9mIFBvcHVwc1xuY29uc3QgVFlQRVMgPSBbJ25vbmUnLCAnbWVudScsICdtZW51LWFsdCcsICdtb2RhbCcsICd0b29sdGlwJywgJ3Rvb2x0aXAtYWx0JywgJ2N1c3RvbScsICdkcm9wZG93biddO1xuXG4vLyBQcm9wZXJ0aWVzIGV4cG9zZWQgd2l0aCBnZXR0ZXJzL3NldHRlcnNcbi8vIHNhZmVTZXQvUmVtb3ZlQXR0cmlidXRlIGFsc28gdXNlIHRoZXNlIHNvIHdlIHB1bGwgdGhlbSBvdXRcbmNvbnN0IFBPUFVQX1BST1BFUlRJRVMgPSBbXG4gIGF0dHJpYnV0ZXMuQUxJR04sXG4gIGF0dHJpYnV0ZXMuQUxJR05fWCxcbiAgYXR0cmlidXRlcy5BTElHTl9ZLFxuICBhdHRyaWJ1dGVzLkFMSUdOX0VER0UsXG4gIGF0dHJpYnV0ZXMuQUxJR05fVEFSR0VULFxuICBhdHRyaWJ1dGVzLkFSUk9XLFxuICBhdHRyaWJ1dGVzLkFSUk9XX1RBUkdFVCxcbiAgYXR0cmlidXRlcy5BTklNQVRFRCxcbiAgYXR0cmlidXRlcy5BTklNQVRJT05fU1RZTEUsXG4gIGF0dHJpYnV0ZXMuQkxFRUQsXG4gIGF0dHJpYnV0ZXMuSEVJR0hULFxuICBhdHRyaWJ1dGVzLk1BWF9IRUlHSFQsXG4gIGF0dHJpYnV0ZXMuUE9TSVRJT05fU1RZTEUsXG4gIGF0dHJpYnV0ZXMuVFlQRSxcbiAgYXR0cmlidXRlcy5WSVNJQkxFLFxuICBhdHRyaWJ1dGVzLldJRFRILFxuICBhdHRyaWJ1dGVzLlgsXG4gIGF0dHJpYnV0ZXMuWVxuXTtcblxuY29uc3QgUE9QVVBfTUFYSEVJR0hUX1BST1BOQU1FID0gJy0taWRzLXBvcHVwLW1heGhlaWdodCc7XG5cbi8qKlxuICogRGVmaW5lcyBYWSBTd2l0Y2ggcmVzdWx0c1xuICovXG5leHBvcnQgdHlwZSBJZHNQb3B1cFhZU3dpdGNoUmVzdWx0ID0ge1xuICBmbGlwOiBib29sZWFuLFxuICBvcHBvc2l0ZUVkZ2U6IHN0cmluZyxcbiAgc2hvdWxkU3dpdGNoWFk6IGJvb2xlYW4sXG4gIHRhcmdldEVkZ2U6IHN0cmluZyxcbiAgeDogbnVtYmVyLFxuICB5OiBudW1iZXJcbn07XG5cbi8qKlxuICogRm9ybWF0cyB0aGUgdGV4dCB2YWx1ZSBvZiB0aGUgYGFsaWduYCBhdHRyaWJ1dGUuXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IGFsaWduWCBtYXRjaGVzIGEgdmFsdWUgZnJvbSB0aGUgQUxJR05NRU5UU19YIGFycmF5XG4gKiBAcGFyYW0ge3N0cmluZ30gYWxpZ25ZIG1hdGNoZXMgYSB2YWx1ZSBmcm9tIHRoZSBBTElHTk1FTlRTX1kgYXJyYXlcbiAqIEBwYXJhbSB7c3RyaW5nfSBlZGdlIG1hdGNoZXMgYSB2YWx1ZSBmcm9tIHRoZSBBTElHTk1FTlRfRURHRVMgYXJyYXlcbiAqIEByZXR1cm5zIHtzdHJpbmd9IGNvbnRhaW5pbmcgdGhlIHByb3Blcmx5IGZvcm1hdHRlZCBhbGlnbiB2YWx1ZVxuICovXG5mdW5jdGlvbiBmb3JtYXRBbGlnbkF0dHJpYnV0ZShhbGlnblg6IHN0cmluZywgYWxpZ25ZOiBzdHJpbmcsIGVkZ2U6IHN0cmluZyk6IHN0cmluZyB7XG4gIC8vIENoZWNrIHRoZSBlZGdlIGZvciBhIFwiWVwiIGFsaWdubWVudFxuICBpZiAoQUxJR05NRU5UU19FREdFU19ZLmluY2x1ZGVzKGVkZ2UpKSB7XG4gICAgaWYgKCFhbGlnblggfHwgIWFsaWduWC5sZW5ndGggfHwgYWxpZ25YID09PSBDRU5URVIpIHtcbiAgICAgIHJldHVybiBgJHtlZGdlfWA7XG4gICAgfVxuICAgIHJldHVybiBgJHtlZGdlfSwgJHthbGlnblh9YDtcbiAgfVxuXG4gIC8vIEFsaWdubWVudCBpcyBkZWZpbml0ZWx5IFwiWFwiXG4gIGlmICghYWxpZ25ZIHx8ICFhbGlnblkubGVuZ3RoIHx8IGFsaWduWSA9PT0gQ0VOVEVSKSB7XG4gICAgcmV0dXJuIGAke2FsaWduWH1gO1xuICB9XG4gIGlmIChlZGdlID09PSBDRU5URVIpIHtcbiAgICByZXR1cm4gYCR7YWxpZ25ZfWA7XG4gIH1cbiAgcmV0dXJuIGAke2VkZ2V9LCAke2FsaWduWX1gO1xufVxuXG4vKipcbiAqIE9wdGlvbmFsIGNhbGxiYWNrIHRoYXQgY2FuIGJlIHVzZWQgdG8gYWRqdXN0IHRoZSBQb3B1cCdzIHBsYWNlbWVudFxuICogYWZ0ZXIgYWxsIGludGVybmFsIGFkanVzdG1lbnRzIGFyZSBtYWRlLlxuICogQHBhcmFtIHtET01SZWN0fSBwb3B1cFJlY3QgYSBSZWN0IG9iamVjdCByZXByZXNlbnRpbmcgdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIHBvcHVwLlxuICogQHJldHVybnMge29iamVjdH0gYW4gYWRqdXN0ZWQgUmVjdCBvYmplY3Qgd2l0aCBcIm51ZGdlZFwiIGNvb3JkaW5hdGVzLlxuICovXG5mdW5jdGlvbiBvblBsYWNlKHBvcHVwUmVjdDogRE9NUmVjdCk6IERPTVJlY3Qge1xuICByZXR1cm4gcG9wdXBSZWN0O1xufVxuXG5leHBvcnQge1xuICBDRU5URVIsXG4gIEFMSUdOTUVOVF9FREdFUyxcbiAgQUxJR05NRU5UU19YLFxuICBBTElHTk1FTlRTX1ksXG4gIEFMSUdOTUVOVFNfRURHRVNfWCxcbiAgQUxJR05NRU5UU19FREdFU19ZLFxuICBBTklNQVRJT05fU1RZTEVTLFxuICBBUlJPV19UWVBFUyxcbiAgREVGQVVMVF9BTElHTl9FREdFLFxuICBQT1NJVElPTl9TVFlMRVMsXG4gIFRZUEVTLFxuICBQT1BVUF9NQVhIRUlHSFRfUFJPUE5BTUUsXG4gIFBPUFVQX1BST1BFUlRJRVMsXG4gIGZvcm1hdEFsaWduQXR0cmlidXRlLFxuICBvblBsYWNlXG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/components/ids-popup/ids-popup-attributes.ts\n");

/***/ }),

/***/ "./src/components/ids-popup/ids-popup.ts":
/*!***********************************************!*\
  !*** ./src/components/ids-popup/ids-popup.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ IdsPopup)\n/* harmony export */ });\n/* harmony import */ var _core_ids_decorators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/ids-decorators */ \"./src/core/ids-decorators.ts\");\n/* harmony import */ var _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/ids-attributes */ \"./src/core/ids-attributes.ts\");\n/* harmony import */ var _utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/ids-string-utils/ids-string-utils */ \"./src/utils/ids-string-utils/ids-string-utils.ts\");\n/* harmony import */ var _utils_ids_xss_utils_ids_xss_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/ids-xss-utils/ids-xss-utils */ \"./src/utils/ids-xss-utils/ids-xss-utils.ts\");\n/* harmony import */ var _utils_ids_dom_utils_ids_dom_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/ids-dom-utils/ids-dom-utils */ \"./src/utils/ids-dom-utils/ids-dom-utils.ts\");\n/* harmony import */ var _mixins_ids_events_mixin_ids_events_mixin__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../mixins/ids-events-mixin/ids-events-mixin */ \"./src/mixins/ids-events-mixin/ids-events-mixin.ts\");\n/* harmony import */ var _mixins_ids_theme_mixin_ids_theme_mixin__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../mixins/ids-theme-mixin/ids-theme-mixin */ \"./src/mixins/ids-theme-mixin/ids-theme-mixin.ts\");\n/* harmony import */ var _mixins_ids_locale_mixin_ids_locale_mixin__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../mixins/ids-locale-mixin/ids-locale-mixin */ \"./src/mixins/ids-locale-mixin/ids-locale-mixin.ts\");\n/* harmony import */ var _core_ids_element__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../core/ids-element */ \"./src/core/ids-element.ts\");\n/* harmony import */ var _ids_popup_attributes__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./ids-popup-attributes */ \"./src/components/ids-popup/ids-popup-attributes.ts\");\n/* harmony import */ var _ids_popup_scss__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./ids-popup.scss */ \"./src/components/ids-popup/ids-popup.scss\");\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result)\n    __defProp(target, key, result);\n  return result;\n};\n\n\n\n\n\n\n\n\n\n\n\nconst Base = (0,_mixins_ids_locale_mixin_ids_locale_mixin__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(\n  (0,_mixins_ids_theme_mixin_ids_theme_mixin__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(\n    (0,_mixins_ids_events_mixin_ids_events_mixin__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(\n      _core_ids_element__WEBPACK_IMPORTED_MODULE_8__[\"default\"]\n    )\n  )\n);\nlet IdsPopup = class extends Base {\n  shouldUpdate = false;\n  isFlipped = false;\n  scrollParentElem;\n  constructor() {\n    super();\n    this.#align = _ids_popup_attributes__WEBPACK_IMPORTED_MODULE_9__.CENTER;\n    this.#alignX = _ids_popup_attributes__WEBPACK_IMPORTED_MODULE_9__.ALIGNMENTS_X[0];\n    this.#alignY = _ids_popup_attributes__WEBPACK_IMPORTED_MODULE_9__.ALIGNMENTS_Y[0];\n    this.#alignEdge = _ids_popup_attributes__WEBPACK_IMPORTED_MODULE_9__.ALIGNMENT_EDGES[0];\n    this.#alignTarget = null;\n    this.#animated = false;\n    this.#animationStyle = _ids_popup_attributes__WEBPACK_IMPORTED_MODULE_9__.ANIMATION_STYLES[0];\n    this.#arrow = _ids_popup_attributes__WEBPACK_IMPORTED_MODULE_9__.ARROW_TYPES[0];\n    this.#arrowTarget = null;\n    this.#bleed = false;\n    this.#containingElem = document.body;\n    this.#positionStyle = _ids_popup_attributes__WEBPACK_IMPORTED_MODULE_9__.POSITION_STYLES[1];\n    this.#targetAlignEdge = \"\";\n    this.#type = _ids_popup_attributes__WEBPACK_IMPORTED_MODULE_9__.TYPES[0];\n    this.#visible = false;\n    this.#x = 0;\n    this.#y = 0;\n    this.open = false;\n    this.shouldUpdate = false;\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    this.containingElem = (0,_utils_ids_dom_utils_ids_dom_utils__WEBPACK_IMPORTED_MODULE_4__.getClosest)(this, \"ids-container\") || document.body;\n    this.#setInitialState();\n    this.shouldUpdate = true;\n    this.#attachEventHandlers();\n  }\n  disconnectedCallback() {\n    super.disconnectedCallback?.();\n    if (this.#ro) {\n      this.#ro?.disconnect();\n      this.#ro = void 0;\n    }\n    if (this.#mo) {\n      this.#mo?.disconnect();\n      this.#mo = void 0;\n    }\n    this.#alignTarget = null;\n    this.#arrowTarget = null;\n    this.#containingElem = null;\n    this.containingElem = null;\n  }\n  /**\n   * Return the attributes we handle as getters/setters\n   * @returns {Array<string>} The attributes in an array\n   */\n  static get attributes() {\n    return [...super.attributes, ..._ids_popup_attributes__WEBPACK_IMPORTED_MODULE_9__.POPUP_PROPERTIES];\n  }\n  /**\n   * Inner template contents\n   * @returns {string} The template\n   */\n  template() {\n    const animatedClass = this.animated ? \" animated\" : \"\";\n    return `<div class=\"ids-popup${animatedClass}\" part=\"popup\">\n      <div class=\"arrow\" part=\"arrow\"></div>\n      <div class=\"content-wrapper\">\n        <slot name=\"content\"></slot>\n      </div>\n    </div>`;\n  }\n  /**\n   * Watches for changes\n   * @property {MutationObserver} mo this Popup component's mutation observer\n   */\n  #mo;\n  /**\n   * Watches for resizing that occurs whenever the page changes dimensions, and re-applies some\n   * coordinate-specific values to the Popup's inner container.\n   * @private\n   * @property {ResizeObserver} mo this Popup component's resize observer\n   */\n  #ro;\n  /**\n   * Places the Popup and performs an adjustment to its `transform: matrix3d()`\n   * CSS property, if applicable.\n   */\n  #fixPlacementOnResize() {\n    this.#remove3dMatrix();\n    this.place();\n    this.#fix3dMatrixOnResize();\n  }\n  /**\n   * Performs an adjustment to the Popup's `transform: matrix3d()`\n   * CSS property, if applicable.\n   */\n  #fix3dMatrixOnResize() {\n    this.style.transition = \"none\";\n    this.container?.style.setProperty(\"transition\", \"none\");\n    this.correct3dMatrix();\n    this.style.transition = \"\";\n    this.container?.style.setProperty(\"transition\", \"\");\n  }\n  /**\n   * Cycles through all available props and checks the DOM for their presence\n   * @returns {void}\n   */\n  #setInitialState() {\n    this.#mo = new MutationObserver((mutations) => {\n      if (this.#visible) {\n        let placed = false;\n        for (const m of mutations) {\n          if (placed) {\n            break;\n          }\n          if ([\"subtree\", \"childList\", \"characterData\", \"characterDataOldValue\"].includes(m.type)) {\n            this.place();\n            placed = true;\n          }\n        }\n      }\n    });\n    this.#ro = new ResizeObserver((entries) => {\n      if (this.open) {\n        for (const entry of entries) {\n          if (entry.target.tagName.toLowerCase() === \"ids-container\") {\n            this.#fixPlacementOnResize();\n          } else {\n            this.#fix3dMatrixOnResize();\n          }\n        }\n        this.#checkViewportPositionScrolling();\n      }\n    });\n    _ids_popup_attributes__WEBPACK_IMPORTED_MODULE_9__.POPUP_PROPERTIES.forEach((prop) => {\n      const camelProp = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.camelCase)(prop);\n      this[camelProp] = this.getAttribute(prop) || this[camelProp];\n    });\n  }\n  /**\n   * Attaches event handlers for the duration of the lifespan of this component\n   * @returns {void}\n   */\n  #attachEventHandlers() {\n    const containerNode = (0,_utils_ids_dom_utils_ids_dom_utils__WEBPACK_IMPORTED_MODULE_4__.getClosest)(this, \"ids-container\");\n    this.#ro?.observe(this);\n    if (containerNode) {\n      this.#ro?.observe(containerNode);\n    }\n  }\n  /**\n   * @returns {DOMRect} measurements of the inner \".ids-popup\" <div>\n   */\n  get innerRect() {\n    return this.getBoundingClientRect();\n  }\n  /**\n   * @readonly\n   * @returns {HTMLElement} reference to the `content-wrapper` element\n   */\n  get wrapper() {\n    return this.shadowRoot?.querySelector(\".content-wrapper\");\n  }\n  /**\n   * @property {IdsPopupElementRef} alignTarget acts as the target element to be used for offset placement\n   */\n  #alignTarget = null;\n  /**\n   * Sets the element to align with via a css selector\n   * @param {IdsPopupElementRef | string} val a CSS selector string\n   */\n  set alignTarget(val) {\n    const isString = typeof val === \"string\" && val.length;\n    const isElem = val instanceof HTMLElement || val instanceof SVGElement;\n    if (!isString && !isElem) {\n      if (this.#alignTarget !== null) {\n        this.#alignTarget = null;\n        this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ALIGN_TARGET);\n        this.#refreshAlignTarget();\n      }\n      return;\n    }\n    let elem = null;\n    if (isString) {\n      const rootNode = (0,_utils_ids_dom_utils_ids_dom_utils__WEBPACK_IMPORTED_MODULE_4__.getClosestRootNode)(this);\n      elem = rootNode.querySelector(val);\n      if (!(elem instanceof HTMLElement || elem instanceof SVGElement)) {\n        return;\n      }\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ALIGN_TARGET, val);\n    } else if (isElem) {\n      elem = val;\n    }\n    if (elem !== null && (!this.#alignTarget || !this.#alignTarget.isEqualNode(elem))) {\n      this.#alignTarget = elem;\n      this.#refreshAlignTarget();\n    }\n  }\n  /**\n   * @returns {IdsPopupElementRef} the element in the page that the Popup will take\n   * coordinates from for relative placement\n   */\n  get alignTarget() {\n    return this.#alignTarget;\n  }\n  #refreshAlignTarget() {\n    if (this.#alignTarget) {\n      this.#mo?.observe(this.#alignTarget, {\n        attributes: true,\n        attributeFilter: [\"style\", \"height\", \"width\"],\n        attributeOldValue: true,\n        characterData: true,\n        characterDataOldValue: true,\n        childList: true,\n        subtree: true\n      });\n    } else {\n      this.#mo?.disconnect();\n    }\n    this.place();\n  }\n  /**\n   * @property {string} align determines the current direction(s) of alignment for the Popup.\n   * Can be left, right, top, bottom, center, and can also be a comma-delimited list of\n   * multiple alignment types (for example: `left, top` or `right, bottom`)\n   */\n  #align;\n  /**\n   * @param {string} val a comma-delimited set of alignment types `direction1, direction2`\n   */\n  set align(val) {\n    const currentAlign = this.#align;\n    let trueVal = val;\n    if (typeof trueVal !== \"string\" || !trueVal.length) {\n      trueVal = _ids_popup_attributes__WEBPACK_IMPORTED_MODULE_9__.CENTER;\n    }\n    let vals = trueVal.split(\",\");\n    vals = vals.map((thisVal) => thisVal.trim().toLowerCase());\n    const edge = vals[0];\n    if (_ids_popup_attributes__WEBPACK_IMPORTED_MODULE_9__.ALIGNMENT_EDGES.includes(edge)) {\n      this.#alignEdge = edge;\n      vals[0] = this.#alignEdge;\n    }\n    if (!vals[1]) {\n      vals.push(\"center\");\n    }\n    if (_ids_popup_attributes__WEBPACK_IMPORTED_MODULE_9__.ALIGNMENTS_EDGES_Y.includes(vals[0]) || _ids_popup_attributes__WEBPACK_IMPORTED_MODULE_9__.ALIGNMENTS_EDGES_X.includes(vals[1])) {\n      const val1 = vals[1];\n      vals[1] = vals[0];\n      vals[0] = val1;\n    }\n    let attrX;\n    let attrY;\n    if (_ids_popup_attributes__WEBPACK_IMPORTED_MODULE_9__.ALIGNMENTS_X.includes(vals[0])) {\n      attrX = vals[0];\n      this.#alignX = vals[0];\n    } else {\n      attrX = this.alignX;\n    }\n    if (_ids_popup_attributes__WEBPACK_IMPORTED_MODULE_9__.ALIGNMENTS_Y.includes(vals[1])) {\n      attrY = vals[1];\n      this.#alignY = vals[1];\n    } else {\n      attrY = this.alignY;\n    }\n    const newAlign = (0,_ids_popup_attributes__WEBPACK_IMPORTED_MODULE_9__.formatAlignAttribute)(attrX, attrY, this.#alignEdge);\n    const needsUpdatedAlign = currentAlign !== newAlign;\n    if (needsUpdatedAlign) {\n      this.#align = newAlign;\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ALIGN, newAlign);\n      this.place();\n    } else if (!this.hasAttribute(\"align\")) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ALIGN, currentAlign);\n    }\n  }\n  /**\n   * @returns {string} a DOM-friendly string reprentation of alignment types\n   */\n  get align() {\n    return this.#align;\n  }\n  /**\n   * @property {string} alignX the type of alignment to use on this component's\n   *  X coordinate in relation to a parent element's X coordinate\n   */\n  #alignX;\n  /**\n   * Strategy for the parent X alignment (see the ALIGNMENTS_X array)\n   * @param {string} val the strategy to use\n   */\n  set alignX(val) {\n    if (typeof val !== \"string\" || !val.length) {\n      return;\n    }\n    let alignX = val;\n    if (!_ids_popup_attributes__WEBPACK_IMPORTED_MODULE_9__.ALIGNMENTS_X.includes(val)) {\n      alignX = _ids_popup_attributes__WEBPACK_IMPORTED_MODULE_9__.ALIGNMENTS_X[0];\n    }\n    if (this.hasAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ALIGN_X)) {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ALIGN_X);\n    }\n    if (this.#alignX !== alignX) {\n      this.#alignX = alignX;\n      const alignY = this.#alignY;\n      this.align = (0,_ids_popup_attributes__WEBPACK_IMPORTED_MODULE_9__.formatAlignAttribute)(alignX, alignY, alignX);\n    }\n  }\n  /**\n   * Strategy for the parent X alignment (see the ALIGNMENTS_X array)\n   * @returns {string} the strategy to use\n   */\n  get alignX() {\n    return this.#alignX;\n  }\n  /**\n   * @property {string} alignY the type of alignment to use on this component's\n   *  Y coordinate in relation to a parent element's Y coordinate\n   */\n  #alignY;\n  /**\n   * @param {string} val alignment strategy for the current parent Y alignment\n   */\n  set alignY(val) {\n    if (typeof val !== \"string\" || !val.length) {\n      return;\n    }\n    let alignY = _ids_popup_attributes__WEBPACK_IMPORTED_MODULE_9__.ALIGNMENTS_Y[0];\n    if (_ids_popup_attributes__WEBPACK_IMPORTED_MODULE_9__.ALIGNMENTS_Y.includes(val)) {\n      alignY = val;\n    }\n    if (this.hasAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ALIGN_Y)) {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ALIGN_Y);\n    }\n    if (this.#alignY !== alignY) {\n      this.#alignY = alignY;\n      const alignX = this.#alignX;\n      this.align = (0,_ids_popup_attributes__WEBPACK_IMPORTED_MODULE_9__.formatAlignAttribute)(alignX, alignY, alignY);\n    }\n  }\n  /**\n   * @returns {string} alignment strategy for the current parent Y alignment\n   */\n  get alignY() {\n    return this.#alignY;\n  }\n  /**\n   * @property {string} alignEdge the primary edge of a target element to use for its alignment.\n   */\n  #alignEdge;\n  /**\n   * Updates when the popup changing its primary align edge\n   */\n  #targetAlignEdge;\n  /**\n   *  Specifies the edge of the parent element to be placed adjacent,\n   *  in configurations where a relative placement occurs\n   * @param {string} val The edge to align to\n   */\n  set alignEdge(val) {\n    if (typeof val !== \"string\" || !val.length) {\n      return;\n    }\n    let edge;\n    if (_ids_popup_attributes__WEBPACK_IMPORTED_MODULE_9__.ALIGNMENT_EDGES.includes(val)) {\n      edge = val;\n    } else {\n      edge = _ids_popup_attributes__WEBPACK_IMPORTED_MODULE_9__.ALIGNMENT_EDGES[0];\n    }\n    if (this.hasAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ALIGN_EDGE)) {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ALIGN_EDGE);\n    }\n    if (this.#alignEdge !== edge) {\n      let alignX = this.alignX;\n      let alignY = this.alignY;\n      this.#alignEdge = edge;\n      if (edge === \"center\") {\n        alignX = edge;\n        alignY = edge;\n      } else if (_ids_popup_attributes__WEBPACK_IMPORTED_MODULE_9__.ALIGNMENTS_EDGES_Y.includes(edge)) {\n        alignY = edge;\n      } else {\n        alignX = edge;\n      }\n      this.align = (0,_ids_popup_attributes__WEBPACK_IMPORTED_MODULE_9__.formatAlignAttribute)(alignX, alignY, edge);\n    }\n  }\n  /**\n   * @returns {string} representing the current adjacent edge of the parent element\n   */\n  get alignEdge() {\n    return this.#alignEdge;\n  }\n  /**\n   * @readonly\n   * @returns {string} representing the opposite edge of the currently-defined `alignEdge` property\n   */\n  get oppositeAlignEdge() {\n    return this.#getOppositeEdge(this.alignEdge);\n  }\n  /**\n   * @returns {string | null} The max height value\n   */\n  get maxHeight() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.MAX_HEIGHT);\n  }\n  /**\n   * Set the max height value\n   * @param {string | number | null} value The value\n   */\n  set maxHeight(value) {\n    const val = (0,_utils_ids_dom_utils_ids_dom_utils__WEBPACK_IMPORTED_MODULE_4__.validMaxHeight)(value);\n    if (val) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.MAX_HEIGHT, val);\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.MAX_HEIGHT);\n    }\n    this.#updateMaxHeightProp(val);\n  }\n  /**\n   * Defines an internal CSS variable used for defining a `max-height` attribute\n   * in the ShadowRoot of this component\n   * @param {string | number | null} val how to define the property\n   */\n  #updateMaxHeightProp(val) {\n    if (this.positionStyle === \"viewport\") {\n      this.wrapper?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.TABINDEX, \"0\");\n      this.container?.style.setProperty(_ids_popup_attributes__WEBPACK_IMPORTED_MODULE_9__.POPUP_MAXHEIGHT_PROPNAME, \"auto\");\n      return;\n    }\n    const containerElem = this.containingElem;\n    let targetHeightConstraint = document.body.offsetHeight;\n    let targetValue = (0,_utils_ids_dom_utils_ids_dom_utils__WEBPACK_IMPORTED_MODULE_4__.validMaxHeight)(val || this.maxHeight);\n    if (containerElem) {\n      targetHeightConstraint = containerElem.offsetHeight;\n    } else if (window) {\n      targetHeightConstraint = window.innerHeight;\n      targetValue = `${targetHeightConstraint}px`;\n    }\n    if (targetValue) {\n      if (targetHeightConstraint < parseInt(targetValue)) {\n        targetValue = `${targetHeightConstraint}px`;\n      }\n    } else {\n      const currentPopupHeight = parseInt(window.getComputedStyle(this.wrapper).height);\n      if (targetHeightConstraint <= currentPopupHeight) {\n        targetValue = `${targetHeightConstraint}px`;\n      }\n    }\n    if (this.container) {\n      if (this.wrapper)\n        this.wrapper.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.TABINDEX, \"0\");\n      if (targetValue) {\n        this.container.style.setProperty(_ids_popup_attributes__WEBPACK_IMPORTED_MODULE_9__.POPUP_MAXHEIGHT_PROPNAME, `${targetValue}`);\n        this.container.classList.add(\"has-maxheight\");\n      } else {\n        this.container.classList.remove(\"has-maxheight\");\n        this.container.style.removeProperty(_ids_popup_attributes__WEBPACK_IMPORTED_MODULE_9__.POPUP_MAXHEIGHT_PROPNAME);\n      }\n    }\n  }\n  /**\n   * Helper to get opposite align edge\n   * @param {string|undefined} currentEdge current align edge\n   * @returns {string} opposite align edge\n   */\n  #getOppositeEdge(currentEdge) {\n    switch (currentEdge) {\n      case \"left\":\n        return \"right\";\n      case \"right\":\n        return \"left\";\n      case \"top\":\n        return \"bottom\";\n      case \"bottom\":\n        return \"top\";\n      default:\n        return \"none\";\n    }\n  }\n  /**\n   * Helper to get nearest side to the align edge\n   * @param {string|undefined} currentEdge current align edge\n   * @returns {string} nearest align edge\n   */\n  #getNearestEdge(currentEdge) {\n    switch (currentEdge) {\n      case \"top\":\n      case \"bottom\":\n        return \"right\";\n      case \"left\":\n      case \"right\":\n        return \"bottom\";\n      default:\n        return \"none\";\n    }\n  }\n  /**\n   * @property {boolean} animated true if animation should occur on this component\n   */\n  #animated;\n  /**\n   * Whether or not the component should animate its movement\n   * @param {boolean} val true if animation should occur on the Popup\n   */\n  set animated(val) {\n    const trueVal = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(val);\n    if (this.#animated !== trueVal) {\n      this.#animated = trueVal;\n      if (trueVal) {\n        this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ANIMATED, \"\");\n      } else {\n        this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ANIMATED);\n      }\n      this.#refreshAnimated();\n    }\n  }\n  /**\n   * @returns {boolean} true if animation will occur on the Popup\n   */\n  get animated() {\n    return this.#animated;\n  }\n  /**\n   * Refreshes whether or not animations can be applied\n   * @returns {void}\n   */\n  #refreshAnimated() {\n    this.container?.classList[this.animated ? \"add\" : \"remove\"](\"animated\");\n  }\n  /**\n   * @property {string} animationStyle the type of alignment to use on this component's\n   *  Y coordinate in relation to a parent element's Y coordinate\n   */\n  #animationStyle;\n  /**\n   * @param {string} val the style of animation this popup uses to show/hide\n   */\n  set animationStyle(val) {\n    const currentVal = this.#animationStyle;\n    if (val !== currentVal && _ids_popup_attributes__WEBPACK_IMPORTED_MODULE_9__.ANIMATION_STYLES.includes(val)) {\n      this.#animationStyle = val;\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ANIMATION_STYLE, val);\n      this.#refreshAnimationStyle(currentVal, val);\n    } else {\n      this.#refreshAnimationStyle(\"\", currentVal);\n    }\n  }\n  /**\n   * @returns {string} the style of animation this popup uses to show/hide\n   */\n  get animationStyle() {\n    return this.#animationStyle;\n  }\n  /**\n   * Changes the CSS class controlling the animation style of the Popup\n   * @param {string} currentStyle the type of animation\n   * @param {string} newStyle the type of animation\n   * @returns {void}\n   */\n  #refreshAnimationStyle(currentStyle, newStyle) {\n    if (!this.container)\n      return;\n    const thisCl = this.container.classList;\n    if (currentStyle)\n      thisCl.remove(`animation-${currentStyle}`);\n    thisCl.add(`animation-${newStyle}`);\n  }\n  /**\n   * @property {boolean} bleed true if placement logic should allow crossing\n   *  of the defined `containingElem` boundary\n   */\n  #bleed;\n  /**\n   * @param {boolean|string} val true if bleeds should be respected by the Popup\n   */\n  set bleed(val) {\n    const trueVal = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(val);\n    if (this.#bleed !== trueVal) {\n      this.#bleed = val;\n      if (trueVal) {\n        this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.BLEED, \"\");\n      } else {\n        this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.BLEED);\n      }\n      this.place();\n    }\n  }\n  /**\n   * @returns {boolean} true if bleeds are currently being respected by the Popup\n   */\n  get bleed() {\n    return this.#bleed;\n  }\n  /**\n   * @property {IdsPopupElementRef} containingElem the element to use for containment of the Popup\n   */\n  #containingElem;\n  /**\n   * @param {IdsPopupElementRef} val an element that will appear to \"contain\" the Popup\n   */\n  set containingElem(val) {\n    if (!(val instanceof HTMLElement || val instanceof SVGElement)) {\n      return;\n    }\n    if (this.#containingElem !== val) {\n      this.#containingElem = val;\n      this.place();\n    }\n  }\n  /**\n   * @returns {IdsPopupElementRef} the element currently appearing to \"contain\" the Popup\n   */\n  get containingElem() {\n    return this.#containingElem;\n  }\n  /**\n   * @property {string} arrow Specifies whether to show the Popup Arrow, and in which direction.\n   * The direction is in relation to the alignment setting. So for example of you align: top\n   * you want arrow: top as well.\n   */\n  #arrow = _ids_popup_attributes__WEBPACK_IMPORTED_MODULE_9__.ARROW_TYPES[0];\n  /**\n   * Specifies whether to show the Popup Arrow, and in which direction.\n   * The direction is in relation to the alignment setting. So for example of you align: top\n   * you want arrow: top as well.\n   * @param {string|null} val the arrow direction.  Defaults to `none`\n   */\n  set arrow(val) {\n    const currentVal = this.#arrow;\n    let trueVal = _ids_popup_attributes__WEBPACK_IMPORTED_MODULE_9__.ARROW_TYPES[0];\n    if (val && _ids_popup_attributes__WEBPACK_IMPORTED_MODULE_9__.ARROW_TYPES.includes(val)) {\n      trueVal = val;\n    }\n    if (trueVal !== currentVal) {\n      this.#arrow = trueVal;\n      if (trueVal !== _ids_popup_attributes__WEBPACK_IMPORTED_MODULE_9__.ARROW_TYPES[0]) {\n        this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ARROW, `${trueVal}`);\n      } else {\n        this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ARROW);\n      }\n      this.#setArrowDirection(currentVal, trueVal);\n    }\n  }\n  /**\n   * @returns {string|null} the arrow setting, or null\n   */\n  get arrow() {\n    const attr = this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ARROW);\n    if (!attr) {\n      return _ids_popup_attributes__WEBPACK_IMPORTED_MODULE_9__.ARROW_TYPES[0];\n    }\n    return attr;\n  }\n  /**\n   * Show/Hide Arrow pointing in a direction, if applicable\n   * @param {string} currentDir a CSS class representing a Popup Arrow direction\n   * @param {string} newDir a CSS class representing a Popup Arrow direction\n   */\n  #setArrowDirection(currentDir, newDir) {\n    if (!this.container)\n      return;\n    const arrowEl = this.arrowEl;\n    const arrowElCl = this.arrowEl?.classList;\n    const isNone = newDir === \"none\";\n    if (arrowEl)\n      arrowEl.hidden = isNone;\n    let cssPart = \"arrow\";\n    if (currentDir === \"\")\n      arrowElCl?.remove(..._ids_popup_attributes__WEBPACK_IMPORTED_MODULE_9__.ARROW_TYPES);\n    else if (currentDir)\n      arrowElCl?.remove(currentDir);\n    if (newDir && !isNone) {\n      arrowElCl?.add(newDir);\n      cssPart += `-${newDir}`;\n    }\n    arrowEl?.setAttribute(\"part\", cssPart);\n  }\n  /**\n   * @readonly\n   * @returns {HTMLElement} referencing the internal arrow element\n   */\n  get arrowEl() {\n    return this.container?.querySelector(\".arrow\");\n  }\n  /**\n   * @param {IdsPopupElementRef} arrowTarget\n   */\n  #arrowTarget;\n  /**\n   * Sets the element to align with via a css selector\n   * @param {IdsPopupElementRef} val a CSS selector string\n   */\n  set arrowTarget(val) {\n    const isString = typeof val === \"string\" && val.length;\n    const isElem = val instanceof HTMLElement || val instanceof SVGElement;\n    if (!isString && !isElem) {\n      if (this.#arrowTarget !== null) {\n        this.#arrowTarget = null;\n        this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ARROW_TARGET);\n      }\n      return;\n    }\n    let elem = null;\n    if (isString) {\n      const rootNode = (0,_utils_ids_dom_utils_ids_dom_utils__WEBPACK_IMPORTED_MODULE_4__.getClosestRootNode)(this);\n      elem = rootNode.querySelector(val);\n      if (!(elem instanceof HTMLElement || elem instanceof SVGElement)) {\n        return;\n      }\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ARROW_TARGET, val);\n    } else if (isElem) {\n      elem = val;\n    }\n    if (elem !== null && (!this.#arrowTarget || !this.#arrowTarget.isEqualNode(elem))) {\n      this.#arrowTarget = elem;\n      this.#setArrowDirection(\"\", this.arrow);\n    }\n  }\n  /**\n   * @returns {IdsPopupElementRef} the element in the page that the Popup will take\n   * coordinates from for relative placement\n   */\n  get arrowTarget() {\n    return this.#arrowTarget || this.alignTarget;\n  }\n  /**\n   * @property {string} positionStyle the method in which the Popup is positioned\n   */\n  #positionStyle;\n  /**\n   * @param {string} val the position style string\n   */\n  set positionStyle(val) {\n    const currentStyle = this.#positionStyle;\n    if (_ids_popup_attributes__WEBPACK_IMPORTED_MODULE_9__.POSITION_STYLES.includes(val)) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.POSITION_STYLE, val);\n      this.#positionStyle = val;\n      if (val !== currentStyle) {\n        this.#refreshPositionStyle(currentStyle, val);\n      } else {\n        this.#refreshPositionStyle(\"\", currentStyle);\n      }\n      this.place();\n    }\n  }\n  /**\n   * @returns {string} the current position style\n   */\n  get positionStyle() {\n    return this.#positionStyle;\n  }\n  /**\n   * Changes the CSS class controlling the position style of the Popup\n   * @param {string} currentStyle the current position type\n   * @param {string} newStyle the new position type\n   * @returns {void}\n   */\n  #refreshPositionStyle(currentStyle, newStyle) {\n    if (!this.container)\n      return;\n    const thisCl = this.container.classList;\n    if (currentStyle)\n      thisCl.remove(`position-${currentStyle}`);\n    thisCl.add(`position-${newStyle}`);\n  }\n  /**\n   * Runs on viewport resize to correct a CSS class that controls scrolling behavior within viewport-positioned popups\n   */\n  #checkViewportPositionScrolling() {\n    if (!this.container || !this.wrapper)\n      return;\n    const cl = this.container.classList;\n    cl.remove(\"fit-viewport\");\n    const wrapperScrollHeight = this.wrapper.getBoundingClientRect().height;\n    const containerScrollHeight = this.container.getBoundingClientRect().height;\n    const needsFixing = wrapperScrollHeight > containerScrollHeight;\n    if (needsFixing) {\n      cl.add(\"fit-viewport\");\n    }\n  }\n  /**\n   * @property {number} type The style of popup to display.\n   * Can be 'none', 'menu', 'menu-alt', 'tooltip', 'tooltip-alt'\n   */\n  #type;\n  /**\n   * @param {string} val The popup type\n   */\n  set type(val) {\n    const currentVal = this.#type;\n    if (val && currentVal !== val && _ids_popup_attributes__WEBPACK_IMPORTED_MODULE_9__.TYPES.includes(val)) {\n      this.#type = val;\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.TYPE, this.#type);\n      this.#refreshPopupTypeClass(currentVal, val);\n      this.place();\n    } else {\n      this.#refreshPopupTypeClass(\"\", currentVal);\n    }\n  }\n  /**\n   * @returns {string} the type assigned to the Popup\n   */\n  get type() {\n    return this.#type;\n  }\n  /**\n   * @param {string} currentType the current type CSS class to remove\n   * @param {string} newType the new type CSS class to apply\n   * @returns {void}\n   */\n  #refreshPopupTypeClass(currentType, newType) {\n    if (!this.container)\n      return;\n    const thisCl = this.container.classList;\n    if (currentType)\n      thisCl.remove(currentType);\n    thisCl.add(newType);\n  }\n  /**\n   * @property {boolean} open true if the Popup is not only visible, but also fully-animated open\n   */\n  open;\n  /**\n   * @property {boolean} visible true if the Popup should be visible\n   */\n  #visible;\n  /**\n   * Whether or not the component should be displayed\n   * @param {boolean} val a boolean for displaying or hiding the popup\n   */\n  set visible(val) {\n    const trueVal = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(val);\n    if (this.#visible !== trueVal) {\n      this.#visible = trueVal;\n      if (trueVal) {\n        this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.VISIBLE, \"\");\n      } else {\n        this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.VISIBLE);\n      }\n      this.refreshVisibility();\n    }\n  }\n  get visible() {\n    return this.#visible;\n  }\n  /**\n   * Runs the show/hide routines of the Popup based on current visiblity state.\n   * @async\n   * @returns {void}\n   */\n  async refreshVisibility() {\n    if (!this.container)\n      return;\n    const cl = this.container.classList;\n    if (this.#visible && !cl.contains(\"open\")) {\n      await this.show();\n    }\n    if (!this.#visible && !this.hasAttribute(\"aria-hidden\")) {\n      await this.hide();\n    }\n  }\n  /**\n   * @property {number} x represents the X coordinate if placed via coordinates,\n   * or the X offset when placed in relation to a parent element.\n   */\n  #x;\n  /**\n   * Sets the X (left) coordinate of the Popup\n   * @param {number} val the coordinate's value\n   */\n  set x(val) {\n    let trueVal = parseInt(val?.toString(), 10);\n    if (Number.isNaN(trueVal)) {\n      trueVal = 0;\n    }\n    if (trueVal !== this.#x) {\n      this.#x = trueVal;\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.X, trueVal.toString());\n    }\n  }\n  get x() {\n    return this.#x;\n  }\n  /**\n   * @property {number} y represents the Y coordinate if placed via coordinates,\n   * or the Y offset when placed in relation to a parent element.\n   */\n  #y;\n  /**\n   * Sets the Y (top) coordinate of the Popup\n   * @param {number} val the coordinate's value\n   */\n  set y(val) {\n    let trueVal = parseInt(val?.toString(), 10);\n    if (Number.isNaN(trueVal)) {\n      trueVal = 0;\n    }\n    if (trueVal !== this.#y) {\n      this.#y = trueVal;\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.Y, trueVal.toString());\n    }\n  }\n  get y() {\n    return this.#y;\n  }\n  /**\n   * Sets an X/Y position and optionally shows/places the Popup\n   * @param {number} x the x coordinate/offset value\n   * @param {number} y the y coordinate/offset value\n   * @param {boolean} doShow true if the Popup should be displayed before placing\n   * @param {boolean} doPlacement true if the component should run its placement routine\n   */\n  setPosition(x = null, y = null, doShow = null, doPlacement = null) {\n    const elem = this;\n    if (!Number.isNaN(x))\n      elem.x = x;\n    if (!Number.isNaN(y))\n      elem.y = y;\n    if (doShow)\n      this.visible = true;\n    if (doPlacement)\n      this.place();\n  }\n  /**\n   * Shows the Popup\n   * @async\n   * @returns {void}\n   */\n  async show() {\n    if (!this.visible || !this.container) {\n      return;\n    }\n    this.place();\n    this.placeArrow(this.#targetAlignEdge);\n    this.removeAttribute(\"aria-hidden\");\n    this.container.classList.add(\"open\");\n    this.open = true;\n    if (this.animated) {\n      await (0,_utils_ids_dom_utils_ids_dom_utils__WEBPACK_IMPORTED_MODULE_4__.waitForTransitionEnd)(this.container, \"opacity\");\n    }\n    this.correct3dMatrix();\n    this.triggerEvent(\"show\", this, {\n      bubbles: true,\n      detail: {\n        elem: this\n      }\n    });\n  }\n  /**\n   * Hides the Popup\n   * @async\n   * @returns {void}\n   */\n  async hide() {\n    if (this.visible || !this.container) {\n      return;\n    }\n    this.open = false;\n    this.#remove3dMatrix();\n    this.container.classList.remove(\"open\");\n    if (this.animated) {\n      await (0,_utils_ids_dom_utils_ids_dom_utils__WEBPACK_IMPORTED_MODULE_4__.waitForTransitionEnd)(this.container, \"opacity\");\n    }\n    this.triggerEvent(\"hide\", this, {\n      bubbles: true,\n      detail: {\n        elem: this\n      }\n    });\n    this.setAttribute(\"aria-hidden\", \"true\");\n  }\n  /**\n   * Runs the configured placement routine for the Popup\n   * @returns {void}\n   */\n  place() {\n    if (this.visible && this.positionStyle !== \"viewport\") {\n      this.#updateMaxHeightProp();\n      const { alignTarget } = this;\n      if (!alignTarget) {\n        this.#placeAtCoords();\n      } else {\n        this.#placeAgainstTarget();\n      }\n    }\n  }\n  /**\n   * Places the Popup using numeric x/y coordinates as a starting point.\n   * @private\n   * @returns {void}\n   */\n  #placeAtCoords() {\n    let popupRect = this.getBoundingClientRect();\n    let x = this.x;\n    let y = this.y;\n    switch (this.alignX) {\n      case \"right\":\n        x -= popupRect.width;\n        break;\n      case \"center\":\n        x -= popupRect.width / 2;\n        break;\n      default:\n        break;\n    }\n    switch (this.alignY) {\n      case \"bottom\":\n        y -= popupRect.height;\n        break;\n      case \"center\":\n        y -= popupRect.height / 2;\n        break;\n      default:\n        break;\n    }\n    popupRect.x = x;\n    popupRect.y = y;\n    popupRect = this.#nudge(popupRect);\n    popupRect = this.#removeRelativeParentDistance(this.parentNode, popupRect, this.scrollParentElem);\n    if (typeof this.onPlace === \"function\") {\n      popupRect = this.onPlace(popupRect);\n    }\n    this.#renderPlacementInPixels(popupRect);\n  }\n  /**\n   * Places the Popup using an external element as a starting point.\n   * @private\n   * @returns {void}\n   */\n  #placeAgainstTarget() {\n    if (!this.alignTarget)\n      return;\n    let popupRect = this.getBoundingClientRect();\n    this.#targetAlignEdge = this.#getPlacementEdge(popupRect);\n    const oppositeEdge = this.#getOppositeEdge(this.alignEdge);\n    const shouldSwitchXY = this.alignEdge !== this.#targetAlignEdge && this.#getOppositeEdge(this.alignEdge) !== this.#targetAlignEdge;\n    let switchResult = {\n      flip: this.alignEdge !== this.#targetAlignEdge && !shouldSwitchXY,\n      oppositeEdge,\n      shouldSwitchXY,\n      targetEdge: this.#alignEdge,\n      x: shouldSwitchXY ? this.y : this.x,\n      y: shouldSwitchXY ? this.x : this.y\n    };\n    if (typeof this.onXYSwitch === \"function\") {\n      switchResult = this.onXYSwitch(switchResult);\n    }\n    let x = switchResult.x;\n    let y = switchResult.y;\n    const targetRect = this.alignTarget.getBoundingClientRect();\n    const alignEdge = this.#targetAlignEdge || this.alignEdge;\n    let alignXCentered = false;\n    let alignYCentered = false;\n    this.container?.classList.toggle(\"flipped\", this.alignEdge !== this.#targetAlignEdge && !shouldSwitchXY);\n    if (_ids_popup_attributes__WEBPACK_IMPORTED_MODULE_9__.ALIGNMENTS_Y.includes(alignEdge)) {\n      switch (alignEdge) {\n        case \"top\":\n          y = targetRect.top - popupRect.height - y;\n          break;\n        case \"bottom\":\n          y = targetRect.bottom + y;\n          break;\n        default:\n          y = targetRect.top + targetRect.height / 2 - popupRect.height / 2 + y;\n          alignYCentered = true;\n      }\n      switch (this.alignX) {\n        case \"left\":\n          x = targetRect.left + x;\n          break;\n        case \"right\":\n          x = targetRect.right - popupRect.width - x;\n          break;\n        default:\n          x = targetRect.left + targetRect.width / 2 - popupRect.width / 2 + x;\n          alignXCentered = true;\n      }\n    }\n    if (_ids_popup_attributes__WEBPACK_IMPORTED_MODULE_9__.ALIGNMENTS_X.includes(alignEdge)) {\n      switch (alignEdge) {\n        case \"left\":\n          x = targetRect.left - popupRect.width - x;\n          break;\n        case \"right\":\n          x = targetRect.right + x;\n          break;\n        default:\n          if (alignXCentered) {\n            break;\n          }\n          x = targetRect.left + targetRect.width / 2 - popupRect.width / 2 + x;\n      }\n      switch (this.alignY) {\n        case \"top\":\n          y = targetRect.top + y;\n          break;\n        case \"bottom\":\n          y = targetRect.bottom - popupRect.height + y;\n          break;\n        default:\n          if (alignYCentered) {\n            break;\n          }\n          y = targetRect.top + targetRect.height / 2 - popupRect.height / 2 + y;\n      }\n    }\n    if (alignEdge === \"none\") {\n      const containerWidth = this.containingElem?.clientWidth;\n      const containerHeight = this.containingElem?.clientHeight;\n      if (containerWidth && containerHeight) {\n        x = (containerWidth - popupRect.width) / 2;\n        y = (containerHeight - popupRect.height) / 2;\n      }\n    }\n    popupRect.x = x;\n    popupRect.y = y;\n    popupRect = this.#nudge(popupRect);\n    popupRect = this.#removeRelativeParentDistance(this.parentNode, popupRect, this.scrollParentElem);\n    if (typeof this.onPlace === \"function\") {\n      popupRect = this.onPlace(popupRect);\n    }\n    this.#renderPlacementInPixels(popupRect);\n    if (this.arrow && this.arrow !== _ids_popup_attributes__WEBPACK_IMPORTED_MODULE_9__.ARROW_TYPES[0]) {\n      this.#setArrowDirection(\"\", this.#targetAlignEdge);\n      this.placeArrow(this.#targetAlignEdge);\n    }\n  }\n  /**\n   * Optional callback that can be used to adjust the Popup's placement\n   * after all internal adjustments are made.\n   * @param {DOMRect} popupRect a Rect object representing the current state of the popup.\n   * @returns {object} an adjusted Rect object with \"nudged\" coordinates.\n   */\n  onPlace(popupRect) {\n    return popupRect;\n  }\n  /**\n   * Optional callback that can be used to further adjust the Popup's x/y offsets\n   * if a flip or other modification is made to the alignment edge\n   * when being placed in alignment mode.\n   * @param {IdsPopupXYSwitchResult} result contains settings related to the x/y adjustment.\n   * @returns {IdsPopupXYSwitchResult} provides further modifications.\n   */\n  onXYSwitch(result) {\n    return result;\n  }\n  /**\n   * Further adjusts placement of a popup based on defined strategies.\n   * @param {DOMRect} popupRect a Rect object representing the current state of the popup.\n   * @returns {object} an adjusted Rect object with \"nudged\" coordinates.\n   */\n  #nudge(popupRect) {\n    if (this.bleed || !this.containingElem) {\n      return popupRect;\n    }\n    const viewportWidth = window.innerWidth;\n    const viewportHeight = window.innerHeight;\n    const containerRect = this.containingElem.getBoundingClientRect();\n    const bleed = this.bleed;\n    let fixedX = popupRect.x;\n    let fixedY = popupRect.y;\n    const rightEdge = bleed ? viewportWidth : containerRect.right;\n    const leftEdge = bleed ? 0 : containerRect.left;\n    const topEdge = bleed ? 0 : containerRect.top;\n    const bottomEdge = bleed ? viewportHeight : containerRect.bottom;\n    if (popupRect.right > rightEdge) {\n      fixedX -= popupRect.right - rightEdge;\n    }\n    if (popupRect.left < leftEdge) {\n      fixedX += Math.abs(popupRect.left) + leftEdge;\n    }\n    if (popupRect.bottom > bottomEdge) {\n      fixedY -= popupRect.bottom - bottomEdge;\n    }\n    if (popupRect.top < topEdge) {\n      fixedY += Math.abs(popupRect.top) + topEdge;\n    }\n    popupRect.x = fixedX;\n    popupRect.y = fixedY;\n    return popupRect;\n  }\n  #getPlacementEdge(popupRect) {\n    if (!this.containingElem || !this.alignTarget)\n      return \"none\";\n    const viewportWidth = window.innerWidth;\n    const viewportHeight = window.innerHeight;\n    const scrollX = this.containingElem.scrollLeft || 0;\n    const scrollY = this.containingElem.scrollTop || 0;\n    const bleed = this.bleed;\n    const containerRect = this.containingElem.getBoundingClientRect();\n    const targetRect = this.alignTarget.getBoundingClientRect();\n    const getDistance = (dir) => {\n      let d = 0;\n      switch (dir) {\n        case \"left\":\n          d = (bleed ? 0 : containerRect.left) - scrollX - targetRect.left + this.x;\n          break;\n        case \"right\":\n          d = (bleed ? viewportWidth : containerRect.right) - scrollX - targetRect.right - this.x;\n          break;\n        case \"top\":\n          d = (bleed ? 0 : containerRect.top) - scrollY - targetRect.top + this.y;\n          break;\n        default:\n          d = (bleed ? viewportHeight : containerRect.bottom) - scrollY - targetRect.bottom - this.y;\n          break;\n      }\n      return Math.abs(d);\n    };\n    const currentDir = this.alignEdge;\n    const measuredPopupDimension = [\"top\", \"bottom\"].includes(currentDir) ? \"height\" : \"width\";\n    const edgeOrder = [\n      this.alignEdge,\n      this.#getOppositeEdge(this.alignEdge),\n      this.#getNearestEdge(this.alignEdge),\n      this.#getOppositeEdge(this.#getNearestEdge(this.alignEdge))\n    ];\n    const edge = edgeOrder.find((item) => {\n      const dist = getDistance(item);\n      return popupRect[measuredPopupDimension] <= dist;\n    });\n    return edge || \"none\";\n  }\n  /**\n   * Renders the position of the Popup using offsets/coordinates in Pixels.\n   * @param {DOMRect} popupRect representing approximated new placement values\n   * @returns {void}\n   */\n  #renderPlacementInPixels(popupRect) {\n    this.style.left = `${popupRect.x}px`;\n    this.style.top = `${popupRect.y}px`;\n  }\n  /**\n   * In cases where 3D CSS transforms are used for Popup positioning,\n   * corrects the placement of the Popup after rendering so that it doesn't\n   * reside on half-pixels, causing blurriness to text, icons, etc.\n   * Adapted from https://stackoverflow.com/a/42256897\n   * @returns {void}\n   */\n  correct3dMatrix() {\n    if (!this.container || this.positionStyle !== \"viewport\") {\n      return;\n    }\n    this.#remove3dMatrix();\n    const style = window.getComputedStyle(this.container, null);\n    const mx = style.getPropertyValue(\"-webkit-transform\") || style.getPropertyValue(\"-moz-transform\") || style.getPropertyValue(\"transform\") || false;\n    if (!mx) {\n      return;\n    }\n    const values = mx.replace(/ |\\(|\\)|matrix3d/g, \"\").split(\",\");\n    for (let i = 0; i < values.length; i++) {\n      if (i === 0 && values[i] < 1)\n        values[i] = 1;\n      if (i > 0 && (values[i] > 4 || values[i] < -4)) {\n        values[i] = Math.ceil(values[i]);\n      }\n      if (i === values.length - 1 && values[i] > 1) {\n        values[i] = 1;\n      }\n    }\n    this.container.style.transform = `matrix3d(${values.join()})`;\n  }\n  /**\n   * Removes a previously-modified 3D Matrix\n   * @returns {void}\n   */\n  #remove3dMatrix() {\n    this.container?.style.removeProperty(\"transform\");\n  }\n  /**\n   * Returns a DOMRect from `getBoundingClientRect` from an element, with the values adjusted\n   * by subtracting the left/top values from the closest relative-positioned parent\n   * @param {HTMLElement} elem the element to measure\n   * @param {DOMRect} [rect] optionally pass in an existing rect and correct it\n   * @param {HTMLElement} [containerElem] optionally pass a container element for this one to check scrolling distance\n   * @returns {DOMRect} measurements adjusted for an absolutely-positioned parent\n   */\n  #removeRelativeParentDistance(elem, rect, containerElem) {\n    const elemRect = (0,_utils_ids_dom_utils_ids_dom_utils__WEBPACK_IMPORTED_MODULE_4__.getEditableRect)(rect || elem.getBoundingClientRect());\n    let foundRelativeParent = false;\n    let scrollAdjusted = false;\n    const removeRelativeDistance = (parent) => {\n      let parentStyle;\n      let parentRect;\n      if (parent && !foundRelativeParent) {\n        if (parent.toString() === \"[object ShadowRoot]\") {\n          parent = parent.host;\n        }\n        if (parent instanceof HTMLElement || parent instanceof SVGElement) {\n          parentStyle = getComputedStyle(parent);\n          parentRect = parent.getBoundingClientRect();\n          const scrollElem = containerElem || parent;\n          if (!scrollAdjusted) {\n            if (scrollElem.scrollLeft !== 0) {\n              elemRect.x -= scrollElem.scrollLeft;\n              scrollAdjusted = true;\n            }\n            if (scrollElem.scrollTop !== 0) {\n              elemRect.y -= scrollElem.scrollTop;\n              scrollAdjusted = true;\n            }\n          }\n          if (parentStyle.position === \"relative\") {\n            elemRect.x -= parentRect.x;\n            elemRect.y -= parentRect.y;\n            foundRelativeParent = true;\n          }\n        }\n        if (parent.parentNode) {\n          removeRelativeDistance(parent.parentNode);\n        }\n      }\n    };\n    removeRelativeDistance(elem);\n    return elemRect;\n  }\n  /**\n   * Handles alignment of an optional arrow element. If an arrow target is specified,\n   * the arrow is placed to align correctly against the target.\n   * @param {string | undefined} alignEdge align edge to place the arrow\n   * @returns {void}\n   */\n  placeArrow(alignEdge) {\n    const arrow = alignEdge || this.arrow;\n    const arrowEl = this.arrowEl;\n    const element = this.alignTarget;\n    const target = this.arrowTarget;\n    if (arrow === \"none\" || !element || !target || !arrowEl) {\n      if (arrowEl)\n        arrowEl.hidden = true;\n      return;\n    }\n    arrowEl.removeAttribute(\"hidden\");\n    arrowEl.style.marginLeft = \"\";\n    arrowEl.style.marginTop = \"\";\n    const arrowRect = arrowEl.getBoundingClientRect();\n    const elementRect = element.getBoundingClientRect();\n    const targetRect = target.getBoundingClientRect();\n    const newArrowRect = {};\n    const targetMargin = arrow === \"right\" || arrow === \"left\" ? \"marginTop\" : \"marginLeft\";\n    let arrowHidden = false;\n    let targetCenter = 0;\n    let currentArrowCenter = 0;\n    let d;\n    if (arrow === \"left\" || arrow === \"right\") {\n      targetCenter = targetRect.top + targetRect.height / 2;\n      currentArrowCenter = arrowRect.top + arrowRect.height / 2;\n      d = targetCenter - currentArrowCenter;\n      newArrowRect.top = arrowRect.top + d;\n      newArrowRect.bottom = arrowRect.bottom + d;\n      if (newArrowRect.top <= elementRect.top || newArrowRect.bottom >= elementRect.bottom) {\n        arrowHidden = true;\n      }\n    }\n    if (arrow === \"top\" || arrow === \"bottom\") {\n      targetCenter = targetRect.left + targetRect.width / 2;\n      currentArrowCenter = arrowRect.left + arrowRect.width / 2;\n      d = targetCenter - currentArrowCenter;\n      newArrowRect.left = arrowRect.left + d;\n      newArrowRect.right = arrowRect.right + d;\n      if (newArrowRect.left <= elementRect.left || newArrowRect.right >= elementRect.right) {\n        arrowHidden = true;\n      }\n    }\n    d = Math.ceil(d);\n    if (arrowHidden) {\n      arrowEl.hidden = true;\n    }\n    arrowEl.style[targetMargin] = `${d}px`;\n  }\n  set height(val) {\n    const newHeight = (0,_utils_ids_xss_utils_ids_xss_utils__WEBPACK_IMPORTED_MODULE_3__.stripHTML)(val);\n    const currentHeight = this.height;\n    if (currentHeight !== newHeight) {\n      if (newHeight.length) {\n        this.container?.style.setProperty(\"height\", newHeight);\n        this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.HEIGHT, newHeight);\n      } else {\n        this.container?.style.removeProperty(\"height\");\n        this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.HEIGHT);\n      }\n    }\n  }\n  get height() {\n    return this.container?.style.height || \"\";\n  }\n  set width(val) {\n    const newWidth = (0,_utils_ids_xss_utils_ids_xss_utils__WEBPACK_IMPORTED_MODULE_3__.stripHTML)(val);\n    const currentWidth = this.width;\n    if (currentWidth !== newWidth) {\n      if (newWidth.length) {\n        this.container?.style.setProperty(\"width\", newWidth);\n        this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.WIDTH, newWidth);\n      } else {\n        this.container?.style.removeProperty(\"width\");\n        this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.WIDTH);\n      }\n    }\n  }\n  get width() {\n    return this.container?.style.width ?? \"\";\n  }\n};\nIdsPopup = __decorateClass([\n  (0,_core_ids_decorators__WEBPACK_IMPORTED_MODULE_0__.customElement)(\"ids-popup\"),\n  (0,_core_ids_decorators__WEBPACK_IMPORTED_MODULE_0__.scss)(_ids_popup_scss__WEBPACK_IMPORTED_MODULE_10__[\"default\"])\n], IdsPopup);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/ids-popup/ids-popup.ts\n");

/***/ }),

/***/ "./src/mixins/ids-theme-mixin/ids-theme-mixin.ts":
/*!*******************************************************!*\
  !*** ./src/mixins/ids-theme-mixin/ids-theme-mixin.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"THEME_MODES\": () => (/* binding */ THEME_MODES),\n/* harmony export */   \"default\": () => (/* binding */ ids_theme_mixin_default)\n/* harmony export */ });\n/* harmony import */ var _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/ids-attributes */ \"./src/core/ids-attributes.ts\");\n\nconst THEME_MODES = [\"light\", \"dark\", \"contrast\"];\nconst IdsThemeMixin = (superclass) => class extends superclass {\n  switcher = null;\n  constructor(...args) {\n    super(...args);\n  }\n  static get attributes() {\n    return [\n      ...superclass.attributes,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.MODE\n    ];\n  }\n  connectedCallback() {\n    super.connectedCallback?.();\n    this.initThemeHandlers();\n  }\n  disconnectedCallback() {\n    this.offEvent(\"themechanged\");\n    this.switcher = null;\n    super.disconnectedCallback?.();\n  }\n  /**\n   * Init the mixin events and states\n   * @private\n   */\n  initThemeHandlers() {\n    this.switcher = document.querySelector(\"ids-theme-switcher\");\n    if (!this.switcher) {\n      return;\n    }\n    this.mode = this.switcher.mode;\n    this.onEvent(\"themechanged\", this.switcher, (e) => {\n      this.mode = e.detail.mode;\n    });\n  }\n  /**\n   * Set the mode of the current theme\n   * @param {string} value The mode value for example: light, dark, or contrast\n   */\n  set mode(value) {\n    if (!THEME_MODES.includes(value))\n      value = \"light\";\n    this.setAttribute(\"mode\", value);\n    this.container?.setAttribute(\"mode\", value);\n  }\n  /**\n   * Get the mode of the current theme\n   * @returns {string} light, dark, or contrast\n   */\n  get mode() {\n    return this.getAttribute(\"mode\") || \"light\";\n  }\n};\nvar ids_theme_mixin_default = IdsThemeMixin;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbWl4aW5zL2lkcy10aGVtZS1taXhpbi9pZHMtdGhlbWUtbWl4aW4udHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTJCO0FBT3BCLE1BQU0sY0FBYyxDQUFDLFNBQVMsUUFBUSxVQUFVO0FBT3ZELE1BQU0sZ0JBQWdCLENBQXdCLGVBQWtCLGNBQWMsV0FBVztBQUFBLEVBQ3ZGLFdBQW9DO0FBQUEsRUFFcEMsZUFBZSxNQUFhO0FBQzFCLFVBQU0sR0FBRyxJQUFJO0FBQUEsRUFDZjtBQUFBLEVBRUEsV0FBVyxhQUFhO0FBQ3RCLFdBQU87QUFBQSxNQUNMLEdBQUksV0FBbUI7QUFBQSxNQUN2QixpRUFBZTtBQUFKLElBQ2I7QUFBQSxFQUNGO0FBQUEsRUFFQSxvQkFBb0I7QUFDbEIsVUFBTSxvQkFBb0I7QUFDMUIsU0FBSyxrQkFBa0I7QUFBQSxFQUN6QjtBQUFBLEVBRUEsdUJBQXVCO0FBQ3JCLFNBQUssU0FBUyxjQUFjO0FBQzVCLFNBQUssV0FBVztBQUNoQixVQUFNLHVCQUF1QjtBQUFBLEVBQy9CO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU1BLG9CQUFvQjtBQUNsQixTQUFLLFdBQVcsU0FBUyxjQUFnQyxvQkFBb0I7QUFDN0UsUUFBSSxDQUFDLEtBQUssVUFBVTtBQUNsQjtBQUFBLElBQ0Y7QUFFQSxTQUFLLE9BQU8sS0FBSyxTQUFTO0FBRTFCLFNBQUssUUFBUSxnQkFBZ0IsS0FBSyxVQUFVLENBQUMsTUFBbUI7QUFDOUQsV0FBSyxPQUFPLEVBQUUsT0FBTztBQUFBLElBQ3ZCLENBQUM7QUFBQSxFQUNIO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU1BLElBQUksS0FBSyxPQUFlO0FBQ3RCLFFBQUksQ0FBQyxZQUFZLFNBQVMsS0FBSztBQUFHLGNBQVE7QUFDMUMsU0FBSyxhQUFhLFFBQVEsS0FBSztBQUMvQixTQUFLLFdBQVcsYUFBYSxRQUFRLEtBQUs7QUFBQSxFQUM1QztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNQSxJQUFJLE9BQWU7QUFDakIsV0FBTyxLQUFLLGFBQWEsTUFBTSxLQUFLO0FBQUEsRUFDdEM7QUFDRjtBQUVBLElBQU8sMEJBQVEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pZHMtZW50ZXJwcmlzZS13Yy8uL3NyYy9taXhpbnMvaWRzLXRoZW1lLW1peGluL2lkcy10aGVtZS1taXhpbi50cz8yZGIyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGF0dHJpYnV0ZXMgfSBmcm9tICcuLi8uLi9jb3JlL2lkcy1hdHRyaWJ1dGVzJztcbmltcG9ydCB7IEV2ZW50c01peGluSW50ZXJmYWNlIH0gZnJvbSAnLi4vaWRzLWV2ZW50cy1taXhpbi9pZHMtZXZlbnRzLW1peGluJztcbmltcG9ydCB7IElkc0NvbnN0cnVjdG9yIH0gZnJvbSAnLi4vLi4vY29yZS9pZHMtZWxlbWVudCc7XG5pbXBvcnQgdHlwZSBJZHNUaGVtZVN3aXRjaGVyIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvaWRzLXRoZW1lLXN3aXRjaGVyL2lkcy10aGVtZS1zd2l0Y2hlcic7XG5cbnR5cGUgQ29uc3RyYWludHMgPSBJZHNDb25zdHJ1Y3RvcjxFdmVudHNNaXhpbkludGVyZmFjZT47XG5cbmV4cG9ydCBjb25zdCBUSEVNRV9NT0RFUyA9IFsnbGlnaHQnLCAnZGFyaycsICdjb250cmFzdCddO1xuXG4vKipcbiAqIEEgbWl4aW4gdGhhdCBhZGRzIHRoZW1pbmcgZnVuY3Rpb25hbGl0eSB0byBjb21wb25lbnRzXG4gKiBAcGFyYW0ge2FueX0gc3VwZXJjbGFzcyBBY2NlcHRzIGEgc3VwZXJjbGFzcyBhbmQgY3JlYXRlcyBhIG5ldyBzdWJjbGFzcyBmcm9tIGl0XG4gKiBAcmV0dXJucyB7YW55fSBUaGUgZXh0ZW5kZWQgb2JqZWN0XG4gKi9cbmNvbnN0IElkc1RoZW1lTWl4aW4gPSA8VCBleHRlbmRzIENvbnN0cmFpbnRzPihzdXBlcmNsYXNzOiBUKSA9PiBjbGFzcyBleHRlbmRzIHN1cGVyY2xhc3Mge1xuICBzd2l0Y2hlcjogSWRzVGhlbWVTd2l0Y2hlciB8IG51bGwgPSBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKC4uLmFyZ3M6IGFueVtdKSB7XG4gICAgc3VwZXIoLi4uYXJncyk7XG4gIH1cblxuICBzdGF0aWMgZ2V0IGF0dHJpYnV0ZXMoKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIC4uLihzdXBlcmNsYXNzIGFzIGFueSkuYXR0cmlidXRlcyxcbiAgICAgIGF0dHJpYnV0ZXMuTU9ERVxuICAgIF07XG4gIH1cblxuICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaz8uKCk7XG4gICAgdGhpcy5pbml0VGhlbWVIYW5kbGVycygpO1xuICB9XG5cbiAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgdGhpcy5vZmZFdmVudCgndGhlbWVjaGFuZ2VkJyk7XG4gICAgdGhpcy5zd2l0Y2hlciA9IG51bGw7XG4gICAgc3VwZXIuZGlzY29ubmVjdGVkQ2FsbGJhY2s/LigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXQgdGhlIG1peGluIGV2ZW50cyBhbmQgc3RhdGVzXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBpbml0VGhlbWVIYW5kbGVycygpIHtcbiAgICB0aGlzLnN3aXRjaGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcjxJZHNUaGVtZVN3aXRjaGVyPignaWRzLXRoZW1lLXN3aXRjaGVyJyk7XG4gICAgaWYgKCF0aGlzLnN3aXRjaGVyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5tb2RlID0gdGhpcy5zd2l0Y2hlci5tb2RlO1xuXG4gICAgdGhpcy5vbkV2ZW50KCd0aGVtZWNoYW5nZWQnLCB0aGlzLnN3aXRjaGVyLCAoZTogQ3VzdG9tRXZlbnQpID0+IHtcbiAgICAgIHRoaXMubW9kZSA9IGUuZGV0YWlsLm1vZGU7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBtb2RlIG9mIHRoZSBjdXJyZW50IHRoZW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSBUaGUgbW9kZSB2YWx1ZSBmb3IgZXhhbXBsZTogbGlnaHQsIGRhcmssIG9yIGNvbnRyYXN0XG4gICAqL1xuICBzZXQgbW9kZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgaWYgKCFUSEVNRV9NT0RFUy5pbmNsdWRlcyh2YWx1ZSkpIHZhbHVlID0gJ2xpZ2h0JztcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnbW9kZScsIHZhbHVlKTtcbiAgICB0aGlzLmNvbnRhaW5lcj8uc2V0QXR0cmlidXRlKCdtb2RlJywgdmFsdWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgbW9kZSBvZiB0aGUgY3VycmVudCB0aGVtZVxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBsaWdodCwgZGFyaywgb3IgY29udHJhc3RcbiAgICovXG4gIGdldCBtb2RlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlKCdtb2RlJykgfHwgJ2xpZ2h0JztcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgSWRzVGhlbWVNaXhpbjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/mixins/ids-theme-mixin/ids-theme-mixin.ts\n");

/***/ })

}]);