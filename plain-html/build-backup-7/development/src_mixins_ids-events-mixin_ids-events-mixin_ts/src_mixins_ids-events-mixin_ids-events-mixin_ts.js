"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkids_enterprise_wc"] = self["webpackChunkids_enterprise_wc"] || []).push([["src_mixins_ids-events-mixin_ids-events-mixin_ts"],{

/***/ "./src/mixins/ids-events-mixin/ids-events-common.ts":
/*!**********************************************************!*\
  !*** ./src/mixins/ids-events-mixin/ids-events-common.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getEventBaseName\": () => (/* binding */ getEventBaseName)\n/* harmony export */ });\nfunction getEventBaseName(fullEventName) {\n  return fullEventName.split(\".\")[0];\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbWl4aW5zL2lkcy1ldmVudHMtbWl4aW4vaWRzLWV2ZW50cy1jb21tb24udHMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUtPLFNBQVMsaUJBQWlCLGVBQStCO0FBQzlELFNBQU8sY0FBYyxNQUFNLEdBQUcsRUFBRSxDQUFDO0FBQ25DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaWRzLWVudGVycHJpc2Utd2MvLi9zcmMvbWl4aW5zL2lkcy1ldmVudHMtbWl4aW4vaWRzLWV2ZW50cy1jb21tb24udHM/NzBlOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFJldHVybnMgYW4gZXZlbnQncyBcImJhc2VcIiBldmVudCB3aXRob3V0IGl0J3MgbmFtZXNwYWNlXG4gKiBAcGFyYW0ge3N0cmluZ30gZnVsbEV2ZW50TmFtZSB0aGUgZnVsbCBldmVudCBuYW1lXG4gKiBAcmV0dXJucyB7c3RyaW5nfSB0aGUgYmFzZSBldmVudCBuYW1lXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRFdmVudEJhc2VOYW1lKGZ1bGxFdmVudE5hbWU6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiBmdWxsRXZlbnROYW1lLnNwbGl0KCcuJylbMF07XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/mixins/ids-events-mixin/ids-events-common.ts\n");

/***/ }),

/***/ "./src/mixins/ids-events-mixin/ids-events-mixin.ts":
/*!*********************************************************!*\
  !*** ./src/mixins/ids-events-mixin/ids-events-mixin.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ids_events_mixin_default)\n/* harmony export */ });\n/* harmony import */ var _utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/ids-string-utils/ids-string-utils */ \"./src/utils/ids-string-utils/ids-string-utils.ts\");\n/* harmony import */ var _utils_ids_timer_utils_ids_timer_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/ids-timer-utils/ids-timer-utils */ \"./src/utils/ids-timer-utils/ids-timer-utils.ts\");\n/* harmony import */ var _ids_events_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ids-events-common */ \"./src/mixins/ids-events-mixin/ids-events-common.ts\");\n\n\n\nconst IdsEventsMixin = (superclass) => class extends superclass {\n  handledEvents = /* @__PURE__ */ new Map();\n  longPressOn = false;\n  swipeOn = false;\n  keyboardFocusOn = false;\n  keyDownEndOn = false;\n  hoverEndOn = false;\n  isClick = false;\n  timer;\n  slopedMouseLeaveTimer;\n  /** Starting pageX */\n  startX = NaN;\n  /** Starting pageY */\n  startY = NaN;\n  /** Tracking pageX */\n  trackedX = NaN;\n  /** Tracking pageY */\n  trackedY = NaN;\n  /**\n   * @returns {Array<string>} names of vetoable events.  Override this in your component\n   * to listen for and handle vetoable events.\n   */\n  vetoableEventTypes = [];\n  constructor(...args) {\n    super(...args);\n    this.detachAllEvents = this.detachAllEvents.bind(this);\n    this.detachEventsByName = this.detachEventsByName.bind(this);\n    this.offEvent = this.offEvent.bind(this);\n    this.onEvent = this.onEvent.bind(this);\n  }\n  static get attributes() {\n    return [\n      ...superclass.attributes\n    ];\n  }\n  disconnectedCallback() {\n    super.disconnectedCallback?.();\n    this.detachAllEvents();\n  }\n  /**\n   * Add and keep track of an event listener.\n   * @param {string} eventName The event name with optional namespace\n   * @param {Element} target The DOM element to register\n   * @param {Function|any} callback The callback code to execute\n   * @param {EventOptions} options Additional event settings (passive, once, bubbles ect)\n   */\n  onEvent(eventName, target, callback, options) {\n    if (!target || !callback) {\n      return;\n    }\n    if (eventName.indexOf(\"longpress\") === 0) {\n      this.#addLongPressListener(eventName, target, options);\n    }\n    if (eventName.indexOf(\"keyboardfocus\") === 0) {\n      this.#addKeyboardFocusListener(eventName, target);\n    }\n    if (eventName.indexOf(\"hoverend\") === 0) {\n      this.#addHoverEndListener(eventName, target, options);\n    }\n    if (eventName.indexOf(\"sloped-mouseleave\") === 0) {\n      this.#addSlopedMouseLeaveListener(eventName, target, options);\n    }\n    if (eventName.indexOf(\"keydownend\") === 0) {\n      this.#addKeyDownEndListener(target, options);\n    }\n    if (eventName.indexOf(\"swipe\") === 0) {\n      this.#addSwipeListener(eventName, target, options);\n    }\n    target.addEventListener((0,_ids_events_common__WEBPACK_IMPORTED_MODULE_2__.getEventBaseName)(eventName), callback, options);\n    this.handledEvents.set(eventName, { target, callback, options });\n  }\n  /**\n   * Remove event listener\n   * @param {string} eventName The event name with optional namespace\n   * @param {HTMLElement} target The DOM element to deregister (or previous registered target)\n   * @param {EventOptions} options Additional event settings (passive, once, passive ect)\n   */\n  offEvent(eventName, target, options) {\n    const handler = this.handledEvents.get(eventName);\n    this.handledEvents.delete(eventName);\n    if (eventName.indexOf(\"longpress\") === 0 && handler?.callback) {\n      this.#removeLongPressListener();\n      return;\n    }\n    if (eventName.indexOf(\"keyboardfocus\") === 0 && handler?.callback) {\n      this.#removeKeyboardFocusListener();\n      return;\n    }\n    if (eventName.indexOf(\"hoverend\") === 0 && handler?.callback) {\n      this.#removeHoverEndListener();\n      return;\n    }\n    if (eventName.indexOf(\"sloped-mouseleave\") === 0 && handler?.callback) {\n      this.#removeSlopedMouseLeaveListener();\n      return;\n    }\n    if (eventName.indexOf(\"keydownend\") === 0 && handler?.callback) {\n      this.#removeKeyDownEndListener();\n      return;\n    }\n    if (eventName.indexOf(\"swipe\") === 0 && handler?.callback) {\n      this.#removeSwipeListener();\n      return;\n    }\n    const targetApplied = target || handler?.target;\n    if (handler?.callback && targetApplied?.removeEventListener) {\n      targetApplied.removeEventListener((0,_ids_events_common__WEBPACK_IMPORTED_MODULE_2__.getEventBaseName)(eventName), handler.callback, options || handler.options);\n    }\n  }\n  /**\n   * Create and trigger a custom event\n   * @param {string} eventName The event id with optional namespace\n   * @param {HTMLElement} target The DOM element to register\n   * @param {object} [options = {}] The custom data to send\n   */\n  triggerEvent(eventName, target, options) {\n    const event = new CustomEvent((0,_ids_events_common__WEBPACK_IMPORTED_MODULE_2__.getEventBaseName)(eventName), options);\n    target.dispatchEvent(event);\n  }\n  /**\n   * Triggers an event that occurs before the show/hide operations that can \"cancel\"\n   * @param {string} eventType the name of the event to trigger\n   * @param {any} data extra data to send with vetoable event\n   * @returns {boolean} true if the event works\n   */\n  triggerVetoableEvent(eventType, data) {\n    if (!this.vetoableEventTypes?.includes(eventType)) {\n      return false;\n    }\n    let canShow = true;\n    const eventResponse = (veto) => {\n      canShow = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_0__.stringToBool)(veto);\n    };\n    this.triggerEvent(eventType, this, {\n      bubbles: true,\n      detail: {\n        data,\n        elem: this,\n        response: eventResponse\n      }\n    });\n    return canShow;\n  }\n  /**\n   * Detach all event handlers\n   */\n  detachAllEvents() {\n    this.handledEvents.forEach((value, key) => {\n      this.offEvent(key, value.target, value.options);\n    });\n    this.#removeLongPressListener();\n    this.#removeKeyboardFocusListener();\n    this.#removeHoverEndListener();\n    this.#removeSlopedMouseLeaveListener();\n    this.#removeKeyDownEndListener();\n    this.#removeSwipeListener();\n  }\n  /**\n   * Detach a specific handlers associated with a name\n   * @param {string} [eventName] an optional event name to filter with\n   */\n  detachEventsByName = (eventName) => {\n    const isValidName = typeof eventName === \"string\" && !!eventName.length;\n    const hasEvent = this.handledEvents.has(eventName);\n    if (isValidName && hasEvent) {\n      const event = this.handledEvents.get(eventName);\n      this.offEvent(eventName, event.target, event.options);\n    }\n  };\n  /**\n   * Setup a custom long press event (just one)\n   * @private\n   * @param {string} eventName The event name with optional namespace\n   * @param {Element} target The DOM element to register\n   * @param {EventOptions} options Additional event settings (passive, once, bubbles ect)\n   */\n  #addLongPressListener(eventName, target, options) {\n    if (this.longPressOn)\n      return;\n    this.onEvent(\"touchstart.longpress\", target, (e) => {\n      e.preventDefault();\n      this.clearTimer();\n      this.timer = (0,_utils_ids_timer_utils_ids_timer_utils__WEBPACK_IMPORTED_MODULE_1__.requestAnimationTimeout)(() => {\n        const event = new CustomEvent(\"longpress\", e);\n        target.dispatchEvent(event);\n        this.clearTimer();\n      }, options?.delay ? options.delay : 500);\n    }, { passive: true });\n    this.onEvent(\"touchend.longpress\", target, (e) => {\n      e.preventDefault();\n      this.clearTimer();\n    }, { passive: true });\n    this.longPressOn = true;\n  }\n  /**\n   * Detach all long press events\n   * @private\n   */\n  #removeLongPressListener() {\n    if (!this.longPressOn) {\n      return;\n    }\n    this.longPressOn = false;\n    this.clearTimer();\n    this.detachEventsByName(\"touchstart.longpress\");\n    this.detachEventsByName(\"touchend.longpress\");\n  }\n  /**\n   * Setup a custom swipe event (just one)\n   * @private\n   * @param {string} eventName The event name with optional namespace\n   * @param {Element} target The DOM element to register\n   * @param {EventOptions} options Additional event settings (passive, once, bubbles ect)\n   */\n  #addSwipeListener(eventName, target, options) {\n    if (this.swipeOn) {\n      return;\n    }\n    let touchstartX = 0;\n    let touchendX = 0;\n    if (options) {\n      options.passive = true;\n    }\n    this.onEvent(\"touchstart.swipe\", target, (e) => {\n      touchstartX = e.changedTouches[0].screenX;\n    }, options);\n    this.onEvent(\"touchend.swipe\", target, (e) => {\n      touchendX = e.changedTouches[0].screenX;\n      let direction = \"\";\n      if (touchendX < touchstartX) {\n        direction = \"left\";\n      }\n      if (touchendX > touchstartX) {\n        direction = \"right\";\n      }\n      if (!direction) {\n        return;\n      }\n      const event = new CustomEvent(\"swipe\", {\n        detail: {\n          direction,\n          trigger: \"touch\"\n        }\n      });\n      target.dispatchEvent(event);\n    }, options);\n    if (options?.scrollContainer) {\n      let lastPercentage = 0;\n      this.onEvent(\"scroll\", options.scrollContainer, (e) => {\n        const eventTarget = e.target;\n        const scrollPercentage = 100 * (eventTarget.scrollLeft / (eventTarget.scrollWidth - eventTarget.clientWidth));\n        if (Math.abs(lastPercentage - scrollPercentage) < 1) {\n          return;\n        }\n        lastPercentage = scrollPercentage;\n        let direction = \"\";\n        if (scrollPercentage === 0) {\n          direction = \"right\";\n        }\n        if (scrollPercentage > 98) {\n          direction = \"left\";\n        }\n        if (!direction) {\n          return;\n        }\n        const event = new CustomEvent(\"swipe\", {\n          detail: {\n            direction,\n            trigger: \"scroll\"\n          }\n        });\n        target.dispatchEvent(event);\n      }, { passive: true });\n    }\n    this.swipeOn = true;\n  }\n  /**\n   * Detach all swipe events\n   * @private\n   */\n  #removeSwipeListener() {\n    if (!this.swipeOn) {\n      return;\n    }\n    this.swipeOn = false;\n    this.detachEventsByName(\"touchstart.swipe\");\n    this.detachEventsByName(\"touchend.swipe\");\n  }\n  /**\n   * Setup a custom keypress focus event\n   * @private\n   * @param {string} eventName The event name with optional namespace\n   * @param {Element} target The DOM element to register\n   */\n  #addKeyboardFocusListener(eventName, target) {\n    if (this.keyboardFocusOn) {\n      return;\n    }\n    this.isClick = false;\n    this.onEvent(\"click.keyboardfocus\", target, () => {\n      this.isClick = true;\n    });\n    this.onEvent(\"keypress.keyboardfocus\", target, () => {\n      this.isClick = false;\n    });\n    this.onEvent(\"focus.keyboardfocus\", target, (e) => {\n      const event = new CustomEvent(\"keyboardfocus\", e);\n      target.dispatchEvent(event);\n    });\n    this.keyboardFocusOn = true;\n  }\n  /**\n   * Detach all keyboard focus events\n   * @private\n   */\n  #removeKeyboardFocusListener() {\n    if (!this.keyboardFocusOn) {\n      return;\n    }\n    this.keyboardFocusOn = false;\n    this.detachEventsByName(`click.keyboardfocus`);\n    this.detachEventsByName(`keypress.keyboardfocus`);\n  }\n  /**\n   * Setup a custom hoverend event that fires after a delay of the hover persists\n   * @private\n   * @param {string} eventName The event name with optional namespace\n   * @param {Element} target The DOM element to register\n   * @param {EventOptions} options Additional event settings (passive, once, bubbles ect)\n   */\n  #addHoverEndListener(eventName, target, options) {\n    this.onEvent(\"mouseenter.eventsmixin\", target, (e) => {\n      this.clearTimer();\n      this.timer = (0,_utils_ids_timer_utils_ids_timer_utils__WEBPACK_IMPORTED_MODULE_1__.requestAnimationTimeout)(() => {\n        const event = new MouseEvent((0,_ids_events_common__WEBPACK_IMPORTED_MODULE_2__.getEventBaseName)(eventName), e);\n        target.dispatchEvent(event);\n        this.clearTimer();\n      }, options?.delay);\n    });\n    this.onEvent(\"mouseleave.eventsmixin\", target, () => {\n      this.clearTimer();\n    });\n    this.onEvent(\"click.eventsmixin\", target, () => {\n      this.clearTimer();\n    });\n    this.hoverEndOn = true;\n  }\n  /**\n   * Setup a custom 'sloped-mouseleave' event that fires after a delay,\n   * and if mouse coordinates land within a \"safe\" area.\n   * @private\n   * @param {string} eventName The event name with optional namespace\n   * @param {Element} target The DOM element to register\n   * @param {EventOptions} options Additional event settings (passive, once, bubbles ect)\n   */\n  #addSlopedMouseLeaveListener(eventName, target, options) {\n    const dispatchCustomEvent = (mouseLeaveNode, originalEvent) => {\n      const event = new CustomEvent((0,_ids_events_common__WEBPACK_IMPORTED_MODULE_2__.getEventBaseName)(eventName), {\n        detail: {\n          originalEvent,\n          mouseLeaveNode\n        }\n      });\n      target.dispatchEvent(event);\n      this.#clearSlopedMouseLeaveTimer();\n    };\n    this.onEvent(\"mouseleave.eventsmixin\", target, (e) => {\n      if (!this.slopedMouseLeaveTimer) {\n        this.startX = e.pageX;\n        this.startY = e.pageY;\n        this.slopedMouseLeaveTimer = (0,_utils_ids_timer_utils_ids_timer_utils__WEBPACK_IMPORTED_MODULE_1__.requestAnimationTimeout)(() => {\n          const outOfBoundsX = this.trackedX - this.startX > 3.5;\n          const outOfBoundsY = this.trackedY - this.startY > 3.5;\n          if (outOfBoundsX || outOfBoundsY) {\n            dispatchCustomEvent(document.elementFromPoint(this.trackedX, this.trackedY), e);\n          }\n        }, options?.delay);\n        this.onEvent(\"mousemove.eventsmixin\", document, (ev) => {\n          this.trackedX = ev.pageX;\n          this.trackedY = ev.pageY;\n        });\n        this.onEvent(\"mouseenter.eventsmixin\", target, () => {\n          this.#clearSlopedMouseLeaveTimer();\n        });\n      }\n    });\n  }\n  /**\n   * Clears a previously-set timer for checking sloped `mouseleave` events\n   * @private\n   */\n  #clearSlopedMouseLeaveTimer() {\n    if (this.slopedMouseLeaveTimer)\n      (0,_utils_ids_timer_utils_ids_timer_utils__WEBPACK_IMPORTED_MODULE_1__.clearAnimationTimeout)(this.slopedMouseLeaveTimer);\n    this.slopedMouseLeaveTimer = void 0;\n    this.detachEventsByName(\"mousemove.eventsmixin\");\n    this.detachEventsByName(\"mouseenter.eventsmixin\");\n    this.startX = NaN;\n    this.startY = NaN;\n    this.trackedX = NaN;\n    this.trackedY = NaN;\n  }\n  /**\n   * Removes previously-set sloped `mouseleave` event listener\n   * @private\n   */\n  #removeSlopedMouseLeaveListener() {\n    if (!this.slopedMouseLeaveTimer)\n      return;\n    this.detachEventsByName(\"mouseleave.eventsmixin\");\n    this.#clearSlopedMouseLeaveTimer();\n  }\n  /**\n   * Setup a custom keydown event that fires after typing a birst of keys\n   * @private\n   * @param {HTMLElement} target The DOM element to register\n   * @param {object} options Additional event settings (passive, once, bubbles ect)\n   */\n  #addKeyDownEndListener(target, options) {\n    let keys = \"\";\n    const delay = options?.delay || 500;\n    this.onEvent(\"keydown.eventsmixin\", target, (e) => {\n      if (typeof e.key === \"undefined\" && e.detail?.nativeEvent)\n        e = e.detail.nativeEvent;\n      if (!(0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_0__.isPrintable)(e))\n        return;\n      keys += e.key;\n      this.clearTimer();\n      this.timer = (0,_utils_ids_timer_utils_ids_timer_utils__WEBPACK_IMPORTED_MODULE_1__.requestAnimationTimeout)(() => {\n        const event = new CustomEvent(\"keydownend\", {\n          detail: {\n            keys\n          }\n        });\n        keys = \"\";\n        target.dispatchEvent(event);\n        this.clearTimer();\n      }, delay);\n    });\n    this.keyDownEndOn = true;\n  }\n  /**\n   * Clear the timer\n   * @private\n   */\n  clearTimer() {\n    if (this.timer)\n      (0,_utils_ids_timer_utils_ids_timer_utils__WEBPACK_IMPORTED_MODULE_1__.clearAnimationTimeout)(this.timer);\n    this.timer = void 0;\n  }\n  /**\n   * Detach all hoverend events\n   * @private\n   */\n  #removeHoverEndListener() {\n    if (!this.hoverEndOn) {\n      return;\n    }\n    this.hoverEndOn = false;\n    this.detachEventsByName(\"click.eventsmixin\");\n    this.detachEventsByName(\"mousemove.eventsmixin\");\n    this.detachEventsByName(\"mouseleave.eventsmixin\");\n    this.detachEventsByName(\"mouseenter.eventsmixin\");\n    this.clearTimer();\n  }\n  /**\n   * Detach all keydownend events\n   * @private\n   */\n  #removeKeyDownEndListener() {\n    if (!this.keyDownEndOn) {\n      return;\n    }\n    this.keyDownEndOn = false;\n    this.clearTimer();\n    this.detachEventsByName(\"keydown.eventsmixin\");\n  }\n};\nvar ids_events_mixin_default = IdsEventsMixin;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/mixins/ids-events-mixin/ids-events-mixin.ts\n");

/***/ }),

/***/ "./src/utils/ids-timer-utils/ids-timer-utils.ts":
/*!******************************************************!*\
  !*** ./src/utils/ids-timer-utils/ids-timer-utils.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"clearAnimationInterval\": () => (/* binding */ clearAnimationInterval),\n/* harmony export */   \"clearAnimationTimeout\": () => (/* binding */ clearAnimationTimeout),\n/* harmony export */   \"cssTransitionTimeout\": () => (/* binding */ cssTransitionTimeout),\n/* harmony export */   \"requestAnimationInterval\": () => (/* binding */ requestAnimationInterval),\n/* harmony export */   \"requestAnimationTimeout\": () => (/* binding */ requestAnimationTimeout)\n/* harmony export */ });\nconst RAF = window.requestAnimationFrame;\nconst CAF = window.cancelAnimationFrame;\nfunction requestAnimationInterval(fn, interval = 0) {\n  if (!RAF)\n    return { value: setInterval(fn, interval) };\n  let start = new Date().getTime();\n  const handle = {};\n  const loop = () => {\n    const current = new Date().getTime();\n    const delta = current - start;\n    if (delta >= interval) {\n      fn(current);\n      start = new Date().getTime();\n    }\n    handle.value = RAF(loop);\n  };\n  handle.value = RAF(loop);\n  return handle;\n}\nfunction clearAnimationInterval(handle) {\n  if (handle?.value) {\n    if (!CAF)\n      clearInterval(handle.value);\n    else\n      CAF(handle.value);\n  }\n}\nfunction requestAnimationTimeout(fn, timeout = 0) {\n  if (!RAF)\n    return { value: setTimeout(fn, timeout) };\n  const start = new Date().getTime();\n  const handle = {};\n  const loop = () => {\n    const current = new Date().getTime();\n    const delta = current - start;\n    if (delta >= timeout)\n      fn(current);\n    else\n      handle.value = RAF(loop);\n  };\n  handle.value = RAF(loop);\n  return handle;\n}\nfunction clearAnimationTimeout(handle) {\n  if (handle?.value) {\n    if (!CAF)\n      clearTimeout(handle.value);\n    else\n      CAF(handle.value);\n  }\n}\nconst cssTransitionTimeout = async (timeout) => new Promise((resolve) => {\n  const el = document.createElement(\"div\");\n  el.classList.add(\"ids-transition-timeout\");\n  el.style.setProperty(\"display\", \"block\");\n  el.style.setProperty(\"position\", \"absolute\");\n  el.style.setProperty(\"visibility\", \"hidden\");\n  el.style.setProperty(\"pointer-events\", \"none\");\n  el.style.setProperty(\"width\", \"0\");\n  el.style.setProperty(\"transition-property\", \"width\");\n  el.style.setProperty(\"transition-timing-function\", \"linear\");\n  el.style.setProperty(\"transition-duration\", `${timeout}ms`);\n  document.body.append(el);\n  const onTransitionEnd = () => {\n    el.removeEventListener(\"transitionend\", onTransitionEnd);\n    el.remove();\n    resolve();\n  };\n  el.addEventListener(\"transitionend\", onTransitionEnd);\n  el.offsetHeight;\n  el.style.setProperty(\"width\", \"100%\");\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvaWRzLXRpbWVyLXV0aWxzL2lkcy10aW1lci11dGlscy50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLE1BQU0sTUFBTSxPQUFPO0FBQ25CLE1BQU0sTUFBTSxPQUFPO0FBWVosU0FBUyx5QkFBeUIsSUFBMEIsV0FBVyxHQUE0QjtBQUN4RyxNQUFJLENBQUM7QUFBSyxXQUFPLEVBQUUsT0FBTyxZQUFZLElBQUksUUFBUSxFQUFFO0FBRXBELE1BQUksUUFBUSxJQUFJLEtBQUssRUFBRSxRQUFRO0FBQy9CLFFBQU0sU0FBa0MsQ0FBQztBQUV6QyxRQUFNLE9BQU8sTUFBWTtBQUN2QixVQUFNLFVBQVUsSUFBSSxLQUFLLEVBQUUsUUFBUTtBQUNuQyxVQUFNLFFBQVEsVUFBVTtBQUV4QixRQUFJLFNBQVMsVUFBVTtBQUNyQixTQUFHLE9BQU87QUFDVixjQUFRLElBQUksS0FBSyxFQUFFLFFBQVE7QUFBQSxJQUM3QjtBQUVBLFdBQU8sUUFBUSxJQUFJLElBQUk7QUFBQSxFQUN6QjtBQUVBLFNBQU8sUUFBUSxJQUFJLElBQUk7QUFDdkIsU0FBTztBQUNUO0FBTU8sU0FBUyx1QkFBdUIsUUFBaUM7QUFDdEUsTUFBSSxRQUFRLE9BQU87QUFDakIsUUFBSSxDQUFDO0FBQUssb0JBQWMsT0FBTyxLQUFLO0FBQUE7QUFDL0IsVUFBSSxPQUFPLEtBQUs7QUFBQSxFQUN2QjtBQUNGO0FBUU8sU0FBUyx3QkFBd0IsSUFBMEIsVUFBVSxHQUE0QjtBQUN0RyxNQUFJLENBQUM7QUFBSyxXQUFPLEVBQUUsT0FBTyxXQUFXLElBQUksT0FBTyxFQUFFO0FBRWxELFFBQU0sUUFBUSxJQUFJLEtBQUssRUFBRSxRQUFRO0FBQ2pDLFFBQU0sU0FBa0MsQ0FBQztBQUV6QyxRQUFNLE9BQU8sTUFBWTtBQUN2QixVQUFNLFVBQVUsSUFBSSxLQUFLLEVBQUUsUUFBUTtBQUNuQyxVQUFNLFFBQVEsVUFBVTtBQUV4QixRQUFJLFNBQVM7QUFBUyxTQUFHLE9BQU87QUFBQTtBQUMzQixhQUFPLFFBQVEsSUFBSSxJQUFJO0FBQUEsRUFDOUI7QUFFQSxTQUFPLFFBQVEsSUFBSSxJQUFJO0FBQ3ZCLFNBQU87QUFDVDtBQU1PLFNBQVMsc0JBQXNCLFFBQWlDO0FBQ3JFLE1BQUksUUFBUSxPQUFPO0FBQ2pCLFFBQUksQ0FBQztBQUFLLG1CQUFhLE9BQU8sS0FBSztBQUFBO0FBQzlCLFVBQUksT0FBTyxLQUFLO0FBQUEsRUFDdkI7QUFDRjtBQU9PLE1BQU0sdUJBQXVCLE9BQU8sWUFBbUMsSUFBSSxRQUFRLENBQUMsWUFBWTtBQUNyRyxRQUFNLEtBQUssU0FBUyxjQUFjLEtBQUs7QUFDdkMsS0FBRyxVQUFVLElBQUksd0JBQXdCO0FBQ3pDLEtBQUcsTUFBTSxZQUFZLFdBQVcsT0FBTztBQUN2QyxLQUFHLE1BQU0sWUFBWSxZQUFZLFVBQVU7QUFDM0MsS0FBRyxNQUFNLFlBQVksY0FBYyxRQUFRO0FBQzNDLEtBQUcsTUFBTSxZQUFZLGtCQUFrQixNQUFNO0FBQzdDLEtBQUcsTUFBTSxZQUFZLFNBQVMsR0FBRztBQUNqQyxLQUFHLE1BQU0sWUFBWSx1QkFBdUIsT0FBTztBQUNuRCxLQUFHLE1BQU0sWUFBWSw4QkFBOEIsUUFBUTtBQUMzRCxLQUFHLE1BQU0sWUFBWSx1QkFBdUIsR0FBRyxXQUFXO0FBQzFELFdBQVMsS0FBSyxPQUFPLEVBQUU7QUFFdkIsUUFBTSxrQkFBa0IsTUFBTTtBQUM1QixPQUFHLG9CQUFvQixpQkFBaUIsZUFBZTtBQUN2RCxPQUFHLE9BQU87QUFDVixZQUFRO0FBQUEsRUFDVjtBQUVBLEtBQUcsaUJBQWlCLGlCQUFpQixlQUFlO0FBRXBELEtBQUc7QUFDSCxLQUFHLE1BQU0sWUFBWSxTQUFTLE1BQU07QUFDdEMsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2lkcy1lbnRlcnByaXNlLXdjLy4vc3JjL3V0aWxzL2lkcy10aW1lci11dGlscy9pZHMtdGltZXItdXRpbHMudHM/NmRlMiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBSQUYgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lO1xuY29uc3QgQ0FGID0gd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lO1xuXG5leHBvcnQgdHlwZSBGcmFtZVJlcXVlc3RMb29wSGFuZGxlciA9IHtcbiAgdmFsdWU/OiBudW1iZXI7XG59O1xuXG4vKipcbiAqIEJlaGF2ZXMgc2ltaWxhcmx5IHRvIGBzZXRJbnRlcnZhbGAsIHVzaW5nIGByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKWAgd2hlcmUgcG9zc2libGUgZm9yIGJldHRlciBwZXJmb3JtYW5jZVxuICogQHBhcmFtIHtGcmFtZVJlcXVlc3RDYWxsYmFja30gZm4gVGhlIGNhbGxiYWNrIGZ1bmN0aW9uXG4gKiBAcGFyYW0ge251bWJlcn0gaW50ZXJ2YWwgVGhlIGRlbGF5IGluIG1pbGxpc2Vjb25kc1xuICogQHJldHVybnMge251bWJlcn0gbG9vcCBoYW5kbGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlcXVlc3RBbmltYXRpb25JbnRlcnZhbChmbjogRnJhbWVSZXF1ZXN0Q2FsbGJhY2ssIGludGVydmFsID0gMCk6IEZyYW1lUmVxdWVzdExvb3BIYW5kbGVyIHtcbiAgaWYgKCFSQUYpIHJldHVybiB7IHZhbHVlOiBzZXRJbnRlcnZhbChmbiwgaW50ZXJ2YWwpIH07XG5cbiAgbGV0IHN0YXJ0ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gIGNvbnN0IGhhbmRsZTogRnJhbWVSZXF1ZXN0TG9vcEhhbmRsZXIgPSB7fTtcblxuICBjb25zdCBsb29wID0gKCk6IHZvaWQgPT4ge1xuICAgIGNvbnN0IGN1cnJlbnQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICBjb25zdCBkZWx0YSA9IGN1cnJlbnQgLSBzdGFydDtcblxuICAgIGlmIChkZWx0YSA+PSBpbnRlcnZhbCkge1xuICAgICAgZm4oY3VycmVudCk7XG4gICAgICBzdGFydCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgIH1cblxuICAgIGhhbmRsZS52YWx1ZSA9IFJBRihsb29wKTtcbiAgfTtcblxuICBoYW5kbGUudmFsdWUgPSBSQUYobG9vcCk7XG4gIHJldHVybiBoYW5kbGU7XG59XG5cbi8qKlxuICogQmVoYXZlcyBzaW1pbGFybHkgdG8gYGNsZWFySW50ZXJ2YWxgLCB1c2luZyBgY2FuY2VsQW5pbWF0aW9uRnJhbWUoKWAgd2hlcmUgcG9zc2libGUgZm9yIGJldHRlciBwZXJmb3JtYW5jZVxuICogQHBhcmFtIHtGcmFtZVJlcXVlc3RMb29wSGFuZGxlcn0gaGFuZGxlIFRoZSBjYWxsYmFjayBmdW5jdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gY2xlYXJBbmltYXRpb25JbnRlcnZhbChoYW5kbGU6IEZyYW1lUmVxdWVzdExvb3BIYW5kbGVyKSB7XG4gIGlmIChoYW5kbGU/LnZhbHVlKSB7XG4gICAgaWYgKCFDQUYpIGNsZWFySW50ZXJ2YWwoaGFuZGxlLnZhbHVlKTtcbiAgICBlbHNlIENBRihoYW5kbGUudmFsdWUpO1xuICB9XG59XG5cbi8qKlxuICogQmVoYXZlcyBzaW1pbGFybHkgdG8gYHNldFRpbWVvdXRgLCB1c2luZyBgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKClgIHdoZXJlIHBvc3NpYmxlIGZvciBiZXR0ZXIgcGVyZm9ybWFuY2VcbiAqIEBwYXJhbSB7RnJhbWVSZXF1ZXN0Q2FsbGJhY2t9IGZuIFRoZSBjYWxsYmFjayBmdW5jdGlvblxuICogQHBhcmFtIHtudW1iZXJ9IHRpbWVvdXQgVGhlIHRpbWVvdXQgZGVsYXkgaW4gbWlsbGlzZWNvbmRzXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBsb29wIGhhbmRsZVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVxdWVzdEFuaW1hdGlvblRpbWVvdXQoZm46IEZyYW1lUmVxdWVzdENhbGxiYWNrLCB0aW1lb3V0ID0gMCk6IEZyYW1lUmVxdWVzdExvb3BIYW5kbGVyIHtcbiAgaWYgKCFSQUYpIHJldHVybiB7IHZhbHVlOiBzZXRUaW1lb3V0KGZuLCB0aW1lb3V0KSB9O1xuXG4gIGNvbnN0IHN0YXJ0ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gIGNvbnN0IGhhbmRsZTogRnJhbWVSZXF1ZXN0TG9vcEhhbmRsZXIgPSB7fTtcblxuICBjb25zdCBsb29wID0gKCk6IHZvaWQgPT4ge1xuICAgIGNvbnN0IGN1cnJlbnQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICBjb25zdCBkZWx0YSA9IGN1cnJlbnQgLSBzdGFydDtcblxuICAgIGlmIChkZWx0YSA+PSB0aW1lb3V0KSBmbihjdXJyZW50KTtcbiAgICBlbHNlIGhhbmRsZS52YWx1ZSA9IFJBRihsb29wKTtcbiAgfTtcblxuICBoYW5kbGUudmFsdWUgPSBSQUYobG9vcCk7XG4gIHJldHVybiBoYW5kbGU7XG59XG5cbi8qKlxuICogQmVoYXZlcyBzaW1pbGFybHkgdG8gYGNsZWFyVGltZW91dGAsIHVzaW5nIGBjYW5jZWxBbmltYXRpb25GcmFtZSgpYCB3aGVyZSBwb3NzaWJsZSBmb3IgYmV0dGVyIHBlcmZvcm1hbmNlXG4gKiBAcGFyYW0ge0ZyYW1lUmVxdWVzdExvb3BIYW5kbGVyfSBoYW5kbGUgVGhlIGNhbGxiYWNrIGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjbGVhckFuaW1hdGlvblRpbWVvdXQoaGFuZGxlOiBGcmFtZVJlcXVlc3RMb29wSGFuZGxlcikge1xuICBpZiAoaGFuZGxlPy52YWx1ZSkge1xuICAgIGlmICghQ0FGKSBjbGVhclRpbWVvdXQoaGFuZGxlLnZhbHVlKTtcbiAgICBlbHNlIENBRihoYW5kbGUudmFsdWUpO1xuICB9XG59XG5cbi8qKlxuICogRmFrZXMgYSBcInRpbWVvdXRcIiB1c2luZyBhIENTUyB0cmFuc2l0aW9uIG9uIGFuIGludmlzaWJsZSBlbGVtZW50XG4gKiBAcGFyYW0ge251bWJlcn0gdGltZW91dCB0aGUgdHJhbnNpdGlvbiBkdXJhdGlvbiBpbiBtc1xuICogQHJldHVybnMge1Byb21pc2U8dm9pZD59IHJlc29sdmVkIHdoZW4gdGhlIENTUyB0cmFuc2l0aW9uIGNvbXBsZXRlc1xuICovXG5leHBvcnQgY29uc3QgY3NzVHJhbnNpdGlvblRpbWVvdXQgPSBhc3luYyAodGltZW91dDogbnVtYmVyKTogUHJvbWlzZTx2b2lkPiA9PiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICBjb25zdCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBlbC5jbGFzc0xpc3QuYWRkKCdpZHMtdHJhbnNpdGlvbi10aW1lb3V0Jyk7XG4gIGVsLnN0eWxlLnNldFByb3BlcnR5KCdkaXNwbGF5JywgJ2Jsb2NrJyk7XG4gIGVsLnN0eWxlLnNldFByb3BlcnR5KCdwb3NpdGlvbicsICdhYnNvbHV0ZScpO1xuICBlbC5zdHlsZS5zZXRQcm9wZXJ0eSgndmlzaWJpbGl0eScsICdoaWRkZW4nKTtcbiAgZWwuc3R5bGUuc2V0UHJvcGVydHkoJ3BvaW50ZXItZXZlbnRzJywgJ25vbmUnKTtcbiAgZWwuc3R5bGUuc2V0UHJvcGVydHkoJ3dpZHRoJywgJzAnKTtcbiAgZWwuc3R5bGUuc2V0UHJvcGVydHkoJ3RyYW5zaXRpb24tcHJvcGVydHknLCAnd2lkdGgnKTtcbiAgZWwuc3R5bGUuc2V0UHJvcGVydHkoJ3RyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uJywgJ2xpbmVhcicpO1xuICBlbC5zdHlsZS5zZXRQcm9wZXJ0eSgndHJhbnNpdGlvbi1kdXJhdGlvbicsIGAke3RpbWVvdXR9bXNgKTtcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmQoZWwpO1xuXG4gIGNvbnN0IG9uVHJhbnNpdGlvbkVuZCA9ICgpID0+IHtcbiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgb25UcmFuc2l0aW9uRW5kKTtcbiAgICBlbC5yZW1vdmUoKTtcbiAgICByZXNvbHZlKCk7XG4gIH07XG5cbiAgZWwuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIG9uVHJhbnNpdGlvbkVuZCk7XG5cbiAgZWwub2Zmc2V0SGVpZ2h0OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIGVsLnN0eWxlLnNldFByb3BlcnR5KCd3aWR0aCcsICcxMDAlJyk7XG59KTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/utils/ids-timer-utils/ids-timer-utils.ts\n");

/***/ })

}]);