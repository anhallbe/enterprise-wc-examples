"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkids_enterprise_wc"] = self["webpackChunkids_enterprise_wc"] || []).push([["src_components_ids-month-view_ids-month-view_ts"],{

/***/ "./src/components/ids-month-view/ids-month-view-attribute-mixin.ts":
/*!*************************************************************************!*\
  !*** ./src/components/ids-month-view/ids-month-view-attribute-mixin.ts ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ids_month_view_attribute_mixin_default)\n/* harmony export */ });\n/* harmony import */ var _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/ids-attributes */ \"./src/core/ids-attributes.ts\");\n/* harmony import */ var _utils_ids_deep_clone_utils_ids_deep_clone_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/ids-deep-clone-utils/ids-deep-clone-utils */ \"./src/utils/ids-deep-clone-utils/ids-deep-clone-utils.ts\");\n/* harmony import */ var _utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/ids-string-utils/ids-string-utils */ \"./src/utils/ids-string-utils/ids-string-utils.ts\");\n\n\n\nconst isValidLegendArray = (val) => Array.isArray(val) && val.length > 0 && val.every(\n  (item) => item.name && item.color && (item.dates || item.dayOfWeek)\n);\nconst IdsMonthViewAttributeMixin = (superclass) => class extends superclass {\n  #disableSettings = {\n    dates: [],\n    years: [],\n    minDate: \"\",\n    maxDate: \"\",\n    dayOfWeek: [],\n    isEnable: false\n  };\n  #currentLegend = [];\n  #rangeSettings = {\n    start: null,\n    end: null,\n    separator: \" - \",\n    minDays: 0,\n    maxDays: 0,\n    selectForward: false,\n    selectBackward: false,\n    includeDisabled: false,\n    selectWeek: false\n  };\n  constructor(...args) {\n    super(...args);\n  }\n  static get attributes() {\n    return [\n      ...superclass.attributes,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.RANGE_SETTINGS,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.USE_RANGE\n    ];\n  }\n  connectedCallback() {\n    super.connectedCallback?.();\n  }\n  disconnectedCallback() {\n    super.disconnectedCallback?.();\n  }\n  /**\n   * @returns {IdsDisableSettings} disable settings object\n   */\n  get disableSettings() {\n    return this.#disableSettings;\n  }\n  /**\n   * Set disable settings\n   * @param {IdsDisableSettings} val settings to be assigned to default disable settings\n   */\n  set disableSettings(val) {\n    this.#disableSettings = {\n      ...this.#disableSettings,\n      ...(0,_utils_ids_deep_clone_utils_ids_deep_clone_utils__WEBPACK_IMPORTED_MODULE_1__.deepClone)(val)\n    };\n    if (typeof this.onDisableSettingsChange === \"function\")\n      this.onDisableSettingsChange(this.#disableSettings);\n  }\n  /**\n   * @returns {IdsLegendSettings} array of legend items\n   */\n  get legend() {\n    return this.#currentLegend;\n  }\n  /**\n   * Set array of legend items to month view component\n   * Validation of data is provided by the month view component\n   * @param {IdsLegendSettings} val array of legend items\n   */\n  set legend(val) {\n    if (val === null || Array.isArray(val) && !val.length) {\n      this.#currentLegend = [];\n    } else if (isValidLegendArray(val)) {\n      this.#currentLegend = (0,_utils_ids_deep_clone_utils_ids_deep_clone_utils__WEBPACK_IMPORTED_MODULE_1__.deepClone)(val);\n    } else {\n      throw new Error(\"ids-month-view: Invalid legend data provided\");\n    }\n    if (typeof this.onLegendSettingsChange === \"function\")\n      this.onLegendSettingsChange(this.#currentLegend);\n  }\n  /**\n   * Find legend object by date provided\n   * @param {Date} date to check if has any legend\n   * @returns {IdsLegend | undefined} legend object for a specific date\n   */\n  getLegendByDate(date) {\n    if (!this.#currentLegend)\n      return;\n    return this.#currentLegend.find((legend) => {\n      const ifDayOfWeek = legend.dayOfWeek?.includes(date.getDay());\n      const ifDate = legend.dates?.some((item) => new Date(item).getTime() === date.getTime());\n      return ifDayOfWeek || ifDate;\n    });\n  }\n  /**\n   * @returns {IdsRangeSettings} range settings object\n   */\n  get rangeSettings() {\n    return this.#rangeSettings;\n  }\n  /**\n   * Set range selection settings\n   * @param {IdsRangeSettings} val settings to be assigned to default range settings\n   */\n  set rangeSettings(val) {\n    if (!val || val === null)\n      this.resetRangeSettings();\n    else {\n      this.#rangeSettings = {\n        ...this.#rangeSettings,\n        ...(0,_utils_ids_deep_clone_utils_ids_deep_clone_utils__WEBPACK_IMPORTED_MODULE_1__.deepClone)(val)\n      };\n    }\n    if (typeof this.onRangeSettingsChange === \"function\")\n      this.onRangeSettingsChange(val);\n  }\n  /**\n   * Sets the `rangeSettings` object back to its original defaults\n   */\n  resetRangeSettings() {\n    this.rangeSettings = {\n      start: null,\n      end: null,\n      separator: \" - \",\n      minDays: 0,\n      maxDays: 0,\n      selectForward: false,\n      selectBackward: false,\n      includeDisabled: false,\n      selectWeek: false\n    };\n  }\n  /**\n   * use-range attribute\n   * @returns {boolean} useRange param converted to boolean from attribute value\n   */\n  get useRange() {\n    const attrVal = this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.USE_RANGE);\n    return (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(attrVal);\n  }\n  /**\n   * Set whether or not the component should be a range picker\n   * @param {string|boolean|null} val useRange param value\n   */\n  set useRange(val) {\n    const boolVal = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(val);\n    if (boolVal) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.USE_RANGE, \"true\");\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.USE_RANGE);\n    }\n    if (typeof this.onUseRangeChange === \"function\")\n      this.onUseRangeChange(boolVal);\n  }\n};\nvar ids_month_view_attribute_mixin_default = IdsMonthViewAttributeMixin;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/ids-month-view/ids-month-view-attribute-mixin.ts\n");

/***/ }),

/***/ "./src/components/ids-month-view/ids-month-view-common.ts":
/*!****************************************************************!*\
  !*** ./src/components/ids-month-view/ids-month-view-common.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BASE_Y_OFFSET\": () => (/* binding */ BASE_Y_OFFSET),\n/* harmony export */   \"MAX_EVENT_COUNT\": () => (/* binding */ MAX_EVENT_COUNT),\n/* harmony export */   \"MAX_MONTH\": () => (/* binding */ MAX_MONTH),\n/* harmony export */   \"MIN_MONTH\": () => (/* binding */ MIN_MONTH),\n/* harmony export */   \"WEEK_LENGTH\": () => (/* binding */ WEEK_LENGTH)\n/* harmony export */ });\nconst MIN_MONTH = 0;\nconst MAX_MONTH = 11;\nconst WEEK_LENGTH = 7;\nconst BASE_Y_OFFSET = 35;\nconst MAX_EVENT_COUNT = 3;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9pZHMtbW9udGgtdmlldy9pZHMtbW9udGgtdmlldy1jb21tb24udHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBTyxNQUFNLFlBQVk7QUFDbEIsTUFBTSxZQUFZO0FBQ2xCLE1BQU0sY0FBYztBQUNwQixNQUFNLGdCQUFnQjtBQUN0QixNQUFNLGtCQUFrQiIsInNvdXJjZXMiOlsid2VicGFjazovL2lkcy1lbnRlcnByaXNlLXdjLy4vc3JjL2NvbXBvbmVudHMvaWRzLW1vbnRoLXZpZXcvaWRzLW1vbnRoLXZpZXctY29tbW9uLnRzP2U1OTMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IE1JTl9NT05USCA9IDA7XG5leHBvcnQgY29uc3QgTUFYX01PTlRIID0gMTE7XG5leHBvcnQgY29uc3QgV0VFS19MRU5HVEggPSA3O1xuZXhwb3J0IGNvbnN0IEJBU0VfWV9PRkZTRVQgPSAzNTtcbmV4cG9ydCBjb25zdCBNQVhfRVZFTlRfQ09VTlQgPSAzO1xuXG5leHBvcnQgdHlwZSBJZHNSYW5nZVNldHRpbmdzID0ge1xuICBzdGFydD86IGFueSxcbiAgZW5kPzogYW55LFxuICBzZXBhcmF0b3I6IHN0cmluZyxcbiAgbWluRGF5cz86IG51bWJlcixcbiAgbWF4RGF5cz86IG51bWJlcixcbiAgc2VsZWN0Rm9yd2FyZD86IGJvb2xlYW4sXG4gIHNlbGVjdEJhY2t3YXJkPzogYm9vbGVhbixcbiAgaW5jbHVkZURpc2FibGVkPzogYm9vbGVhbixcbiAgc2VsZWN0V2Vlaz86IGJvb2xlYW5cbn07XG5leHBvcnQgaW50ZXJmYWNlIElkc1JhbmdlU2V0dGluZ3NJbnRlcmZhY2Uge1xuICByYW5nZVNldHRpbmdzPzogSWRzUmFuZ2VTZXR0aW5ncztcbn1cblxuZXhwb3J0IHR5cGUgSWRzRGlzYWJsZVNldHRpbmdzID0ge1xuICBkYXRlcz86IEFycmF5PHN0cmluZz4sXG4gIHllYXJzPzogQXJyYXk8bnVtYmVyPixcbiAgbWluRGF0ZT86IHN0cmluZyxcbiAgbWF4RGF0ZT86IHN0cmluZyxcbiAgZGF5T2ZXZWVrPzogQXJyYXk8bnVtYmVyPixcbiAgaXNFbmFibGU/OiBib29sZWFuXG59O1xuXG5leHBvcnQgdHlwZSBJZHNMZWdlbmQgPSB7XG4gIG5hbWU6IHN0cmluZyxcbiAgY29sb3I6IHN0cmluZyxcbiAgZGF0ZXM/OiBBcnJheTxzdHJpbmc+LFxuICBkYXlPZldlZWs/OiBBcnJheTxudW1iZXI+XG59O1xuXG5leHBvcnQgdHlwZSBJZHNMZWdlbmRTZXR0aW5ncyA9IEFycmF5PElkc0xlZ2VuZD4gfCBudWxsO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/components/ids-month-view/ids-month-view-common.ts\n");

/***/ }),

/***/ "./src/components/ids-month-view/ids-month-view.ts":
/*!*********************************************************!*\
  !*** ./src/components/ids-month-view/ids-month-view.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ids_month_view_default)\n/* harmony export */ });\n/* harmony import */ var _core_ids_decorators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/ids-decorators */ \"./src/core/ids-decorators.ts\");\n/* harmony import */ var _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/ids-attributes */ \"./src/core/ids-attributes.ts\");\n/* harmony import */ var _mixins_ids_events_mixin_ids_events_mixin__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../mixins/ids-events-mixin/ids-events-mixin */ \"./src/mixins/ids-events-mixin/ids-events-mixin.ts\");\n/* harmony import */ var _mixins_ids_date_attribute_mixin_ids_date_attribute_mixin__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../mixins/ids-date-attribute-mixin/ids-date-attribute-mixin */ \"./src/mixins/ids-date-attribute-mixin/ids-date-attribute-mixin.ts\");\n/* harmony import */ var _mixins_ids_theme_mixin_ids_theme_mixin__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../mixins/ids-theme-mixin/ids-theme-mixin */ \"./src/mixins/ids-theme-mixin/ids-theme-mixin.ts\");\n/* harmony import */ var _mixins_ids_locale_mixin_ids_locale_mixin__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../mixins/ids-locale-mixin/ids-locale-mixin */ \"./src/mixins/ids-locale-mixin/ids-locale-mixin.ts\");\n/* harmony import */ var _mixins_ids_calendar_events_mixin_ids_calendar_events_mixin__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../mixins/ids-calendar-events-mixin/ids-calendar-events-mixin */ \"./src/mixins/ids-calendar-events-mixin/ids-calendar-events-mixin.ts\");\n/* harmony import */ var _core_ids_element__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../core/ids-element */ \"./src/core/ids-element.ts\");\n/* harmony import */ var _ids_month_view_attribute_mixin__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./ids-month-view-attribute-mixin */ \"./src/components/ids-month-view/ids-month-view-attribute-mixin.ts\");\n/* harmony import */ var _utils_ids_date_utils_ids_date_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../utils/ids-date-utils/ids-date-utils */ \"./src/utils/ids-date-utils/ids-date-utils.ts\");\n/* harmony import */ var _utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../utils/ids-string-utils/ids-string-utils */ \"./src/utils/ids-string-utils/ids-string-utils.ts\");\n/* harmony import */ var _ids_button_ids_button__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../ids-button/ids-button */ \"./src/components/ids-button/ids-button.ts\");\n/* harmony import */ var _ids_icon_ids_icon__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../ids-icon/ids-icon */ \"./src/components/ids-icon/ids-icon.ts\");\n/* harmony import */ var _ids_text_ids_text__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../ids-text/ids-text */ \"./src/components/ids-text/ids-text.ts\");\n/* harmony import */ var _ids_trigger_field_ids_trigger_button__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../ids-trigger-field/ids-trigger-button */ \"./src/components/ids-trigger-field/ids-trigger-button.ts\");\n/* harmony import */ var _ids_month_view_scss__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./ids-month-view.scss */ \"./src/components/ids-month-view/ids-month-view.scss\");\n/* harmony import */ var _ids_calendar_ids_calendar_event__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../ids-calendar/ids-calendar-event */ \"./src/components/ids-calendar/ids-calendar-event.ts\");\n/* harmony import */ var _ids_date_picker_ids_date_picker_common__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../ids-date-picker/ids-date-picker-common */ \"./src/components/ids-date-picker/ids-date-picker-common.ts\");\n/* harmony import */ var _ids_month_view_common__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./ids-month-view-common */ \"./src/components/ids-month-view/ids-month-view-common.ts\");\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result)\n    __defProp(target, key, result);\n  return result;\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst Base = (0,_ids_month_view_attribute_mixin__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(\n  (0,_mixins_ids_date_attribute_mixin_ids_date_attribute_mixin__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(\n    (0,_mixins_ids_calendar_events_mixin_ids_calendar_events_mixin__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(\n      (0,_mixins_ids_theme_mixin_ids_theme_mixin__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(\n        (0,_mixins_ids_locale_mixin_ids_locale_mixin__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(\n          (0,_mixins_ids_events_mixin_ids_events_mixin__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\n            _core_ids_element__WEBPACK_IMPORTED_MODULE_7__[\"default\"]\n          )\n        )\n      )\n    )\n  )\n);\nlet IdsMonthView = class extends Base {\n  constructor() {\n    super();\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    this.#attachEventHandlers();\n    this.#attachKeyboardListeners();\n    this.#renderMonth();\n  }\n  // Flag value for custom calendar event\n  #isCustom = false;\n  /**\n   * Return the attributes we handle as getters/setters\n   * @returns {Array} The attributes in an array\n   */\n  static get attributes() {\n    return [\n      ...super.attributes,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.COMPACT,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.END_DATE,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.FIRST_DAY_OF_WEEK,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.IS_DATEPICKER,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SHOW_PICKLIST_MONTH,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SHOW_PICKLIST_WEEK,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SHOW_PICKLIST_YEAR,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SHOW_TODAY,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.START_DATE\n    ];\n  }\n  /**\n   * Inner template contents\n   * @returns {string} The template\n   */\n  template() {\n    return `<div class=\"ids-month-view ${this.compact ? \"is-compact\" : \"is-fullsize\"}${this.isDatePicker ? \" is-date-picker\" : \"\"}\" part=\"container\">\n      <div class=\"month-view-container\" part=\"table-container\">\n        <table class=\"month-view-table\" aria-label=\"${this.localeAPI?.translate(\"Calendar\")}\" role=\"application\">\n          <thead class=\"month-view-table-header\">\n            <tr></tr>\n          </thead>\n          <tbody></tbody>\n        </table>\n      </div>\n    </div>`;\n  }\n  /**\n   * Establish internal event handlers\n   * @returns {void}\n   */\n  #attachEventHandlers() {\n    this.offEvent(\"click.month-view-dayselect\");\n    this.onEvent(\"click.month-view-dayselect\", this.container?.querySelector(\"tbody\"), (e) => {\n      this.#daySelectClick(e.target.closest(\"td\"));\n    });\n    this.offEvent(\"mouseover.month-view-range\");\n    this.onEvent(\"mouseover.month-view-range\", this.container?.querySelector(\"tbody\"), (e) => {\n      const element = e.target.closest(\"td\");\n      if (!element)\n        return;\n      const { year, month, day } = element.dataset;\n      this.#rangePropagation(year, month, day);\n    });\n    this.offEvent(\"mouseleave.month-view-range\");\n    this.onEvent(\"mouseleave.month-view-range\", this.container?.querySelector(\"tbody\"), () => {\n      this.container?.querySelectorAll(\"td\").forEach((item) => item.classList.remove(\"range-next\", \"range-prev\"));\n    });\n    this.onEvent(\"click.overflow\", this.container, (evt) => {\n      if (evt.target.tagName === \"IDS-TEXT\" && evt.target.classList.contains(\"events-overflow\")) {\n        evt.stopPropagation();\n        const date = new Date(evt.target.getAttribute(\"data-date\"));\n        this.triggerEvent(\"overflow-click\", this, {\n          detail: { date },\n          bubbles: true,\n          cancelable: true,\n          composed: true\n        });\n      }\n    });\n    return this;\n  }\n  onLanguageChange = () => {\n    this.setDirection();\n    this.#renderMonth();\n  };\n  onLocaleChange = () => {\n    this.setDirection();\n    this.#renderMonth();\n  };\n  /**\n   * Establish Internal Keyboard shortcuts\n   * @returns {object} this class-instance object for chaining\n   */\n  #attachKeyboardListeners() {\n    const keys = [33, 34, 35, 36, 37, 38, 39, 40, 187, 189];\n    if (this.#isDisplayRange()) {\n      this.offEvent(\"keydown.month-view-keyboard\");\n    } else {\n      this.offEvent(\"keydown.month-view-keyboard\");\n      this.onEvent(\"keydown.month-view-keyboard\", this.container?.querySelector(\".month-view-table\"), (e) => {\n        const key = e.keyCode;\n        if (keys.includes(key)) {\n          e.stopPropagation();\n          e.stopImmediatePropagation();\n          e.preventDefault();\n        }\n        if (this.useRange) {\n          if (this.rangeSettings.start) {\n            if (key === 27) {\n              this.rangeSettings.start = null;\n              this.#clearRangeClasses();\n              this.selectDay(this.year, this.month, this.day);\n              this.focus();\n            }\n            if (key === 38) {\n              this.changeDate(\"previous-week\", true);\n              this.#rangePropagation(this.year, this.month, this.day);\n            }\n            if (key === 40) {\n              this.changeDate(\"next-week\", true);\n              this.#rangePropagation(this.year, this.month, this.day);\n            }\n            if (key === 39 || key === 187 && e.shiftKey) {\n              this.changeDate(\"next-day\", true);\n              this.#rangePropagation(this.year, this.month, this.day);\n            }\n            if (key === 37 || key === 189 && !e.shiftKey) {\n              this.changeDate(\"previous-day\", true);\n              this.#rangePropagation(this.year, this.month, this.day);\n            }\n            if (key === 13 || key === 32) {\n              this.#setRangeSelection(this.year, this.month, this.day);\n              this.#triggerSelectedEvent();\n            }\n            this.focus();\n            return;\n          }\n          if (key === 13 || key === 32) {\n            if (this.rangeSettings.selectWeek) {\n              this.#rangeSelectWeek(this.year, this.month, this.day);\n              this.#triggerSelectedEvent();\n            } else {\n              this.#setRangeSelection(this.year, this.month, this.day);\n              this.focus();\n            }\n          }\n        }\n        if (key === 38) {\n          this.changeDate(\"previous-week\");\n        }\n        if (key === 40) {\n          this.changeDate(\"next-week\");\n        }\n        if (key === 39 || key === 187 && e.shiftKey) {\n          this.changeDate(\"next-day\");\n        }\n        if (key === 37 || key === 189 && !e.shiftKey) {\n          this.changeDate(\"previous-day\");\n        }\n        if (key === 33 && !e.altKey && !(e.ctrlKey || e.metaKey)) {\n          this.changeDate(\"previous-month\");\n        }\n        if (key === 34 && !e.altKey && !(e.ctrlKey || e.metaKey)) {\n          this.changeDate(\"next-month\");\n        }\n        if (key === 33 && (e.ctrlKey || e.metaKey)) {\n          this.changeDate(\"previous-year\");\n        }\n        if (key === 34 && (e.ctrlKey || e.metaKey)) {\n          this.changeDate(\"next-year\");\n        }\n        if (key === 36) {\n          this.changeDate(\"start-month\");\n        }\n        if (key === 35) {\n          this.changeDate(\"end-month\");\n        }\n        if (key === 84) {\n          this.changeDate(\"today\");\n        }\n        if ((keys.includes(key) || key === 84) && !this.isDatePicker || (key === 32 || key === 13)) {\n          this.#triggerSelectedEvent();\n        }\n        if (keys.includes(key) || key === 84) {\n          if (this.isDatePicker) {\n            this.selectDay(this.year, this.month, this.day);\n          }\n          this.focus();\n        }\n      });\n    }\n    return this;\n  }\n  /**\n   * Add/remove legend HTML to the container\n   */\n  #renderLegend() {\n    const template = this.legend && this.legend.length > 0 ? `\n      <div class=\"month-view-legend\">\n        ${this.legend.map((item) => `\n          <div class=\"month-view-legend-item ${item.cssClass || \"\"}\">\n            <span class=\"month-view-legend-swatch\" data-color=\"${item.color}\"></span>\n            <ids-text class=\"month-view-legend-text\" ${item.fontSize ? `font-size=\"${item.fontSize}\"` : \"\"}>${item.name}</ids-text>\n          </div>\n        `).join(\"\")}\n      </div>\n    ` : \"\";\n    this.container?.querySelector(\".month-view-legend\")?.remove();\n    this.container?.querySelector(\".month-view-container\")?.insertAdjacentHTML(\"beforeend\", template);\n    this.#colorToVar();\n  }\n  /**\n   * Change month/year/day by event type\n   * @param {string} type of event to be called\n   * @param {boolean} limitMonth date changing is limited only to the current month\n   */\n  changeDate(type, limitMonth = false) {\n    if (type === \"next-month\") {\n      if (this.localeAPI?.isIslamic()) {\n        const umalqura = (0,_utils_ids_date_utils_ids_date_utils__WEBPACK_IMPORTED_MODULE_9__.gregorianToUmalqura)(this.activeDate);\n        const year = umalqura.month === _ids_month_view_common__WEBPACK_IMPORTED_MODULE_18__.MAX_MONTH ? umalqura.year + 1 : umalqura.year;\n        const month = umalqura.month === _ids_month_view_common__WEBPACK_IMPORTED_MODULE_18__.MAX_MONTH ? _ids_month_view_common__WEBPACK_IMPORTED_MODULE_18__.MIN_MONTH : umalqura.month + 1;\n        const gregorian = (0,_utils_ids_date_utils_ids_date_utils__WEBPACK_IMPORTED_MODULE_9__.umalquraToGregorian)(year, month, umalqura.day === 30 ? 1 : umalqura.day);\n        this.day = gregorian.getDate();\n        this.year = gregorian.getFullYear();\n        this.month = gregorian.getMonth();\n      } else {\n        this.year = this.month === _ids_month_view_common__WEBPACK_IMPORTED_MODULE_18__.MAX_MONTH ? this.year + 1 : this.year;\n        this.month = this.month === _ids_month_view_common__WEBPACK_IMPORTED_MODULE_18__.MAX_MONTH ? _ids_month_view_common__WEBPACK_IMPORTED_MODULE_18__.MIN_MONTH : this.month + 1;\n        this.day = this.#getDayInMonth(this.day);\n      }\n    }\n    if (type === \"previous-month\") {\n      if (this.localeAPI?.isIslamic()) {\n        const umalqura = (0,_utils_ids_date_utils_ids_date_utils__WEBPACK_IMPORTED_MODULE_9__.gregorianToUmalqura)(this.activeDate);\n        const year = umalqura.month === _ids_month_view_common__WEBPACK_IMPORTED_MODULE_18__.MIN_MONTH ? umalqura.year - 1 : umalqura.year;\n        const month = umalqura.month === _ids_month_view_common__WEBPACK_IMPORTED_MODULE_18__.MIN_MONTH ? _ids_month_view_common__WEBPACK_IMPORTED_MODULE_18__.MAX_MONTH : umalqura.month - 1;\n        const gregorian = (0,_utils_ids_date_utils_ids_date_utils__WEBPACK_IMPORTED_MODULE_9__.umalquraToGregorian)(year, month, umalqura.day === 30 ? 1 : umalqura.day);\n        this.day = gregorian.getDate();\n        this.year = gregorian.getFullYear();\n        this.month = gregorian.getMonth();\n      } else {\n        this.year = this.month === _ids_month_view_common__WEBPACK_IMPORTED_MODULE_18__.MIN_MONTH ? this.year - 1 : this.year;\n        this.month = this.month === _ids_month_view_common__WEBPACK_IMPORTED_MODULE_18__.MIN_MONTH ? _ids_month_view_common__WEBPACK_IMPORTED_MODULE_18__.MAX_MONTH : this.month - 1;\n        this.day = this.#getDayInMonth(this.day);\n      }\n    }\n    if (type === \"next-day\") {\n      const lastDayOfMonth = (0,_utils_ids_date_utils_ids_date_utils__WEBPACK_IMPORTED_MODULE_9__.lastDayOfMonthDate)(this.year, this.month, this.day, this.localeAPI?.isIslamic());\n      if (lastDayOfMonth.getDate() === this.day && limitMonth)\n        return;\n      if (this.localeAPI?.isIslamic()) {\n        const nextDate = (0,_utils_ids_date_utils_ids_date_utils__WEBPACK_IMPORTED_MODULE_9__.addDate)(this.activeDate, 1, \"days\");\n        this.day = nextDate.getDate();\n        this.year = nextDate.getFullYear();\n        this.month = nextDate.getMonth();\n        return;\n      }\n      if (lastDayOfMonth.getDate() === this.day) {\n        const nextDate = (0,_utils_ids_date_utils_ids_date_utils__WEBPACK_IMPORTED_MODULE_9__.addDate)(lastDayOfMonth, 1, \"days\");\n        this.year = nextDate.getFullYear();\n        this.month = nextDate.getMonth();\n        this.day = nextDate.getDate();\n      } else {\n        this.day += 1;\n      }\n    }\n    if (type === \"previous-day\") {\n      const firstDayOfMonth = (0,_utils_ids_date_utils_ids_date_utils__WEBPACK_IMPORTED_MODULE_9__.firstDayOfMonthDate)(this.year, this.month, this.day, this.localeAPI?.isIslamic());\n      if (firstDayOfMonth.getDate() === this.day && limitMonth)\n        return;\n      if (this.localeAPI?.isIslamic()) {\n        const prevDate = (0,_utils_ids_date_utils_ids_date_utils__WEBPACK_IMPORTED_MODULE_9__.subtractDate)(this.activeDate, 1, \"days\");\n        this.day = prevDate.getDate();\n        this.year = prevDate.getFullYear();\n        this.month = prevDate.getMonth();\n        return;\n      }\n      if (firstDayOfMonth.getDate() === this.day) {\n        const prevDate = (0,_utils_ids_date_utils_ids_date_utils__WEBPACK_IMPORTED_MODULE_9__.subtractDate)(firstDayOfMonth, 1, \"days\");\n        this.year = prevDate.getFullYear();\n        this.month = prevDate.getMonth();\n        this.day = prevDate.getDate();\n      } else {\n        this.day -= 1;\n      }\n    }\n    if (type === \"next-year\") {\n      if (this.localeAPI?.isIslamic()) {\n        const umalqura = (0,_utils_ids_date_utils_ids_date_utils__WEBPACK_IMPORTED_MODULE_9__.gregorianToUmalqura)(this.activeDate);\n        const gregorian = (0,_utils_ids_date_utils_ids_date_utils__WEBPACK_IMPORTED_MODULE_9__.umalquraToGregorian)(\n          umalqura.year + 1,\n          umalqura.month,\n          umalqura.day === 30 ? 1 : umalqura.day\n        );\n        this.day = gregorian.getDate();\n        this.month = gregorian.getMonth();\n        this.year = gregorian.getFullYear();\n      } else {\n        const y = this.year + 1;\n        this.year = y;\n        this.day = this.#getDayInMonth(this.day);\n      }\n    }\n    if (type === \"previous-year\") {\n      if (this.localeAPI?.isIslamic()) {\n        const umalqura = (0,_utils_ids_date_utils_ids_date_utils__WEBPACK_IMPORTED_MODULE_9__.gregorianToUmalqura)(this.activeDate);\n        const gregorian = (0,_utils_ids_date_utils_ids_date_utils__WEBPACK_IMPORTED_MODULE_9__.umalquraToGregorian)(\n          umalqura.year - 1,\n          umalqura.month,\n          umalqura.day === 30 ? 1 : umalqura.day\n        );\n        this.day = gregorian.getDate();\n        this.month = gregorian.getMonth();\n        this.year = gregorian.getFullYear();\n      } else {\n        const y = this.year - 1;\n        this.year = y;\n        this.day = this.#getDayInMonth(this.day);\n      }\n    }\n    if (type === \"today\") {\n      const now = new Date();\n      this.day = now.getDate();\n      this.year = now.getFullYear();\n      this.month = now.getMonth();\n      if (this.useRange) {\n        this.rangeSettings.start = now.getTime();\n        this.rangeSettings.end = now.getTime();\n      }\n    }\n    if (type === \"next-week\") {\n      const nextWeek = (0,_utils_ids_date_utils_ids_date_utils__WEBPACK_IMPORTED_MODULE_9__.addDate)(this.activeDate, _ids_month_view_common__WEBPACK_IMPORTED_MODULE_18__.WEEK_LENGTH, \"days\");\n      const lastDayOfMonth = (0,_utils_ids_date_utils_ids_date_utils__WEBPACK_IMPORTED_MODULE_9__.lastDayOfMonthDate)(this.year, this.month, this.day, this.localeAPI?.isIslamic());\n      if (nextWeek > lastDayOfMonth && limitMonth)\n        return;\n      this.day = nextWeek.getDate();\n      if (nextWeek > lastDayOfMonth || this.localeAPI?.isIslamic()) {\n        this.year = nextWeek.getFullYear();\n        this.month = nextWeek.getMonth();\n      }\n    }\n    if (type === \"previous-week\") {\n      const prevWeek = (0,_utils_ids_date_utils_ids_date_utils__WEBPACK_IMPORTED_MODULE_9__.subtractDate)(this.activeDate, _ids_month_view_common__WEBPACK_IMPORTED_MODULE_18__.WEEK_LENGTH, \"days\");\n      const firstDayOfMonth = (0,_utils_ids_date_utils_ids_date_utils__WEBPACK_IMPORTED_MODULE_9__.firstDayOfMonthDate)(this.year, this.month, this.day, this.localeAPI?.isIslamic());\n      if (prevWeek < firstDayOfMonth && limitMonth)\n        return;\n      this.day = prevWeek.getDate();\n      if (prevWeek < firstDayOfMonth || this.localeAPI?.isIslamic()) {\n        this.year = prevWeek.getFullYear();\n        this.month = prevWeek.getMonth();\n      }\n    }\n    if (type === \"start-month\") {\n      const firstDayOfMonth = (0,_utils_ids_date_utils_ids_date_utils__WEBPACK_IMPORTED_MODULE_9__.firstDayOfMonthDate)(this.year, this.month, this.day, this.localeAPI?.isIslamic());\n      this.day = firstDayOfMonth.getDate();\n      if (this.localeAPI?.isIslamic()) {\n        this.year = firstDayOfMonth.getFullYear();\n        this.month = firstDayOfMonth.getMonth();\n      }\n    }\n    if (type === \"end-month\") {\n      const lastDayOfMonth = (0,_utils_ids_date_utils_ids_date_utils__WEBPACK_IMPORTED_MODULE_9__.lastDayOfMonthDate)(this.year, this.month, this.day, this.localeAPI?.isIslamic());\n      this.day = lastDayOfMonth.getDate();\n      if (this.localeAPI?.isIslamic()) {\n        this.month = lastDayOfMonth.getMonth();\n        this.year = lastDayOfMonth.getFullYear();\n      }\n    }\n    this.triggerDateChange(this.activeDate, type);\n  }\n  /**\n   * Day cell clicked\n   * @param {HTMLElement} element The element.\n   */\n  #daySelectClick(element) {\n    if (!element)\n      return;\n    const { month, year, day } = element.dataset;\n    const isDisabled = element.classList.contains(\"is-disabled\");\n    if (!isDisabled) {\n      this.#setRangeSelection(year, month, day);\n      this.day = day;\n      if ((0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_10__.stringToNumber)(month) !== this.month || this.localeAPI?.isIslamic()) {\n        this.month = month;\n      }\n      if ((0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_10__.stringToNumber)(year) !== this.year || this.localeAPI?.isIslamic()) {\n        this.year = year;\n      }\n      this.focus();\n      this.#triggerSelectedEvent();\n    }\n  }\n  /**\n   * Add given year, month, day to the range selection\n   * @param {number} year to add to the range selection\n   * @param {number} month to add to the range selection\n   * @param {number} day to add to the range selection\n   */\n  #setRangeSelection(year, month, day) {\n    if (!this.useRange)\n      return;\n    const date = new Date(year, month, day);\n    const dateTime = date.getTime();\n    const diff = this.rangeSettings.start ? (0,_utils_ids_date_utils_ids_date_utils__WEBPACK_IMPORTED_MODULE_9__.daysDiff)(this.rangeSettings.start, date) : 0;\n    const rangeStarted = this.rangeSettings.start && !this.rangeSettings.end;\n    const canSelectBoth = !(this.rangeSettings.selectBackward || this.rangeSettings.selectForward);\n    const selectBackward = this.rangeSettings.selectBackward && diff < 0;\n    const selectForward = this.rangeSettings.selectForward && diff > 0;\n    const startDate = new Date(this.rangeSettings.start);\n    const startTime = startDate.getTime();\n    const minDays = this.rangeSettings.minDays;\n    const maxDays = this.rangeSettings.maxDays;\n    const minRangeExceeded = minDays > 0 && Math.abs(diff) < minDays;\n    const maxRangeExceeded = maxDays > 0 && Math.abs(diff) > maxDays;\n    const minRangeDate = diff >= 0 ? (0,_utils_ids_date_utils_ids_date_utils__WEBPACK_IMPORTED_MODULE_9__.addDate)(startDate, minDays, \"days\") : (0,_utils_ids_date_utils_ids_date_utils__WEBPACK_IMPORTED_MODULE_9__.subtractDate)(startDate, minDays, \"days\");\n    this.selectDay(year, month, day);\n    if (this.rangeSettings.selectWeek) {\n      return;\n    }\n    if (rangeStarted && !maxRangeExceeded && (canSelectBoth || selectBackward || selectForward)) {\n      if (minRangeExceeded) {\n        this.rangeSettings.end = dateTime >= startTime ? minRangeDate.getTime() : this.rangeSettings.start;\n        this.rangeSettings.start = (0,_utils_ids_date_utils_ids_date_utils__WEBPACK_IMPORTED_MODULE_9__.subtractDate)(this.rangeSettings.end, minDays, \"days\");\n        this.#renderRangeSelection();\n        return;\n      }\n      this.rangeSettings.end = dateTime >= startTime ? dateTime : this.rangeSettings.start;\n      this.rangeSettings.start = dateTime <= startTime ? dateTime : this.rangeSettings.start;\n      this.#renderRangeSelection();\n    } else {\n      this.rangeSettings.start = dateTime;\n      this.rangeSettings.end = null;\n      this.#clearRangeClasses();\n    }\n  }\n  /**\n   * Helper to clear range selection CSS classes\n   */\n  #clearRangeClasses() {\n    this.container?.querySelectorAll(\"td\").forEach(\n      (item) => item.classList.remove(\n        \"range-next\",\n        \"range-prev\",\n        \"range-selection\",\n        \"not-included\"\n      )\n    );\n  }\n  /**\n   * Add CSS classes and selected attrs to tables cells when range selection is completed\n   */\n  #renderRangeSelection() {\n    if (!this.useRange)\n      return;\n    const startRange = new Date(this.rangeSettings.start);\n    const endRange = new Date(this.rangeSettings.end);\n    const days = this.rangeSettings.end ? (0,_utils_ids_date_utils_ids_date_utils__WEBPACK_IMPORTED_MODULE_9__.daysDiff)(startRange, endRange) : 0;\n    this.#clearRangeClasses();\n    Array.from({ length: days + 1 }).forEach((_, index) => {\n      const rangeDay = (0,_utils_ids_date_utils_ids_date_utils__WEBPACK_IMPORTED_MODULE_9__.addDate)(startRange, index, \"days\");\n      const selectedQuery = [\n        \"td\",\n        `[data-year=\"${rangeDay.getFullYear()}\"]`,\n        `[data-month=\"${rangeDay.getMonth()}\"]`,\n        `[data-day=\"${rangeDay.getDate()}\"]`\n      ].join(\"\");\n      const element = this.container?.querySelector(selectedQuery);\n      element?.classList.add(\"range-selection\");\n      if (!this.rangeSettings.includeDisabled) {\n        element?.classList.add(\"not-included\");\n      }\n      if ((index === 0 || index === days) && !this.rangeSettings.selectWeek) {\n        element?.setAttribute(\"aria-selected\", \"true\");\n        element?.setAttribute(\"role\", \"gridcell\");\n        element?.classList.add(\"is-selected\");\n      }\n    });\n  }\n  /**\n   * Helper to check if date is in the range selection\n   * @param {Date} date to check if is in range selection\n   * @returns {boolean} whether the date is in range selection\n   */\n  #isRangeByDate(date) {\n    const startRange = new Date(this.rangeSettings.start);\n    const endRange = new Date(this.rangeSettings.end);\n    return date.getTime() >= startRange.getTime() && date.getTime() <= endRange.getTime();\n  }\n  /**\n   * Helper to handle week selection\n   * @param {string|number} year to add to the range selection\n   * @param {string|number} month to add to the range selection\n   * @param {string|number} day to add to the range selection\n   */\n  #rangeSelectWeek(year, month, day) {\n    const firstDayOfWeek = (0,_utils_ids_date_utils_ids_date_utils__WEBPACK_IMPORTED_MODULE_9__.firstDayOfWeekDate)(\n      new Date(year, month, day),\n      this.firstDayOfWeek\n    );\n    if (firstDayOfWeek.getTime() !== this.rangeSettings.start?.getTime()) {\n      this.rangeSettings.start = firstDayOfWeek;\n      this.rangeSettings.end = (0,_utils_ids_date_utils_ids_date_utils__WEBPACK_IMPORTED_MODULE_9__.addDate)(this.rangeSettings.start, _ids_month_view_common__WEBPACK_IMPORTED_MODULE_18__.WEEK_LENGTH - 1, \"days\");\n      this.selectDay();\n      this.#renderRangeSelection();\n    }\n  }\n  /**\n   * Add CSS classes to table cells when range selection is in progress\n   * Starting from the range settings start\n   * @param {string|number} year to add to the range selection\n   * @param {string|number} month to add to the range selection\n   * @param {string|number} day to add to the range selection\n   */\n  #rangePropagation(year, month, day) {\n    if (!this.useRange)\n      return;\n    if (this.rangeSettings.selectWeek) {\n      this.#rangeSelectWeek(year, month, day);\n      return;\n    }\n    if (this.rangeSettings.start && !(this.rangeSettings.end && this.rangeSettings.start)) {\n      const startRange = new Date(this.rangeSettings.start);\n      const endRange = new Date(year, month, day);\n      const diff = (0,_utils_ids_date_utils_ids_date_utils__WEBPACK_IMPORTED_MODULE_9__.daysDiff)(startRange, endRange);\n      this.#clearRangeClasses();\n      const canSelectBoth = !(this.rangeSettings.selectBackward || this.rangeSettings.selectForward);\n      const selectBackward = this.rangeSettings.selectBackward && diff < 0;\n      const selectForward = this.rangeSettings.selectForward && diff > 0;\n      const maxDays = this.rangeSettings.maxDays;\n      const maxRangeExceeded = maxDays > 0 && Math.abs(diff) > maxDays;\n      if (diff !== 0 && !maxRangeExceeded && (canSelectBoth || selectBackward || selectForward)) {\n        Array.from({ length: Math.abs(diff) }).forEach((_, index) => {\n          const rangeDay = diff > 0 ? (0,_utils_ids_date_utils_ids_date_utils__WEBPACK_IMPORTED_MODULE_9__.addDate)(startRange, index + 1, \"days\") : (0,_utils_ids_date_utils_ids_date_utils__WEBPACK_IMPORTED_MODULE_9__.subtractDate)(startRange, index + 1, \"days\");\n          const selectedQuery = [\n            \"td\",\n            `[data-year=\"${rangeDay.getFullYear()}\"]`,\n            `[data-month=\"${rangeDay.getMonth()}\"]`,\n            `[data-day=\"${rangeDay.getDate()}\"]`\n          ].join(\"\");\n          this.container?.querySelector(selectedQuery)?.classList.add(diff > 0 ? \"range-next\" : \"range-prev\");\n          if (!this.rangeSettings.includeDisabled) {\n            this.container?.querySelector(selectedQuery)?.classList.add(\"not-included\");\n          }\n        });\n      }\n    }\n  }\n  /**\n   * Defines if a date is in disabled settings\n   * @param {Date} date to check\n   * @returns {boolean} wheter or not the date is disabled\n   */\n  isDisabledByDate(date) {\n    const {\n      years,\n      dayOfWeek,\n      dates,\n      minDate,\n      maxDate,\n      isEnable\n    } = this.disableSettings;\n    const isOutOfDisplayRange = this.#isDisplayRange() && (date < this.startDate || date > this.endDate);\n    const ifYear = years.some(\n      (item) => item === date.getFullYear()\n    );\n    const ifDayOfWeek = dayOfWeek.some(\n      (item) => item === date.getDay()\n    );\n    const ifDates = dates.some(\n      (item) => new Date(item).getTime() === date.getTime()\n    );\n    const ifMinMaxDate = date <= new Date(minDate) || date >= new Date(maxDate);\n    const ifBySettings = ifYear || ifDayOfWeek || ifDates || ifMinMaxDate;\n    const withReverse = isEnable ? !ifBySettings : ifBySettings;\n    return withReverse || isOutOfDisplayRange;\n  }\n  /**\n   * Helper to get month format for first day of a month or first day of the display range\n   * @param {Date} date date to check\n   * @param {Date} rangeStartsOn very first day of the display range\n   * @returns {string|undefined} Intl.DateTimeFormat options month format (numeric, long, short)\n   */\n  #monthInDayFormat(date, rangeStartsOn) {\n    const isFirstDayOfRange = (0,_utils_ids_date_utils_ids_date_utils__WEBPACK_IMPORTED_MODULE_9__.daysDiff)(date, rangeStartsOn) === 0;\n    const isFirstDayOfMonth = this.localeAPI?.isIslamic() ? (0,_utils_ids_date_utils_ids_date_utils__WEBPACK_IMPORTED_MODULE_9__.gregorianToUmalqura)(date).day === 1 : date.getDate() === 1;\n    if (this.#isDisplayRange() && (isFirstDayOfRange || isFirstDayOfMonth)) {\n      return \"short\";\n    }\n    return void 0;\n  }\n  /**\n   * Table cell HTML template with locale, data attributes\n   * @param {number} weekIndex number of week in month starting from 0\n   * @returns {string} table cell HTML template\n   */\n  #getCellTemplate(weekIndex) {\n    const firstDayOfRange = this.#isDisplayRange() ? this.startDate : (0,_utils_ids_date_utils_ids_date_utils__WEBPACK_IMPORTED_MODULE_9__.firstDayOfMonthDate)(this.year, this.month, this.day, this.localeAPI?.isIslamic());\n    const lastDayOfRange = this.#isDisplayRange() ? this.endDate : (0,_utils_ids_date_utils_ids_date_utils__WEBPACK_IMPORTED_MODULE_9__.lastDayOfMonthDate)(this.year, this.month, this.day, this.localeAPI?.isIslamic());\n    const rangeStartsOn = (0,_utils_ids_date_utils_ids_date_utils__WEBPACK_IMPORTED_MODULE_9__.firstDayOfWeekDate)(firstDayOfRange, this.firstDayOfWeek);\n    const now = new Date();\n    const isCompact = this.compact;\n    return Array.from({ length: _ids_month_view_common__WEBPACK_IMPORTED_MODULE_18__.WEEK_LENGTH }).map((_, index) => {\n      const date = (0,_utils_ids_date_utils_ids_date_utils__WEBPACK_IMPORTED_MODULE_9__.addDate)(rangeStartsOn, weekIndex * _ids_month_view_common__WEBPACK_IMPORTED_MODULE_18__.WEEK_LENGTH + index, \"days\");\n      const monthFormat = this.#monthInDayFormat(date, rangeStartsOn);\n      const dayText = this.localeAPI?.formatDate(date, {\n        day: \"numeric\",\n        month: monthFormat,\n        numberingSystem: \"latn\"\n      });\n      const ariaLabel = this.localeAPI?.formatDate(date, { dateStyle: \"full\" });\n      const day = date.getDate();\n      const month = date.getMonth();\n      const year = date.getFullYear();\n      const dateMatch = day === this.day && year === this.year && month === this.month;\n      const isSelected = !this.useRange && dateMatch;\n      const isSelectedWithRange = this.useRange && !this.rangeSettings.start && dateMatch;\n      const isDisabled = this.isDisabledByDate(date);\n      const isAlternate = !this.#isDisplayRange() && (date < firstDayOfRange || date > lastDayOfRange);\n      const legend = this.getLegendByDate(date);\n      const isRangeSelection = this.#isRangeByDate(date);\n      const isToday = year === now.getFullYear() && month === now.getMonth() && day === now.getDate();\n      const classAttr = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_10__.buildClassAttrib)(\n        isAlternate && \"alternate\",\n        legend && \"has-legend\",\n        isDisabled && \"is-disabled\",\n        (isSelected || isSelectedWithRange) && \"is-selected\",\n        monthFormat && \"month-label\",\n        isRangeSelection && \"range-selection\",\n        isToday && \"is-today\"\n      );\n      const selectedAttr = isSelected || isSelectedWithRange ? 'aria-selected=\"true\" tabindex=\"0\" role=\"gridcell\"' : 'role=\"link\"';\n      const dataAttr = [`data-year=\"${year}\"`, `data-month=\"${month}\"`, `data-day=\"${day}\"`].join(\" \");\n      const colorAttr = legend ? `data-color=\"${legend.color}\"` : \"\";\n      const dateKey = this.generateDateKey(new Date(year, month, day));\n      let cellTemplate = `<td aria-label=\"${ariaLabel}\" ${dataAttr} ${classAttr} ${selectedAttr} ${colorAttr}>\n        <span class=\"day-container\">\n          <ids-text\n            aria-hidden=\"true\"\n            class=\"day-text\"\n            font-size=\"14\"\n          >${dayText}</ids-text>\n        </span>\n        ${isCompact ? \"\" : `<div class=\"events-container\" data-key=\"${dateKey}\"></div>`}\n      </td>`;\n      if (typeof this.state.onDayRender === \"function\") {\n        cellTemplate = this.state.onDayRender(cellTemplate, dateKey);\n      }\n      return cellTemplate;\n    }).join(\"\");\n  }\n  /**\n   * Add week days HTML to the table\n   */\n  #renderWeekDays() {\n    const weekDayKeys = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n    const weekDays = weekDayKeys.map((item) => this.localeAPI?.translate(`${this.compact ? \"DayNarrow\" : \"DayAbbreviated\"}${item}`));\n    const weekDaysTemplate = weekDays.map((el, index) => {\n      const weekday = weekDays[(index + this.firstDayOfWeek) % _ids_month_view_common__WEBPACK_IMPORTED_MODULE_18__.WEEK_LENGTH];\n      return `\n        <th>\n          <ids-text\n            class=\"weekday-text\"\n            font-size=\"14\"\n          >${weekday}</ids-text>\n        </th>\n      `;\n    }).join(\"\");\n    this.container?.querySelectorAll(\"thead th\").forEach((el) => el.remove());\n    this.container?.querySelector(\"thead tr\")?.insertAdjacentHTML(\"beforeend\", weekDaysTemplate);\n  }\n  /**\n   * Add month HTML to the table\n   */\n  #renderMonth() {\n    const weeksCount = this.#isDisplayRange() ? (0,_utils_ids_date_utils_ids_date_utils__WEBPACK_IMPORTED_MODULE_9__.weeksInRange)(this.startDate, this.endDate, this.firstDayOfWeek) : (0,_utils_ids_date_utils_ids_date_utils__WEBPACK_IMPORTED_MODULE_9__.weeksInMonth)(this.year, this.month, this.day, this.firstDayOfWeek, this.localeAPI?.isIslamic());\n    this.triggerEvent(\"beforerendermonth\", this, { bubbles: true, composed: true });\n    const rowsTemplate = Array.from({ length: weeksCount }).map((_, weekIndex) => `<tr>${this.#getCellTemplate(weekIndex)}</tr>`).join(\"\");\n    this.container?.querySelectorAll(\"tbody tr\").forEach((el) => el.remove());\n    this.container?.querySelector(\"tbody\")?.insertAdjacentHTML(\"beforeend\", rowsTemplate);\n    this.#renderWeekDays();\n    this.#colorToVar();\n    this.state.hasRendered = true;\n    if (!this.compact && !this.isDatePicker) {\n      this.renderEventsData();\n    }\n  }\n  /**\n   * Gets calendar events within the selected/active day\n   * @returns {CalendarEventData[]} calendar events data\n   */\n  getActiveDayEvents() {\n    const activeDay = this.getSelectedDay();\n    let eventElems = activeDay ? [...activeDay.querySelectorAll(\"ids-calendar-event\")] : [];\n    if (this.#isCustom && activeDay) {\n      const customCalendarEvents = activeDay.querySelectorAll(\".events-container > [slot]\");\n      eventElems = activeDay ? [...customCalendarEvents] : [];\n    }\n    const events = eventElems.map((elem) => elem.eventData);\n    return events;\n  }\n  /**\n   * Trigger selected event with current params\n   * @returns {void}\n   */\n  #triggerSelectedEvent() {\n    if (this.isDisabledByDate(this.activeDate)) {\n      return;\n    }\n    const args = {\n      detail: {\n        elem: this,\n        date: this.activeDate,\n        useRange: this.useRange,\n        rangeStart: this.useRange && this.rangeSettings.start ? new Date(this.rangeSettings.start) : null,\n        rangeEnd: this.useRange && this.rangeSettings.end ? new Date(this.rangeSettings.end) : null,\n        value: this.getFormattedDate(this.activeDate)\n      },\n      bubbles: true,\n      cancelable: true,\n      composed: true\n    };\n    if (!this.compact && !this.isDatePicker) {\n      args.detail.events = this.getActiveDayEvents();\n    }\n    this.triggerEvent(\"dayselected\", this, args);\n  }\n  /**\n   * Add selectable attribute to active day\n   * @param {number} year a given year\n   * @param {number} month a given month\n   * @param {number} day a given day\n   */\n  selectDay(year, month, day) {\n    this.#makeAllDeselected();\n    const selectedQuery = `td[data-year=\"${year}\"][data-month=\"${month}\"][data-day=\"${day}\"]`;\n    const selected = this.container?.querySelector(selectedQuery);\n    if (selected)\n      this.#makeSelected(selected);\n  }\n  /**\n   * Makes a specified day in the Month View table appear \"selected\"\n   * @param {HTMLTableCellElement} elem the element to make appear \"selected\"\n   * @returns {void}\n   */\n  #makeSelected(elem) {\n    if (!elem)\n      return;\n    elem.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.TABINDEX, \"0\");\n    elem.setAttribute(\"aria-selected\", \"true\");\n    elem.setAttribute(\"role\", \"gridcell\");\n    elem.classList.add(\"is-selected\");\n  }\n  /**\n   * Makes a specified day in the Month View table appear \"selected\"\n   * @param {HTMLTableCellElement} elem the element to make appear \"selected\"\n   * @returns {void}\n   */\n  #makeDeselected(elem) {\n    if (!elem)\n      return;\n    elem.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.TABINDEX);\n    elem.removeAttribute(\"aria-selected\");\n    elem.setAttribute(\"role\", \"link\");\n    elem.classList.remove(\"is-selected\");\n  }\n  /**\n   * Clears all previously-selected days from the Month View\n   */\n  #makeAllDeselected() {\n    this.container?.querySelectorAll(\"td.is-selected\")?.forEach((item) => {\n      this.#makeDeselected(item);\n    });\n  }\n  /**\n   * Whether or not it should show range of dates instead of one month view\n   * @returns {boolean} startDate and endDate are set\n   */\n  #isDisplayRange() {\n    return (0,_utils_ids_date_utils_ids_date_utils__WEBPACK_IMPORTED_MODULE_9__.isValidDate)(this.startDate) && (0,_utils_ids_date_utils_ids_date_utils__WEBPACK_IMPORTED_MODULE_9__.isValidDate)(this.endDate) && this.endDate >= this.startDate;\n  }\n  /**\n   * Helper to check if the month has a day\n   * @param {number} day to check\n   * @returns {number} day of the month either active or first\n   */\n  #getDayInMonth(day) {\n    const numberOfDays = (0,_utils_ids_date_utils_ids_date_utils__WEBPACK_IMPORTED_MODULE_9__.daysInMonth)(this.year, this.month);\n    return day > numberOfDays ? 1 : day;\n  }\n  /**\n   * Iterate legend items with color data and add color css variable\n   */\n  #colorToVar() {\n    this.container?.querySelectorAll(\"[data-color]\").forEach((el) => {\n      const color = el.dataset.color;\n      const isHex = color?.includes(\"#\");\n      if (color) {\n        el.style = `--legend-color: ${isHex ? color : `var(--ids-color-palette-${color})`}`;\n      }\n    });\n  }\n  /**\n   * Queries selected day cell element\n   * @returns {HTMLElement} selected day\n   */\n  getSelectedDay() {\n    const selectedQuery = `td[data-year=\"${this.year}\"][data-month=\"${this.month}\"][data-day=\"${this.day}\"]`;\n    return this.container?.querySelector(selectedQuery) || null;\n  }\n  /**\n   * Focuses the active/selected day\n   * @returns {void}\n   */\n  focus() {\n    const selectedDay = this.getSelectedDay();\n    if (selectedDay) {\n      const isDisabled = selectedDay.classList.contains(\"is-disabled\");\n      if (!isDisabled) {\n        this.#makeAllDeselected();\n        this.#makeSelected(selectedDay);\n        selectedDay.focus();\n      }\n    }\n  }\n  /**\n   * Inherited from `IdsDateAttributeMixin`\n   * @returns {void}\n   */\n  onFirstDayOfWeekChange() {\n    if (this.container)\n      this.#renderMonth();\n  }\n  /**\n   * Inherited from `IdsDateAttributeMixin`\n   * @returns {void}\n   */\n  onMonthChange() {\n    if (!this.container)\n      return;\n    if (this.#isDisplayRange()) {\n      this.selectDay(this.year, this.month, this.day);\n    } else {\n      this.#renderMonth();\n      this.#renderRangeSelection();\n    }\n  }\n  /**\n   * Inherited from `IdsDateAttributeMixin`\n   * @returns {void}\n   */\n  onYearChange() {\n    if (!this.container)\n      return;\n    if (this.#isDisplayRange()) {\n      this.selectDay(this.year, this.month, this.day);\n    } else {\n      this.#renderMonth();\n      this.#renderRangeSelection();\n    }\n  }\n  /**\n   * Inherited from `IdsDateAttributeMixin`\n   * @param {number} numberVal new value\n   * @param {boolean} validates true if the new value passed is valid\n   * @returns {void}\n   */\n  onDayChange(numberVal, validates) {\n    if (!this.container)\n      return;\n    if (!(this.rangeSettings.start || this.useRange) && !this.isDatePicker) {\n      this.selectDay(this.year, this.month, validates ? numberVal : this.day);\n    }\n  }\n  /**\n   * start-date attribute\n   * @returns {Date | null} startDate date parsed from attribute value\n   */\n  get startDate() {\n    const attrVal = this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.START_DATE) ?? \"\";\n    const attrDate = new Date(attrVal);\n    if (attrVal && (0,_utils_ids_date_utils_ids_date_utils__WEBPACK_IMPORTED_MODULE_9__.isValidDate)(attrDate)) {\n      return attrDate;\n    }\n    return null;\n  }\n  /**\n   * Set start of the range to show\n   * @param {string | Date | null} val startDate param value\n   */\n  set startDate(val) {\n    if (val) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.START_DATE, String(val));\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.START_DATE);\n    }\n    if (this.container) {\n      this.#renderMonth();\n      this.#attachKeyboardListeners();\n    }\n  }\n  /**\n   * end-date attribute\n   * @returns {Date|null} endDate date parsed from attribute value\n   */\n  get endDate() {\n    const attrVal = this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.END_DATE) ?? \"\";\n    const attrDate = new Date(attrVal);\n    if (attrVal && (0,_utils_ids_date_utils_ids_date_utils__WEBPACK_IMPORTED_MODULE_9__.isValidDate)(attrDate)) {\n      return attrDate;\n    }\n    return null;\n  }\n  /**\n   * Set end of the range to show\n   * @param {Date | string | null} val endDate param value\n   */\n  set endDate(val) {\n    if (val) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.END_DATE, String(val));\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.END_DATE);\n    }\n    if (this.container) {\n      this.#renderMonth();\n      this.#attachKeyboardListeners();\n    }\n  }\n  /**\n   * compact attribute\n   * @returns {boolean} compact param converted to boolean from attribute value\n   */\n  get compact() {\n    const attrVal = this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.COMPACT);\n    return (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_10__.stringToBool)(attrVal);\n  }\n  /**\n   * Set whether or not the component should be compact view\n   * @param {string|boolean|null} val compact param value\n   */\n  set compact(val) {\n    const boolVal = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_10__.stringToBool)(val);\n    if (boolVal) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.COMPACT, \"true\");\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.COMPACT);\n    }\n    this.container?.classList.toggle(\"is-fullsize\", !boolVal);\n    this.container?.classList.toggle(\"is-compact\", boolVal);\n    if (this.container) {\n      this.#renderWeekDays();\n    }\n  }\n  /**\n   * is-date-picker attribute\n   * @returns {boolean} isDatePicker param converted to boolean from attribute value\n   */\n  get isDatePicker() {\n    const attrVal = this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.IS_DATEPICKER);\n    return (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_10__.stringToBool)(attrVal);\n  }\n  /**\n   * Set whether or not the component is used in datepicker popup\n   * @param {string|boolean|null} val compact param value\n   */\n  set isDatePicker(val) {\n    const boolVal = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_10__.stringToBool)(val);\n    if (boolVal) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.IS_DATEPICKER, \"true\");\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.IS_DATEPICKER);\n    }\n    this.container?.classList.toggle(\"is-date-picker\", boolVal);\n  }\n  onDisableSettingsChange() {\n    this.#renderMonth();\n  }\n  onLegendSettingsChange(val) {\n    if (!this.container)\n      return;\n    this.#renderMonth();\n    this.#renderLegend();\n    this.container.classList[val && val.length ? \"add\" : \"remove\"](\"has-legend\");\n  }\n  onRangeSettingsChange(val) {\n    if (!this.container)\n      return;\n    if (this.useRange && val?.start) {\n      this.selectDay();\n    } else {\n      this.#clearRangeClasses();\n      this.selectDay(this.year, this.month, this.day);\n    }\n    this.container.classList.toggle(\"range-select-week\", this.rangeSettings.selectWeek);\n    this.#renderRangeSelection();\n  }\n  onUseRangeChange(newValue) {\n    if (newValue) {\n      this.selectDay();\n      this.#renderRangeSelection();\n    } else {\n      this.#clearRangeClasses();\n      this.selectDay(this.year, this.month, this.day);\n    }\n  }\n  /**\n   * show-picklist-year attribute, default is true\n   * @returns {boolean} showPicklistYear param converted to boolean from attribute value\n   */\n  get showPicklistYear() {\n    const attrVal = this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SHOW_PICKLIST_YEAR);\n    if (attrVal) {\n      return (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_10__.stringToBool)(attrVal);\n    }\n    return true;\n  }\n  /**\n   * Whether or not to show a list of years in the toolbar datepicker picklist\n   * @param {string | boolean | null} val value to be set as show-picklist-year attribute converted to boolean\n   */\n  set showPicklistYear(val) {\n    const boolVal = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_10__.stringToBool)(val);\n    this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SHOW_PICKLIST_YEAR, String(boolVal));\n  }\n  /**\n   * show-picklist-month attribute, default is true\n   * @returns {boolean} showPicklistMonth param converted to boolean from attribute value\n   */\n  get showPicklistMonth() {\n    const attrVal = this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SHOW_PICKLIST_MONTH);\n    if (attrVal) {\n      return (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_10__.stringToBool)(attrVal);\n    }\n    return true;\n  }\n  /**\n   * Whether or not to show a list of months in the toolbar datepicker picklist\n   * @param {string | boolean | null} val value to be set as show-picklist-month attribute converted to boolean\n   */\n  set showPicklistMonth(val) {\n    const boolVal = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_10__.stringToBool)(val);\n    this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SHOW_PICKLIST_MONTH, String(boolVal));\n  }\n  /**\n   * show-picklist-week attribute\n   * @returns {boolean} showPicklistWeek param converted to boolean from attribute value\n   */\n  get showPicklistWeek() {\n    return (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_10__.stringToBool)(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SHOW_PICKLIST_WEEK));\n  }\n  /**\n   * Whether or not to show week numbers in the toolbar datepicker picklist\n   * @param {string | boolean | null} val value to be set as show-picklist-week attribute converted to boolean\n   */\n  set showPicklistWeek(val) {\n    const boolVal = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_10__.stringToBool)(val);\n    if (boolVal) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SHOW_PICKLIST_WEEK, \"true\");\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SHOW_PICKLIST_WEEK);\n    }\n  }\n  /**\n   * Remove month view calendar events and overflow elements\n   */\n  removeAllEvents() {\n    this.container?.querySelectorAll(\".events-container\").forEach((container) => {\n      container.innerHTML = \"\";\n    });\n  }\n  /**\n   * Groups calendar events by day using dateKey as key\n   * @param {CalendarEventData[]} events calendar events data\n   * @returns {Record<string, Array<CalendarEventData>>} collection of calendar events\n   */\n  #groupEventsByDay(events) {\n    const dayEvents = {};\n    events.forEach((event) => {\n      const dateKey = this.generateDateKey(new Date(event.starts)).toString();\n      if (!dayEvents[dateKey])\n        dayEvents[dateKey] = [];\n      dayEvents[dateKey].push(event);\n    });\n    return dayEvents;\n  }\n  /**\n   * Filter calendar events data by current month\n   * @param {CalendarEventData[]} data calendar events data\n   * @returns {CalendarEventData[]} calendar events within month\n   */\n  filterEventsByMonth(data = []) {\n    return data.filter((event) => {\n      const eventStart = new Date(event.starts);\n      return this.startDate && this.endDate ? this.startDate <= eventStart && eventStart < this.endDate : eventStart.getMonth() === this.month && eventStart.getFullYear() === this.year;\n    });\n  }\n  /**\n   * Render Calendar Events data inside month view\n   * @param {boolean} forceRender skip data fetch\n   */\n  async renderEventsData(forceRender = false) {\n    if (!forceRender && typeof this.state.beforeEventsRender === \"function\") {\n      const startDate = this.startDate || new Date(this.year, this.month, 1);\n      const endDate = this.endDate || new Date(this.year, this.month + 1, 0);\n      this.eventsData = await this.state.beforeEventsRender(startDate, endDate);\n      return;\n    }\n    this.removeAllEvents();\n    if (!this.state.hasRendered || !this.eventsData?.length)\n      return;\n    const eventsInRange = this.filterEventsByMonth(this.eventsData);\n    const monthEvents = this.#groupEventsByDay(eventsInRange);\n    const customCalendarEvent = this.querySelector('[slot=\"customCalendarEvent\"]');\n    for (const dateKey in monthEvents) {\n      if (monthEvents.hasOwnProperty(dateKey)) {\n        this.#renderDayEvents(dateKey, monthEvents[dateKey], customCalendarEvent);\n      }\n    }\n  }\n  /**\n   * Counts number of days for calendar events\n   * @param {Date} start start date\n   * @param {Date} end end date\n   * @returns {number} days\n   */\n  #countDays(start, end) {\n    return Math.ceil((end.getTime() - start.getTime()) / (1e3 * 60 * 60 * 24));\n  }\n  /**\n   * Renders calendar events within corresponding date's table cell\n   * @param {string} dateKey generated date key\n   * @param {CalendarEventData[]} events calendar events\n   * @param {any} customCalendarEvent custom calendar events\n   */\n  #renderDayEvents(dateKey, events, customCalendarEvent) {\n    if (!this.container)\n      return;\n    const eventsContainer = this.container?.querySelector(`.events-container[data-key=\"${dateKey}\"]`);\n    const orders = [...eventsContainer?.childNodes || []].map((elem) => elem.order);\n    const baseOrder = orders.length ? Math.max(...orders) + 1 : 0;\n    let isOverflowing = false;\n    events.forEach((event, index) => {\n      const start = new Date(event.starts);\n      const end = new Date(event.ends);\n      const days = this.#countDays(start, end) || 1;\n      for (let i = 0; i < days; i++) {\n        const calendarEvent = this.#newCalendarEvent(customCalendarEvent);\n        const eventType = this.eventTypesData?.find((et) => et.id === event.type) ?? null;\n        const eventOrder = baseOrder + index;\n        calendarEvent.eventTypeData = eventType;\n        calendarEvent.eventData = event;\n        calendarEvent.cssClass = [\"is-month-view\"];\n        calendarEvent.order = eventOrder;\n        if (i > 0) {\n          start.setDate(start.getDate() + 1);\n        }\n        const day = start.getDate();\n        const year = start.getFullYear();\n        const month = start.getMonth();\n        calendarEvent.dateKey = `${year}${month}${day}`;\n        const dateCell = this.container?.querySelector(`td[data-year=\"${year}\"][data-month=\"${month}\"][data-day=\"${day}\"]`);\n        if (dateCell) {\n          if (days > 1) {\n            const extraCss = [\"all-day\"];\n            if (i === 0) {\n              extraCss.push(\"calendar-event-start\");\n            } else if (i === days - 1) {\n              extraCss.push(\"calendar-event-ends\");\n            } else {\n              extraCss.push(\"calendar-event-continue\");\n            }\n            calendarEvent.cssClass = extraCss;\n          }\n          const eventYOffset = this.generateYOffset(calendarEvent);\n          calendarEvent.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.Y_OFFSET, `${eventYOffset}px`);\n          isOverflowing = this.isEventOverflowing(calendarEvent);\n          calendarEvent.hidden = isOverflowing;\n          dateCell.querySelector(\".events-container\")?.appendChild(calendarEvent);\n          const container = dateCell.querySelector(\".events-container\");\n          this.triggerEvent(\"beforeeventrendered\", this, {\n            detail: {\n              elem: this,\n              events: this.eventsData,\n              event: calendarEvent,\n              dateCell: calendarEvent,\n              container\n            },\n            bubbles: true\n          });\n          container?.appendChild(calendarEvent);\n          this.triggerEvent(\"aftereventrendered\", this, {\n            detail: {\n              elem: this,\n              events: this.eventsData,\n              event: calendarEvent,\n              dateCell: calendarEvent,\n              container\n            },\n            bubbles: true\n          });\n        }\n      }\n    });\n    if (isOverflowing && eventsContainer) {\n      this.#renderEventsOverflow(eventsContainer, dateKey);\n    }\n  }\n  /**\n   * Renders clickable event overflow element\n   * Specifies number of calendar events overflowing the container\n   * @param {Element} eventsContainer date specific event container elemeent\n   * @param {string} dateKey generated date key\n   */\n  #renderEventsOverflow(eventsContainer, dateKey) {\n    if (!eventsContainer)\n      return;\n    const calendarEvents = [...eventsContainer.childNodes];\n    const hiddenEvents = calendarEvents.filter((elem) => elem.hidden);\n    const year = dateKey.substring(0, 4);\n    const month = parseInt(dateKey.substring(4, 6)) + 1;\n    const day = dateKey.substring(6);\n    const date = `${month}/${day}/${year}`;\n    const tmpl = `\n      <ids-text data-date=\"${date}\" class=\"events-overflow\" font-size=\"12\">\n        ${hiddenEvents.length}+ ${this.localeAPI.translate(\"More\")}\n      </ids-text>\n    `;\n    eventsContainer.insertAdjacentHTML(\"beforeend\", tmpl);\n  }\n  /**\n   * Generates new IdsCalendarEvent\n   * @param {IdsCalendarEvent} customCalendarEvent optional custom event to use instead of default\n   * @returns {IdsCalendarEvent} calendar event\n   */\n  #newCalendarEvent(customCalendarEvent) {\n    if (customCalendarEvent?.name === \"MonthViewCalendarEventTemplate\") {\n      const eventTemplate = customCalendarEvent.assignedNodes()[0];\n      if (eventTemplate) {\n        this.#isCustom = true;\n        return eventTemplate.cloneNode(true);\n      }\n    }\n    return new _ids_calendar_ids_calendar_event__WEBPACK_IMPORTED_MODULE_16__[\"default\"]();\n  }\n  /**\n   * Selects the Month View's current day from a stringified date\n   * @param {string} val string representation of a date\n   */\n  selectDayFromValue(val) {\n    let usableValue = val;\n    if (this.useRange && this.rangeSettings.separator && this.rangeSettings.end) {\n      usableValue = (0,_utils_ids_date_utils_ids_date_utils__WEBPACK_IMPORTED_MODULE_9__.removeDateRange)(val, this.rangeSettings.separator);\n    }\n    const { month, day, year } = (0,_ids_date_picker_ids_date_picker_common__WEBPACK_IMPORTED_MODULE_17__.getDateValuesFromString)(usableValue);\n    this.day = day;\n    this.month = month;\n    this.year = year;\n    if (this.useRange) {\n      this.selectDay();\n      this.#renderRangeSelection();\n    } else {\n      this.#clearRangeClasses();\n      this.selectDay(year, month, day);\n    }\n  }\n  /**\n   * Function that fires as the day cell is rendered.\n   * @returns {void}\n   */\n  get onDayRender() {\n    return this.state.onDayRender;\n  }\n  set onDayRender(func) {\n    this.state.onDayRender = func;\n  }\n  /**\n   * Calculates the event Y_OFFSET value to set the event pill top position\n   * @param {IdsCalendarEvent} event IdsCalendarEvent\n   * @returns {number} yOffset\n   */\n  generateYOffset(event) {\n    return event.order * 16 + _ids_month_view_common__WEBPACK_IMPORTED_MODULE_18__.BASE_Y_OFFSET;\n  }\n  /**\n   * Checks if the event pills exceed the MAX_EVENT_COUNT in a day cell\n   * @param {IdsCalendarEvent} event IdsCalendarEvent\n   * @returns {boolean} isEventOverflowing\n   */\n  isEventOverflowing(event) {\n    return event.order > _ids_month_view_common__WEBPACK_IMPORTED_MODULE_18__.MAX_EVENT_COUNT - 1;\n  }\n};\nIdsMonthView = __decorateClass([\n  (0,_core_ids_decorators__WEBPACK_IMPORTED_MODULE_0__.customElement)(\"ids-month-view\"),\n  (0,_core_ids_decorators__WEBPACK_IMPORTED_MODULE_0__.scss)(_ids_month_view_scss__WEBPACK_IMPORTED_MODULE_15__[\"default\"])\n], IdsMonthView);\nvar ids_month_view_default = IdsMonthView;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/ids-month-view/ids-month-view.ts\n");

/***/ }),

/***/ "./src/mixins/ids-calendar-events-mixin/ids-calendar-events-mixin.ts":
/*!***************************************************************************!*\
  !*** ./src/mixins/ids-calendar-events-mixin/ids-calendar-events-mixin.ts ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ids_calendar_events_mixin_default)\n/* harmony export */ });\n/* harmony import */ var _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/ids-attributes */ \"./src/core/ids-attributes.ts\");\n/* harmony import */ var _utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/ids-string-utils/ids-string-utils */ \"./src/utils/ids-string-utils/ids-string-utils.ts\");\n\n\nconst IdsCalendarEventsMixin = (superclass) => class extends superclass {\n  #eventsData = [];\n  #eventTypesData = [];\n  constructor(...args) {\n    super(...args);\n  }\n  static get attributes() {\n    return [\n      ...superclass.attributes,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.VIEW_PICKER,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.HIDDEN\n    ];\n  }\n  /**\n   * Set calendar events to display on week view\n   * @param {CalendarEventData[]} data array of events\n   */\n  set eventsData(data) {\n    this.#eventsData = this.sortEventsByDate(data);\n    this.renderEventsData?.(true);\n    this.onEventsChange?.(this.#eventsData);\n  }\n  /**\n   * Gets calendar events\n   * @returns {CalendarEventData[]} array of events\n   */\n  get eventsData() {\n    return this.#eventsData;\n  }\n  /**\n   * Set event types for week view\n   * @param {CalendarEventTypeData[]} data array of event types\n   */\n  set eventTypesData(data) {\n    this.#eventTypesData = data;\n    this.renderEventsData?.(true);\n    this.onEventTypesChange?.(data);\n  }\n  /**\n   * Gets event types of week view\n   * @returns {CalendarEventTypeData[]} array of event types\n   */\n  get eventTypesData() {\n    return this.#eventTypesData;\n  }\n  /**\n   * Allows setting async function to fetch calendar event data\n   * Passes startDate and endDate as callback arguments\n   * @param {Function} fn Async function\n   */\n  set beforeEventsRender(fn) {\n    this.state.beforeEventsRender = fn;\n    this.renderEventsData?.();\n  }\n  /**\n   * Sets whether view picker is visible in toolbar\n   * @param {string|boolean} value show view picker if true\n   */\n  set viewPicker(value) {\n    const doShowViewPicker = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_1__.stringToBool)(value);\n    if (doShowViewPicker) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.VIEW_PICKER, \"\");\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.VIEW_PICKER);\n    }\n    if (typeof this.onViewPickerChange === \"function\") {\n      this.onViewPickerChange(doShowViewPicker);\n    }\n  }\n  /**\n   * Gets view picker value\n   * @returns {boolean} true if view picker enabled\n   */\n  get viewPicker() {\n    return this.hasAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.VIEW_PICKER);\n  }\n  /**\n   * Handles global html hidden attribute changes\n   * @param {boolean|string} value hidden value\n   */\n  onHiddenChange(value) {\n    if ((0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_1__.stringToBool)(value)) {\n      this.container?.classList.add(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.HIDDEN);\n    } else {\n      this.container?.classList.remove(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.HIDDEN);\n    }\n  }\n  /**\n   * Sort calender events by date\n   * @param {CalendarEventData[]} data calendar events\n   * @returns {CalendarEventData[]} sorted calendar events\n   */\n  sortEventsByDate(data) {\n    return data.slice().sort((a, b) => {\n      const aStart = new Date(a.starts);\n      const bStart = new Date(b.starts);\n      return aStart.getTime() - bStart.getTime();\n    });\n  }\n  /**\n   * Creates date key used in component\n   * Format - [year][month][date]\n   * @param {Date} date Date obj\n   * @returns {number} 20200421\n   */\n  generateDateKey(date) {\n    const year = date.getFullYear();\n    const month = date.getMonth().toString();\n    const day = date.getDate().toString();\n    return parseInt(`${year}${month.padStart(2, \"0\")}${day.padStart(2, \"0\")}`);\n  }\n  /**\n   * Removes IdsCalendarEvent components from view\n   */\n  removeAllEvents() {\n    const events = this.container?.querySelectorAll(\"ids-calendar-event\");\n    events?.forEach((event) => event.remove());\n  }\n  /**\n   * Create view picker template used in month/week views\n   * @param {string} view month | week \\ day\n   * @returns {string} view picker template\n   */\n  createViewPickerTemplate(view) {\n    const value = view[0].toUpperCase() + view.slice(1).toLowerCase();\n    return `\n      <ids-menu-button id=\"view-picker-btn\" menu=\"view-picker\" value=\"${view}\" dropdown-icon display-selected-text>\n        <span><ids-text translate-text=\"true\">${value}</ids-text></span>\n      </ids-menu-button>\n      <ids-popup-menu id=\"view-picker\" trigger-type=\"click\" target=\"#view-picker-btn\">\n        <ids-menu-group select=\"single\">\n          <ids-menu-item value=\"month\" selected=\"${view === \"month\"}\">\n            <ids-text translate-text=\"true\">Month</ids-text>\n          </ids-menu-item>\n          <ids-menu-item value=\"week\" selected=\"${view === \"week\"}\">\n            <ids-text translate-text=\"true\">Week</ids-text>\n          </ids-menu-item>\n          <ids-menu-item value=\"day\" selected=\"${view === \"day\"}\">\n            <ids-text translate-text=\"true\">Day</ids-text>\n          </ids-menu-item>\n        </ids-menu-group>\n      </ids-popup-menu>\n    `;\n  }\n  /**\n   * Handle view picker after render\n   */\n  viewPickerConnected() {\n    const button = this.container?.querySelector(\"#view-picker-btn\");\n    if (button) {\n      button.configureMenu();\n    }\n  }\n  /**\n   * Attach view picker events\n   * @param {string} view month | week\n   */\n  attachViewPickerEvents(view) {\n    const menu = this.container?.querySelector(\"#view-picker\");\n    if (menu && view) {\n      this.offEvent(`selected.${view}-view-picker`, menu);\n      this.onEvent(`selected.${view}-view-picker`, menu, (evt) => {\n        evt.stopPropagation();\n        this.#triggerViewChange(evt.detail.value);\n      });\n    }\n  }\n  /**\n   * Trigger viewchange event used in month/week views\n   * @param {IdsCalendarViewType} view month | week | day\n   * @param {Date} activeDate date\n   */\n  #triggerViewChange(view, activeDate) {\n    if (!view)\n      return;\n    this.triggerEvent(\"viewchange\", this, {\n      detail: {\n        view,\n        elem: this,\n        date: activeDate\n      },\n      bubbles: true,\n      cancelable: true,\n      composed: true\n    });\n  }\n  /**\n   * Triggers date change event used in month/week views\n   * @param {Date} date date\n   * @param {string} type context/reason for the date change, if applicable\n   */\n  triggerDateChange(date, type) {\n    this.triggerEvent(\"datechange\", this, {\n      detail: {\n        date,\n        type\n      },\n      bubbles: true,\n      cancelable: true,\n      composed: true\n    });\n  }\n  /**\n   * Get event by id\n   * @param {string} id event id\n   * @returns {CalendarEventData} event data\n   */\n  getEventById(id) {\n    return this.#eventsData.find((item) => item.id === id);\n  }\n  /**\n   * Get IdsCalendarEvent elem by id\n   * @param {string} id event id\n   * @returns {IdsCalendarEvent} calendar event component\n   */\n  getEventElemById(id) {\n    return this.container?.querySelector(`ids-calendar-event[data-id=\"${id}\"]`);\n  }\n  /**\n   * Gets calendar event type by id\n   * @param {string} id event type id\n   * @returns {CalendarEventTypeData} calendar event type\n   */\n  getEventTypeById(id) {\n    return this.#eventTypesData.find((item) => id === item.id);\n  }\n  /**\n   * @param {IdsCalendarViewType} val View Picker setting type\n   */\n  setViewPickerValue(val) {\n    const viewPickerEl = this.container?.querySelector(\"#view-picker-btn\");\n    if (viewPickerEl)\n      viewPickerEl.value = val;\n  }\n};\nvar ids_calendar_events_mixin_default = IdsCalendarEventsMixin;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/mixins/ids-calendar-events-mixin/ids-calendar-events-mixin.ts\n");

/***/ })

}]);