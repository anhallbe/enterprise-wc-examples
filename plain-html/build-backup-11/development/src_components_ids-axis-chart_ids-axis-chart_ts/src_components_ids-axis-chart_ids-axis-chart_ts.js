"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkids_enterprise_wc"] = self["webpackChunkids_enterprise_wc"] || []).push([["src_components_ids-axis-chart_ids-axis-chart_ts"],{

/***/ "./src/components/ids-axis-chart/ids-axis-chart.ts":
/*!*********************************************************!*\
  !*** ./src/components/ids-axis-chart/ids-axis-chart.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ IdsAxisChart)\n/* harmony export */ });\n/* harmony import */ var _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/ids-attributes */ \"./src/core/ids-attributes.ts\");\n/* harmony import */ var _core_ids_decorators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/ids-decorators */ \"./src/core/ids-decorators.ts\");\n/* harmony import */ var _utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/ids-string-utils/ids-string-utils */ \"./src/utils/ids-string-utils/ids-string-utils.ts\");\n/* harmony import */ var _utils_ids_object_utils_ids_object_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/ids-object-utils/ids-object-utils */ \"./src/utils/ids-object-utils/ids-object-utils.ts\");\n/* harmony import */ var _ids_chart_colors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ids-chart-colors */ \"./src/components/ids-axis-chart/ids-chart-colors.ts\");\n/* harmony import */ var _ids_pattern_data__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ids-pattern-data */ \"./src/components/ids-axis-chart/ids-pattern-data.ts\");\n/* harmony import */ var _ids_nice_scale__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ids-nice-scale */ \"./src/components/ids-axis-chart/ids-nice-scale.ts\");\n/* harmony import */ var _utils_ids_debounce_utils_ids_debounce_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utils/ids-debounce-utils/ids-debounce-utils */ \"./src/utils/ids-debounce-utils/ids-debounce-utils.ts\");\n/* harmony import */ var _mixins_ids_chart_legend_mixin_ids_chart_legend_mixin__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../mixins/ids-chart-legend-mixin/ids-chart-legend-mixin */ \"./src/mixins/ids-chart-legend-mixin/ids-chart-legend-mixin.ts\");\n/* harmony import */ var _mixins_ids_chart_selection_mixin_ids_chart_selection_mixin__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../mixins/ids-chart-selection-mixin/ids-chart-selection-mixin */ \"./src/mixins/ids-chart-selection-mixin/ids-chart-selection-mixin.ts\");\n/* harmony import */ var _mixins_ids_locale_mixin_ids_locale_mixin__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../mixins/ids-locale-mixin/ids-locale-mixin */ \"./src/mixins/ids-locale-mixin/ids-locale-mixin.ts\");\n/* harmony import */ var _mixins_ids_events_mixin_ids_events_mixin__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../mixins/ids-events-mixin/ids-events-mixin */ \"./src/mixins/ids-events-mixin/ids-events-mixin.ts\");\n/* harmony import */ var _mixins_ids_theme_mixin_ids_theme_mixin__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../mixins/ids-theme-mixin/ids-theme-mixin */ \"./src/mixins/ids-theme-mixin/ids-theme-mixin.ts\");\n/* harmony import */ var _core_ids_element__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../core/ids-element */ \"./src/core/ids-element.ts\");\n/* harmony import */ var _core_ids_data_source__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../core/ids-data-source */ \"./src/core/ids-data-source.ts\");\n/* harmony import */ var _ids_tooltip_ids_tooltip__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../ids-tooltip/ids-tooltip */ \"./src/components/ids-tooltip/ids-tooltip.ts\");\n/* harmony import */ var _ids_empty_message_ids_empty_message__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../ids-empty-message/ids-empty-message */ \"./src/components/ids-empty-message/ids-empty-message.ts\");\n/* harmony import */ var _ids_axis_chart_scss__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./ids-axis-chart.scss */ \"./src/components/ids-axis-chart/ids-axis-chart.scss\");\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result)\n    __defProp(target, key, result);\n  return result;\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst Base = (0,_mixins_ids_chart_legend_mixin_ids_chart_legend_mixin__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(\n  (0,_mixins_ids_chart_selection_mixin_ids_chart_selection_mixin__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(\n    (0,_mixins_ids_theme_mixin_ids_theme_mixin__WEBPACK_IMPORTED_MODULE_12__[\"default\"])(\n      (0,_mixins_ids_locale_mixin_ids_locale_mixin__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(\n        (0,_mixins_ids_events_mixin_ids_events_mixin__WEBPACK_IMPORTED_MODULE_11__[\"default\"])(\n          _core_ids_element__WEBPACK_IMPORTED_MODULE_13__[\"default\"]\n        )\n      )\n    )\n  )\n);\nlet IdsAxisChart = class extends Base {\n  initialized = false;\n  constructor() {\n    super();\n    this.state = this.state || {};\n    this.state.horizontal = false;\n    this.state.yAxisFormatter = {\n      notation: \"compact\",\n      compactDisplay: \"short\"\n    };\n  }\n  svg;\n  canvas;\n  emptyMessage;\n  legend;\n  sectionWidths = [];\n  sectionWidth = NaN;\n  sectionHeights = [];\n  sectionHeight = NaN;\n  resizeToParentHeight;\n  resizeToParentWidth;\n  parentWidth = NaN;\n  parentHeight = NaN;\n  /** Reference to datasource API */\n  datasource = new _core_ids_data_source__WEBPACK_IMPORTED_MODULE_14__[\"default\"]();\n  /**\n   * @returns {Array<string>} Drawer vetoable events\n   */\n  vetoableEventTypes = [\n    \"beforeselected\",\n    \"beforedeselected\"\n  ];\n  /**\n   * On selectable change\n   */\n  onSelectableChange() {\n    this.legendsClickable?.(this.selectable);\n  }\n  /**\n   * Invoked each time the custom element is appended\n   */\n  connectedCallback() {\n    super.connectedCallback?.();\n    this.svg = this.shadowRoot?.querySelector(\"svg\");\n    this.emptyMessage = this.querySelector(\"ids-empty-message\") || this.shadowRoot?.querySelector(\"ids-empty-message\");\n    this.legend = this.shadowRoot?.querySelector('[name=\"legend\"]');\n    if (this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.WIDTH))\n      this.width = this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.WIDTH);\n    if (this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.HEIGHT))\n      this.height = this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.HEIGHT);\n    this.#resetAxisLabelsText();\n    this.#attachEventHandlers();\n    this.redraw();\n  }\n  /**\n   * Invoked each time the custom element is removed\n   */\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this.#resizeObserver?.disconnect();\n    this.#resizeObserver = void 0;\n    this.emptyMessage?.remove();\n    this.emptyMessage = void 0;\n    this.svg?.remove();\n    this.svg = void 0;\n    this.legend?.remove();\n    this.legend = void 0;\n  }\n  /**\n   * Return the attributes we handle as getters/setters\n   * @returns {Array} The attributes in an array\n   */\n  static get attributes() {\n    return [\n      ...super.attributes,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.ANIMATED,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.ALIGN_X_LABELS,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.AXIS_LABEL_BOTTOM,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.AXIS_LABEL_END,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.AXIS_LABEL_MARGIN,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.AXIS_LABEL_START,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.AXIS_LABEL_TOP,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.DATA,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.HEIGHT,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.HORIZONTAL,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.MARGINS,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.SHOW_HORIZONTAL_GRID_LINES,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.SHOW_VERTICAL_GRID_LINES,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.ROTATE_NAME_LABELS,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.STACKED,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.TITLE,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.WIDTH\n    ];\n  }\n  /**\n   * Create the Template for the contents\n   * @returns {string} The template\n   */\n  template() {\n    const horizontal = this.horizontal ? \" horizontal\" : \"\";\n    return `<div class=\"ids-chart-container\" part=\"container\">\n      <svg class=\"ids-axis-chart${horizontal}\" part=\"chart\" width=\"${this.width}\" height=\"${this.height}\" xmlns=\"http://www.w3.org/2000/svg\">\n      </svg>\n      <slot name=\"legend\">\n      </slot>\n      <slot name=\"empty-message\">\n        <ids-empty-message icon=\"empty-no-data\" hidden>\n          <ids-text type=\"h2\" font-size=\"20\" label=\"true\" slot=\"label\">${this.localeAPI?.translate(\"NoData\") || \"No Data Available\"}</ids-text>\n        </ids-empty-message>\n      </slot>\n      <slot name=\"tooltip\">\n        <ids-tooltip id=\"tooltip\"></ids-tooltip>\n      </slot>\n    </div>`;\n  }\n  /**\n   * Setup the Event Handling\n   * @private\n   */\n  #attachEventHandlers() {\n    this.onLocaleChange = () => {\n      this.redraw();\n      const textElem = this.shadowRoot?.querySelector(\"ids-empty-message ids-text\");\n      if (textElem)\n        textElem.textContent = this.localeAPI?.translate(\"NoData\");\n    };\n    this.onLanguageChange = () => {\n      const textElem = this.shadowRoot?.querySelector(\"ids-empty-message ids-text\");\n      if (textElem)\n        textElem.textContent = this.localeAPI?.translate(\"NoData\");\n    };\n  }\n  /** Max width for x-labels text */\n  #xMaxTextWidth = 0;\n  /** Max width for y-labels text */\n  #yMaxTextWidth = 0;\n  /** Holds the resize observer object */\n  #resizeObserver = void 0;\n  /**\n   * Attach the resize observer\n   * @private\n   */\n  #attachResizeObserver() {\n    if ((this.resizeToParentHeight || this.resizeToParentWidth) && !this.#resizeObserver) {\n      this.parentWidth = this.parentElement?.offsetWidth;\n      this.parentHeight = this.parentElement?.offsetHeight;\n      this.#resizeObserver = new ResizeObserver((0,_utils_ids_debounce_utils_ids_debounce_utils__WEBPACK_IMPORTED_MODULE_7__[\"default\"])((entries) => {\n        this.resize(entries);\n      }, 350));\n      this.#resizeObserver.disconnect();\n      this.#resizeObserver.observe(this.parentElement);\n    }\n  }\n  isGrouped = false;\n  /**\n   * Handle Resizing\n   * @private\n   * @param {object} entries The resize observer entries\n   */\n  resize(entries) {\n    if (!this.initialized) {\n      return;\n    }\n    if (entries[0].contentRect.width !== this.parentWidth && this.resizeToParentWidth && this.parentWidth > 0 || entries[0].contentRect.height !== this.parentHeight && this.resizeToParentHeight && this.parentHeight > 0) {\n      this.initialized = false;\n      if (this.resizeToParentHeight) {\n        this.height = \"inherit\";\n      }\n      if (this.resizeToParentWidth) {\n        this.width = \"inherit\";\n      }\n      this.initialized = true;\n      this.redraw();\n      this.reanimate();\n    }\n    this.parentWidth = this.parentElement?.offsetWidth;\n    this.parentHeight = this.parentElement?.offsetHeight;\n  }\n  /**\n   * Redraw the chart\n   * @private\n   */\n  redraw() {\n    if (!this.initialized) {\n      return;\n    }\n    if (this.data && this.data.length === 0 && this.initialized) {\n      this.#showEmptyMessage();\n      if (this.legend)\n        this.legend.innerHTML = this.legendTemplate();\n      return;\n    }\n    this.#calculate();\n    this.afterCalculateCallback?.();\n    this.#addColorVariables();\n    if (this.svg)\n      this.svg.innerHTML = this.#axisTemplate();\n    if (this.legend)\n      this.legend.innerHTML = this.legendTemplate();\n    this.adjustLabels();\n    this.#adjustRTL();\n    this.legendsClickable?.(this.selectable);\n    this.triggerEvent(\"rendered\", this, {\n      detail: {\n        svg: this.svg,\n        data: this.data,\n        markerData: this.markerData\n      }\n    });\n    if (this.afterConnectedCallback) {\n      this.afterConnectedCallback();\n    }\n  }\n  /**\n   * Adjust RTL\n   * @private\n   */\n  #adjustRTL() {\n    if (!this.localeAPI?.isRTL())\n      return;\n    const labels = {\n      x: [...this.svg?.querySelectorAll(\".labels.x-labels text\") ?? []],\n      y: [...this.svg?.querySelectorAll(\".labels.y-labels text\") ?? []]\n    };\n    const extra = this.#yMaxTextWidth + this.margins.left;\n    let calcX = (x) => {\n      let val = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToNumber)(x) - extra;\n      val += this.horizontal ? this.margins.leftInner + this.margins.rightInner : 0;\n      return val;\n    };\n    const newX = labels.x.map((label) => calcX(label.getAttribute(\"x\"))).reverse();\n    labels.x.forEach((label, i) => {\n      if (!this.horizontal) {\n        label.setAttribute(\"transform\", `rotate(${this.rotateNameLabels}, ${newX[i]}, ${label.getAttribute(\"y\")})`);\n      }\n      label.setAttribute(\"x\", newX[i]);\n      label.setAttribute(\"text-anchor\", \"start\");\n      if (this.alignXLabels === \"middle\")\n        label.setAttribute(\"transform-origin\", \"0 -4px\");\n    });\n    calcX = (x) => `-${(0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToNumber)(x) + extra}px`;\n    labels.y.forEach((label) => {\n      if (this.horizontal) {\n        const trans = label.getAttribute(\"transform\")?.split(\",\");\n        if (trans?.length === 3) {\n          const transX = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToNumber)(trans[1]);\n          const transY = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToNumber)(trans[2]);\n          label.setAttribute(\"transform-origin\", `${transX}px ${transY}px`);\n          label.setAttribute(\"transform\", `rotate(${this.rotateNameLabels}) scale(-1, 1)`);\n        } else {\n          const calX = calcX(label.getAttribute(\"x\"));\n          const transStr = `scale(-1, 1) translate(${calX}, 0)`;\n          label.style.setProperty(\"transform\", transStr);\n        }\n      } else {\n        const calX = calcX(label.getAttribute(\"x\"));\n        label.style.setProperty(\"--ids-axis-chart-ylabels-x\", calX);\n      }\n    });\n  }\n  /** The marker data to use to draw the chart */\n  markerData = {\n    markerCount: 0,\n    groupCount: 0,\n    min: 0,\n    max: 0,\n    scale: new _ids_nice_scale__WEBPACK_IMPORTED_MODULE_6__[\"default\"](this.yAxisMin, 0),\n    gridTop: 0,\n    gridBottom: 0,\n    gridLeft: 0,\n    gridRight: 0,\n    groupTotals: [0]\n  };\n  /**\n   * Get the min/max points and calculate the scale\n   * @private\n   */\n  #calculate() {\n    let groupCount = 0;\n    let markerCount = 0;\n    this.markerData = {\n      markerCount: 0,\n      groupCount: 0,\n      min: 0,\n      max: 0,\n      scale: new _ids_nice_scale__WEBPACK_IMPORTED_MODULE_6__[\"default\"](this.yAxisMin, 0),\n      gridTop: 0,\n      gridBottom: 0,\n      gridLeft: 0,\n      gridRight: 0,\n      groupTotals: [0]\n    };\n    this.data?.forEach((group, index) => {\n      groupCount++;\n      markerCount = 0;\n      this.markerData.groupTotals[index] = 0;\n      group.data?.forEach((data) => {\n        if (data.value > this.markerData.max) {\n          this.markerData.max = data.value;\n        }\n        this.markerData.groupTotals[index] += data.value;\n        if (data.value < this.markerData.min) {\n          this.markerData.min = data.value;\n        }\n        if (this.markerData.min === void 0) {\n          this.markerData.min = data.value;\n        }\n        markerCount++;\n      });\n      if (markerCount > this.markerData.markerCount) {\n        this.markerData.markerCount = markerCount;\n      }\n      this.markerData.groupCount = groupCount;\n    });\n    const groupMax = Math.max(...this.markerData.groupTotals);\n    const scale = new _ids_nice_scale__WEBPACK_IMPORTED_MODULE_6__[\"default\"](this.yAxisMin, this.stacked ? groupMax : this.markerData.max);\n    this.markerData.scale = scale;\n    this.markerData.scaleValues = [];\n    for (let i = scale.niceMin || 0; i <= scale.niceMax; i += Number(scale.tickSpacing)) {\n      this.markerData.scaleValues.push(i);\n    }\n    this.xMaxTextWidth();\n    this.yMaxTextWidth();\n    this.markerData.gridTop = this.margins.top + this.textWidths.top;\n    this.markerData.gridBottom = this.height - this.margins.bottom - this.textWidths.bottom;\n    this.markerData.gridLeft = this.textWidths.left + this.margins.left + this.margins.leftInner * 2 + this.margins.rightInner;\n    this.markerData.gridRight = this.width - this.margins.right - this.textWidths.right;\n    if (this.horizontal) {\n      this.#horizontalPoints();\n      this.#sectionHeights();\n    } else {\n      this.#verticalPoints();\n      this.#sectionWidths();\n    }\n  }\n  /**\n   * Set horizontal data points / locations\n   * @private\n   * @returns {void}\n   */\n  #horizontalPoints() {\n    this.markerData.points = [];\n    this.data?.forEach((dataPoints) => {\n      let top = this.textWidths.top + this.margins.top + this.margins.topInner;\n      const points = [];\n      for (let index = 0; index < this.markerData.markerCount; index++) {\n        const value = dataPoints.data?.[index]?.value || 0;\n        const cyPerc = (value - (this.markerData.scale.niceMin || 0)) / (this.markerData.scale.niceMax - this.markerData.scale.niceMin);\n        const cyWidth = cyPerc * (this.markerData.gridRight - this.markerData.gridLeft);\n        points.push({ top, left: this.markerData.gridRight - cyWidth, value });\n        top += this.#namesLineGap();\n      }\n      this.markerData.points?.push(points);\n    });\n  }\n  /**\n   * Set vertical data points / locations\n   * @private\n   * @returns {void}\n   */\n  #verticalPoints() {\n    this.markerData.points = [];\n    this.data?.forEach((dataPoints) => {\n      let left = this.textWidths.left + this.margins.left + this.margins.leftInner * 2;\n      const points = [];\n      for (let index = 0; index < this.markerData.markerCount; index++) {\n        const value = dataPoints.data?.[index]?.value || 0;\n        const cyPerc = (value - (this.markerData.scale.niceMin || 0)) / (this.markerData.scale.niceMax - this.markerData.scale.niceMin);\n        const cyHeight = cyPerc * (this.markerData.gridBottom - this.markerData.gridTop);\n        points.push({ left, top: this.markerData.gridBottom - cyHeight, value });\n        left += this.#namesLineGap();\n      }\n      this.markerData.points?.push(points);\n    });\n  }\n  /**\n   * Set the widths of each category section (used in other places)\n   * @private\n   * @returns {void}\n   */\n  #sectionWidths() {\n    this.sectionWidth = (this.markerData.gridRight - this.markerData.gridLeft) / this.markerData.markerCount;\n    let left = this.textWidths.left + this.margins.left + this.margins.leftInner * 2;\n    this.sectionWidths = [];\n    for (let index = 0; index < this.markerData.markerCount + 1; index++) {\n      this.sectionWidths.push({ left, width: this.sectionWidth });\n      left += this.sectionWidth;\n    }\n  }\n  /**\n   * Set the heights of each category section (used in other places)\n   * @private\n   * @returns {void}\n   */\n  #sectionHeights() {\n    this.sectionHeight = (this.markerData.gridBottom - this.markerData.gridTop) / this.markerData.markerCount;\n    let top = this.textWidths.top + this.margins.top + this.margins.topInner;\n    if (this.isGrouped)\n      top -= (this.markerData.groupCount || 0) % 2;\n    this.sectionHeights = [];\n    for (let index = 0; index < this.markerData.markerCount; index++) {\n      this.sectionHeights.push({ top, height: this.sectionHeight });\n      top += this.sectionHeight;\n    }\n  }\n  /**\n   * Add colors in a style sheet to the root so the variables can be used\n   * @private\n   */\n  #addColorVariables() {\n    let colorSheet = \"\";\n    if (!this.shadowRoot?.styleSheets) {\n      return;\n    }\n    this.data?.forEach((group, index) => {\n      const data = group;\n      let color = data.patternColor;\n      if (!color && data.color && data.color.substr(0, 1) === \"#\") {\n        color = data.color;\n      }\n      if (!color && data.color && data.color.substr(0, 1) !== \"#\") {\n        color = `var(--ids-color-palette-${data.color})`;\n      }\n      if (!color) {\n        color = `var(${this.colors[index]})`;\n      }\n      colorSheet += `--ids-chart-color-${index + 1}: ${color} !important;`;\n    });\n    const styleSheet = this.shadowRoot.styleSheets[0];\n    if (styleSheet.cssRules && styleSheet.cssRules[0].selectorText === \":host\") {\n      styleSheet.deleteRule(0);\n    }\n    styleSheet.insertRule(`:host {\n      ${colorSheet}\n    }`);\n  }\n  /**\n   * Return the insider part of the SVG\n   * @private\n   * @returns {string} The SVG markup\n   */\n  #axisTemplate() {\n    return `<title></title>\n    <title>${this.title}</title>\n    <defs>\n      ${this.#patterns()}\n    </defs>\n    <g class=\"grid vertical-lines${!this.showVerticalGridLines ? \" hidden\" : \"\"}\">\n      ${this.#verticalLines()}\n    </g>\n    <g class=\"grid horizontal-lines${!this.showHorizontalGridLines ? \" hidden\" : \"\"}\">\n      ${this.#horizontalLines()}\n    </g>\n    ${this.chartTemplate()}\n    <g class=\"labels x-labels\">\n      ${this.#xLabels()}\n    </g>\n    <g class=\"labels y-labels\">\n      ${this.#yLabels()}\n    </g>\n    <g class=\"labels axis-labels\">\n      ${this.#axisLabels()}\n    </g>\n    `;\n  }\n  /**\n   * Overridable method to draw the markers\n   * @returns {string} The SVG Marker Markup\n   */\n  chartTemplate() {\n    return \"\";\n  }\n  /**\n   * Child Chart elements that get tooltips\n   * @private\n   * @returns {Array<SVGElement>} The elements\n   */\n  tooltipElements() {\n    return [];\n  }\n  /**\n   * Overridable method to draw to get the tooltip template\n   * @returns {string} The tooltip template\n   */\n  tooltipTemplate() {\n    return \"<b>${label}</b> ${value}\";\n  }\n  /**\n   * Setup handlers on tooltip elements\n   */\n  attachTooltipEvents() {\n    this.tooltipElements().forEach((element) => {\n      this.onEvent(\"hoverend\", element, async () => {\n        const tooltip = this.container?.querySelector(\"ids-tooltip\");\n        if (tooltip) {\n          tooltip.innerHTML = this.#tooltipContent(element);\n          tooltip.target = element;\n          tooltip.placement = \"top\";\n          tooltip.visible = true;\n        }\n      });\n    });\n  }\n  /**\n   * Return the data for a tooltip accessible by index\n   * @param {number} index the data groupIndex\n   * @param {number} groupIndex the data index\n   * @returns {Array<string>} The elements\n   */\n  tooltipData(index, groupIndex = 0) {\n    const data = this.data[groupIndex]?.data;\n    return {\n      label: data[index]?.name || this.data[0].data[index].name,\n      value: data[index]?.value || 0,\n      tooltip: data[index]?.tooltip\n    };\n  }\n  /**\n   * Return the tooltip content\n   * @param {SVGElement} elem The svg element we will inspect for content\n   * @private\n   * @returns {string} The tooltip content\n   */\n  #tooltipContent(elem) {\n    const group = Number(elem.getAttribute(\"group-index\"));\n    const index = Number(elem.getAttribute(\"index\"));\n    const data = this.tooltipData(index, group);\n    if (data.tooltip) {\n      return data.tooltip.replace(\"${value}\", data.value).replace(\"${label}\", data.label);\n    }\n    if (this.stacked || this.isGrouped) {\n      let html = `<div class=\"tooltip-center\"><b>${data.label}</b></div><div class=\"tooltip chart-legend\">`;\n      for (let i = 0; i < this.data.length; i++) {\n        const dataGroup = this.data[i];\n        const label = dataGroup.name;\n        const value = this.data[i].data[index]?.value;\n        const colorClass = dataGroup.pattern ? \"\" : ` color-${i + 1}`;\n        const patternSvg = dataGroup.pattern ? `<svg width=\"12\" height=\"12\" xmlns=\"http://www.w3.org/2000/svg\"><rect width=\"12\" height=\"12\" fill=\"url(#${dataGroup.pattern})\"></rect></svg>` : \"\";\n        if (label && value) {\n          html += `<div class=\"tooltip-row\">\n            <div class=\"swatch${colorClass}\">${patternSvg}</div>\n            <span>${this.data[i].name}</span>\n            <b>${this.data[i].data[index].value}</b></div>`;\n        }\n      }\n      return `${html}</div>`;\n    }\n    return (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.injectTemplate)(this.tooltipTemplate(), data);\n  }\n  /**\n   * Holds the axis labels text object\n   * @private\n   */\n  #axisLabelsText;\n  /**\n   * Reset the axis labels\n   * @private\n   * @returns {void}\n   */\n  #resetAxisLabelsText() {\n    this.#axisLabelsText = {\n      bottom: \"\",\n      end: \"\",\n      start: \"\",\n      top: \"\"\n    };\n  }\n  /**\n   * Set the axis labels\n   * @private\n   * @param {'bottom'|'end'|'start'|'top'} opt The option\n   * @returns {void}\n   */\n  #setAxisLabels(opt) {\n    if (this.#axisLabelsText) {\n      const current = this.#axisLabelsText[opt];\n      const labels = {\n        bottom: this.axisLabelBottom,\n        end: this.axisLabelEnd,\n        start: this.axisLabelStart,\n        top: this.axisLabelTop\n      };\n      if (typeof current !== \"undefined\" && current !== labels[opt]) {\n        this.#axisLabelsText[opt] = labels[opt] || \"\";\n        if (this.initialized)\n          this.redraw();\n      }\n    }\n  }\n  /**\n   * Return the axis label for the svg\n   * @private\n   * @returns {string} The axis label markup\n   */\n  #axisLabels() {\n    let html = \"\";\n    if (this.#axisLabelsText) {\n      const gap = 12;\n      const inline = { start: gap, mid: this.width / 2, end: this.width - gap };\n      const block = { start: gap, mid: this.height / 2, end: this.height - gap };\n      const isRTL = this.localeAPI?.isRTL();\n      const scale = isRTL ? \" scale(-1, 1)\" : \"\";\n      const transform = {\n        top: `translate(${inline.mid}, ${block.start})${scale}`,\n        bottom: `translate(${inline.mid}, ${block.end})${scale}`,\n        start: `translate(${inline.start}, ${block.mid}) rotate(-90)${scale}`,\n        end: `translate(${inline.end}, ${block.mid}) rotate(90)${scale}`\n      };\n      [\"top\", \"bottom\", \"start\", \"end\"].forEach((type) => {\n        if (this.#axisLabelsText[type]) {\n          html += `<text\n          class=\"axis-label-${type}\"\n          transform=\"${transform[type]}\"\n        >${this.#axisLabelsText[type]}</text>`;\n        }\n      });\n    }\n    return html;\n  }\n  /**\n   * Return the horizontal line data for the svg\n   * @private\n   * @returns {string} The horizontal line markup\n   */\n  #horizontalLines() {\n    let lineHtml = \"\";\n    let top = this.margins.top + this.margins.topInner;\n    const start = this.textWidths.left + this.margins.left + this.margins.leftInner;\n    const end = this.width - this.margins.right;\n    const { markerCount, scaleValues } = this.markerData;\n    const max = this.horizontal ? markerCount + 1 : scaleValues?.length || 0;\n    for (let i = 0; i < max; i++) {\n      lineHtml += `<line x1=\"${start}\" x2=\"${end}\" y1=\"${top}\" y2=\"${top}\"></line>`;\n      top += this.horizontal ? this.#namesLineGap() : this.#valuesLineGap();\n    }\n    return lineHtml;\n  }\n  /**\n   * Return the vertical line data for the svg\n   * @private\n   * @returns {string} The vertical line markup\n   */\n  #verticalLines() {\n    let lineHtml = \"\";\n    let left = this.textWidths.left + this.margins.left;\n    left += this.margins.leftInner * (this.horizontal ? 1 : 2);\n    const top = this.margins.top;\n    const bottom = this.height - this.margins.bottom - this.textWidths.bottom;\n    const { markerCount, scaleValues } = this.markerData;\n    const max = this.horizontal ? scaleValues?.length || 0 : markerCount;\n    for (let i = 0; i < max; i++) {\n      lineHtml += `<line x1=\"${left}\" x2=\"${left}\" y1=\"${top}\" y2=\"${bottom}\"></line>`;\n      left += this.horizontal ? this.#valuesLineGap() : this.#namesLineGap();\n    }\n    return lineHtml;\n  }\n  /**\n   * Format the value for the x label in a variety of ways\n   * @param {string|Function} value The value to format value\n   * @returns {string} The formatted value\n   * @private\n   */\n  #formatXLabel(value) {\n    if (!this.xAxisFormatter)\n      return value;\n    if (typeof this.xAxisFormatter === \"function\") {\n      return this.xAxisFormatter(value, this.data, this);\n    }\n    return \"\";\n  }\n  /**\n   * Format the value for the y label in a variety of ways\n   * @param {string|Function} value The value to format value\n   * @returns {string} The formatted value\n   * @private\n   */\n  formatYLabel(value) {\n    if (!this.yAxisFormatter)\n      return value;\n    if (typeof this.yAxisFormatter === \"function\") {\n      return this.yAxisFormatter(value, this.data, this);\n    }\n    return new Intl.NumberFormat(this.locale || \"en\", this.yAxisFormatter).format(value);\n  }\n  #nameLabels() {\n    let labelHtml = \"\";\n    let left = 0;\n    let top = 0;\n    const gap = this.#namesLineGap();\n    if (this.horizontal) {\n      const textSize = 3;\n      left = this.textWidths.left + this.margins.left;\n      top = this.margins.top + this.margins.topInner + textSize + gap / 2;\n      if (this.axisLabelTop)\n        top += this.axisLabelMargin;\n      for (let index = 0; index < this.markerData.markerCount; index++) {\n        const transform = this.rotateNameLabels !== 0 ? ` transform=\"rotate(${this.rotateNameLabels}, ${left}, ${top})\"` : \"\";\n        const value = this.#formatXLabel(this.data[0]?.data[index]?.name);\n        labelHtml += `<text x=\"${left}\" y=\"${top}\" aria-hidden=\"true\"${transform}>${value}</text>`;\n        top += gap;\n      }\n    } else {\n      left = this.textWidths.left + this.margins.left + this.margins.leftInner * 2;\n      top = this.height - this.margins.top - this.margins.bottom + this.margins.bottomInner;\n      if (this.axisLabelTop)\n        top += this.axisLabelMargin;\n      for (let index = 0; index < this.markerData.markerCount; index++) {\n        const value = this.#formatXLabel(this.data[0]?.data[index]?.name);\n        let transform;\n        if (this.alignXLabels === \"middle\") {\n          const x = left + this.sectionWidths[index].width / 2;\n          transform = this.rotateNameLabels !== 0 ? ` transform=\"rotate(${this.rotateNameLabels}, ${x}, ${top})\" transform-origin=\"8px 8px\"` : \"\";\n          labelHtml += `<text x=\"${x}\" y=\"${top}\" alignment-baseline=\"middle\" text-anchor=\"middle\" aria-hidden=\"true\"${transform}>${value}</text>`;\n        } else {\n          transform = this.rotateNameLabels !== 0 ? ` transform=\"rotate(${this.rotateNameLabels}, ${left}, ${top})\" text-anchor=\"end\"` : \"\";\n          labelHtml += `<text x=\"${left}\" y=\"${top}\" aria-hidden=\"true\"${transform}>${value}</text>`;\n        }\n        left += this.alignXLabels === \"middle\" ? this.sectionWidths[index].width : gap;\n      }\n    }\n    return labelHtml;\n  }\n  /**\n   * Return the value labels data\n   * @private\n   * @returns {string} The value labels markup\n   */\n  #valueLabels() {\n    let lineHtml = \"\";\n    let left = 0;\n    let top = 0;\n    if (this.horizontal) {\n      left = this.textWidths.left + this.margins.left + this.margins.leftInner;\n      top = this.height - this.margins.top - this.margins.bottom + this.margins.bottomInner;\n      if (this.axisLabelTop)\n        top += this.axisLabelMargin;\n      this.markerData.scaleValues?.slice().forEach((value) => {\n        lineHtml += `<text x=\"${left}\" y=\"${top}\" aria-hidden=\"true\">${this.formatYLabel(value)}</text>`;\n        left += this.#valuesLineGap();\n      });\n    } else {\n      const textSize = 3;\n      left = this.textWidths.left + this.margins.left;\n      top = this.margins.top + textSize;\n      this.markerData.scaleValues?.slice().reverse().forEach((value) => {\n        lineHtml += `<text x=\"${left}\" y=\"${top}\" aria-hidden=\"true\">${this.formatYLabel(value)}</text>`;\n        top += this.#valuesLineGap();\n      });\n    }\n    return lineHtml;\n  }\n  #namesLineGap() {\n    if (this.horizontal) {\n      const { gridTop, gridBottom, markerCount } = this.markerData;\n      return (gridBottom - gridTop) / markerCount;\n    }\n    const left = this.textWidths.left + this.margins.left + this.margins.leftInner;\n    const width = this.width - this.margins.right - this.margins.rightInner * 2;\n    return (width - left) / (this.markerData.markerCount - 1);\n  }\n  #valuesLineGap() {\n    const len = this.markerData.scaleValues?.length || 0;\n    let v = 0;\n    if (this.horizontal) {\n      v += this.margins.left + this.margins.right;\n      v += this.textWidths.left + this.textWidths.right;\n      v += this.margins.leftInner * 2 + this.margins.rightInner;\n      v = this.width - v;\n    } else {\n      v += this.margins.top + this.margins.bottom;\n      v += this.textWidths.top + this.textWidths.bottom;\n      v = this.height - v;\n    }\n    return v / (len - 1);\n  }\n  /**\n   * Return the x label data for the svg\n   * @private\n   * @returns {string} The x label markup\n   */\n  #xLabels() {\n    return this.horizontal ? this.#valueLabels() : this.#nameLabels();\n  }\n  /**\n   * Return the y label data for the svg\n   * @private\n   * @returns {string} The y label markup\n   */\n  #yLabels() {\n    return this.horizontal ? this.#nameLabels() : this.#valueLabels();\n  }\n  /**\n   * Show an empty message with settings configuration\n   * @private\n   */\n  #showEmptyMessage() {\n    this.svg?.classList.add(\"hidden\");\n    this.emptyMessage?.style.setProperty(\"height\", `${this.height}px`);\n    this.emptyMessage?.removeAttribute(\"hidden\");\n  }\n  /**\n   * Hide the empty message\n   * @private\n   */\n  #hideEmptyMessage() {\n    this.svg?.classList.remove(\"hidden\");\n    this.emptyMessage?.style.setProperty(\"height\", \"\");\n    this.emptyMessage?.setAttribute(\"hidden\", \"\");\n  }\n  /**\n   * Return the def markup for svg patterns\n   * @private\n   * @returns {string} The string with all the patterns being used\n   */\n  #patterns() {\n    let patternHtml = \"\";\n    this.data?.forEach((group, i) => {\n      let pattern = _ids_pattern_data__WEBPACK_IMPORTED_MODULE_5__.patternData[group.pattern];\n      if (pattern) {\n        const color = `${this.color(i)}` || \"#000000\";\n        pattern = pattern.replace('fill=\"#000000\"', `fill=\"${color}\"`);\n        patternHtml += pattern;\n      }\n    });\n    return patternHtml;\n  }\n  /**\n   * Handles chart title attribute changes\n   * @param {string} value The title value\n   */\n  onTitleChange(value = \"\") {\n    const titleElem = this.container?.querySelector(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.TITLE);\n    if (titleElem) {\n      titleElem.textContent = value;\n    }\n  }\n  /**\n   * The width of the chart (in pixels) or 'inherit' from the parent\n   * @param {number | string} value The height value\n   */\n  set height(value) {\n    let height = value;\n    if (value === \"inherit\") {\n      height = this.#getParentDimensions().height;\n      this.resizeToParentHeight = true;\n      this.#attachResizeObserver();\n    }\n    this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.HEIGHT, String(height));\n    this.svg?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.HEIGHT, String(height));\n    this.redraw();\n  }\n  get height() {\n    const value = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToNumber)(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.HEIGHT));\n    return !Number.isNaN(value) ? value : 500;\n  }\n  /**\n   * Flips the orientation to horizontal\n   * supported `Axis` and `Bar` type charts\n   * @param {boolean | string} value If true will set `horizontal` attribute\n   */\n  set horizontal(value) {\n    if (!/^ids-(axis|bar)-chart$/gi.test(this.nodeName))\n      return;\n    const val = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(value);\n    if (val !== this.state.horizontal) {\n      this.state.horizontal = val;\n      if (val) {\n        this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.HORIZONTAL, \"\");\n        this.svg?.classList.add(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.HORIZONTAL);\n      } else {\n        this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.HORIZONTAL);\n        this.svg?.classList.remove(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.HORIZONTAL);\n      }\n      this.redraw();\n    }\n  }\n  get horizontal() {\n    return this.state.horizontal;\n  }\n  /**\n   * The width of the chart (in pixels) or 'inherit' from the parent\n   * @param {number | string} value The width value\n   */\n  set width(value) {\n    let width = value;\n    if (value === \"inherit\") {\n      width = this.#getParentDimensions().width;\n      this.resizeToParentWidth = true;\n      this.#attachResizeObserver();\n    }\n    this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.WIDTH, String(width));\n    this.svg?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.WIDTH, String(width));\n    this.#setContainerWidth(Number(width));\n    this.redraw();\n  }\n  get width() {\n    const value = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToNumber)(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.WIDTH));\n    return !Number.isNaN(value) ? value : 700;\n  }\n  /**\n   * Get the parent element's width and height\n   * @returns {object} The height and width of the parent element\n   */\n  #getParentDimensions() {\n    const container = document.querySelector(\"ids-container\");\n    let isHidden = false;\n    if (container.hidden) {\n      container.hidden = false;\n      isHidden = true;\n    }\n    const dims = {\n      width: this.parentElement?.offsetWidth || parseInt(this.parentElement?.style.width),\n      height: this.parentElement?.offsetHeight || parseInt(this.parentElement?.style.height)\n    };\n    if (isHidden) {\n      container.hidden = true;\n    }\n    return dims;\n  }\n  /**\n   * Set the container width (for correct legend and sizing)\n   * @param {number} value The width value\n   */\n  #setContainerWidth(value) {\n    const container = this.container;\n    if (!container)\n      return;\n    if (container.classList.contains(\"ids-chart-container\")) {\n      container.style.width = `${value}px`;\n      return;\n    }\n    container.parentNode?.style.setProperty(\"width\", `${value}px`);\n  }\n  /**\n   * Get the max width to render names axis\n   * @private\n   * @returns {number} Calculated width\n   */\n  #maxTextWidthForNames() {\n    let maxWidth = 0;\n    for (let index = 0; index < this.markerData.markerCount; index++) {\n      const v = this.#formatXLabel(this.data[0]?.data[index]?.name);\n      const w = (0,_utils_ids_object_utils_ids_object_utils__WEBPACK_IMPORTED_MODULE_3__.calculateTextRenderWidth)(this, v);\n      if (w > maxWidth)\n        maxWidth = w;\n    }\n    return maxWidth;\n  }\n  /**\n   * Get the max width to render values axis\n   * @private\n   * @returns {number} Calculated width\n   */\n  #maxTextWidthForValues() {\n    let maxWidth = 0;\n    this.markerData.scaleValues?.slice().forEach((value) => {\n      const v = this.formatYLabel(value);\n      const w = (0,_utils_ids_object_utils_ids_object_utils__WEBPACK_IMPORTED_MODULE_3__.calculateTextRenderWidth)(this, v);\n      if (w > maxWidth)\n        maxWidth = w;\n    });\n    return maxWidth;\n  }\n  /**\n   * Set the max width to render the x-axis\n   * @private\n   * @returns {void}\n   */\n  xMaxTextWidth() {\n    this.#xMaxTextWidth = this.horizontal ? this.#maxTextWidthForValues() : this.#maxTextWidthForNames();\n  }\n  /**\n   * Set the max width to render the y-axis\n   * @private\n   * @returns {void}\n   */\n  yMaxTextWidth() {\n    this.#yMaxTextWidth = this.horizontal ? this.#maxTextWidthForNames() : this.#maxTextWidthForValues();\n  }\n  /**\n   * Set the left, right, top, bottom margins\n   * @param {object} value The margin values\n   */\n  set margins(value) {\n    this.state.margins = value;\n    this.redraw();\n  }\n  get margins() {\n    return this.state?.margins || {\n      left: this.axisLabelsMargin.start,\n      right: (this.legendPlacement === \"right\" ? 150 : 4) + this.axisLabelsMargin.end,\n      top: 16 + this.axisLabelsMargin.top,\n      bottom: 12 + this.axisLabelsMargin.bottom + this.bottomRotateMargin,\n      leftInner: 8,\n      rightInner: 8,\n      topInner: 0,\n      bottomInner: 12\n    };\n  }\n  /**\n   * Get bottom rotate margin\n   * @returns {number} The calc value\n   */\n  get bottomRotateMargin() {\n    if (!this.rotateNameLabels)\n      return 0;\n    const angle = this.rotateNameLabels % 90;\n    const total = this.#xMaxTextWidth - 12;\n    const part = total / 90;\n    return Math.abs(angle) === 0 ? total : part * Math.abs(angle);\n  }\n  /**\n   * Get axis labels margin\n   * @returns {{ bottom: number, end: number, start: number, top: number }} The calc values\n   */\n  get axisLabelsMargin() {\n    const margin = this.axisLabelMargin;\n    return {\n      bottom: this.axisLabelBottom ? margin : 0,\n      end: this.axisLabelEnd ? margin : 0,\n      start: this.axisLabelStart ? margin : 0,\n      top: this.axisLabelTop ? margin : 0\n    };\n  }\n  /**\n   * Set the width the text labels/axes take up on each side.\n   * @param {object} value The margin values\n   */\n  set textWidths(value) {\n    this.state.textWidths = value;\n    this.redraw();\n  }\n  get textWidths() {\n    return this.state.textWidths || {\n      left: this.legendPlacement === \"left\" ? 34 : this.#yMaxTextWidth || 4,\n      // TODO: Calculate this\n      right: 0,\n      top: 0,\n      bottom: 24\n    };\n  }\n  /**\n   * Set the data array of the chart\n   * @param {Array<unknown>} value The array to use\n   */\n  set data(value) {\n    if (value) {\n      this.#hideEmptyMessage();\n      this.datasource.data = value;\n      this.initialized = true;\n      this.redraw();\n      this.reanimate();\n      return;\n    }\n    this.datasource.data = [];\n  }\n  get data() {\n    return this?.datasource?.data || [];\n  }\n  /**\n   * Set the minimum value on the y axis\n   * @param {number} value The value to use\n   */\n  set yAxisMin(value) {\n    this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.Y_AXIS_MIN, String(value));\n    this.redraw();\n  }\n  get yAxisMin() {\n    return parseInt(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.Y_AXIS_MIN) ?? \"\") || 0;\n  }\n  /**\n   * Show the vertical axis grid lines\n   * @param {boolean} value True or false to show the grid lines\n   */\n  set showVerticalGridLines(value) {\n    this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.SHOW_VERTICAL_GRID_LINES, String(value));\n    this.redraw();\n  }\n  get showVerticalGridLines() {\n    const value = this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.SHOW_VERTICAL_GRID_LINES);\n    return value !== null ? (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(value) : this.horizontal;\n  }\n  /**\n   * Show the horizontal axis grid lines\n   * @param {boolean} value True or false to show the grid lines\n   */\n  set showHorizontalGridLines(value) {\n    this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.SHOW_HORIZONTAL_GRID_LINES, String(value));\n    this.redraw();\n  }\n  get showHorizontalGridLines() {\n    const value = this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.SHOW_HORIZONTAL_GRID_LINES);\n    return value !== null ? (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(value) : !this.horizontal;\n  }\n  /**\n   * Utility function to get the colors series being used in this chart\n   * @returns {Array} The colors being used on this instance.\n   */\n  get colors() {\n    return _ids_chart_colors__WEBPACK_IMPORTED_MODULE_4__.QUALITATIVE_COLORS;\n  }\n  /**\n   * Get the color to use based on the index for sequential and custom colors\n   * @param {number} index The current index\n   * @returns {string} The color to use\n   * @private\n   */\n  color(index) {\n    if (this.data[index].patternColor) {\n      return this.data[index].patternColor;\n    }\n    return `var(${this.data[index].color ? `color-${index + 1}` : this.colors[index]})`;\n  }\n  /**\n   * Set the format on the x axis items\n   * @param {Function} value A string with the formatting routine or a function for more customization.\n   */\n  set xAxisFormatter(value) {\n    this.state.xAxisFormatter = value;\n    this.redraw();\n  }\n  get xAxisFormatter() {\n    return this.state.xAxisFormatter;\n  }\n  /**\n   * Set the format on the y axis items\n   * @param {string|Function} value A string with the formatting routine or a function for more customization.\n   */\n  set yAxisFormatter(value) {\n    this.state.yAxisFormatter = value;\n    this.redraw();\n  }\n  get yAxisFormatter() {\n    return this.state.yAxisFormatter;\n  }\n  /**\n   * Reanimate the chart\n   */\n  reanimate() {\n    if (!this.animated || !this.initialized) {\n      return;\n    }\n    requestAnimationFrame(() => {\n      this.container?.querySelectorAll(\"animate\").forEach((elem) => {\n        if (elem.beginElement) {\n          elem.beginElement();\n        }\n      });\n      this.container?.querySelectorAll(\"animateTransform\").forEach((elem) => {\n        if (elem.beginElement) {\n          elem.beginElement();\n        }\n      });\n    });\n  }\n  /**\n   * Get a reusable snippet to ease the animation\n   * @private\n   * @returns {string} The reusable snippet\n   */\n  get cubicBezier() {\n    return `calcMode=\"spline\" keyTimes=\"0; 1\" keySplines=\"0.17, 0.04, 0.03, 0.94\" begin=\"0s\" dur=\"${this.animationSpeed}s\"`;\n  }\n  /**\n   * Set the animation on/off\n   * @param {boolean} value True if animation is on\n   */\n  set animated(value) {\n    const animated = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(this.animated);\n    this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.ANIMATED, String(value));\n    this.redraw();\n    if (animated) {\n      this.reanimate();\n    }\n  }\n  get animated() {\n    const animated = this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.ANIMATED);\n    if (animated === null) {\n      return true;\n    }\n    return (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.ANIMATED));\n  }\n  /**\n   * Set the animation speed in s\n   * @param {number} value The speed in s\n   */\n  set animationSpeed(value) {\n    this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.ANIMATION_SPEED, String(value));\n    if (this.animated) {\n      this.reanimate();\n    }\n  }\n  get animationSpeed() {\n    return parseFloat(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.ANIMATION_SPEED) ?? \"\") || 0.8;\n  }\n  /**\n   * Set the x axis label alignment between start, middle and end\n   * @param {string} value start, middle or end\n   */\n  set alignXLabels(value) {\n    this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.ALIGN_X_LABELS, value);\n    this.redraw();\n  }\n  get alignXLabels() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.ALIGN_X_LABELS) || \"start\";\n  }\n  /**\n   * Stack the data forming a stacked bar chart\n   * @param {boolean} value True to stack the data\n   */\n  set stacked(value) {\n    this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.STACKED, String(value));\n    this.redraw();\n  }\n  get stacked() {\n    return (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.STACKED)) || false;\n  }\n  /**\n   * Set the bottom axis label text\n   * @param {string} value of the text\n   */\n  set axisLabelBottom(value) {\n    if (value) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.AXIS_LABEL_BOTTOM, value);\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.AXIS_LABEL_BOTTOM);\n    }\n    this.#setAxisLabels(\"bottom\");\n  }\n  get axisLabelBottom() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.AXIS_LABEL_BOTTOM);\n  }\n  /**\n   * Set the end axis label text\n   * @param {string} value of the text\n   */\n  set axisLabelEnd(value) {\n    if (value) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.AXIS_LABEL_END, value);\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.AXIS_LABEL_END);\n    }\n    this.#setAxisLabels(\"end\");\n  }\n  get axisLabelEnd() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.AXIS_LABEL_END);\n  }\n  /**\n   * Set the margin for axis label text\n   * @param {string|number} value of the margin\n   */\n  set axisLabelMargin(value) {\n    const val = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToNumber)(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.AXIS_LABEL_MARGIN));\n    if (!Number.isNaN(val)) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.AXIS_LABEL_MARGIN, String(val));\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.AXIS_LABEL_MARGIN);\n    }\n    this.#setAxisLabels(\"end\");\n  }\n  get axisLabelMargin() {\n    const value = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToNumber)(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.AXIS_LABEL_MARGIN));\n    return !Number.isNaN(value) ? value : 16;\n  }\n  /**\n   * Set the start axis label text\n   * @param {string} value of the text\n   */\n  set axisLabelStart(value) {\n    if (value) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.AXIS_LABEL_START, value);\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.AXIS_LABEL_START);\n    }\n    this.#setAxisLabels(\"start\");\n  }\n  get axisLabelStart() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.AXIS_LABEL_START);\n  }\n  /**\n   * Set the top axis label text\n   * @param {string} value of the text\n   */\n  set axisLabelTop(value) {\n    if (value) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.AXIS_LABEL_TOP, value);\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.AXIS_LABEL_TOP);\n    }\n    this.#setAxisLabels(\"top\");\n  }\n  get axisLabelTop() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.AXIS_LABEL_TOP);\n  }\n  /**\n   * Set the rotation for the axis name label text (eg 45deg)\n   * @param {number} value the number of degrees to rotate the text\n   */\n  set rotateNameLabels(value) {\n    if (value) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.ROTATE_NAME_LABELS, String(value));\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.ROTATE_NAME_LABELS);\n    }\n    if (this.initialized)\n      this.redraw();\n  }\n  get rotateNameLabels() {\n    return Number(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.ROTATE_NAME_LABELS)) || 0;\n  }\n};\nIdsAxisChart = __decorateClass([\n  (0,_core_ids_decorators__WEBPACK_IMPORTED_MODULE_1__.customElement)(\"ids-axis-chart\"),\n  (0,_core_ids_decorators__WEBPACK_IMPORTED_MODULE_1__.scss)(_ids_axis_chart_scss__WEBPACK_IMPORTED_MODULE_17__[\"default\"])\n], IdsAxisChart);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/ids-axis-chart/ids-axis-chart.ts\n");

/***/ }),

/***/ "./src/components/ids-axis-chart/ids-nice-scale.ts":
/*!*********************************************************!*\
  !*** ./src/components/ids-axis-chart/ids-nice-scale.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ NiceScale)\n/* harmony export */ });\nclass NiceScale {\n  /** The calculated or provided min value to show */\n  #minPoint;\n  /** The calculated or provided max value */\n  #maxPoint;\n  /** The calculated or provided max ticks */\n  #maxTicks = 10;\n  /** The calculated tick spacing */\n  #range;\n  /** The calculated tick spacing */\n  tickSpacing;\n  /** The calculated nice min value */\n  niceMin;\n  /** The calculated nice max value */\n  niceMax;\n  /**\n   * Instantiates a new instance of the NiceScale class.\n   * @param {number} min the minimum data point on the axis\n   * @param {number} max the maximum data point on the axis\n   * @param {object} options Additional less used options (maxTicks, minPoint, maxPoint)\n   */\n  constructor(min, max, options) {\n    this.niceMax = 0;\n    this.niceMin = 0;\n    this.#maxTicks = options?.maxTicks || 10;\n    this.#maxTicks = options?.maxTicks || 10;\n    this.#minPoint = options?.minPoint || min;\n    this.#maxPoint = options?.maxPoint || max;\n    this.#calculate();\n  }\n  /**\n   * Calculate and update values for tick spacing and nice\n   * minimum and maximum data points on the axis.\n   */\n  #calculate() {\n    this.#range = this.#niceNum(this.#maxPoint - this.#minPoint, false);\n    this.tickSpacing = this.#niceNum(this.#range / (this.#maxTicks - 1), true);\n    this.niceMin = Math.floor(this.#minPoint / this.tickSpacing) * this.tickSpacing;\n    this.niceMax = Math.ceil(this.#maxPoint / this.tickSpacing) * this.tickSpacing;\n  }\n  /**\n   * Returns a \"nice\" number approximately equal to range Rounds\n   * the number if round = true Takes the ceiling if round = false.\n   * @param {number} range the data range\n   * @param {boolean} round whether to round the result\n   * @returns {boolean} a \"nice\" number to be used for the data range\n   */\n  #niceNum(range, round) {\n    let niceFraction;\n    const exponent = Math.floor(Math.log10(range));\n    const fraction = range / 10 ** exponent;\n    if (round) {\n      if (fraction < 1.5) {\n        niceFraction = 1;\n      } else if (fraction < 3) {\n        niceFraction = 2;\n      } else if (fraction < 7) {\n        niceFraction = 5;\n      } else {\n        niceFraction = 10;\n      }\n    } else if (fraction <= 1)\n      niceFraction = 1;\n    else if (fraction <= 2)\n      niceFraction = 2;\n    else if (fraction <= 5)\n      niceFraction = 5;\n    else\n      niceFraction = 10;\n    return niceFraction * 10 ** exponent;\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9pZHMtYXhpcy1jaGFydC9pZHMtbmljZS1zY2FsZS50cy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBWUEsTUFBTyxVQUF3QjtBQUFBO0FBQUEsRUFFN0I7QUFBQTtBQUFBLEVBR0E7QUFBQTtBQUFBLEVBR0EsWUFBWTtBQUFBO0FBQUEsRUFHWjtBQUFBO0FBQUEsRUFHQTtBQUFBO0FBQUEsRUFHQTtBQUFBO0FBQUEsRUFHQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBUUEsWUFBWSxLQUFhLEtBQWEsU0FBMkI7QUFDL0QsU0FBSyxVQUFVO0FBQ2YsU0FBSyxVQUFVO0FBQ2YsU0FBSyxZQUFZLFNBQVMsWUFBWTtBQUN0QyxTQUFLLFlBQVksU0FBUyxZQUFZO0FBQ3RDLFNBQUssWUFBWSxTQUFTLFlBQVk7QUFDdEMsU0FBSyxZQUFZLFNBQVMsWUFBWTtBQUN0QyxTQUFLLFdBQVc7QUFBQSxFQUNsQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNQSxhQUFhO0FBQ1gsU0FBSyxTQUFTLEtBQUssU0FBUyxLQUFLLFlBQVksS0FBSyxXQUFXLEtBQUs7QUFDbEUsU0FBSyxjQUFjLEtBQUssU0FBUyxLQUFLLFVBQVUsS0FBSyxZQUFZLElBQUksSUFBSTtBQUN6RSxTQUFLLFVBQVUsS0FBSyxNQUFNLEtBQUssWUFBWSxLQUFLLFdBQVcsSUFBSSxLQUFLO0FBQ3BFLFNBQUssVUFBVSxLQUFLLEtBQUssS0FBSyxZQUFZLEtBQUssV0FBVyxJQUFJLEtBQUs7QUFBQSxFQUNyRTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFTQSxTQUFTLE9BQWUsT0FBZ0I7QUFDdEMsUUFBSTtBQUVKLFVBQU0sV0FBVyxLQUFLLE1BQU0sS0FBSyxNQUFNLEtBQUssQ0FBQztBQUM3QyxVQUFNLFdBQVcsUUFBUSxNQUFNO0FBRS9CLFFBQUksT0FBTztBQUNULFVBQUksV0FBVyxLQUFLO0FBQ2xCLHVCQUFlO0FBQUEsTUFDakIsV0FBVyxXQUFXLEdBQUc7QUFDdkIsdUJBQWU7QUFBQSxNQUNqQixXQUFXLFdBQVcsR0FBRztBQUN2Qix1QkFBZTtBQUFBLE1BQ2pCLE9BQU87QUFDTCx1QkFBZTtBQUFBLE1BQ2pCO0FBQUEsSUFDRixXQUFXLFlBQVk7QUFBRyxxQkFBZTtBQUFBLGFBQ2hDLFlBQVk7QUFBRyxxQkFBZTtBQUFBLGFBQzlCLFlBQVk7QUFBRyxxQkFBZTtBQUFBO0FBQ2xDLHFCQUFlO0FBRXBCLFdBQU8sZUFBZSxNQUFNO0FBQUEsRUFDOUI7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2lkcy1lbnRlcnByaXNlLXdjLy4vc3JjL2NvbXBvbmVudHMvaWRzLWF4aXMtY2hhcnQvaWRzLW5pY2Utc2NhbGUudHM/MWRhNSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgaW50ZXJmYWNlIElkc1NjYWxlT3B0aW9ucyB7XG4gIC8qIFRoZSBtYXggdGlja3MgdG8gc2hvdyAqL1xuICBtYXhUaWNrcz86IG51bWJlcjtcbiAgLyoqIFRoZSBtaW4gdmFsdWUgdG8gc2hvdyAqL1xuICBtaW5Qb2ludD86IG51bWJlcjtcbiAgLyoqIFRoZSBtYXggdmFsdWUgdG8gc2hvdyAqL1xuICBtYXhQb2ludD86IG51bWJlcjtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGVzIGEgbmljZSBzY2FsZSByYW5nZSBmb3IgYSBwYWlyIG9mIHZhbHVlcy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTmljZVNjYWxlIHtcbiAgLyoqIFRoZSBjYWxjdWxhdGVkIG9yIHByb3ZpZGVkIG1pbiB2YWx1ZSB0byBzaG93ICovXG4gICNtaW5Qb2ludDogbnVtYmVyO1xuXG4gIC8qKiBUaGUgY2FsY3VsYXRlZCBvciBwcm92aWRlZCBtYXggdmFsdWUgKi9cbiAgI21heFBvaW50OiBudW1iZXI7XG5cbiAgLyoqIFRoZSBjYWxjdWxhdGVkIG9yIHByb3ZpZGVkIG1heCB0aWNrcyAqL1xuICAjbWF4VGlja3MgPSAxMDtcblxuICAvKiogVGhlIGNhbGN1bGF0ZWQgdGljayBzcGFjaW5nICovXG4gICNyYW5nZT86IG51bWJlcjtcblxuICAvKiogVGhlIGNhbGN1bGF0ZWQgdGljayBzcGFjaW5nICovXG4gIHRpY2tTcGFjaW5nPzogbnVtYmVyO1xuXG4gIC8qKiBUaGUgY2FsY3VsYXRlZCBuaWNlIG1pbiB2YWx1ZSAqL1xuICBuaWNlTWluOiBudW1iZXI7XG5cbiAgLyoqIFRoZSBjYWxjdWxhdGVkIG5pY2UgbWF4IHZhbHVlICovXG4gIG5pY2VNYXg6IG51bWJlcjtcblxuICAvKipcbiAgICogSW5zdGFudGlhdGVzIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBOaWNlU2NhbGUgY2xhc3MuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtaW4gdGhlIG1pbmltdW0gZGF0YSBwb2ludCBvbiB0aGUgYXhpc1xuICAgKiBAcGFyYW0ge251bWJlcn0gbWF4IHRoZSBtYXhpbXVtIGRhdGEgcG9pbnQgb24gdGhlIGF4aXNcbiAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgQWRkaXRpb25hbCBsZXNzIHVzZWQgb3B0aW9ucyAobWF4VGlja3MsIG1pblBvaW50LCBtYXhQb2ludClcbiAgICovXG4gIGNvbnN0cnVjdG9yKG1pbjogbnVtYmVyLCBtYXg6IG51bWJlciwgb3B0aW9ucz86IElkc1NjYWxlT3B0aW9ucykge1xuICAgIHRoaXMubmljZU1heCA9IDA7XG4gICAgdGhpcy5uaWNlTWluID0gMDtcbiAgICB0aGlzLiNtYXhUaWNrcyA9IG9wdGlvbnM/Lm1heFRpY2tzIHx8IDEwO1xuICAgIHRoaXMuI21heFRpY2tzID0gb3B0aW9ucz8ubWF4VGlja3MgfHwgMTA7XG4gICAgdGhpcy4jbWluUG9pbnQgPSBvcHRpb25zPy5taW5Qb2ludCB8fCBtaW47XG4gICAgdGhpcy4jbWF4UG9pbnQgPSBvcHRpb25zPy5tYXhQb2ludCB8fCBtYXg7XG4gICAgdGhpcy4jY2FsY3VsYXRlKCk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIGFuZCB1cGRhdGUgdmFsdWVzIGZvciB0aWNrIHNwYWNpbmcgYW5kIG5pY2VcbiAgICogbWluaW11bSBhbmQgbWF4aW11bSBkYXRhIHBvaW50cyBvbiB0aGUgYXhpcy5cbiAgICovXG4gICNjYWxjdWxhdGUoKSB7XG4gICAgdGhpcy4jcmFuZ2UgPSB0aGlzLiNuaWNlTnVtKHRoaXMuI21heFBvaW50IC0gdGhpcy4jbWluUG9pbnQsIGZhbHNlKTtcbiAgICB0aGlzLnRpY2tTcGFjaW5nID0gdGhpcy4jbmljZU51bSh0aGlzLiNyYW5nZSAvICh0aGlzLiNtYXhUaWNrcyAtIDEpLCB0cnVlKTtcbiAgICB0aGlzLm5pY2VNaW4gPSBNYXRoLmZsb29yKHRoaXMuI21pblBvaW50IC8gdGhpcy50aWNrU3BhY2luZykgKiB0aGlzLnRpY2tTcGFjaW5nO1xuICAgIHRoaXMubmljZU1heCA9IE1hdGguY2VpbCh0aGlzLiNtYXhQb2ludCAvIHRoaXMudGlja1NwYWNpbmcpICogdGhpcy50aWNrU3BhY2luZztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgXCJuaWNlXCIgbnVtYmVyIGFwcHJveGltYXRlbHkgZXF1YWwgdG8gcmFuZ2UgUm91bmRzXG4gICAqIHRoZSBudW1iZXIgaWYgcm91bmQgPSB0cnVlIFRha2VzIHRoZSBjZWlsaW5nIGlmIHJvdW5kID0gZmFsc2UuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSByYW5nZSB0aGUgZGF0YSByYW5nZVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHJvdW5kIHdoZXRoZXIgdG8gcm91bmQgdGhlIHJlc3VsdFxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gYSBcIm5pY2VcIiBudW1iZXIgdG8gYmUgdXNlZCBmb3IgdGhlIGRhdGEgcmFuZ2VcbiAgICovXG4gICNuaWNlTnVtKHJhbmdlOiBudW1iZXIsIHJvdW5kOiBib29sZWFuKSB7XG4gICAgbGV0IG5pY2VGcmFjdGlvbjsgLyoqIG5pY2UsIHJvdW5kZWQgZnJhY3Rpb24gKi9cblxuICAgIGNvbnN0IGV4cG9uZW50ID0gTWF0aC5mbG9vcihNYXRoLmxvZzEwKHJhbmdlKSk7XG4gICAgY29uc3QgZnJhY3Rpb24gPSByYW5nZSAvIDEwICoqIGV4cG9uZW50O1xuXG4gICAgaWYgKHJvdW5kKSB7XG4gICAgICBpZiAoZnJhY3Rpb24gPCAxLjUpIHtcbiAgICAgICAgbmljZUZyYWN0aW9uID0gMTtcbiAgICAgIH0gZWxzZSBpZiAoZnJhY3Rpb24gPCAzKSB7XG4gICAgICAgIG5pY2VGcmFjdGlvbiA9IDI7XG4gICAgICB9IGVsc2UgaWYgKGZyYWN0aW9uIDwgNykge1xuICAgICAgICBuaWNlRnJhY3Rpb24gPSA1O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmljZUZyYWN0aW9uID0gMTA7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChmcmFjdGlvbiA8PSAxKSBuaWNlRnJhY3Rpb24gPSAxO1xuICAgIGVsc2UgaWYgKGZyYWN0aW9uIDw9IDIpIG5pY2VGcmFjdGlvbiA9IDI7XG4gICAgZWxzZSBpZiAoZnJhY3Rpb24gPD0gNSkgbmljZUZyYWN0aW9uID0gNTtcbiAgICBlbHNlIG5pY2VGcmFjdGlvbiA9IDEwO1xuXG4gICAgcmV0dXJuIG5pY2VGcmFjdGlvbiAqIDEwICoqIGV4cG9uZW50O1xuICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/components/ids-axis-chart/ids-nice-scale.ts\n");

/***/ }),

/***/ "./src/utils/ids-debounce-utils/ids-debounce-utils.ts":
/*!************************************************************!*\
  !*** ./src/utils/ids-debounce-utils/ids-debounce-utils.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ debounce)\n/* harmony export */ });\nfunction debounce(func, threshold, execAsap) {\n  let timeout;\n  return function debounced(...args) {\n    const obj = this;\n    const path = args[0]?.composedPath?.();\n    if (path?.length)\n      args[0].orignPath = path;\n    const delayed = () => {\n      if (!execAsap) {\n        func.apply(obj, args);\n      }\n      timeout = null;\n    };\n    if (timeout) {\n      clearTimeout(timeout);\n    } else if (execAsap) {\n      func.apply(obj, args);\n    }\n    timeout = setTimeout(delayed, threshold || 250);\n  };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvaWRzLWRlYm91bmNlLXV0aWxzL2lkcy1kZWJvdW5jZS11dGlscy50cy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBU2UsU0FBUixTQUNMLE1BQ0EsV0FDQSxVQUNLO0FBQ0wsTUFBSTtBQUVKLFNBQU8sU0FBUyxhQUF3QixNQUFhO0FBQ25ELFVBQU0sTUFBTTtBQUNaLFVBQU0sT0FBTyxLQUFLLENBQUMsR0FBRyxlQUFlO0FBQ3JDLFFBQUksTUFBTTtBQUFRLFdBQUssQ0FBQyxFQUFFLFlBQVk7QUFDdEMsVUFBTSxVQUFVLE1BQU07QUFDcEIsVUFBSSxDQUFDLFVBQVU7QUFDYixhQUFLLE1BQU0sS0FBSyxJQUFJO0FBQUEsTUFDdEI7QUFDQSxnQkFBVTtBQUFBLElBQ1o7QUFFQSxRQUFJLFNBQVM7QUFDWCxtQkFBYSxPQUFPO0FBQUEsSUFDdEIsV0FBVyxVQUFVO0FBQ25CLFdBQUssTUFBTSxLQUFLLElBQUk7QUFBQSxJQUN0QjtBQUVBLGNBQVUsV0FBVyxTQUFTLGFBQWEsR0FBRztBQUFBLEVBQ2hEO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pZHMtZW50ZXJwcmlzZS13Yy8uL3NyYy91dGlscy9pZHMtZGVib3VuY2UtdXRpbHMvaWRzLWRlYm91bmNlLXV0aWxzLnRzPzVlNjIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBEZWJvdW5jZSBtZXRob2QgY2FsbGVkIG9ubHkgb25jZSBpbiBhIGdpdmVuIHRpbWUgcGVyaW9kLCBkZWxheSBhZnRlciBpdHMgbGFzdCBpbnZvY2F0aW9uLlxuICogQHBhcmFtIHtvYmplY3R9IGZ1bmMgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGJlIHJ1biBvbiBhIHN0YWdnZXIuXG4gKiBAcGFyYW0ge29iamVjdH0gZnVuYy5hcHBseSB0aGUgYXBwbHkgbWV0aG9kIGZvciBnaXZlbiBjYWxsYmFjay5cbiAqIEBwYXJhbSB7bnVtYmVyfSB0aHJlc2hvbGQgdGhlIGFtb3VudCBvZiB0aW1lIGluIENQVSB0aWNrcyB0byBkZWxheS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gZXhlY0FzYXAgaWYgdHJ1ZSwgZXhlY3V0ZXMgdGhlIGNhbGxiYWNrIGltbWVkaWF0ZWx5XG4gKiAgaW5zdGVhZCBvZiB3YWl0aW5nIGZvciB0aGUgdGhyZXNob2xkIHRvIGNvbXBsZXRlLlxuICogQHJldHVybnMge29iamVjdH0gdGhlIHJldHVybiBkZWJvdW5jZWQgY2FsbGJhY2sgdG8gcnVuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlYm91bmNlKFxuICBmdW5jOiB7IGFwcGx5OiAoYXJnMDogYW55LCBhcmcxOiBhbnlbXSkgPT4gdm9pZDsgfSxcbiAgdGhyZXNob2xkOiBudW1iZXIsXG4gIGV4ZWNBc2FwPzogYm9vbGVhblxuKTogYW55IHtcbiAgbGV0IHRpbWVvdXQ6IGFueTtcblxuICByZXR1cm4gZnVuY3Rpb24gZGVib3VuY2VkKHRoaXM6IGFueSwgLi4uYXJnczogYW55W10pIHtcbiAgICBjb25zdCBvYmogPSB0aGlzO1xuICAgIGNvbnN0IHBhdGggPSBhcmdzWzBdPy5jb21wb3NlZFBhdGg/LigpO1xuICAgIGlmIChwYXRoPy5sZW5ndGgpIGFyZ3NbMF0ub3JpZ25QYXRoID0gcGF0aDtcbiAgICBjb25zdCBkZWxheWVkID0gKCkgPT4ge1xuICAgICAgaWYgKCFleGVjQXNhcCkge1xuICAgICAgICBmdW5jLmFwcGx5KG9iaiwgYXJncyk7XG4gICAgICB9XG4gICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgaWYgKHRpbWVvdXQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICB9IGVsc2UgaWYgKGV4ZWNBc2FwKSB7XG4gICAgICBmdW5jLmFwcGx5KG9iaiwgYXJncyk7XG4gICAgfVxuXG4gICAgdGltZW91dCA9IHNldFRpbWVvdXQoZGVsYXllZCwgdGhyZXNob2xkIHx8IDI1MCk7XG4gIH07XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/utils/ids-debounce-utils/ids-debounce-utils.ts\n");

/***/ }),

/***/ "./src/utils/ids-object-utils/ids-object-utils.ts":
/*!********************************************************!*\
  !*** ./src/utils/ids-object-utils/ids-object-utils.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"calculateTextRenderWidth\": () => (/* binding */ calculateTextRenderWidth),\n/* harmony export */   \"isObject\": () => (/* binding */ isObject),\n/* harmony export */   \"isObjectAndNotEmpty\": () => (/* binding */ isObjectAndNotEmpty)\n/* harmony export */ });\nfunction isObject(obj) {\n  return obj instanceof Object && !(obj instanceof Number) && !(obj instanceof Array);\n}\nfunction isObjectAndNotEmpty(obj) {\n  return isObject(obj) && Object.keys(obj).length > 0;\n}\nfunction calculateTextRenderWidth(obj, text, font = \"400 16px arial\") {\n  obj.canvas = obj.canvas || document.createElement(\"canvas\");\n  const context = obj.canvas.getContext(\"2d\");\n  context.font = font;\n  return context.measureText(text).width;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvaWRzLW9iamVjdC11dGlscy9pZHMtb2JqZWN0LXV0aWxzLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUtPLFNBQVMsU0FBUyxLQUFtQjtBQUMxQyxTQUFPLGVBQWUsVUFBVSxFQUFFLGVBQWUsV0FBVyxFQUFFLGVBQWU7QUFDL0U7QUFPTyxTQUFTLG9CQUFvQixLQUFtQjtBQUNyRCxTQUFPLFNBQVMsR0FBRyxLQUFLLE9BQU8sS0FBSyxHQUFHLEVBQUUsU0FBUztBQUNwRDtBQVVPLFNBQVMseUJBQXlCLEtBQVUsTUFBYyxPQUFPLGtCQUEwQjtBQUNoRyxNQUFJLFNBQVMsSUFBSSxVQUFVLFNBQVMsY0FBYyxRQUFRO0FBQzFELFFBQU0sVUFBVSxJQUFJLE9BQU8sV0FBVyxJQUFJO0FBQzFDLFVBQVEsT0FBTztBQUNmLFNBQU8sUUFBUSxZQUFZLElBQUksRUFBRTtBQUNuQyIsInNvdXJjZXMiOlsid2VicGFjazovL2lkcy1lbnRlcnByaXNlLXdjLy4vc3JjL3V0aWxzL2lkcy1vYmplY3QtdXRpbHMvaWRzLW9iamVjdC11dGlscy50cz8zZTBiIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ2hlY2sgd2hldGhlciB0aGUgZ2l2ZW4gb2JqZWN0IGlzIGFuIG9iamVjdCBvciBub3QuXG4gKiBAcGFyYW0ge2FueX0gb2JqIFRoZSBvYmplY3QgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiBnaXZlbiBvYmplY3QgaXMgYW4gb2JqZWN0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNPYmplY3Qob2JqOiBhbnkpOiBib29sZWFuIHtcbiAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIE9iamVjdCAmJiAhKG9iaiBpbnN0YW5jZW9mIE51bWJlcikgJiYgIShvYmogaW5zdGFuY2VvZiBBcnJheSk7XG59XG5cbi8qKlxuICogQ2hlY2sgdGhlIGdpdmVuIG9iamVjdCBpcyBhbiBvYmplY3QgYW5kIE5PVCBlbXB0eS5cbiAqIEBwYXJhbSB7YW55fSBvYmogVGhlIG9iamVjdCB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIGdpdmVuIG9iamVjdCBpcyBhbiBvYmplY3QgYW5kIE5PVCBlbXB0eS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzT2JqZWN0QW5kTm90RW1wdHkob2JqOiBhbnkpOiBib29sZWFuIHtcbiAgcmV0dXJuIGlzT2JqZWN0KG9iaikgJiYgT2JqZWN0LmtleXMob2JqKS5sZW5ndGggPiAwO1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIHdpZHRoIHRvIHJlbmRlciBnaXZlbiB0ZXh0IHN0cmluZy5cbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0gIHtvYmplY3R9IG9iaiBUaGUgdXNlZCBvYmplY3QuXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHRleHQgVGhlIHRleHQgdG8gcmVuZGVyLlxuICogQHBhcmFtICB7c3RyaW5nfSBmb250IFRoZSBmb250IHZhbHVlLlxuICogQHJldHVybnMge251bWJlcn0gQ2FsY3VsYXRlZCB0ZXh0IHdpZHRoIGluIHBpeGVscy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZVRleHRSZW5kZXJXaWR0aChvYmo6IGFueSwgdGV4dDogc3RyaW5nLCBmb250ID0gJzQwMCAxNnB4IGFyaWFsJyk6IG51bWJlciB7XG4gIG9iai5jYW52YXMgPSBvYmouY2FudmFzIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICBjb25zdCBjb250ZXh0ID0gb2JqLmNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICBjb250ZXh0LmZvbnQgPSBmb250O1xuICByZXR1cm4gY29udGV4dC5tZWFzdXJlVGV4dCh0ZXh0KS53aWR0aDtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/utils/ids-object-utils/ids-object-utils.ts\n");

/***/ }),

/***/ "./src/components/ids-axis-chart/ids-axis-chart.scss":
/*!***********************************************************!*\
  !*** ./src/components/ids-axis-chart/ids-axis-chart.scss ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n\n        const styles = `/* Ids Line Chart Component */ /* Sass scss styles. Keep Base very small */\n/* Global variables (might want these to become tokens) */\n.chart-legend {\n  display: flex;\n  padding-inline-start: 8px;\n  flex-direction: row;\n  margin-top: -4px;\n  justify-content: flex-start;\n  width: inherit;\n}\n.chart-legend a {\n  display: flex;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  font-family: source sans pro, helvetica, arial, sans-serif;\n  font-size: 14px;\n  color: var(--ids-color-palette-slate-60);\n  padding-inline-start: 8px;\n  padding-inline-end: 8px;\n  padding-top: 2px;\n  padding-bottom: 2px;\n  align-items: center;\n  border: 1px solid transparent;\n  text-decoration: none;\n}\n.chart-legend a:focus {\n  outline: 0;\n  border-color: var(--ids-color-palette-azure-60);\n  box-shadow: 0 0 4px 3px rgba(54, 138, 192, 0.3);\n}\n.chart-legend .swatch {\n  display: inline-flex;\n  margin-inline-end: 8px;\n  height: 12px;\n  width: 12px;\n}\n.chart-legend .swatch.color-1 {\n  background-color: var(--ids-chart-color-1);\n}\n.chart-legend .swatch.color-2 {\n  background-color: var(--ids-chart-color-2);\n}\n.chart-legend .swatch.color-3 {\n  background-color: var(--ids-chart-color-3);\n}\n.chart-legend .swatch.color-4 {\n  background-color: var(--ids-chart-color-4);\n}\n.chart-legend .swatch.color-5 {\n  background-color: var(--ids-chart-color-5);\n}\n.chart-legend .swatch.color-6 {\n  background-color: var(--ids-chart-color-6);\n}\n.chart-legend .swatch.color-7 {\n  background-color: var(--ids-chart-color-7);\n}\n.chart-legend .swatch.color-8 {\n  background-color: var(--ids-chart-color-8);\n}\n.chart-legend .swatch.color-9 {\n  background-color: var(--ids-chart-color-9);\n}\n.chart-legend .swatch.color-10 {\n  background-color: var(--ids-chart-color-10);\n}\n.chart-legend .swatch.color-11 {\n  background-color: var(--ids-chart-color-11);\n}\n.chart-legend .swatch.color-12 {\n  background-color: var(--ids-chart-color-12);\n}\n.chart-legend .swatch.color-13 {\n  background-color: var(--ids-chart-color-13);\n}\n.chart-legend .swatch.color-14 {\n  background-color: var(--ids-chart-color-14);\n}\n.chart-legend .swatch.color-15 {\n  background-color: var(--ids-chart-color-15);\n}\n.chart-legend .swatch.color-16 {\n  background-color: var(--ids-chart-color-16);\n}\n.chart-legend .swatch.color-17 {\n  background-color: var(--ids-chart-color-17);\n}\n.chart-legend .swatch.color-18 {\n  background-color: var(--ids-chart-color-18);\n}\n.chart-legend .swatch.color-19 {\n  background-color: var(--ids-chart-color-19);\n}\n.chart-legend .swatch.color-20 {\n  background-color: var(--ids-chart-color-20);\n}\n.chart-legend .swatch.color-21 {\n  background-color: var(--ids-chart-color-21);\n}\n\n.ids-chart-container {\n  display: flex;\n  flex-direction: column;\n}\n.ids-chart-container.legend-top {\n  margin-bottom: 8px;\n  flex-direction: column-reverse;\n}\n.ids-chart-container.legend-top .chart-legend {\n  margin-inline-start: 0;\n  justify-content: end;\n}\n.ids-chart-container.legend-right, .ids-chart-container.legend-left {\n  flex-direction: row;\n}\n.ids-chart-container.legend-right .chart-legend, .ids-chart-container.legend-left .chart-legend {\n  margin-inline-start: 0;\n  flex-direction: column;\n  justify-content: center;\n}\n.ids-chart-container.legend-right .chart-legend a, .ids-chart-container.legend-left .chart-legend a {\n  margin-bottom: 8px;\n  width: max-content;\n}\n.ids-chart-container.legend-left {\n  flex-direction: row-reverse;\n}\n\n:host([mode=dark]) .chart-legend a {\n  color: var(--ids-color-palette-slate-10);\n}\n\n:root {\n  --ids-chart-color-1: var(--ids-color-palette-azure-80);\n  --ids-chart-color-2: var(--ids-color-palette-turquoise-40);\n  --ids-chart-color-3: var(--ids-color-palette-amethyst-60);\n  --ids-chart-color-4: var(--ids-color-palette-slate-40);\n  --ids-chart-color-5: var(--ids-color-palette-slate-40);\n  --ids-chart-color-6: var(--ids-color-palette-amber-30);\n  --ids-chart-color-7: var(--ids-color-palette-amber-70);\n  --ids-chart-color-8: var(--ids-color-palette-emerald-80);\n  --ids-chart-color-9: var(--ids-color-palette-azure-30);\n  --ids-chart-color-10: var(--ids-color-palette-ruby-80);\n  --ids-chart-color-11: var(--ids-color-palette-slate-20);\n  --ids-chart-color-12: var(--ids-color-palette-turquoise-60);\n  --ids-chart-color-13: var(--ids-color-palette-amber-90);\n  --ids-chart-color-14: var(--ids-color-palette-amethyst-30);\n  --ids-chart-color-15: var(--ids-color-palette-azure-60);\n  --ids-chart-color-16: var(--ids-color-palette-ruby-30);\n  --ids-chart-color-17: var(--ids-color-palette-amethyst-80);\n  --ids-chart-color-18: var(--ids-color-palette-emerald-30);\n  --ids-chart-color-19: var(--ids-color-palette-turquoise-80);\n  --ids-chart-color-20: var(--ids-color-palette-slate-60);\n  --ids-chart-color-21: var(--ids-color-palette-ruby-40);\n}\n\n.ids-axis-chart {\n  border-color: var(--ids-color-palette-slate-10);\n  display: flex;\n}\n.ids-axis-chart.hidden {\n  display: none;\n}\n.ids-axis-chart .grid {\n  shape-rendering: crispedges;\n  stroke: var(--ids-color-palette-slate-20);\n  stroke-width: 1;\n  stroke-dasharray: 2 2;\n}\n.ids-axis-chart .grid.horizontal-lines line:last-child {\n  stroke: var(--ids-color-palette-slate-70);\n  stroke-dasharray: none;\n}\n.ids-axis-chart .grid.hidden {\n  stroke-width: 0;\n}\n.ids-axis-chart.horizontal .grid.horizontal-lines line:last-child {\n  stroke: inherit;\n  stroke-dasharray: inherit;\n}\n.ids-axis-chart.horizontal .grid.vertical-lines line:first-child {\n  stroke: var(--ids-color-palette-slate-70);\n  stroke-dasharray: none;\n}\n.ids-axis-chart g[tabindex=\"0\"]:focus {\n  outline: 2px dashed var(--ids-color-palette-azure-60);\n}\n.ids-axis-chart .labels {\n  font-size: 14px;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  font-family: source sans pro, helvetica, arial, sans-serif;\n}\n.ids-axis-chart .labels text {\n  fill: var(--ids-color-palette-slate-60);\n}\n.ids-axis-chart .labels.x-labels {\n  text-anchor: middle;\n}\n.ids-axis-chart .labels.y-labels {\n  text-anchor: end;\n}\n.ids-axis-chart .labels.axis-labels text {\n  font-weight: 700;\n  text-anchor: middle;\n}\n.ids-axis-chart .audible {\n  opacity: 0;\n}\n\n.ids-chart-container.selectable .audible {\n  font-size: 1px;\n}\n\nids-empty-message:not([hidden]),\n::slotted(ids-empty-message:not([hidden])) {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n}\nids-empty-message:not([hidden])[hidden],\n::slotted(ids-empty-message:not([hidden]))[hidden] {\n  display: none;\n}\n\n.tooltip-center {\n  margin-top: 4px;\n  margin-bottom: 4px;\n  text-align: center;\n}\n\n.tooltip.chart-legend {\n  margin-bottom: 8px;\n  flex-direction: column;\n  padding: 0;\n}\n.tooltip.chart-legend .swatch {\n  margin-inline-start: 4px;\n  margin-inline-end: 4px;\n  padding: 0;\n}\n\n.tooltip-row span {\n  padding-inline-start: 2px;\n  padding-inline-end: 4px;\n}\n\n.ids-axis-chart[mode=dark] .grid,\n.ids-chart-container[mode=dark] .grid {\n  stroke: var(--ids-color-palette-slate-40);\n}\n.ids-axis-chart[mode=dark] .grid.horizontal-lines line:last-child,\n.ids-chart-container[mode=dark] .grid.horizontal-lines line:last-child {\n  stroke: var(--ids-color-palette-slate-30);\n}\n.ids-axis-chart[mode=dark] .labels text,\n.ids-chart-container[mode=dark] .labels text {\n  fill: var(--ids-color-palette-slate-10);\n}\n\n.ids-axis-chart[mode=contrast] .grid,\n.ids-chart-container[mode=contrast] .grid {\n  stroke: var(--ids-color-palette-slate-80);\n}\n.ids-axis-chart[mode=contrast] .grid.horizontal-lines line:last-child,\n.ids-chart-container[mode=contrast] .grid.horizontal-lines line:last-child {\n  stroke: var(--ids-color-palette-slate-100);\n}\n.ids-axis-chart[mode=contrast] .labels text,\n.ids-chart-container[mode=contrast] .labels text {\n  fill: var(--ids-color-palette-slate-100);\n}\n\n:host([dir=rtl]) .ids-axis-chart {\n  transform: scale(-1, 1);\n}\n:host([dir=rtl]) .ids-axis-chart:not(.horizontal) .labels.y-labels text {\n  transform: scale(-1, 1) translate(var(--ids-axis-chart-ylabels-x, -45px), 0);\n}\n:host([dir=rtl]) .labels.x-labels {\n  transform: scale(-1, 1);\n  transform-origin: unset;\n}`;\n        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (styles);\n    //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/ids-axis-chart/ids-axis-chart.scss\n");

/***/ })

}]);