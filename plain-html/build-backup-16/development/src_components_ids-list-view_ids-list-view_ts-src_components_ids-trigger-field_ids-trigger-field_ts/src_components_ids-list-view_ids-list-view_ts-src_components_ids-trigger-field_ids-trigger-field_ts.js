"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkids_enterprise_wc"] = self["webpackChunkids_enterprise_wc"] || []).push([["src_components_ids-list-view_ids-list-view_ts-src_components_ids-trigger-field_ids-trigger-field_ts"],{

/***/ "./src/components/ids-list-view/ids-list-view-search-mixin.ts":
/*!********************************************************************!*\
  !*** ./src/components/ids-list-view/ids-list-view-search-mixin.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ids_list_view_search_mixin_default)\n/* harmony export */ });\n/* harmony import */ var _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/ids-attributes */ \"./src/core/ids-attributes.ts\");\n/* harmony import */ var _utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/ids-string-utils/ids-string-utils */ \"./src/utils/ids-string-utils/ids-string-utils.ts\");\n/* harmony import */ var _utils_ids_deep_clone_utils_ids_deep_clone_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/ids-deep-clone-utils/ids-deep-clone-utils */ \"./src/utils/ids-deep-clone-utils/ids-deep-clone-utils.ts\");\n/* harmony import */ var _utils_ids_xss_utils_ids_xss_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/ids-xss-utils/ids-xss-utils */ \"./src/utils/ids-xss-utils/ids-xss-utils.ts\");\n\n\n\n\nconst IdsListViewSearchMixin = (superclass) => class extends superclass {\n  constructor(...args) {\n    super(...args);\n  }\n  static get attributes() {\n    return [\n      ...superclass.attributes,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.SEARCH_FIELD_ID,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.SEARCH_FILTER_MODE,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.SEARCH_TERM_CASE_SENSITIVE,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.SEARCH_TERM_MIN_SIZE,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.SEARCHABLE,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.SUPPRESS_HIGHLIGHT\n    ];\n  }\n  connectedCallback() {\n    super.connectedCallback();\n  }\n  /**\n   * Possible Filter Modes\n   */\n  searchFilterModes = {\n    CONTAINS: \"contains\",\n    KEYWORD: \"keyword\",\n    PHRASE_STARTS_WITH: \"phrase-starts-with\",\n    WORD_STARTS_WITH: \"word-starts-with\"\n  };\n  /**\n   * Search filter callback, use for custom filter to match\n   */\n  searchFilterCallback = null;\n  /**\n   * Searchable text callback\n   */\n  searchableTextCallback = null;\n  /**\n   * Current search term\n   */\n  #term = \"\";\n  /**\n   * Get search container element\n   * @returns {HTMLDivElement|null|undefined} The search container element\n   */\n  get searchContainer() {\n    return this.shadowRoot?.querySelector(\".ids-list-view-search\");\n  }\n  /**\n   * Get searchf ield element\n   * @returns {HTMLDivElement|null|undefined} The search field element\n   */\n  get searchField() {\n    let searchfield = this.querySelector('ids-search-field[slot=\"search\"]');\n    if (!searchfield && this.searchFieldId) {\n      searchfield = this.closest(\"ids-container\")?.querySelector(`#${this.searchFieldId}`);\n    }\n    return searchfield;\n  }\n  /**\n   * Set ID of the search field element to use for the search\n   * @param {string | null} value The value\n   */\n  set searchFieldId(value) {\n    if (value)\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.SEARCH_FIELD_ID, String(value));\n    else\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.SEARCH_FIELD_ID);\n    this.redraw?.();\n  }\n  get searchFieldId() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.SEARCH_FIELD_ID);\n  }\n  /**\n   * Set search filter mode\n   * @param {SearchFilterModes} value The value\n   */\n  set searchFilterMode(value) {\n    if (Object.values(this.searchFilterModes).includes(value || \"\")) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.SEARCH_FILTER_MODE, String(value));\n    } else\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.SEARCH_FILTER_MODE);\n  }\n  get searchFilterMode() {\n    const defaultVal = this.searchFilterModes.CONTAINS;\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.SEARCH_FILTER_MODE) || defaultVal;\n  }\n  /**\n   * Set search term case sensitive\n   * @param {string | boolean | null} value The value\n   */\n  set searchTermCaseSensitive(value) {\n    if ((0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_1__.stringToBool)(value))\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.SEARCH_TERM_CASE_SENSITIVE, \"\");\n    else\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.SEARCH_TERM_CASE_SENSITIVE);\n  }\n  get searchTermCaseSensitive() {\n    return this.hasAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.SEARCH_TERM_CASE_SENSITIVE);\n  }\n  /**\n   * Set search term min size, will trigger filtering only when its length is greater than or equals to term value.\n   * @param {string | number | null} value The value\n   */\n  set searchTermMinSize(value) {\n    const val = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_1__.stringToNumber)(value);\n    if (!Number.isNaN(val) && val > 0)\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.SEARCH_TERM_MIN_SIZE, val.toString());\n    else\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.SEARCH_TERM_MIN_SIZE);\n  }\n  get searchTermMinSize() {\n    const defaultVal = 1;\n    const val = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_1__.stringToNumber)(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.SEARCH_TERM_MIN_SIZE));\n    return !Number.isNaN(val) && val > 0 ? val : defaultVal;\n  }\n  /**\n   * Set searchable which allows list view to be filtered\n   * @param {string | boolean | null} value The value\n   */\n  set searchable(value) {\n    if ((0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_1__.stringToBool)(value))\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.SEARCHABLE, \"\");\n    else\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.SEARCHABLE);\n    this.setSearchable();\n  }\n  get searchable() {\n    return this.hasAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.SEARCHABLE);\n  }\n  /**\n   * Set search term text to be suppress highlight when using searchable\n   * @param {string | boolean | null} value The value\n   */\n  set suppressHighlight(value) {\n    if ((0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_1__.stringToBool)(value))\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.SUPPRESS_HIGHLIGHT, \"\");\n    else\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.SUPPRESS_HIGHLIGHT);\n  }\n  get suppressHighlight() {\n    return this.hasAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.SUPPRESS_HIGHLIGHT);\n  }\n  /**\n   * Get search template\n   * @returns {string} The search template\n   */\n  searchTemplate() {\n    return this.searchFieldId ? \"\" : `<div class=\"ids-list-view-search\" part=\"search\"><slot name=\"search\"></slot></div>`;\n  }\n  /**\n   * Get search field template\n   * @returns {string} The search field template\n   */\n  searchFieldTemplate() {\n    const cssParts = \"container: searchfield-container, field-container: searchfield-field-container, input: searchfield-input, popup: searchfield-popup\";\n    return `<ids-search-field slot=\"search\" label=\"List view search\" label-state=\"collapsed\" size=\"full\" exportparts=\"${cssParts}\" ids-lv-default-searchfield clearable no-margins></ids-search-field>`;\n  }\n  /**\n   * Reset search\n   * @returns {void}\n   */\n  resetSearch() {\n    this.#term = \"\";\n    const lv = this;\n    if (!lv.datasource?.filtered)\n      return;\n    lv.datasource?.filter(null);\n    lv.redraw?.();\n    lv.triggerEvent(\"filtered\", lv, { bubbles: true, detail: { elem: lv, type: \"clear\", term: \"\" } });\n  }\n  /**\n   * Set the searchable\n   * @returns {void}\n   */\n  setSearchable() {\n    const getSlotted = () => this.shadowRoot?.querySelector('slot[name=\"search\"]')?.assignedElements()[0];\n    let slotted = getSlotted();\n    if (!slotted && this.searchable) {\n      this.insertAdjacentHTML(\"afterbegin\", this.searchFieldTemplate());\n      slotted = getSlotted();\n    } else if (!this.searchable && slotted?.hasAttribute(\"ids-lv-default-searchfield\")) {\n      slotted.remove();\n    }\n    const isSearchfield = !!getSlotted();\n    this.container?.classList[isSearchfield ? \"add\" : \"remove\"](\"has-searchfield\");\n    this.searchContainer?.classList[isSearchfield ? \"add\" : \"remove\"](\"has-searchfield\");\n    this.#attacheSearchField();\n  }\n  /**\n   * Attaches a slotted IdsSearchField component\n   * @private\n   * @returns {void}\n   */\n  #attacheSearchField() {\n    const searchField = this.searchField;\n    if (searchField) {\n      searchField.onSearch = (term) => this.#handleSearch(term);\n      this.offEvent(\"cleared.listviewsearch\");\n      this.onEvent(\"cleared.listviewsearch\", searchField, () => this.resetSearch());\n    }\n  }\n  /**\n   * Get object props as text\n   * @param {string} item The term value\n   * @returns {string|HTMLElement|object} The searchable content\n   */\n  #objectPropsAsText(item) {\n    const excludeValues = [\"isFilteredOut\"];\n    let text = \"\";\n    Object.keys(item).forEach((prop) => {\n      if (excludeValues.indexOf(prop) > 0)\n        return;\n      const pad = text.length ? \" \" : \"\";\n      text += `${pad}${item[prop]}`;\n    });\n    return text;\n  }\n  /**\n   * Get searchable content\n   * @private\n   * @param {string} item The term value\n   * @returns {string|HTMLElement|object} The searchable content\n   */\n  #searchableContent(item) {\n    let santitize = true;\n    if (typeof this.searchableTextCallback === \"function\") {\n      return this.searchableTextCallback(item) ?? \"\";\n    }\n    let targetContent;\n    if (typeof item === \"string\") {\n      targetContent = item;\n    } else if (item instanceof HTMLElement) {\n      santitize = false;\n      targetContent = item.innerText;\n    } else {\n      targetContent = this.#objectPropsAsText(item);\n    }\n    if (santitize)\n      targetContent = (0,_utils_ids_xss_utils_ids_xss_utils__WEBPACK_IMPORTED_MODULE_3__.sanitizeHTML)(targetContent);\n    return targetContent ?? \"\";\n  }\n  /**\n   * Matches the provided term against the beginning of all words in a text string.\n   * @private\n   * @param {string} text searchable text.\n   * @param {string} term the term for which to search in the text string.\n   * @returns {boolean} true if the term is present.\n   */\n  #wordStartsWithFilter(text, term) {\n    const parts = text.split(\" \");\n    for (let a = 0; a < parts.length; a++) {\n      if (parts[a].indexOf(term) === 0)\n        return true;\n    }\n    if (text.indexOf(term) === 0)\n      return true;\n    if (term.indexOf(\" \") > 0 && text.indexOf(term) > 0)\n      return true;\n    return false;\n  }\n  /**\n   * Handle search for given trem\n   * @private\n   * @param {string} term The term value\n   * @returns {void}\n   */\n  #handleSearch(term) {\n    const lv = this;\n    if (!lv.datasource)\n      return;\n    const isTermString = typeof term === \"string\";\n    if (!isTermString || isTermString && term === \"\")\n      return this.resetSearch();\n    if (term.length < this.searchTermMinSize) {\n      this.resetSearch();\n      return;\n    }\n    if (this.#term === term)\n      return;\n    this.#term = term;\n    if (!this.searchTermCaseSensitive) {\n      term = term.toLowerCase();\n    }\n    const searchItemIterator = (item) => {\n      let text = this.#searchableContent(item);\n      if (!this.searchTermCaseSensitive) {\n        text = text.toLowerCase().trim();\n      }\n      const modes = this.searchFilterModes;\n      let match = false;\n      if (this.searchFilterMode === modes.WORD_STARTS_WITH) {\n        match = this.#wordStartsWithFilter(text, term);\n      }\n      if (this.searchFilterMode === modes.PHRASE_STARTS_WITH && text.indexOf(term) === 0) {\n        match = true;\n      }\n      if (this.searchFilterMode === modes.CONTAINS && text.indexOf(term) >= 0) {\n        match = true;\n      }\n      if (this.searchFilterMode === modes.KEYWORD) {\n        const keywords = term.split(\" \");\n        for (let i = 0; i < keywords.length; i++) {\n          if (text.indexOf(keywords[i]) >= 0) {\n            match = true;\n            break;\n          }\n        }\n      }\n      return !match;\n    };\n    let itemIterator = searchItemIterator;\n    if (typeof this.searchFilterCallback === \"function\") {\n      itemIterator = this.searchFilterCallback(term);\n    }\n    lv.datasource.filter(itemIterator);\n    lv.redraw?.();\n    lv.triggerEvent(\"filtered\", lv, { bubbles: true, detail: { elem: lv, type: \"apply\", term } });\n  }\n  /**\n   * Set search term highlight\n   * @param {string | HTMLElement | object} item The from data item\n   * @returns {string} search term highlight\n   */\n  searchHighlight(item) {\n    if (this.suppressHighlight || !item || this.#term === \"\")\n      return item;\n    let regex = null;\n    const modes = this.searchFilterModes;\n    const flag = this.searchTermCaseSensitive ? \"g\" : \"gi\";\n    const replaceTmpl = `<strong class=\"highlight\">$1</strong>`;\n    let replaceMatch = (s) => s.replace(regex, replaceTmpl);\n    if (this.searchFilterMode === modes.WORD_STARTS_WITH) {\n      regex = new RegExp(`(^|\\\\s)(${this.#term})`, flag);\n      replaceMatch = (s) => s.replace(regex, (m) => m.replace(new RegExp(`(${this.#term})`, flag), replaceTmpl));\n    } else if (this.searchFilterMode === modes.PHRASE_STARTS_WITH) {\n      regex = new RegExp(`^(${this.#term})`, flag);\n    } else if (this.searchFilterMode === modes.CONTAINS || this.searchFilterMode === modes.KEYWORD) {\n      regex = new RegExp(`(${this.#term})`, flag);\n    }\n    if (!regex)\n      return item;\n    let term = this.#term;\n    let cloneItem = (0,_utils_ids_deep_clone_utils_ids_deep_clone_utils__WEBPACK_IMPORTED_MODULE_2__.deepClone)(item);\n    let text = this.#searchableContent(cloneItem);\n    if (!this.searchTermCaseSensitive) {\n      term = term.toLowerCase();\n      text = text.toLowerCase();\n    }\n    if (text.indexOf(term) >= 0) {\n      if (typeof cloneItem === \"string\" && text === cloneItem) {\n        cloneItem = replaceMatch(cloneItem);\n      } else if (cloneItem instanceof HTMLElement) {\n        const itmText = cloneItem.innerText;\n        const sHtml = (0,_utils_ids_xss_utils_ids_xss_utils__WEBPACK_IMPORTED_MODULE_3__.sanitizeHTML)(cloneItem.innerText);\n        if (text === sHtml)\n          cloneItem.innerText = replaceMatch(itmText);\n      } else {\n        for (const [key, value] of Object.entries(cloneItem)) {\n          const val = this.searchTermCaseSensitive ? value : value?.toString().toLowerCase();\n          if (text === val)\n            cloneItem[key] = replaceMatch(value);\n        }\n      }\n    }\n    return cloneItem;\n  }\n};\nvar ids_list_view_search_mixin_default = IdsListViewSearchMixin;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/ids-list-view/ids-list-view-search-mixin.ts\n");

/***/ }),

/***/ "./src/components/ids-list-view/ids-list-view.ts":
/*!*******************************************************!*\
  !*** ./src/components/ids-list-view/ids-list-view.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ IdsListView)\n/* harmony export */ });\n/* harmony import */ var _core_ids_decorators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/ids-decorators */ \"./src/core/ids-decorators.ts\");\n/* harmony import */ var _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/ids-attributes */ \"./src/core/ids-attributes.ts\");\n/* harmony import */ var _utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/ids-string-utils/ids-string-utils */ \"./src/utils/ids-string-utils/ids-string-utils.ts\");\n/* harmony import */ var _core_ids_data_source__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/ids-data-source */ \"./src/core/ids-data-source.ts\");\n/* harmony import */ var _ids_virtual_scroll_ids_virtual_scroll__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ids-virtual-scroll/ids-virtual-scroll */ \"./src/components/ids-virtual-scroll/ids-virtual-scroll.ts\");\n/* harmony import */ var _ids_checkbox_ids_checkbox__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ids-checkbox/ids-checkbox */ \"./src/components/ids-checkbox/ids-checkbox.ts\");\n/* harmony import */ var _mixins_ids_events_mixin_ids_events_mixin__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../mixins/ids-events-mixin/ids-events-mixin */ \"./src/mixins/ids-events-mixin/ids-events-mixin.ts\");\n/* harmony import */ var _mixins_ids_keyboard_mixin_ids_keyboard_mixin__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../mixins/ids-keyboard-mixin/ids-keyboard-mixin */ \"./src/mixins/ids-keyboard-mixin/ids-keyboard-mixin.ts\");\n/* harmony import */ var _mixins_ids_theme_mixin_ids_theme_mixin__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../mixins/ids-theme-mixin/ids-theme-mixin */ \"./src/mixins/ids-theme-mixin/ids-theme-mixin.ts\");\n/* harmony import */ var _mixins_ids_locale_mixin_ids_locale_mixin__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../mixins/ids-locale-mixin/ids-locale-mixin */ \"./src/mixins/ids-locale-mixin/ids-locale-mixin.ts\");\n/* harmony import */ var _core_ids_element__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../core/ids-element */ \"./src/core/ids-element.ts\");\n/* harmony import */ var _mixins_ids_pager_mixin_ids_pager_mixin__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../mixins/ids-pager-mixin/ids-pager-mixin */ \"./src/mixins/ids-pager-mixin/ids-pager-mixin.ts\");\n/* harmony import */ var _ids_list_view_search_mixin__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./ids-list-view-search-mixin */ \"./src/components/ids-list-view/ids-list-view-search-mixin.ts\");\n/* harmony import */ var _ids_swappable_ids_swappable__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../ids-swappable/ids-swappable */ \"./src/components/ids-swappable/ids-swappable.ts\");\n/* harmony import */ var _ids_swappable_ids_swappable_item__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../ids-swappable/ids-swappable-item */ \"./src/components/ids-swappable/ids-swappable-item.ts\");\n/* harmony import */ var _ids_search_field_ids_search_field__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../ids-search-field/ids-search-field */ \"./src/components/ids-search-field/ids-search-field.ts\");\n/* harmony import */ var _ids_list_view_scss__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./ids-list-view.scss */ \"./src/components/ids-list-view/ids-list-view.scss\");\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result)\n    __defProp(target, key, result);\n  return result;\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst Base = (0,_mixins_ids_locale_mixin_ids_locale_mixin__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(\n  (0,_mixins_ids_theme_mixin_ids_theme_mixin__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(\n    (0,_mixins_ids_pager_mixin_ids_pager_mixin__WEBPACK_IMPORTED_MODULE_11__[\"default\"])(\n      (0,_ids_list_view_search_mixin__WEBPACK_IMPORTED_MODULE_12__[\"default\"])(\n        (0,_mixins_ids_keyboard_mixin_ids_keyboard_mixin__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(\n          (0,_mixins_ids_events_mixin_ids_events_mixin__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(\n            _core_ids_element__WEBPACK_IMPORTED_MODULE_10__[\"default\"]\n          )\n        )\n      )\n    )\n  )\n);\nconst LIST_VIEW_DEFAULTS = {\n  hideCheckboxes: false,\n  // Only apply to selectable multiple\n  height: \"100%\",\n  label: \"Ids list view\",\n  selectableOptions: [\"single\", \"multiple\", \"mixed\"],\n  sortable: false,\n  suppressDeactivation: false,\n  // Use with Mixed selection only\n  suppressDeselection: true,\n  // Use with Single selection only\n  virtualScroll: false\n};\nlet IdsListView = class extends Base {\n  constructor() {\n    super();\n  }\n  /** Is the component initialized */\n  initialized = false;\n  /** The currently focused list item */\n  #focusedLiIndex = 0;\n  /** The currently activated list item */\n  #activatedIndex = -1;\n  /** The currently target while selecting */\n  #isTargetCheckbox = false;\n  /** The currently apply state while single selecting */\n  #isApply = false;\n  /** The currently list size */\n  #size = 0;\n  /** The datasource container */\n  datasource = new _core_ids_data_source__WEBPACK_IMPORTED_MODULE_3__[\"default\"]();\n  defaultTemplate = \"\";\n  /**\n   * @returns {Array<string>} Drawer vetoable events\n   */\n  vetoableEventTypes = [\n    \"beforeitemactivated\",\n    \"beforeitemdeactivated\",\n    \"beforeselected\",\n    \"beforedeselected\"\n  ];\n  connectedCallback() {\n    super.connectedCallback();\n    this.defaultTemplate = `${this.querySelector(\"template\")?.innerHTML || \"\"}`;\n    this.dataKeys = this.#extractTemplateLiteralsFromHTML(this.defaultTemplate);\n    this.#attachEventListeners();\n  }\n  /**\n   * Return the attributes we handle as getters/setters\n   * @returns {Array} The attributes in an array\n   */\n  static get attributes() {\n    return [\n      ...super.attributes,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.LOADED,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.HEIGHT,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.HIDE_CHECKBOXES,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ITEM_HEIGHT,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.LABEL,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SELECTABLE,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SORTABLE,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SUPPRESS_DEACTIVATION,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SUPPRESS_DESELECTION,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.VIRTUAL_SCROLL\n    ];\n  }\n  #extractTemplateLiteralsFromHTML(string) {\n    const arr = string.split(\"${\");\n    arr.shift();\n    const tokens = arr.map((x) => x.split(\"}\")[0]);\n    return tokens;\n  }\n  /**\n   * Get list of all elements\n   * @returns {NodeListOf<HTMLElement>} List of all list item elements\n   */\n  getAllLi() {\n    return this.container?.querySelectorAll('div[part=\"list-item\"]');\n  }\n  /**\n   * Return all swappable items\n   * @returns {NodeListOf<IdsSwappableItem>} List of all swappable items\n   */\n  getAllSwappableItems() {\n    return this.container?.querySelectorAll(\"ids-swappable-item\");\n  }\n  /**\n   * Add the sortable class to the list items\n   * @returns {void}\n   */\n  #addSortableStyles() {\n    this.getAllLi()?.forEach((li) => {\n      li.classList.add(\"sortable\");\n    });\n  }\n  /**\n   * Get the item info for given element.\n   * @param {HTMLElement} el The element.\n   * @returns {IdsListViewItemInfo|null} Item info, or null if item not found.\n   */\n  #itemInfo(el) {\n    const item = el?.getAttribute(\"role\") === \"option\" ? el : el?.closest('[role=\"option\"]');\n    const index = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToNumber)(item?.getAttribute(\"index\"));\n    return Number.isNaN(index) ? null : { item, index, data: this.data[index] };\n  }\n  /**\n   * Get the list item DOM element.\n   * @param {number} index The value of data index.\n   * @returns {HTMLElement|null} The DOM element, or null if item not found.\n   */\n  #itemByIndex(index) {\n    return Number.isNaN(index) || !this.container ? null : this.container.querySelector(`div[part=\"list-item\"][index=\"${index}\"]`);\n  }\n  /**\n   * Get data index for given page index.\n   * @param {number} index The page index value.\n   * @returns {number|null} The data index.\n   */\n  dataIndex(index) {\n    const idx = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToNumber)(index);\n    if (Number.isNaN(idx))\n      return null;\n    return idx >= 0 && idx < this.#size ? idx + (this.pageNumber - 1) * this.#size : null;\n  }\n  /**\n   * Get page index for given data index.\n   * @param {number} dataIndex The data index value.\n   * @returns {number|null} The paga index.\n   */\n  pageIndex(dataIndex) {\n    let idx = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToNumber)(dataIndex);\n    if (Number.isNaN(idx))\n      return null;\n    idx -= (this.pageNumber - 1) * this.#size;\n    return idx >= 0 && idx < this.#size ? idx : null;\n  }\n  /**\n   * Check if given data index in current page.\n   * @param {number} dataIndex The data index value.\n   * @returns {boolean} True, if data index in current page\n   */\n  isInPage(dataIndex) {\n    const idx = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToNumber)(dataIndex);\n    if (Number.isNaN(idx))\n      return false;\n    let end = this.pageNumber * this.#size;\n    let start = end - this.#size;\n    if (this.virtualScroll) {\n      end = this.virtualScrollContainer?.lastEnd;\n      start = this.virtualScrollContainer?.lastStart;\n    }\n    return dataIndex >= start && dataIndex < end;\n  }\n  /**\n   * Handle on click\n   * @private\n   * @param {any} e The event.\n   * @returns {void}\n   */\n  #handleOnClick(e) {\n    const itemInfo = this.#itemInfo(e.target);\n    if (itemInfo) {\n      this.#isTargetCheckbox = e.target?.classList.contains(\"list-item-checkbox\");\n      if (this.#isTargetCheckbox)\n        e.preventDefault();\n      this.#setSelection(itemInfo);\n    }\n  }\n  /**\n   * Handle on keydown\n   * @private\n   * @param {KeyboardEvent} e The event.\n   * @returns {void}\n   */\n  #handleOnKeydown(e) {\n    switch (e.code) {\n      case \"ArrowUp\":\n        e.preventDefault();\n        this.focusLi(this.getPreviousLi(this.getFocusedLi()));\n        break;\n      case \"ArrowDown\":\n        e.preventDefault();\n        this.focusLi(this.getNextLi(this.getFocusedLi()));\n        break;\n      case \"Space\":\n        e.preventDefault();\n        break;\n      default:\n        break;\n    }\n  }\n  /**\n   * Handle on keyup\n   * @private\n   * @param {KeyboardEvent} e The event.\n   * @returns {void}\n   */\n  #handleOnKeyup(e) {\n    if (/^(Space|Enter)$/g.test(e.code)) {\n      e.preventDefault();\n      e.stopPropagation();\n      const focusedLi = this.getFocusedLi();\n      if (this.selectable === \"mixed\") {\n        const cb = focusedLi?.querySelector(\".list-item-checkbox\");\n        if (cb)\n          cb.checked = !cb.checked;\n        this.#isTargetCheckbox = true;\n      }\n      this.#setSelection(this.#itemInfo(focusedLi));\n    }\n  }\n  /**\n   * Handle on after virtual scroll\n   * @private\n   * @param {CustomEvent} e The event.\n   * @returns {void}\n   */\n  #handleOnAfterVirtualScroll(e) {\n    const { startIndex, endIndex } = e.detail || {};\n    this.#adjustVirtualScrollIndexes(startIndex);\n    for (let i = startIndex; i < endIndex; i++) {\n      if (this.data?.[i]?.itemSelected) {\n        const item = this.#itemByIndex(i);\n        const cb = item?.querySelector(\".list-item-checkbox\");\n        if (cb)\n          cb.checked = true;\n        item?.setAttribute(\"selected\", \"\");\n        item?.setAttribute(\"aria-selected\", \"true\");\n        if (this.selectable === \"mixed\")\n          item?.setAttribute(\"hide-selected-color\", \"\");\n      }\n      if (this.data?.[i]?.itemActivated) {\n        this.#itemByIndex(i)?.setAttribute(\"activated\", \"\");\n      }\n    }\n  }\n  #attachEventListeners() {\n    this.offEvent(\"click.listview\", this.container);\n    this.onEvent(\"click.listview\", this.container, (e) => {\n      const args = this.#itemInfo(e.target);\n      if (args)\n        this.#triggerEvent(\"click\", { ...args, originalEvent: e });\n    });\n    this.offEvent(\"dblclick.listview\", this.container);\n    this.onEvent(\"dblclick.listview\", this.container, (e) => {\n      const itemInfo = this.#itemInfo(e.target);\n      if (itemInfo)\n        this.#triggerEvent(\"dblclick\", { ...itemInfo, originalEvent: e });\n    });\n    if (this.sortable) {\n      this.#addSortableStyles();\n    } else {\n      this.offEvent(\"click.listview-selection\", this.container);\n      this.onEvent(\"click.listview-selection\", this.container, (e) => this.#handleOnClick(e));\n      this.offEvent(\"keydown.listview-selection\", this.container);\n      this.onEvent(\"keydown.listview-selection\", this.container, (e) => this.#handleOnKeydown(e));\n      this.offEvent(\"keyup.listview-selection\", this.container);\n      this.onEvent(\"keyup.listview-selection\", this.container, (e) => this.#handleOnKeyup(e));\n      this.offEvent(\"aftervirtualscroll.listview\", this.virtualScrollContainer);\n      this.onEvent(\"aftervirtualscroll.listview\", this.virtualScrollContainer, (e) => this.#handleOnAfterVirtualScroll(e));\n    }\n  }\n  /**\n   * Set the selection for given item\n   * @private\n   * @param {any} itemInfo The item and index.\n   * @returns {void}\n   */\n  #setSelection(itemInfo) {\n    if (!itemInfo)\n      return;\n    const { item, index } = itemInfo;\n    const dataIndex = this.dataIndex(index);\n    let isVeto = true;\n    if (this.selectable) {\n      const selected = this.selected;\n      if (this.selectable === \"single\") {\n        isVeto = this.#selectInPage(index);\n      }\n      if (this.selectable === \"multiple\") {\n        if (selected.some((d) => d.index === dataIndex)) {\n          isVeto = this.#deselectInPage(index);\n        } else {\n          isVeto = this.#selectInPage(index);\n        }\n      }\n      if (this.selectable === \"mixed\") {\n        if (this.#isTargetCheckbox) {\n          if (selected.some((d) => d.index === dataIndex)) {\n            isVeto = this.#deselectInPage(index);\n          } else {\n            isVeto = this.#selectInPage(index);\n          }\n        } else {\n          this.#activateItemInPage(index);\n        }\n      }\n    }\n    if (isVeto)\n      this.focusLi(item);\n  }\n  /**\n   * Set the focus for given list item.\n   * @param {any} li The list item.\n   * @returns {void}\n   */\n  focusLi(li) {\n    if (li) {\n      const prevFocus = this.getFocusedLi();\n      if (li !== prevFocus) {\n        prevFocus?.setAttribute(\"tabindex\", \"-1\");\n        this.#focusedLiIndex = li.getAttribute(\"index\");\n      }\n      const container = this.container?.querySelector(\".ids-list-view-body\");\n      container?.setAttribute(\"aria-activedescendant\", String(li.getAttribute(\"id\")));\n      li.setAttribute(\"tabindex\", \"0\");\n      li.focus();\n    }\n  }\n  /**\n   * Get currently focused list item.\n   * @returns {HTMLElement} The focused list item.\n   */\n  getFocusedLi() {\n    const savedFocusedLi = this.container?.querySelector(`div[part=\"list-item\"][index=\"${this.#focusedLiIndex}\"]`);\n    const val = savedFocusedLi ?? this.container?.querySelector('div[part=\"list-item\"][tabindex=\"0\"]');\n    return val;\n  }\n  /**\n   * Get previous list item for a given list item.\n   * @param {any} li The list item.\n   * @returns {HTMLElement|undefined} The previous list item\n   */\n  getPreviousLi(li) {\n    let idx = li && typeof li.getAttribute === \"function\" ? li.getAttribute(\"index\") : null;\n    idx = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToNumber)(idx);\n    if (Number.isNaN(idx))\n      return;\n    const items = [...this.getAllLi() ?? []].slice(0, idx + 1);\n    const prev = (item) => this.sortable ? item.parentElement.previousElementSibling?.firstElementChildwrapper : item.previousElementSibling;\n    let prevLi = li;\n    items.reverse().some((item) => {\n      prevLi = prev(item);\n      return !prevLi?.hasAttribute(\"disabled\");\n    });\n    return prevLi;\n  }\n  /**\n   * Get next list item for a given list item.\n   * @param {any} li The list item.\n   * @returns {HTMLElement|undefined} The next list item\n   */\n  getNextLi(li) {\n    let idx = li && typeof li.getAttribute === \"function\" ? li.getAttribute(\"index\") : null;\n    idx = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToNumber)(idx);\n    if (Number.isNaN(idx))\n      return;\n    const items = [...this.getAllLi() ?? []].slice(idx);\n    const next = (item) => this.sortable ? item.parentElement.nextElementSibling?.firstElementChild : item.nextElementSibling;\n    let nextLi = li;\n    items.some((item) => {\n      nextLi = next(item);\n      return !nextLi?.hasAttribute(\"disabled\");\n    });\n    return nextLi;\n  }\n  /**\n   * Get template function for list item.\n   * @returns {Function} The list item template function.\n   */\n  listItemTemplateFunc() {\n    const itemTemplate = (item, index) => {\n      if (this.selectable === \"multiple\" || this.selectable === \"mixed\") {\n        const checked = item.itemSelected ? \" checked\" : \"\";\n        const disabled = item.disabled ? \" disabled\" : \"\";\n        let checkbox = `<ids-checkbox class=\"list-item-checkbox\" label=\"cb-item-${index}\" label-state=\"hidden\"${checked}${disabled}></ids-checkbox>`;\n        if (this.selectable === \"multiple\" && this.hideCheckboxes)\n          checkbox = \"\";\n        return `\n          <div class=\"list-item-area\">\n            ${checkbox}\n            <div class=\"list-item-content\">\n              ${this.itemTemplate(item)}\n            </div>\n          </div>`;\n      }\n      return this.itemTemplate(item);\n    };\n    const func = (item, index) => {\n      const disabled = item.disabled ? \" disabled\" : \"\";\n      const tabindex = `tabindex=\"${typeof index !== \"undefined\" && !index ? \"0\" : \"-1\"}\"`;\n      const activated = item.itemActivated ? \" activated\" : \"\";\n      let selected = \"\";\n      if (item.itemSelected) {\n        selected = ' selected aria-selected=\"true\"';\n        if (this.selectable === \"mixed\")\n          selected += \" hide-selected-color\";\n      }\n      return `\n        ${this.sortable ? `<ids-swappable-item\n            role=\"listitem\"\n            tabindex=\"-1\"\n            tabbable=\"${index === 0 ? \"true\" : \"false\"}\"\n            index=\"${index}\"\n            id=\"id_item_${index + 1}\"\n            aria-posinset=\"${index + 1}\"\n            aria-setsize=\"${this.data.length}\"\n            ${disabled}\n          >` : \"\"}\n          <div\n            part=\"list-item\"\n            role=\"option\"\n            index=\"${index}\"\n            aria-posinset=\"${index + 1}\"\n            aria-setsize=\"${this.#size}\"\n            ${tabindex}${activated}${selected}${disabled}\n          >\n            ${itemTemplate(item, index)}\n          </div>\n        ${this.sortable ? `</ids-swappable-item>` : \"\"}\n      `;\n    };\n    return func;\n  }\n  /**\n   * Helper method to render the static scrolling template\n   * @returns {string} html\n   */\n  staticScrollTemplate() {\n    const selectable = this.selectable ? ` ${this.selectableClass()}` : \"\";\n    return `\n      <div class=\"ids-list-view${selectable}\" mode=\"${this.mode}\">\n        <div class=\"ids-list-view-body\" role=\"listbox\" aria-label=\"${this.label}\">\n          ${this.sortable ? `<ids-swappable selection=${this.selectable}>` : \"\"}\n            ${this.data?.length > 0 ? this.data.map(this.listItemTemplateFunc()).join(\"\") : \"\"}\n          ${this.sortable ? `</ids-swappable>` : \"\"}\n        </div>\n      </div>\n    `;\n  }\n  /**\n   * Helper method to render the virtual scrolling template\n   * @returns {string} html\n   */\n  virtualScrollTemplate() {\n    const selectable = this.selectable ? ` ${this.selectableClass()}` : \"\";\n    const html = `\n      <div class=\"ids-list-view${selectable}\" mode=\"${this.mode}\">\n        <ids-virtual-scroll\n          height=\"${this.height}\"\n          item-height=\"${this.itemHeight}\"\n        >\n          <div class=\"ids-list-view-body\" role=\"listbox\" aria-label=\"${this.label}\" part=\"contents\"></div>\n        </ids-virtual-scroll>\n      </div>\n    `;\n    return html;\n  }\n  /**\n   * Inner template contents\n   * @returns {string} The template\n   */\n  template() {\n    return `\n      ${this.searchTemplate?.()}\n      ${this.virtualScroll ? this.virtualScrollTemplate() : this.staticScrollTemplate()}\n    `;\n  }\n  /**\n   * Return an item's html injecting any values from the dataset as needed.\n   * @param {object} item The item to generate\n   * @returns {string} The html for this item\n   */\n  itemTemplate(item) {\n    const itm = this.searchHighlight?.(item) || item;\n    return (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.injectTemplate)(this.defaultTemplate, itm);\n  }\n  /**\n   * Set the pager template for listview\n   * @returns {string} the default pager template for list-view\n   */\n  pagerTemplate() {\n    return `\n      <ids-pager-button label=\"Previous page\" previous></ids-pager-button>\n      <ids-pager-number-list label=\"Page {num} of {total}\"></ids-pager-number-list>\n      <ids-pager-button label=\"Next page\" next></ids-pager-button>\n    `;\n  }\n  /**\n   * Adjust list items all indexes for virtual scroll\n   * @private\n   * @param {number} startIndex The starting data index.\n   * @returns {void}\n   */\n  #adjustVirtualScrollIndexes(startIndex) {\n    const items = this.getAllLi();\n    const len = items?.length;\n    if (startIndex === 0)\n      items?.item(0)?.setAttribute(\"tabindex\", \"0\");\n    items?.forEach((item, i) => {\n      item?.setAttribute(\"index\", i + startIndex);\n      item?.setAttribute(\"aria-posinset\", i + 1);\n      item?.setAttribute(\"aria-setsize\", len);\n    });\n  }\n  /**\n   * Toggle checkboxes\n   * @private\n   * @returns {void}\n   */\n  #toggleCheckboxes() {\n    if (this.selectable === \"multiple\") {\n      const val = this.hideCheckboxes;\n      const isCheckbox = !!this.body?.querySelector(\".list-item-checkbox\");\n      if (val && isCheckbox) {\n        this.body?.querySelectorAll(\".list-item-checkbox\").forEach((cb) => cb?.remove());\n      } else if (!val && !isCheckbox) {\n        this.getAllLi()?.forEach((item) => {\n          if (!item)\n            return;\n          const index = item.getAttribute(\"index\");\n          const isSelected = item.hasAttribute(\"selected\");\n          const isDisabled = item.hasAttribute(\"disabled\");\n          const checked = isSelected ? \" checked\" : \"\";\n          const disabled = isDisabled ? \" disabled\" : \"\";\n          const itemArea = item.querySelector(\".list-item-area\");\n          itemArea?.insertAdjacentHTML(\"afterbegin\", `\n            <ids-checkbox\n             class=\"list-item-checkbox\"\n             label=\"cb-item-${index}\"\n             label-state=\"hidden\"${checked}${disabled}></ids-checkbox>\n          `);\n        });\n      }\n    }\n  }\n  /**\n   * Helper function that toggles the 'selected' attribute of an element, then focuses on that element\n   * @param {Element} item the item to add/remove the selected attribute\n   * @param {boolean} switchValue optional switch values to force add/remove the selected attribute\n   */\n  toggleSelectedAttribute(item, switchValue) {\n    if (!this.selectable || item?.tagName !== \"IDS-SWAPPABLE-ITEM\")\n      return;\n    const unselect = () => {\n      item.removeAttribute(\"selected\");\n      item.removeAttribute(\"aria-selected\");\n      this.#activatedIndex = -1;\n    };\n    const select = () => {\n      item.setAttribute(\"selected\", \"selected\");\n      item.setAttribute(\"aria-selected\", \"true\");\n      this.#activatedIndex = parseInt(item.getAttribute(\"index\") || \"-1\");\n      this.triggerEvent(\"itemSelect\", this, {\n        detail: this.getListItemData(item)\n      });\n    };\n    if (switchValue === true) {\n      select();\n    } else if (switchValue === false) {\n      unselect();\n    } else {\n      const hasSelectedAttribute = item.hasAttribute(\"selected\");\n      if (hasSelectedAttribute) {\n        unselect();\n      } else {\n        select();\n      }\n      this.focusLi(item);\n    }\n  }\n  /**\n   * Toggles the selected list item\n   * @param {any} item the selected list item to toggle\n   */\n  toggleSelectedLi(item) {\n    if (!this.selectable || !item)\n      return;\n    if (item.tagName === \"IDS-SWAPPABLE-ITEM\") {\n      if (this.selectable === \"single\") {\n        const prevSelectedLi = this.selectedLi;\n        if (item !== prevSelectedLi && prevSelectedLi) {\n          this.toggleSelectedAttribute(prevSelectedLi);\n        }\n      }\n      this.toggleSelectedAttribute(item);\n    }\n  }\n  /**\n   * Update data from DOM\n   * @returns {void}\n   */\n  updateDataFromDOM() {\n    const newData = [];\n    this.container?.querySelectorAll('div[part=\"list-item\"]').forEach((x) => {\n      const objItem = {};\n      x.querySelectorAll(\"ids-text\").forEach((value, i) => {\n        objItem[this.dataKeys[i]] = value.innerHTML;\n      });\n      newData.push(objItem);\n    });\n    if (this.datasource) {\n      this.datasource.data = newData;\n    }\n  }\n  /**\n   * Rerender the list by re applying the template\n   */\n  redraw() {\n    if (!this.data || !this.loaded) {\n      if (!this.data?.length)\n        this.getAllLi()?.forEach((li) => li?.remove());\n      return;\n    }\n    this.#size = this.pagination === \"none\" ? this.pageTotal : this.pageSize;\n    const dir = this.container?.getAttribute(\"dir\");\n    const html = this.template();\n    if (this.container?.parentElement) {\n      this.container?.parentElement.remove();\n    } else {\n      this.container?.remove();\n    }\n    this.searchContainer?.remove();\n    const referenceElem = this.shadowRoot?.querySelector(\"style\");\n    if (referenceElem) {\n      referenceElem.insertAdjacentHTML(\"afterend\", html);\n    } else {\n      const template = document.createElement(\"template\");\n      template.innerHTML = html;\n      this.shadowRoot?.appendChild(template.content.cloneNode(true));\n    }\n    this.container = this.shadowRoot?.querySelector(\".ids-list-view\");\n    if (this.data?.length > 0) {\n      if (this.virtualScroll) {\n        const itemHeight = this.itemHeight || this.#checkTemplateHeight(`\n          <div part=\"list-item\" tabindex=\"-1\" id=\"height-tester\">\n            ${this.itemTemplate(this.datasource.data[0])}\n          </div>\n        `);\n        if (this.virtualScrollContainer) {\n          this.virtualScrollContainer.itemHeight = itemHeight;\n          this.virtualScrollContainer.itemTemplate = this.listItemTemplateFunc();\n          this.virtualScrollContainer.data = this.data;\n        }\n      }\n      this.#attachEventListeners();\n    }\n    this.setSearchable?.();\n    this.pager?.sync?.apply(this);\n    this.adjustHeight();\n    if (dir) {\n      this.container?.setAttribute(\"dir\", dir);\n    }\n  }\n  get virtualScrollContainer() {\n    return this.container?.querySelector(\"ids-virtual-scroll\");\n  }\n  get body() {\n    return this.container?.querySelector(\".ids-list-view-body\");\n  }\n  /**\n   * Set the height of the list after loading the template\n   * @private\n   */\n  adjustHeight() {\n    if (!this.container)\n      return;\n    const rootContainer = this.virtualScroll ? this.virtualScrollContainer : this.container;\n    rootContainer?.style.setProperty(\"height\", `${this.height}`);\n  }\n  /**\n   * Calculate the height of a template element.\n   * @private\n   * @param {string} itemTemplate The item template\n   * @returns {number} The item height\n   */\n  #checkTemplateHeight(itemTemplate) {\n    this.container?.insertAdjacentHTML(\"beforeend\", itemTemplate);\n    const tester = this.shadowRoot?.querySelector(\"#height-tester\");\n    const height = tester?.offsetHeight;\n    tester?.remove();\n    return height ?? NaN;\n  }\n  /**\n   * Get boolean property value for given attribute.\n   * @param {string} attributeName The attribute name.\n   * @param {boolean} defaultValue The default value.\n   * @returns {boolean} The property value\n   */\n  boolVal(attributeName, defaultValue) {\n    return this.hasAttribute(attributeName) ? (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(this.getAttribute(attributeName)) : defaultValue;\n  }\n  /**\n   * Get the list of all data from dataset\n   * @returns {Array} value The array to use\n   */\n  get ds() {\n    return this.datasource?.allData || this.data;\n  }\n  /**\n   * Handle Setting changes of the value has changed by calling the getter\n   * in the extending class.\n   * @param {string} name The property name\n   * @param {string} oldValue The property old value\n   * @param {string} newValue The property new value\n   */\n  attributeChangedCallback(name, oldValue, newValue) {\n    super.attributeChangedCallback(name, oldValue, newValue);\n    if (oldValue === newValue)\n      return;\n    const shouldRedraw = [\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.LOADED,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SELECTABLE,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.VIRTUAL_SCROLL,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.PAGE_NUMBER,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.PAGE_SIZE,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.PAGE_TOTAL\n    ].includes(name);\n    if (shouldRedraw) {\n      this.redraw();\n    }\n  }\n  /**\n   * Set the data array of the listview\n   * @param {Array | null} value The array to use\n   */\n  set data(value) {\n    const wasInitialized = this.initialized;\n    if (value) {\n      this.initialized = true;\n      this.datasource.data = value;\n      this.loaded = true;\n      if (wasInitialized) {\n        this.redraw();\n      }\n    } else {\n      this.datasource.data = [];\n      this.loaded = false;\n    }\n  }\n  get data() {\n    return this?.datasource?.data || \"\";\n  }\n  /**\n   * Used to determine if data has been loaded into IdsListView\n   * @param {Array | null} value The array to use\n   */\n  set loaded(value) {\n    this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.LOADED, String(!!value));\n  }\n  get loaded() {\n    return (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.LOADED);\n  }\n  /**\n   * Set the data array of the listview\n   * @param {Array | null} value The array to use\n   */\n  set dataKeys(value) {\n    if (this.datasource) {\n      this.datasource.dataKeys = value || [];\n    }\n  }\n  get dataKeys() {\n    return this.datasource.dataKeys || [];\n  }\n  /**\n   * Set the list view to use virtual scrolling for a large amount of elements.\n   * @param {string | boolean} value true to use virtual scrolling\n   */\n  set virtualScroll(value) {\n    if (/boolean|string/g.test(typeof value)) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.VIRTUAL_SCROLL, String(value));\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.VIRTUAL_SCROLL);\n    }\n  }\n  get virtualScroll() {\n    return this.boolVal(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.VIRTUAL_SCROLL, LIST_VIEW_DEFAULTS.virtualScroll);\n  }\n  /**\n   * Set the expected height of the viewport for virtual scrolling\n   * @param {string | number} value true to use virtual scrolling\n   */\n  set height(value) {\n    if (value) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.HEIGHT, String(value));\n    } else {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.HEIGHT, LIST_VIEW_DEFAULTS.height);\n    }\n  }\n  get height() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.HEIGHT) || LIST_VIEW_DEFAULTS.height;\n  }\n  /**\n   * Set the expected height of each item\n   * @param {string | number} value true to use virtual scrolling\n   */\n  set itemHeight(value) {\n    if (value) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ITEM_HEIGHT, String(value));\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ITEM_HEIGHT);\n    }\n  }\n  get itemHeight() {\n    return parseInt(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.ITEM_HEIGHT) ?? \"\");\n  }\n  /**\n   * Set the selection mode of the listview\n   * @param {string} value The value\n   */\n  set selectable(value) {\n    this.container?.classList.remove(...this.selectableClass(true));\n    if (LIST_VIEW_DEFAULTS.selectableOptions.includes(String(value))) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SELECTABLE, String(value));\n      this.container?.classList.add(this.selectableClass());\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SELECTABLE);\n    }\n  }\n  get selectable() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SELECTABLE);\n  }\n  /**\n   * Get class name/s with prefixed value\n   * @param {boolean|undefined} isAll If true, will return all classes as array\n   * @returns {string|Array<string>} The class name with prefix\n   */\n  selectableClass(isAll) {\n    const prefixed = (v) => `selectable-${v}`;\n    let r = \"\";\n    if (isAll)\n      r = LIST_VIEW_DEFAULTS.selectableOptions.map((v) => prefixed(v));\n    if (this.selectable !== null)\n      r = prefixed(this.selectable);\n    return r;\n  }\n  /**\n   * Get the activated item\n   * @returns {IdsListViewActivatedItem|null} The activated item\n   */\n  get activatedItem() {\n    if (!this.ds || this.selectable !== \"mixed\")\n      return null;\n    const singleArgs = (index) => index > -1 ? { index, data: this.ds[index] } : null;\n    return singleArgs(this.ds.findIndex((d) => d.itemActivated));\n  }\n  /**\n   * Get the selected item/s\n   * @returns {IdsListViewSelectedItem|Array<IdsListViewSelectedItem>|null} single item, or List of all selected items\n   */\n  get selected() {\n    if (!this.ds || !this.selectable)\n      return null;\n    const singleArgs = (index) => index > -1 ? { index, data: this.ds[index] } : null;\n    return this.selectable === \"single\" ? singleArgs(this.ds.findIndex((d) => d.itemSelected)) : this.ds.map((data, index) => ({ index, data })).filter((d) => d.data.itemSelected);\n  }\n  /**\n   * Handles the sortable property and reflects it on the DOM.\n   * @param {boolean|string} value The sortable parameter.\n   */\n  set sortable(value) {\n    if (/boolean|string/g.test(typeof value)) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SORTABLE, String(value));\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SORTABLE);\n    }\n  }\n  get sortable() {\n    return this.boolVal(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SORTABLE, LIST_VIEW_DEFAULTS.sortable);\n  }\n  /**\n   * Sets the items to be suppress deactivation for mixed selection only.\n   * @param {boolean|string} value The value.\n   */\n  set suppressDeactivation(value) {\n    if (/boolean|string/g.test(typeof value)) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SUPPRESS_DEACTIVATION, String(value));\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SUPPRESS_DEACTIVATION);\n    }\n  }\n  get suppressDeactivation() {\n    return this.boolVal(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SUPPRESS_DEACTIVATION, LIST_VIEW_DEFAULTS.suppressDeactivation);\n  }\n  /**\n   * Sets the items to be suppress deselection for single selection only.\n   * @param {boolean|string} value The value.\n   */\n  set suppressDeselection(value) {\n    if (/boolean|string/g.test(typeof value)) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SUPPRESS_DESELECTION, String(value));\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SUPPRESS_DESELECTION);\n    }\n  }\n  get suppressDeselection() {\n    return this.boolVal(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SUPPRESS_DESELECTION, LIST_VIEW_DEFAULTS.suppressDeselection);\n  }\n  /**\n   * Checkboxes will not render if true, only apply to multiple selection.\n   * @param {boolean|string} value The value.\n   */\n  set hideCheckboxes(value) {\n    if (/boolean|string/g.test(typeof value)) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.HIDE_CHECKBOXES, String(value));\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.HIDE_CHECKBOXES);\n    }\n    this.#toggleCheckboxes();\n  }\n  get hideCheckboxes() {\n    return this.boolVal(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.HIDE_CHECKBOXES, LIST_VIEW_DEFAULTS.hideCheckboxes);\n  }\n  /**\n   * Set the aria label text\n   * @param {string} value The label text\n   */\n  set label(value) {\n    if (value) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.LABEL, value);\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.LABEL);\n    }\n    this.body?.setAttribute(\"aria-label\", this.label);\n  }\n  get label() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.LABEL) || LIST_VIEW_DEFAULTS.label;\n  }\n  /**\n   * Set checkbox state in given listview item.\n   * @private\n   * @param {HTMLElement} item The listview item.\n   * @param {boolean} isChecked The value to be set.\n   * @returns {void}\n   */\n  #setCheckbox(item, isChecked = false) {\n    const cb = item?.querySelector(\".list-item-checkbox\");\n    if (cb)\n      cb.checked = isChecked;\n  }\n  /**\n   * Trigger the given event.\n   * @private\n   * @param {string} eventtName The event name to be trigger.\n   * @param {object} args Extra data.\n   * @returns {void}\n   */\n  #triggerEvent(eventtName, args = {}) {\n    this.triggerEvent(eventtName, this, { bubbles: true, detail: { elem: this, ...args } });\n  }\n  /**\n   * Set a list item to be activated, in current page and data.\n   * @param {number} index the zero based index.\n   * @returns {boolean} Is veto.\n   */\n  #activateItemInPage(index) {\n    if (this.data?.[index]?.disabled)\n      return true;\n    const dataIndex = this.dataIndex(index);\n    if (this.#activatedIndex !== -1) {\n      const activatedIndex = this.ds.findIndex((d) => d.itemActivated);\n      this.#isApply = true;\n      if (activatedIndex === dataIndex) {\n        if (!this.suppressDeactivation)\n          return true;\n        if (this.isInPage(activatedIndex)) {\n          return this.#deactivateItemInPage(this.pageIndex(activatedIndex));\n        }\n        return this.deactivateItem(activatedIndex);\n      }\n      if (this.isInPage(activatedIndex)) {\n        if (!this.#deactivateItemInPage(this.pageIndex(activatedIndex))) {\n          return false;\n        }\n      } else if (!this.deactivateItem(activatedIndex))\n        return false;\n    }\n    const item = this.#itemByIndex(index);\n    const args = () => ({ item, index, dataIndex, data: this.data[index] });\n    if (!this.triggerVetoableEvent(\"beforeitemactivated\", { ...args() })) {\n      return false;\n    }\n    item?.setAttribute(\"activated\", \"\");\n    this.#activatedIndex = dataIndex;\n    this.data[index].itemActivated = true;\n    this.#triggerEvent(\"itemactivated\", { ...args() });\n    this.focusLi(item);\n    return true;\n  }\n  /**\n   * Set a list item to be deactivated, in current page and data.\n   * @param {number} index the zero based index\n   * @returns {boolean} Is veto.\n   */\n  #deactivateItemInPage(index) {\n    if (this.data?.[index]?.disabled)\n      return true;\n    if (this.#activatedIndex === -1)\n      return true;\n    const dataIndex = this.dataIndex(index);\n    if (this.#isApply)\n      this.#isApply = false;\n    else {\n      const activatedIndex = this.ds.findIndex((d) => d.itemActivated);\n      if (activatedIndex === dataIndex && !this.suppressDeactivation)\n        return false;\n    }\n    const item = this.#itemByIndex(index);\n    const args = () => ({ item, index, dataIndex, data: this.data[index] });\n    if (!this.triggerVetoableEvent(\"beforeitemdeactivated\", { ...args() })) {\n      return false;\n    }\n    delete this.data[index].itemActivated;\n    item?.removeAttribute(\"activated\");\n    this.#activatedIndex = -1;\n    this.#triggerEvent(\"itemdeactivated\", { ...args() });\n    this.focusLi(item);\n    return true;\n  }\n  /**\n   * Set a list item to be activated, in dataset.\n   * @param {number} dataIndex the zero based dataIndex\n   * @returns {boolean} Is veto.\n   */\n  activateItem(dataIndex) {\n    if (this.ds?.[dataIndex]?.disabled || dataIndex === -1)\n      return true;\n    if (this.isInPage(dataIndex)) {\n      return this.#activateItemInPage(this.pageIndex(dataIndex));\n    }\n    if (this.#activatedIndex !== -1) {\n      const activatedIndex = this.ds.findIndex((d) => d.itemActivated);\n      this.#isApply = true;\n      if (activatedIndex === dataIndex) {\n        if (!this.suppressDeactivation)\n          return true;\n        if (this.isInPage(activatedIndex)) {\n          return this.#deactivateItemInPage(this.pageIndex(activatedIndex));\n        }\n        return this.deactivateItem(activatedIndex);\n      }\n      if (this.isInPage(activatedIndex)) {\n        if (!this.#deactivateItemInPage(this.pageIndex(activatedIndex))) {\n          return false;\n        }\n      } else if (!this.deactivateItem(activatedIndex))\n        return false;\n    }\n    const args = () => ({ dataIndex, data: this.ds[dataIndex] });\n    if (!this.triggerVetoableEvent(\"beforeitemactivated\", { ...args() })) {\n      return false;\n    }\n    this.#activatedIndex = dataIndex;\n    this.ds[dataIndex].itemActivated = true;\n    this.#triggerEvent(\"itemactivated\", { ...args() });\n    return true;\n  }\n  /**\n   * Set a list item to be deactivated, in dataset\n   * @param {number} dataIndex the zero based dataIndex\n   * @returns {boolean} False, if veto.\n   */\n  deactivateItem(dataIndex) {\n    if (this.ds?.[dataIndex]?.disabled)\n      return true;\n    if (this.#activatedIndex === -1)\n      return true;\n    if (this.isInPage(dataIndex)) {\n      return this.#deactivateItemInPage(this.pageIndex(dataIndex));\n    }\n    if (this.#isApply)\n      this.#isApply = false;\n    else {\n      const activatedIndex = this.ds.findIndex((d) => d.itemActivated);\n      if (activatedIndex === dataIndex && !this.suppressDeactivation)\n        return false;\n    }\n    const args = () => ({ dataIndex, data: this.ds[dataIndex] });\n    if (!this.triggerVetoableEvent(\"beforeitemdeactivated\", { ...args() })) {\n      return false;\n    }\n    if (this.ds[dataIndex]?.itemActivated) {\n      delete this.ds[dataIndex].itemActivated;\n    }\n    this.#activatedIndex = -1;\n    this.#triggerEvent(\"itemdeactivated\", { ...args() });\n    return true;\n  }\n  /**\n   * Set a list item to be selected, in current page and data.\n   * @private\n   * @param {number} index the zero based index.\n   * @returns {boolean} Is veto.\n   */\n  #selectInPage(index) {\n    if (this.data?.[index]?.disabled)\n      return true;\n    const dataIndex = this.dataIndex(index);\n    const selected = this.selected;\n    if (this.selectable === \"single\" && selected) {\n      const isSame = selected.index === dataIndex;\n      if (isSame && !this.suppressDeselection)\n        return true;\n      this.#isApply = true;\n      if (this.isInPage(selected.index)) {\n        if (!this.#deselectInPage(this.pageIndex(selected.index))) {\n          return false;\n        }\n      } else if (!this.deselect(selected.index))\n        return false;\n      if (isSame)\n        return true;\n    }\n    const item = this.#itemByIndex(index);\n    const cb = item?.querySelector(\".list-item-checkbox\");\n    const key = this.selectable === \"single\" ? \"selectedItem\" : \"selectedItems\";\n    const args = { item, index, dataIndex, data: this.data[index] };\n    this.#isTargetCheckbox = false;\n    if (!this.triggerVetoableEvent(\"beforeselected\", { ...args, [key]: this.selected })) {\n      this.#setCheckbox(item, false);\n      return false;\n    }\n    this.data[index].itemSelected = true;\n    if (cb)\n      cb.checked = true;\n    item?.setAttribute(\"selected\", \"\");\n    if (this.selectable === \"mixed\")\n      item?.setAttribute(\"hide-selected-color\", \"\");\n    this.#triggerEvent(\"selected\", { ...args, [key]: this.selected });\n    this.focusLi(item);\n    return true;\n  }\n  /**\n   * Set a list item to be deselected, in current page and data.\n   * @private\n   * @param {number} index the zero based index.\n   * @returns {boolean} Is veto.\n   */\n  #deselectInPage(index) {\n    if (this.data?.[index]?.disabled)\n      return true;\n    const selected = this.selected;\n    if (!selected || /^(multiple|mixed)$/g.test(String(this.selectable)) && !selected.length)\n      return true;\n    if (this.selectable === \"single\") {\n      if (this.#isApply)\n        this.#isApply = false;\n      else if (this.dataIndex(index) === selected.index && !this.suppressDeselection)\n        return false;\n    }\n    const item = this.#itemByIndex(index);\n    const dataIndex = this.dataIndex(index);\n    const cb = item?.querySelector(\".list-item-checkbox\");\n    const key = this.selectable === \"single\" ? \"selectedItem\" : \"selectedItems\";\n    const args = { item, index, dataIndex, data: this.data[index] };\n    this.#isTargetCheckbox = false;\n    if (!this.triggerVetoableEvent(\"beforedeselected\", { ...args, [key]: this.selected })) {\n      this.#setCheckbox(item, true);\n      return false;\n    }\n    delete this.data[index].itemSelected;\n    if (cb)\n      cb.checked = false;\n    item?.removeAttribute(\"selected\");\n    item?.removeAttribute(\"hide-selected-color\");\n    this.#triggerEvent(\"deselected\", { ...args, [key]: this.selected });\n    this.focusLi(item);\n    return true;\n  }\n  /**\n   * Set a list item to be selected, in dataset.\n   * @param {number} dataIndex the zero based dataIndex.\n   * @returns {boolean} Is veto.\n   */\n  select(dataIndex) {\n    if (this.ds?.[dataIndex]?.disabled)\n      return true;\n    if (this.isInPage(dataIndex)) {\n      return this.#selectInPage(this.pageIndex(dataIndex));\n    }\n    const selected = this.selected;\n    if (this.selectable === \"single\" && selected) {\n      const isSame = selected.index === dataIndex;\n      if (isSame && !this.suppressDeselection)\n        return true;\n      this.#isApply = true;\n      if (this.isInPage(selected.index)) {\n        if (!this.#deselectInPage(this.pageIndex(selected.index))) {\n          return false;\n        }\n      } else if (!this.deselect(selected.index))\n        return false;\n      if (isSame)\n        return true;\n    }\n    const key = this.selectable === \"single\" ? \"selectedItem\" : \"selectedItems\";\n    const args = { dataIndex, data: this.ds[dataIndex] };\n    if (!this.triggerVetoableEvent(\"beforeselected\", { ...args, [key]: this.selected })) {\n      return false;\n    }\n    this.ds[dataIndex].itemSelected = true;\n    this.#triggerEvent(\"selected\", { ...args, [key]: this.selected });\n    return true;\n  }\n  /**\n   * Set a list item to be deselected, in dataset.\n   * @param {number} dataIndex the zero based dataIndex.\n   * @returns {boolean} False, if veto.\n   */\n  deselect(dataIndex) {\n    if (this.ds?.[dataIndex]?.disabled)\n      return true;\n    const selected = this.selected;\n    if (!selected || /^(multiple|mixed)$/g.test(String(this.selectable)) && !selected.length)\n      return true;\n    if (this.isInPage(dataIndex)) {\n      return this.#deselectInPage(this.pageIndex(dataIndex));\n    }\n    if (this.selectable === \"single\") {\n      if (this.#isApply)\n        this.#isApply = false;\n      else if (dataIndex === selected.index && !this.suppressDeselection)\n        return false;\n    }\n    const key = this.selectable === \"single\" ? \"selectedItem\" : \"selectedItems\";\n    const args = { dataIndex, data: this.ds[dataIndex] };\n    if (!this.triggerVetoableEvent(\"beforedeselected\", { ...args, [key]: this.selected })) {\n      return false;\n    }\n    delete this.ds[dataIndex].itemSelected;\n    this.#triggerEvent(\"deselected\", { ...args, [key]: this.selected });\n    return true;\n  }\n  /**\n   * Set a all list items to be selected.\n   * @returns {void}\n   */\n  selectAll() {\n    this.toggleAll();\n  }\n  /**\n   * Set a all list items to be deselected.\n   * @returns {void}\n   */\n  deselectAll() {\n    this.toggleAll(true);\n  }\n  /**\n   * Set all list items to be selected or deselected.\n   * @param {boolean} isDeselect If true will deselect all items, otherwise select all.\n   * @returns {void}\n   */\n  toggleAll(isDeselect) {\n    const action = isDeselect ? \"deselect\" : \"select\";\n    if (this.selectable) {\n      const selected = this.selected;\n      let key;\n      let len = 0;\n      if (this.selectable === \"single\") {\n        key = \"selectedItem\";\n        len = selected ? 1 : 0;\n        if (isDeselect && len)\n          this[action](selected.index);\n        if (!isDeselect && !len)\n          this[action](0);\n      }\n      if (/multiple|mixed/g.test(this.selectable)) {\n        key = \"selectedItems\";\n        len = selected.length;\n        this.ds?.forEach((d, i) => this[action](i));\n      }\n      if (this.selected?.length !== len) {\n        this.#triggerEvent(\"selectionchanged\", { [key]: this.selected });\n      }\n    }\n  }\n  /**\n   * Get data for list item\n   * @param {Element} item list item\n   * @returns {any} data object\n   */\n  getListItemData(item) {\n    const dataIdx = item?.getAttribute(\"index\");\n    return dataIdx ? this.data[dataIdx] : {};\n  }\n  /**\n   * Return #focusedLiIndex\n   * @returns {any} focusedLiIndex\n   */\n  getFocusedLiIndex() {\n    return this.#focusedLiIndex;\n  }\n  /**\n   * Return all selected Li indexes\n   * @returns {any} List of selected li index\n   */\n  getAllSelectedLiIndex() {\n    const listOfIndex = [];\n    this.container?.querySelectorAll(\"ids-swappable-item[selected]\").forEach((item) => {\n      listOfIndex.push(+(item.getAttribute(\"index\") ?? -1));\n    });\n    return listOfIndex;\n  }\n};\nIdsListView = __decorateClass([\n  (0,_core_ids_decorators__WEBPACK_IMPORTED_MODULE_0__.customElement)(\"ids-list-view\"),\n  (0,_core_ids_decorators__WEBPACK_IMPORTED_MODULE_0__.scss)(_ids_list_view_scss__WEBPACK_IMPORTED_MODULE_16__[\"default\"])\n], IdsListView);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/ids-list-view/ids-list-view.ts\n");

/***/ }),

/***/ "./src/components/ids-trigger-field/ids-trigger-field.ts":
/*!***************************************************************!*\
  !*** ./src/components/ids-trigger-field/ids-trigger-field.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ IdsTriggerField)\n/* harmony export */ });\n/* harmony import */ var _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/ids-attributes */ \"./src/core/ids-attributes.ts\");\n/* harmony import */ var _core_ids_decorators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/ids-decorators */ \"./src/core/ids-decorators.ts\");\n/* harmony import */ var _utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/ids-string-utils/ids-string-utils */ \"./src/utils/ids-string-utils/ids-string-utils.ts\");\n/* harmony import */ var _utils_ids_xss_utils_ids_xss_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/ids-xss-utils/ids-xss-utils */ \"./src/utils/ids-xss-utils/ids-xss-utils.ts\");\n/* harmony import */ var _ids_input_ids_input__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ids-input/ids-input */ \"./src/components/ids-input/ids-input.ts\");\n/* harmony import */ var _ids_trigger_button__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ids-trigger-button */ \"./src/components/ids-trigger-field/ids-trigger-button.ts\");\n/* harmony import */ var _ids_trigger_field_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ids-trigger-field.scss */ \"./src/components/ids-trigger-field/ids-trigger-field.scss\");\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result)\n    __defProp(target, key, result);\n  return result;\n};\n\n\n\n\n\n\n\nlet IdsTriggerField = class extends _ids_input_ids_input__WEBPACK_IMPORTED_MODULE_4__[\"default\"] {\n  /**\n   * Call the constructor and then initialize\n   */\n  constructor() {\n    super();\n  }\n  /**\n   * Get a list of element dependencies for this component\n   * @returns {object} of elements\n   */\n  get elements() {\n    return {\n      content: this.container?.querySelector(\".ids-trigger-field-content\"),\n      label: this.container?.querySelector(\"label\"),\n      text: this.container?.querySelector(\"ids-text\")\n    };\n  }\n  /**\n   * Custom Element `connectedCallback` implementation\n   * @returns {void}\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    this.#attachTriggerButtonEvents();\n    this.#setFieldHeight();\n  }\n  /**\n   * Return the attributes we handle as getters/setters\n   * @returns {Array} The attributes in an array\n   */\n  static get attributes() {\n    return [\n      ...super.attributes,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.FORMAT,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.TABBABLE\n    ];\n  }\n  /**\n   * Push color variant to the container element\n   * @returns {void}\n   */\n  onColorVariantRefresh() {\n    this.buttons.forEach((btn) => {\n      btn.colorVariant = this.colorVariant;\n    });\n  }\n  /**\n   * Creates the Template for rendering an IdsTriggerField's contents\n   * @returns {string} containing the template\n   */\n  template() {\n    this.templateHostAttributes();\n    const {\n      ariaLabel,\n      containerClass,\n      inputClass,\n      inputState,\n      labelHtml,\n      placeholder,\n      type,\n      value\n    } = this.templateVariables();\n    return `<div class=\"ids-trigger-field ${containerClass}\" part=\"container\">\n      ${labelHtml}\n      <div class=\"field-container\" part=\"field-container\">\n        <slot name=\"trigger-start\"></slot>\n        <slot class=\"content-area\" part=\"content-area\"></slot>\n        <input\n          part=\"input\"\n          id=\"${this.id}-input\"\n          ${type}${inputClass}${placeholder}${inputState}\n          ${ariaLabel}\n          ${value}\n          ></input>\n        <slot name=\"trigger-end\"></slot>\n        <slot name=\"loading-indicator\"></slot>\n      </div>\n      ${this.autocomplete ? `\n        <ids-popup\n          type=\"dropdown\"\n          align=\"bottom, left\"\n          align-target=\"#${this.id}-input\"\n          part=\"popup\"\n        >\n          <ids-list-box slot=\"content\" size=\"${this.size}\"></ids-list-box>\n        </ids-popup>` : \"\"}\n    </div>`;\n  }\n  /**\n   * @readonly\n   * @returns {Array<HTMLElement>} containing references to slotted IdsTriggerButtons on this component\n   */\n  get buttons() {\n    return [...this.querySelectorAll(\"ids-trigger-button\")];\n  }\n  /**\n   * @param {boolean | string} value true if this trigger field's buttons should be made accessible using the tab key\n   */\n  set tabbable(value) {\n    const newValue = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(value);\n    if (newValue) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.TABBABLE, `${(0,_utils_ids_xss_utils_ids_xss_utils__WEBPACK_IMPORTED_MODULE_3__.stripHTML)(`${value}`)}`);\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.TABBABLE);\n    }\n    this.buttons.forEach((button) => {\n      button.tabbable = newValue;\n    });\n  }\n  /**\n   * @returns {boolean} true if this trigger field's buttons are accessible using the tab key\n   */\n  get tabbable() {\n    return (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.TABBABLE));\n  }\n  /**\n   * Sets the disabled attribute\n   * @param {boolean | string} d string value from the disabled attribute\n   */\n  set disabled(d) {\n    super.disabled = d;\n    if ((0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(d)) {\n      this.readonly = false;\n      super.readonly = false;\n      this.buttons.forEach((btn) => {\n        btn.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.DISABLED, \"\");\n        btn.readonly = false;\n      });\n    } else {\n      this.buttons.forEach((btn) => {\n        btn.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.DISABLED);\n      });\n    }\n  }\n  get disabled() {\n    return super.disabled;\n  }\n  /**\n   * Sets the readonly attribute\n   * @param {string} r string value from the read only attribute\n   */\n  set readonly(r) {\n    super.readonly = r;\n    if ((0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(r)) {\n      this.buttons.forEach((btn) => {\n        btn.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.READONLY, \"\");\n        btn.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.DISABLED);\n      });\n    } else {\n      this.buttons.forEach((btn) => {\n        btn.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.READONLY);\n      });\n    }\n  }\n  get readonly() {\n    return super.readonly;\n  }\n  /**\n   * Set format for date, time\n   * @param {string} val date, time format\n   */\n  set format(val) {\n    if (val) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.FORMAT, val);\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.FORMAT);\n    }\n  }\n  /**\n   * Return format\n   * @returns {string} return date format\n   */\n  get format() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.FORMAT);\n  }\n  /**\n   * Establish Internal Event Handlers\n   * @private\n   */\n  #attachTriggerButtonEvents() {\n    this.onEvent(\"click.trigger-button\", this, (e) => {\n      const btn = e.target;\n      if (btn)\n        this.trigger();\n    });\n  }\n  /**\n   * Set field height and compact attributes\n   * @private\n   * @returns {void}\n   */\n  #setFieldHeight() {\n    const setAttr = (btn, attr, val) => {\n      if (this.hasAttribute(attr))\n        btn?.setAttribute(attr, val);\n      else\n        btn?.removeAttribute(attr);\n    };\n    this.buttons?.forEach((btn) => {\n      setAttr(btn, _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.COMPACT, \"\");\n      setAttr(btn, _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.FIELD_HEIGHT, this.fieldHeight);\n    });\n  }\n  /**\n   * Updates trigger buttons when the trigger field's fieldHeight property is updated\n   * @param {string} val the new field height setting\n   */\n  onFieldHeightChange(val) {\n    this.buttons.forEach((btn) => {\n      if (val) {\n        const attr = val === \"compact\" ? { name: \"compact\", val: \"\" } : { name: \"field-height\", val };\n        btn.setAttribute(attr.name, attr.val);\n      } else {\n        btn.removeAttribute(\"compact\");\n        btn.removeAttribute(\"field-height\");\n      }\n    });\n  }\n  /**\n   * Fire the trigger event and action.\n   */\n  trigger() {\n    let canTrigger = true;\n    const response = (veto) => {\n      canTrigger = !!veto;\n    };\n    this.triggerEvent(\"beforetriggerclicked\", this, { detail: { elem: this, response } });\n    if (!canTrigger) {\n      return;\n    }\n    this.triggerEvent(\"triggerclicked\", this, { detail: { elem: this } });\n  }\n};\nIdsTriggerField = __decorateClass([\n  (0,_core_ids_decorators__WEBPACK_IMPORTED_MODULE_1__.customElement)(\"ids-trigger-field\"),\n  (0,_core_ids_decorators__WEBPACK_IMPORTED_MODULE_1__.scss)(_ids_trigger_field_scss__WEBPACK_IMPORTED_MODULE_6__[\"default\"])\n], IdsTriggerField);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9pZHMtdHJpZ2dlci1maWVsZC9pZHMtdHJpZ2dlci1maWVsZC50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTJCO0FBQ1M7QUFDUDtBQUNIO0FBRUw7QUFFZDtBQUVZO0FBWW5CLElBQXFCLGtCQUFyQixjQUE2Qyw0REFBUSxDQUFDO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFJcEQsY0FBYztBQUNaLFVBQU07QUFBQSxFQUNSO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU1BLElBQUksV0FBVztBQUNiLFdBQU87QUFBQSxNQUNMLFNBQVMsS0FBSyxXQUFXLGNBQWMsNEJBQTRCO0FBQUEsTUFDbkUsT0FBTyxLQUFLLFdBQVcsY0FBYyxPQUFPO0FBQUEsTUFDNUMsTUFBTSxLQUFLLFdBQVcsY0FBYyxVQUFVO0FBQUEsSUFDaEQ7QUFBQSxFQUNGO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU1BLG9CQUFvQjtBQUNsQixVQUFNLGtCQUFrQjtBQUN4QixTQUFLLDJCQUEyQjtBQUNoQyxTQUFLLGdCQUFnQjtBQUFBLEVBQ3ZCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU1BLFdBQVcsYUFBYTtBQUN0QixXQUFPO0FBQUEsTUFDTCxHQUFHLE1BQU07QUFBQSxNQUNULG1FQUFpQjtBQUFOLE1BQ1gscUVBQW1CO0FBQVIsSUFDYjtBQUFBLEVBQ0Y7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsd0JBQThCO0FBQzVCLFNBQUssUUFBUSxRQUFRLENBQUMsUUFBUTtBQUFFLFVBQUksZUFBZSxLQUFLO0FBQUEsSUFBYyxDQUFDO0FBQUEsRUFDekU7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsV0FBVztBQUNULFNBQUssdUJBQXVCO0FBQzVCLFVBQU07QUFBQSxNQUNKO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLElBQ0YsSUFBSSxLQUFLLGtCQUFrQjtBQUUzQixXQUFPLGlDQUFpQztBQUFBLFFBQ3BDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLGdCQU1RLEtBQUs7QUFBQSxZQUNULE9BQU8sYUFBYSxjQUFjO0FBQUEsWUFDbEM7QUFBQSxZQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxRQUtKLEtBQUssZUFBZTtBQUFBO0FBQUE7QUFBQTtBQUFBLDJCQUlELEtBQUs7QUFBQTtBQUFBO0FBQUEsK0NBR2UsS0FBSztBQUFBLHdCQUM1QjtBQUFBO0FBQUEsRUFFdEI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsSUFBSSxVQUFVO0FBQ1osV0FBTyxDQUFDLEdBQUcsS0FBSyxpQkFBbUMsb0JBQW9CLENBQUM7QUFBQSxFQUMxRTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS0EsSUFBSSxTQUFTLE9BQXlCO0FBQ3BDLFVBQU0sV0FBVyxzRkFBWSxDQUFDLEtBQUs7QUFFbkMsUUFBSSxVQUFVO0FBQ1osV0FBSyxhQUFhLHFFQUFtQixFQUFFLEdBQUcsNkVBQVMsQ0FBQyxHQUFHLE9BQU8sR0FBRztBQUFBLElBQ25FLE9BQU87QUFDTCxXQUFLLGdCQUFnQixxRUFBbUI7QUFBQSxJQUMxQztBQUVBLFNBQUssUUFBUSxRQUFRLENBQUMsV0FBVztBQUMvQixhQUFPLFdBQVc7QUFBQSxJQUNwQixDQUFDO0FBQUEsRUFDSDtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS0EsSUFBSSxXQUFvQjtBQUN0QixXQUFPLHNGQUFZLENBQUMsS0FBSyxhQUFhLHFFQUFtQixDQUFDO0FBQUEsRUFDNUQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsSUFBSSxTQUFTLEdBQXFCO0FBQ2hDLFVBQU0sV0FBVztBQUNqQixRQUFJLHNGQUFZLENBQUMsQ0FBQyxHQUFHO0FBQ25CLFdBQUssV0FBVztBQUNoQixZQUFNLFdBQVc7QUFFakIsV0FBSyxRQUFRLFFBQVEsQ0FBQyxRQUFRO0FBQzVCLFlBQUksYUFBYSxxRUFBbUIsRUFBRSxFQUFFO0FBQ3hDLFlBQUksV0FBVztBQUFBLE1BQ2pCLENBQUM7QUFBQSxJQUNILE9BQU87QUFDTCxXQUFLLFFBQVEsUUFBUSxDQUFDLFFBQVE7QUFDNUIsWUFBSSxnQkFBZ0IscUVBQW1CO0FBQUEsTUFDekMsQ0FBQztBQUFBLElBQ0g7QUFBQSxFQUNGO0FBQUEsRUFFQSxJQUFJLFdBQW9CO0FBQ3RCLFdBQU8sTUFBTTtBQUFBLEVBQ2Y7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsSUFBSSxTQUFTLEdBQXFCO0FBQ2hDLFVBQU0sV0FBVztBQUVqQixRQUFJLHNGQUFZLENBQUMsQ0FBQyxHQUFHO0FBQ25CLFdBQUssUUFBUSxRQUFRLENBQUMsUUFBUTtBQUM1QixZQUFJLGFBQWEscUVBQW1CLEVBQUUsRUFBRTtBQUN4QyxZQUFJLGdCQUFnQixxRUFBbUI7QUFBQSxNQUN6QyxDQUFDO0FBQUEsSUFDSCxPQUFPO0FBQ0wsV0FBSyxRQUFRLFFBQVEsQ0FBQyxRQUFRO0FBQzVCLFlBQUksZ0JBQWdCLHFFQUFtQjtBQUFBLE1BQ3pDLENBQUM7QUFBQSxJQUNIO0FBQUEsRUFDRjtBQUFBLEVBRUEsSUFBSSxXQUFvQjtBQUN0QixXQUFPLE1BQU07QUFBQSxFQUNmO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU1BLElBQUksT0FBTyxLQUFvQjtBQUM3QixRQUFJLEtBQUs7QUFDUCxXQUFLLGFBQWEsbUVBQWlCLEVBQUUsR0FBRztBQUFBLElBQzFDLE9BQU87QUFDTCxXQUFLLGdCQUFnQixtRUFBaUI7QUFBQSxJQUN4QztBQUFBLEVBQ0Y7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsSUFBSSxTQUF3QjtBQUMxQixXQUFPLEtBQUssYUFBYSxtRUFBaUI7QUFBQSxFQUM1QztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNQSw2QkFBNkI7QUFDM0IsU0FBSyxRQUFRLHdCQUF3QixNQUFNLENBQUMsTUFBbUI7QUFDN0QsWUFBTSxNQUFPLEVBQUU7QUFDZixVQUFJO0FBQUssYUFBSyxRQUFRO0FBQUEsSUFDeEIsQ0FBQztBQUFBLEVBQ0g7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFPQSxrQkFBd0I7QUFDdEIsVUFBTSxVQUFVLENBQUMsS0FBdUIsTUFBYyxRQUFnQjtBQUNwRSxVQUFJLEtBQUssYUFBYSxJQUFJO0FBQUcsYUFBSyxhQUFhLE1BQU0sR0FBRztBQUFBO0FBQ25ELGFBQUssZ0JBQWdCLElBQUk7QUFBQSxJQUNoQztBQUVBLFNBQUssU0FBUyxRQUFRLENBQUMsUUFBUTtBQUM3QixjQUFRLEtBQUssb0VBQWtCLEVBQUUsRUFBRTtBQUNuQyxjQUFRLEtBQUsseUVBQXVCLEVBQUUsS0FBSyxXQUFXO0FBQUEsSUFDeEQsQ0FBQztBQUFBLEVBQ0g7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsb0JBQW9CLEtBQW1CO0FBQ3JDLFNBQUssUUFBUSxRQUFRLENBQUMsUUFBUTtBQUM1QixVQUFJLEtBQUs7QUFDUCxjQUFNLE9BQU8sUUFBUSxZQUFZLEVBQUUsTUFBTSxXQUFXLEtBQUssR0FBRyxJQUFJLEVBQUUsTUFBTSxnQkFBZ0IsSUFBSTtBQUM1RixZQUFJLGFBQWEsS0FBSyxNQUFNLEtBQUssR0FBRztBQUFBLE1BQ3RDLE9BQU87QUFDTCxZQUFJLGdCQUFnQixTQUFTO0FBQzdCLFlBQUksZ0JBQWdCLGNBQWM7QUFBQSxNQUNwQztBQUFBLElBQ0YsQ0FBQztBQUFBLEVBQ0g7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUtBLFVBQWdCO0FBQ2QsUUFBSSxhQUFhO0FBQ2pCLFVBQU0sV0FBVyxDQUFDLFNBQWM7QUFDOUIsbUJBQWEsQ0FBQyxDQUFDO0FBQUEsSUFDakI7QUFDQSxTQUFLLGFBQWEsd0JBQXdCLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxNQUFNLFNBQVMsRUFBRSxDQUFDO0FBRXBGLFFBQUksQ0FBQyxZQUFZO0FBQ2Y7QUFBQSxJQUNGO0FBQ0EsU0FBSyxhQUFhLGtCQUFrQixNQUFNLEVBQUUsUUFBUSxFQUFFLE1BQU0sS0FBSyxFQUFFLENBQUM7QUFBQSxFQUN0RTtBQUNGO0FBN1BxQixrQkFBckI7QUFBQSxFQUZDLG1FQUFhLENBQUMsbUJBQW1CO0FBQUEsRUFDakMsMERBQUksQ0FBQywrREFBTTtBQUFBLEdBQ1MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pZHMtZW50ZXJwcmlzZS13Yy8uL3NyYy9jb21wb25lbnRzL2lkcy10cmlnZ2VyLWZpZWxkL2lkcy10cmlnZ2VyLWZpZWxkLnRzP2ViMWMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXR0cmlidXRlcyB9IGZyb20gJy4uLy4uL2NvcmUvaWRzLWF0dHJpYnV0ZXMnO1xuaW1wb3J0IHsgY3VzdG9tRWxlbWVudCwgc2NzcyB9IGZyb20gJy4uLy4uL2NvcmUvaWRzLWRlY29yYXRvcnMnO1xuaW1wb3J0IHsgc3RyaW5nVG9Cb29sIH0gZnJvbSAnLi4vLi4vdXRpbHMvaWRzLXN0cmluZy11dGlscy9pZHMtc3RyaW5nLXV0aWxzJztcbmltcG9ydCB7IHN0cmlwSFRNTCB9IGZyb20gJy4uLy4uL3V0aWxzL2lkcy14c3MtdXRpbHMvaWRzLXhzcy11dGlscyc7XG5cbmltcG9ydCBJZHNJbnB1dCBmcm9tICcuLi9pZHMtaW5wdXQvaWRzLWlucHV0JztcblxuaW1wb3J0ICcuL2lkcy10cmlnZ2VyLWJ1dHRvbic7XG5cbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9pZHMtdHJpZ2dlci1maWVsZC5zY3NzJztcbmltcG9ydCB0eXBlIElkc1RyaWdnZXJCdXR0b24gZnJvbSAnLi9pZHMtdHJpZ2dlci1idXR0b24nO1xuXG4vKipcbiAqIElEUyBUcmlnZ2VyIEZpZWxkIENvbXBvbmVudFxuICogQHR5cGUge0lkc1RyaWdnZXJGaWVsZH1cbiAqIEBpbmhlcml0cyBJZHNJbnB1dFxuICogQHBhcnQgZmllbGQgLSB0aGUgZmllbGQgY29udGFpbmVyXG4gKiBAcGFydCBjb250ZW50IC0gdGhlIGNvbnRlbnQgd2l0aCB0cmlnZ2VyIGJ1dHRvbnMgYW5kIGlucHV0IGVsZW1lbnRcbiAqL1xuQGN1c3RvbUVsZW1lbnQoJ2lkcy10cmlnZ2VyLWZpZWxkJylcbkBzY3NzKHN0eWxlcylcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIElkc1RyaWdnZXJGaWVsZCBleHRlbmRzIElkc0lucHV0IHtcbiAgLyoqXG4gICAqIENhbGwgdGhlIGNvbnN0cnVjdG9yIGFuZCB0aGVuIGluaXRpYWxpemVcbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGEgbGlzdCBvZiBlbGVtZW50IGRlcGVuZGVuY2llcyBmb3IgdGhpcyBjb21wb25lbnRcbiAgICogQHJldHVybnMge29iamVjdH0gb2YgZWxlbWVudHNcbiAgICovXG4gIGdldCBlbGVtZW50cygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY29udGVudDogdGhpcy5jb250YWluZXI/LnF1ZXJ5U2VsZWN0b3IoJy5pZHMtdHJpZ2dlci1maWVsZC1jb250ZW50JyksXG4gICAgICBsYWJlbDogdGhpcy5jb250YWluZXI/LnF1ZXJ5U2VsZWN0b3IoJ2xhYmVsJyksXG4gICAgICB0ZXh0OiB0aGlzLmNvbnRhaW5lcj8ucXVlcnlTZWxlY3RvcignaWRzLXRleHQnKSxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEN1c3RvbSBFbGVtZW50IGBjb25uZWN0ZWRDYWxsYmFja2AgaW1wbGVtZW50YXRpb25cbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgIHRoaXMuI2F0dGFjaFRyaWdnZXJCdXR0b25FdmVudHMoKTtcbiAgICB0aGlzLiNzZXRGaWVsZEhlaWdodCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgYXR0cmlidXRlcyB3ZSBoYW5kbGUgYXMgZ2V0dGVycy9zZXR0ZXJzXG4gICAqIEByZXR1cm5zIHtBcnJheX0gVGhlIGF0dHJpYnV0ZXMgaW4gYW4gYXJyYXlcbiAgICovXG4gIHN0YXRpYyBnZXQgYXR0cmlidXRlcygpIHtcbiAgICByZXR1cm4gW1xuICAgICAgLi4uc3VwZXIuYXR0cmlidXRlcyxcbiAgICAgIGF0dHJpYnV0ZXMuRk9STUFULFxuICAgICAgYXR0cmlidXRlcy5UQUJCQUJMRVxuICAgIF07XG4gIH1cblxuICAvKipcbiAgICogUHVzaCBjb2xvciB2YXJpYW50IHRvIHRoZSBjb250YWluZXIgZWxlbWVudFxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIG9uQ29sb3JWYXJpYW50UmVmcmVzaCgpOiB2b2lkIHtcbiAgICB0aGlzLmJ1dHRvbnMuZm9yRWFjaCgoYnRuKSA9PiB7IGJ0bi5jb2xvclZhcmlhbnQgPSB0aGlzLmNvbG9yVmFyaWFudDsgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyB0aGUgVGVtcGxhdGUgZm9yIHJlbmRlcmluZyBhbiBJZHNUcmlnZ2VyRmllbGQncyBjb250ZW50c1xuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBjb250YWluaW5nIHRoZSB0ZW1wbGF0ZVxuICAgKi9cbiAgdGVtcGxhdGUoKSB7XG4gICAgdGhpcy50ZW1wbGF0ZUhvc3RBdHRyaWJ1dGVzKCk7XG4gICAgY29uc3Qge1xuICAgICAgYXJpYUxhYmVsLFxuICAgICAgY29udGFpbmVyQ2xhc3MsXG4gICAgICBpbnB1dENsYXNzLFxuICAgICAgaW5wdXRTdGF0ZSxcbiAgICAgIGxhYmVsSHRtbCxcbiAgICAgIHBsYWNlaG9sZGVyLFxuICAgICAgdHlwZSxcbiAgICAgIHZhbHVlXG4gICAgfSA9IHRoaXMudGVtcGxhdGVWYXJpYWJsZXMoKTtcblxuICAgIHJldHVybiBgPGRpdiBjbGFzcz1cImlkcy10cmlnZ2VyLWZpZWxkICR7Y29udGFpbmVyQ2xhc3N9XCIgcGFydD1cImNvbnRhaW5lclwiPlxuICAgICAgJHtsYWJlbEh0bWx9XG4gICAgICA8ZGl2IGNsYXNzPVwiZmllbGQtY29udGFpbmVyXCIgcGFydD1cImZpZWxkLWNvbnRhaW5lclwiPlxuICAgICAgICA8c2xvdCBuYW1lPVwidHJpZ2dlci1zdGFydFwiPjwvc2xvdD5cbiAgICAgICAgPHNsb3QgY2xhc3M9XCJjb250ZW50LWFyZWFcIiBwYXJ0PVwiY29udGVudC1hcmVhXCI+PC9zbG90PlxuICAgICAgICA8aW5wdXRcbiAgICAgICAgICBwYXJ0PVwiaW5wdXRcIlxuICAgICAgICAgIGlkPVwiJHt0aGlzLmlkfS1pbnB1dFwiXG4gICAgICAgICAgJHt0eXBlfSR7aW5wdXRDbGFzc30ke3BsYWNlaG9sZGVyfSR7aW5wdXRTdGF0ZX1cbiAgICAgICAgICAke2FyaWFMYWJlbH1cbiAgICAgICAgICAke3ZhbHVlfVxuICAgICAgICAgID48L2lucHV0PlxuICAgICAgICA8c2xvdCBuYW1lPVwidHJpZ2dlci1lbmRcIj48L3Nsb3Q+XG4gICAgICAgIDxzbG90IG5hbWU9XCJsb2FkaW5nLWluZGljYXRvclwiPjwvc2xvdD5cbiAgICAgIDwvZGl2PlxuICAgICAgJHt0aGlzLmF1dG9jb21wbGV0ZSA/IGBcbiAgICAgICAgPGlkcy1wb3B1cFxuICAgICAgICAgIHR5cGU9XCJkcm9wZG93blwiXG4gICAgICAgICAgYWxpZ249XCJib3R0b20sIGxlZnRcIlxuICAgICAgICAgIGFsaWduLXRhcmdldD1cIiMke3RoaXMuaWR9LWlucHV0XCJcbiAgICAgICAgICBwYXJ0PVwicG9wdXBcIlxuICAgICAgICA+XG4gICAgICAgICAgPGlkcy1saXN0LWJveCBzbG90PVwiY29udGVudFwiIHNpemU9XCIke3RoaXMuc2l6ZX1cIj48L2lkcy1saXN0LWJveD5cbiAgICAgICAgPC9pZHMtcG9wdXA+YCA6ICcnfVxuICAgIDwvZGl2PmA7XG4gIH1cblxuICAvKipcbiAgICogQHJlYWRvbmx5XG4gICAqIEByZXR1cm5zIHtBcnJheTxIVE1MRWxlbWVudD59IGNvbnRhaW5pbmcgcmVmZXJlbmNlcyB0byBzbG90dGVkIElkc1RyaWdnZXJCdXR0b25zIG9uIHRoaXMgY29tcG9uZW50XG4gICAqL1xuICBnZXQgYnV0dG9ucygpIHtcbiAgICByZXR1cm4gWy4uLnRoaXMucXVlcnlTZWxlY3RvckFsbDxJZHNUcmlnZ2VyQnV0dG9uPignaWRzLXRyaWdnZXItYnV0dG9uJyldO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbiB8IHN0cmluZ30gdmFsdWUgdHJ1ZSBpZiB0aGlzIHRyaWdnZXIgZmllbGQncyBidXR0b25zIHNob3VsZCBiZSBtYWRlIGFjY2Vzc2libGUgdXNpbmcgdGhlIHRhYiBrZXlcbiAgICovXG4gIHNldCB0YWJiYWJsZSh2YWx1ZTogYm9vbGVhbiB8IHN0cmluZykge1xuICAgIGNvbnN0IG5ld1ZhbHVlID0gc3RyaW5nVG9Cb29sKHZhbHVlKTtcblxuICAgIGlmIChuZXdWYWx1ZSkge1xuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlcy5UQUJCQUJMRSwgYCR7c3RyaXBIVE1MKGAke3ZhbHVlfWApfWApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGVzLlRBQkJBQkxFKTtcbiAgICB9XG5cbiAgICB0aGlzLmJ1dHRvbnMuZm9yRWFjaCgoYnV0dG9uKSA9PiB7XG4gICAgICBidXR0b24udGFiYmFibGUgPSBuZXdWYWx1ZTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGlzIHRyaWdnZXIgZmllbGQncyBidXR0b25zIGFyZSBhY2Nlc3NpYmxlIHVzaW5nIHRoZSB0YWIga2V5XG4gICAqL1xuICBnZXQgdGFiYmFibGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHN0cmluZ1RvQm9vbCh0aGlzLmdldEF0dHJpYnV0ZShhdHRyaWJ1dGVzLlRBQkJBQkxFKSk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgZGlzYWJsZWQgYXR0cmlidXRlXG4gICAqIEBwYXJhbSB7Ym9vbGVhbiB8IHN0cmluZ30gZCBzdHJpbmcgdmFsdWUgZnJvbSB0aGUgZGlzYWJsZWQgYXR0cmlidXRlXG4gICAqL1xuICBzZXQgZGlzYWJsZWQoZDogYm9vbGVhbiB8IHN0cmluZykge1xuICAgIHN1cGVyLmRpc2FibGVkID0gZDtcbiAgICBpZiAoc3RyaW5nVG9Cb29sKGQpKSB7XG4gICAgICB0aGlzLnJlYWRvbmx5ID0gZmFsc2U7XG4gICAgICBzdXBlci5yZWFkb25seSA9IGZhbHNlO1xuXG4gICAgICB0aGlzLmJ1dHRvbnMuZm9yRWFjaCgoYnRuKSA9PiB7XG4gICAgICAgIGJ0bi5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlcy5ESVNBQkxFRCwgJycpO1xuICAgICAgICBidG4ucmVhZG9ubHkgPSBmYWxzZTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmJ1dHRvbnMuZm9yRWFjaCgoYnRuKSA9PiB7XG4gICAgICAgIGJ0bi5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlcy5ESVNBQkxFRCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBnZXQgZGlzYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHN1cGVyLmRpc2FibGVkO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHJlYWRvbmx5IGF0dHJpYnV0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gciBzdHJpbmcgdmFsdWUgZnJvbSB0aGUgcmVhZCBvbmx5IGF0dHJpYnV0ZVxuICAgKi9cbiAgc2V0IHJlYWRvbmx5KHI6IGJvb2xlYW4gfCBzdHJpbmcpIHtcbiAgICBzdXBlci5yZWFkb25seSA9IHI7XG5cbiAgICBpZiAoc3RyaW5nVG9Cb29sKHIpKSB7XG4gICAgICB0aGlzLmJ1dHRvbnMuZm9yRWFjaCgoYnRuKSA9PiB7XG4gICAgICAgIGJ0bi5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlcy5SRUFET05MWSwgJycpO1xuICAgICAgICBidG4ucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZXMuRElTQUJMRUQpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYnV0dG9ucy5mb3JFYWNoKChidG4pID0+IHtcbiAgICAgICAgYnRuLnJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGVzLlJFQURPTkxZKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGdldCByZWFkb25seSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gc3VwZXIucmVhZG9ubHk7XG4gIH1cblxuICAvKipcbiAgICogU2V0IGZvcm1hdCBmb3IgZGF0ZSwgdGltZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsIGRhdGUsIHRpbWUgZm9ybWF0XG4gICAqL1xuICBzZXQgZm9ybWF0KHZhbDogc3RyaW5nIHwgbnVsbCkge1xuICAgIGlmICh2YWwpIHtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZXMuRk9STUFULCB2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGVzLkZPUk1BVCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBmb3JtYXRcbiAgICogQHJldHVybnMge3N0cmluZ30gcmV0dXJuIGRhdGUgZm9ybWF0XG4gICAqL1xuICBnZXQgZm9ybWF0KCk6IHN0cmluZyB8IG51bGwge1xuICAgIHJldHVybiB0aGlzLmdldEF0dHJpYnV0ZShhdHRyaWJ1dGVzLkZPUk1BVCk7XG4gIH1cblxuICAvKipcbiAgICogRXN0YWJsaXNoIEludGVybmFsIEV2ZW50IEhhbmRsZXJzXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICAjYXR0YWNoVHJpZ2dlckJ1dHRvbkV2ZW50cygpIHtcbiAgICB0aGlzLm9uRXZlbnQoJ2NsaWNrLnRyaWdnZXItYnV0dG9uJywgdGhpcywgKGU6IEN1c3RvbUV2ZW50KSA9PiB7XG4gICAgICBjb25zdCBidG4gPSAoZS50YXJnZXQgYXMgSWRzVHJpZ2dlckJ1dHRvbik7XG4gICAgICBpZiAoYnRuKSB0aGlzLnRyaWdnZXIoKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgZmllbGQgaGVpZ2h0IGFuZCBjb21wYWN0IGF0dHJpYnV0ZXNcbiAgICogQHByaXZhdGVcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICAjc2V0RmllbGRIZWlnaHQoKTogdm9pZCB7XG4gICAgY29uc3Qgc2V0QXR0ciA9IChidG46IElkc1RyaWdnZXJCdXR0b24sIGF0dHI6IHN0cmluZywgdmFsOiBzdHJpbmcpID0+IHtcbiAgICAgIGlmICh0aGlzLmhhc0F0dHJpYnV0ZShhdHRyKSkgYnRuPy5zZXRBdHRyaWJ1dGUoYXR0ciwgdmFsKTtcbiAgICAgIGVsc2UgYnRuPy5yZW1vdmVBdHRyaWJ1dGUoYXR0cik7XG4gICAgfTtcblxuICAgIHRoaXMuYnV0dG9ucz8uZm9yRWFjaCgoYnRuKSA9PiB7XG4gICAgICBzZXRBdHRyKGJ0biwgYXR0cmlidXRlcy5DT01QQUNULCAnJyk7XG4gICAgICBzZXRBdHRyKGJ0biwgYXR0cmlidXRlcy5GSUVMRF9IRUlHSFQsIHRoaXMuZmllbGRIZWlnaHQpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdHJpZ2dlciBidXR0b25zIHdoZW4gdGhlIHRyaWdnZXIgZmllbGQncyBmaWVsZEhlaWdodCBwcm9wZXJ0eSBpcyB1cGRhdGVkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWwgdGhlIG5ldyBmaWVsZCBoZWlnaHQgc2V0dGluZ1xuICAgKi9cbiAgb25GaWVsZEhlaWdodENoYW5nZSh2YWw6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMuYnV0dG9ucy5mb3JFYWNoKChidG4pID0+IHtcbiAgICAgIGlmICh2YWwpIHtcbiAgICAgICAgY29uc3QgYXR0ciA9IHZhbCA9PT0gJ2NvbXBhY3QnID8geyBuYW1lOiAnY29tcGFjdCcsIHZhbDogJycgfSA6IHsgbmFtZTogJ2ZpZWxkLWhlaWdodCcsIHZhbCB9O1xuICAgICAgICBidG4uc2V0QXR0cmlidXRlKGF0dHIubmFtZSwgYXR0ci52YWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnRuLnJlbW92ZUF0dHJpYnV0ZSgnY29tcGFjdCcpO1xuICAgICAgICBidG4ucmVtb3ZlQXR0cmlidXRlKCdmaWVsZC1oZWlnaHQnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaXJlIHRoZSB0cmlnZ2VyIGV2ZW50IGFuZCBhY3Rpb24uXG4gICAqL1xuICB0cmlnZ2VyKCk6IHZvaWQge1xuICAgIGxldCBjYW5UcmlnZ2VyID0gdHJ1ZTtcbiAgICBjb25zdCByZXNwb25zZSA9ICh2ZXRvOiBhbnkpID0+IHtcbiAgICAgIGNhblRyaWdnZXIgPSAhIXZldG87XG4gICAgfTtcbiAgICB0aGlzLnRyaWdnZXJFdmVudCgnYmVmb3JldHJpZ2dlcmNsaWNrZWQnLCB0aGlzLCB7IGRldGFpbDogeyBlbGVtOiB0aGlzLCByZXNwb25zZSB9IH0pO1xuXG4gICAgaWYgKCFjYW5UcmlnZ2VyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMudHJpZ2dlckV2ZW50KCd0cmlnZ2VyY2xpY2tlZCcsIHRoaXMsIHsgZGV0YWlsOiB7IGVsZW06IHRoaXMgfSB9KTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/components/ids-trigger-field/ids-trigger-field.ts\n");

/***/ }),

/***/ "./src/mixins/ids-pager-mixin/ids-pager-mixin.ts":
/*!*******************************************************!*\
  !*** ./src/mixins/ids-pager-mixin/ids-pager-mixin.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ids_pager_mixin_default)\n/* harmony export */ });\n/* harmony import */ var _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/ids-attributes */ \"./src/core/ids-attributes.ts\");\n/* harmony import */ var _core_ids_data_source__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/ids-data-source */ \"./src/core/ids-data-source.ts\");\n/* harmony import */ var _components_ids_pager_ids_pager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../components/ids-pager/ids-pager */ \"./src/components/ids-pager/ids-pager.ts\");\n/* harmony import */ var _components_ids_button_ids_button__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../components/ids-button/ids-button */ \"./src/components/ids-button/ids-button.ts\");\n/* harmony import */ var _components_ids_menu_button_ids_menu_button__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../components/ids-menu-button/ids-menu-button */ \"./src/components/ids-menu-button/ids-menu-button.ts\");\n\n\n\n\n\nconst PAGINATION_TYPES = {\n  NONE: \"none\",\n  CLIENT_SIDE: \"client-side\",\n  SERVER_SIDE: \"server-side\",\n  STANDALONE: \"standalone\"\n};\nconst IdsPagerMixin = (superclass) => class extends superclass {\n  /** Reference to the user-provided IdsPager component */\n  #pager;\n  /**\n   * Gets the internal IdsDataSource object\n   * @returns {IdsDataSource} object\n   */\n  datasource = new _core_ids_data_source__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n  constructor(...args) {\n    super(...args);\n  }\n  /**\n   * Set the internal IdsPager component\n   * @param {HTMLElement} pager The pager dom element\n   */\n  set pager(pager) {\n    this.#pager = pager;\n    const pageNumber = Math.max(this.pageNumber || 1, 1);\n    const pageSize = Math.max(this.pageSize || 0, 1);\n    this.datasource.pageSize = pageSize;\n    this.pager.innerHTML = this.pagerTemplate();\n    this.pager.total = this.datasource.total;\n    this.pager.pageNumber = pageNumber;\n    this.pager.pageSize = pageSize;\n    this.#attachEventListeners();\n  }\n  /**\n   * Get the internal IdsPager component\n   * @returns {HTMLElement} the pager dom element\n   */\n  get pager() {\n    return this.#pager || this.querySelector(\"ids-pager\") || document.createElement(\"ids-pager\");\n  }\n  /**\n   * Return the attributes we handle as getters/setters\n   * @private\n   * @returns {Array} The attributes in an array\n   */\n  static get attributes() {\n    return [\n      ...superclass.attributes,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.PAGINATION,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.PAGE_NUMBER,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.PAGE_SIZE,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.PAGE_TOTAL\n    ];\n  }\n  /**\n   * Handle Setting changes of the value has changed by calling the getter\n   * in the extending class.\n   * @param {string} name The property name\n   * @param {string} oldValue The property old value\n   * @param {string} newValue The property new value\n   */\n  attributeChangedCallback(name, oldValue, newValue) {\n    super.attributeChangedCallback(name, oldValue, newValue);\n    if (oldValue === newValue) {\n      return;\n    }\n    const shouldReload = [\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.PAGE_NUMBER,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.PAGE_SIZE,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.PAGE_TOTAL,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.PAGINATION\n    ].includes(name);\n    if (shouldReload) {\n      this.connectedCallback();\n    }\n  }\n  /**\n   * Invoked each time the custom element is appended into a document-connected element.\n   * @private\n   */\n  connectedCallback() {\n    super.connectedCallback?.();\n    this.#attachPager();\n  }\n  pagerTemplate() {\n    const pageSize = Math.max(this.pageSize || 0, 1);\n    return `\n      <ids-pager-button first></ids-pager-button>\n      <ids-pager-button previous></ids-pager-button>\n      <ids-pager-input></ids-pager-input>\n      <ids-pager-button next></ids-pager-button>\n      <ids-pager-button last></ids-pager-button>\n      <ids-pager-dropdown slot=\"end\" page-size=\"${pageSize}\"></ids-pager-dropdown>\n    `;\n  }\n  /**\n   * @param {number} pageNumber - a page number to start with\n   * @param {number} pageSize - number of items to return\n   * @returns {Array} the paginated data\n   * @see IdsDataSource.paginate()\n   */\n  paginate(pageNumber = 1, pageSize = 10) {\n    return this.datasource.paginate(pageNumber, pageSize);\n  }\n  /**\n   * Sets the pagination attribute\n   * @param {string} value - none|client-side|standalone\n   */\n  set pagination(value) {\n    this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.PAGINATION, value);\n  }\n  /**\n   * Gets the pagination attribute\n   * @returns {PaginationTypes} default is \"none\"\n   */\n  get pagination() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.PAGINATION) || PAGINATION_TYPES.NONE;\n  }\n  /**\n   * Set the page-number attribute\n   * @param {number} value - new the page-number\n   */\n  set pageNumber(value) {\n    this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.PAGE_NUMBER, String(value));\n    this.pager.pageNumber = value;\n    this.datasource.pageNumber = value;\n  }\n  /**\n   * Get the page-number attribute\n   * @returns {number} - the current page-number\n   */\n  get pageNumber() {\n    return parseInt(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.PAGE_NUMBER) || \"\") || this.pager.pageNumber || 1;\n  }\n  /**\n   * Set the page-size attribute\n   * @param {number} value - new the page-size\n   */\n  set pageSize(value) {\n    this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.PAGE_SIZE, String(value));\n    this.pager.pageSize = Number(value);\n    this.datasource.pageSize = Number(value);\n  }\n  /**\n   * Get the page-size attribute\n   * @returns {number} - the current page-size\n   */\n  get pageSize() {\n    return parseInt(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.PAGE_SIZE) || \"\") || this.pager.pageSize || 1;\n  }\n  /**\n   * Set the page-total attribute\n   * @param {number} value - new the page-total\n   */\n  set pageTotal(value) {\n    this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.PAGE_TOTAL, String(value));\n    this.pager.total = value;\n    this.datasource.total = value;\n  }\n  /**\n   * Get the page-total attribute\n   * @returns {number} - the current page-total\n   */\n  get pageTotal() {\n    return parseInt(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.PAGE_TOTAL) || \"\") || this.datasource.total;\n  }\n  /**\n   * Appends IdsPager to this.shadowRoot if pagination is enabled.\n   * @private\n   */\n  #attachPager() {\n    if (!this.pagination || this.pagination === PAGINATION_TYPES.NONE) {\n      this.pager.remove();\n      return;\n    }\n    if (this.pagination === PAGINATION_TYPES.STANDALONE) {\n      return;\n    }\n    const nestedPager = this.querySelector(\"ids-pager\") || this.shadowRoot?.querySelector(\"ids-pager\");\n    if (!nestedPager) {\n      const currentPager = this.pager;\n      this.pager = currentPager;\n      this.container?.after(this.pager);\n    }\n  }\n  #attachEventListeners() {\n    this.offEvent(\"pagenumberchange\", this.pager);\n    this.onEvent(\"pagenumberchange\", this.pager, (event) => {\n      this.pageNumber = Number(event.detail.value);\n    });\n    this.offEvent(\"pagesizechange\", this.pager);\n    this.onEvent(\"pagesizechange\", this.pager, (event) => {\n      this.pageSize = Number(event.detail.value);\n    });\n  }\n};\nvar ids_pager_mixin_default = IdsPagerMixin;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/mixins/ids-pager-mixin/ids-pager-mixin.ts\n");

/***/ })

}]);