"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkids_enterprise_wc"] = self["webpackChunkids_enterprise_wc"] || []).push([["src_components_ids-slider_ids-slider_ts"],{

/***/ "./src/components/ids-slider/ids-slider.ts":
/*!*************************************************!*\
  !*** ./src/components/ids-slider/ids-slider.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ IdsSlider)\n/* harmony export */ });\n/* harmony import */ var _core_ids_decorators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/ids-decorators */ \"./src/core/ids-decorators.ts\");\n/* harmony import */ var _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/ids-attributes */ \"./src/core/ids-attributes.ts\");\n/* harmony import */ var _utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/ids-string-utils/ids-string-utils */ \"./src/utils/ids-string-utils/ids-string-utils.ts\");\n/* harmony import */ var _utils_ids_xss_utils_ids_xss_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/ids-xss-utils/ids-xss-utils */ \"./src/utils/ids-xss-utils/ids-xss-utils.ts\");\n/* harmony import */ var _utils_ids_color_utils_ids_color_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/ids-color-utils/ids-color-utils */ \"./src/utils/ids-color-utils/ids-color-utils.ts\");\n/* harmony import */ var _mixins_ids_events_mixin_ids_events_mixin__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../mixins/ids-events-mixin/ids-events-mixin */ \"./src/mixins/ids-events-mixin/ids-events-mixin.ts\");\n/* harmony import */ var _mixins_ids_theme_mixin_ids_theme_mixin__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../mixins/ids-theme-mixin/ids-theme-mixin */ \"./src/mixins/ids-theme-mixin/ids-theme-mixin.ts\");\n/* harmony import */ var _mixins_ids_locale_mixin_ids_locale_mixin__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../mixins/ids-locale-mixin/ids-locale-mixin */ \"./src/mixins/ids-locale-mixin/ids-locale-mixin.ts\");\n/* harmony import */ var _core_ids_element__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../core/ids-element */ \"./src/core/ids-element.ts\");\n/* harmony import */ var _ids_slider_scss__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./ids-slider.scss */ \"./src/components/ids-slider/ids-slider.scss\");\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result)\n    __defProp(target, key, result);\n  return result;\n};\n\n\n\n\n\n\n\n\n\n\nconst TYPES = [\n  \"single\",\n  \"range\",\n  \"step\"\n];\nconst DEFAULT_MIN = 0;\nconst DEFAULT_MAX = 100;\nconst DEFAULT_TYPE = TYPES[0];\nconst DEFAULT_TRACKER_BOUNDS = {\n  BOTTOM: NaN,\n  LEFT: NaN,\n  RIGHT: NaN,\n  TOP: NaN\n};\nconst Base = (0,_mixins_ids_theme_mixin_ids_theme_mixin__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(\n  (0,_mixins_ids_locale_mixin_ids_locale_mixin__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(\n    (0,_mixins_ids_events_mixin_ids_events_mixin__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(\n      _core_ids_element__WEBPACK_IMPORTED_MODULE_8__[\"default\"]\n    )\n  )\n);\nlet IdsSlider = class extends Base {\n  DEFAULT_MIN = DEFAULT_MIN;\n  DEFAULT_MAX = DEFAULT_MAX;\n  DEFAULT_TYPE = DEFAULT_TYPE;\n  #trackBounds = DEFAULT_TRACKER_BOUNDS;\n  #label = \"\";\n  #labelSecondary = \"\";\n  #labels = [];\n  #isRTL = false;\n  #mouseHover = false;\n  #percent = NaN;\n  #percentSecondary = NaN;\n  slider;\n  trackArea;\n  progressTrack;\n  track;\n  tickContainer;\n  thumb;\n  thumbDraggable;\n  thumbShadow;\n  tooltip;\n  tooltipText;\n  tooltipPin;\n  firstTick;\n  lastTick;\n  thumbSecondary;\n  thumbDraggableSecondary;\n  thumbShadowSecondary;\n  thumbSecondaryDraggable;\n  tooltipSecondary;\n  tooltipTextSecondary;\n  tooltipPinSecondary;\n  constructor() {\n    super();\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    this.slider = this.container?.querySelector(\".slider\");\n    this.trackArea = this.container?.querySelector(\".track-area\");\n    this.progressTrack = this.container?.querySelector(\".track-progress\");\n    this.track = this.container?.querySelector(\".track\");\n    this.tickContainer = this.container?.querySelector(\".tick-container\");\n    this.#mouseHover = false;\n    this.thumb = this.container?.querySelector(\".thumb\");\n    this.thumbDraggable = this.container?.querySelector(\".thumb-draggable\");\n    this.thumbShadow = this.container?.querySelector(\".thumb-shadow\");\n    this.tooltip = this.container?.querySelector(\".tooltip\");\n    this.tooltipText = this.container?.querySelector(\".tooltip .text\");\n    this.tooltipPin = this.container?.querySelector(\".tooltip .pin\");\n    this.lastTick = this.container?.querySelector(\".tick:last-child\");\n    this.firstTick = this.container?.querySelector(\".tick:first-child\");\n    if (this.type === \"range\") {\n      this.thumbSecondary = this.container?.querySelector(\".thumb.secondary\");\n      this.thumbDraggableSecondary = this.container?.querySelector(\".thumb-draggable.secondary\");\n      this.thumbShadowSecondary = this.container?.querySelector(\".thumb-shadow.secondary\");\n      this.tooltipSecondary = this.container?.querySelector(\".tooltip.secondary\");\n      this.tooltipTextSecondary = this.container?.querySelector(\".tooltip.secondary .text.secondary\");\n      this.tooltipPinSecondary = this.container?.querySelector(\".tooltip .pin.secondary\");\n    } else {\n      this.container?.querySelector(\".thumb-draggable.secondary\")?.remove();\n    }\n    this.#attachEventListeners();\n    this.#attachUIStyles();\n    this.#attachARIA();\n    this.#setVertical();\n    this.#setStepNumber();\n    this.#setStepLabels();\n    setTimeout(() => {\n      this.#toggleAnimations(true);\n    }, 300);\n  }\n  /**\n   * Return the attributes we handle as getters/setters\n   * @returns {Array} The attributes in an array\n   */\n  static get attributes() {\n    return [\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.COLOR,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.LABEL,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.LABEL_SECONDARY,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.MIN,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.MAX,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.READONLY,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.STEP_NUMBER,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.SHOW_TOOLTIP,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.TYPE,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.VALUE,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.VALUE_SECONDARY,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.VERTICAL\n    ];\n  }\n  /**\n   * Create the Template for the contents\n   * @returns {string} The template\n   */\n  template() {\n    const disabledClass = this.disabled ? \" disabled\" : \"\";\n    const readonlyClass = this.readonly ? \" readonly\" : \"\";\n    const draggableTabIndex = !disabledClass.length ? \"0\" : \"-1\";\n    return `\n      <div class=\"ids-slider${disabledClass}${readonlyClass}\">\n        <div class=\"slider\">\n          <div class=\"track-area\">\n            <ids-draggable tabindex=\"${draggableTabIndex}\" class=\"thumb-draggable\" axis=\"${this.vertical ? \"y\" : \"x\"}\" parent-containment>\n              <div class=\"thumb-shadow\"></div>\n              <div class=\"thumb\">\n                <div class=\"tooltip\">\n                  <ids-text class=\"text\">${this.value}</ids-text>\n                  <div class=\"pin\"></div>\n                </div>\n              </div>\n            </ids-draggable>\n            <ids-draggable tabindex=\"${draggableTabIndex}\" class=\"thumb-draggable secondary\" axis=\"${this.vertical ? \"y\" : \"x\"}\" parent-containment>\n              <div class=\"thumb-shadow secondary\"></div>\n              <div class=\"thumb secondary\">\n                <div class=\"tooltip secondary\">\n                  <ids-text class=\"text secondary\">${this.valueSecondary}</ids-text>\n                  <div class=\"pin secondary\"></div>\n                </div>\n              </div>\n            </ids-draggable>\n          </div>\n          <div class=\"track\">\n          <div class=\"track-progress\"></div>\n            <div class=\"tick-container\">\n              <span class=\"tick\"></span>\n              <span class=\"tick\"></span>\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n  /**\n   * Controls Slider disabled state\n   * @param {boolean | string} value If true, will set `disabled` attribute\n   */\n  set disabled(value) {\n    const val = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(value);\n    if (val) {\n      if (this.readonly)\n        this.readonly = false;\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED, \"\");\n      this.container?.classList.add(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED);\n      this.thumbDraggable?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED, \"true\");\n      this.thumbDraggable?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.TABINDEX, \"-1\");\n      this.#updateTooltipDisplay(true);\n      if (this.type === \"range\") {\n        this.thumbDraggableSecondary?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED, \"true\");\n        this.thumbDraggableSecondary?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.TABINDEX, \"-1\");\n        this.#updateTooltipDisplay(true, \"secondary\");\n      }\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED);\n      this.container?.classList.remove(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED);\n      this.thumbDraggable?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED, \"false\");\n      this.thumbDraggable?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.TABINDEX, \"0\");\n      if (this.type === \"range\") {\n        this.thumbDraggableSecondary?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED, \"false\");\n        this.thumbDraggableSecondary?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.TABINDEX, \"0\");\n      }\n    }\n    this.#updateColor();\n  }\n  /**\n   * @returns {boolean} true if the slider is disabled\n   */\n  get disabled() {\n    return this.hasAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED);\n  }\n  /**\n   * Controls Slider readonly state\n   * @param {boolean | string} value If true, will set `readonly` attribute\n   */\n  set readonly(value) {\n    const val = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(value);\n    if (val) {\n      if (this.disabled)\n        this.disabled = false;\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.READONLY, \"\");\n      this.container?.classList.add(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.READONLY);\n      this.thumbDraggable?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED, \"true\");\n      if (this.type === \"range\") {\n        this.thumbDraggableSecondary?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED, \"true\");\n        this.#updateTooltipDisplay(true, \"secondary\");\n      }\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.READONLY);\n      this.container?.classList.remove(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.READONLY);\n      this.thumbDraggable?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED, \"false\");\n      if (this.type === \"range\")\n        this.thumbDraggableSecondary?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.DISABLED, \"false\");\n    }\n    this.#updateColor();\n  }\n  /**\n   * @returns {boolean} true if the slider is readonly\n   */\n  get readonly() {\n    return this.hasAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.READONLY);\n  }\n  /**\n   * Modifies the primary Slider thumb's label contents\n   * @param {string} value the label text contents\n   */\n  set label(value) {\n    const safeValue = (0,_utils_ids_xss_utils_ids_xss_utils__WEBPACK_IMPORTED_MODULE_3__.stripHTML)(value);\n    const currentValue = this.#label;\n    if (safeValue !== currentValue) {\n      if (safeValue.length) {\n        this.#label = safeValue;\n        this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.LABEL, safeValue);\n      } else {\n        this.#label = \"\";\n        this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.LABEL);\n      }\n      this.thumbDraggable?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.htmlAttributes.ARIA_LABEL, `${this.#label}`);\n    }\n  }\n  /**\n   * @returns {string} the primary Slider thumb's label contents\n   */\n  get label() {\n    return this.#label || (0,_utils_ids_xss_utils_ids_xss_utils__WEBPACK_IMPORTED_MODULE_3__.stripHTML)(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.LABEL) ?? \"\");\n  }\n  /**\n   * Modifies the primary Slider thumb's label contents\n   * @param {string} value the label text contents\n   */\n  set labelSecondary(value) {\n    const safeValue = (0,_utils_ids_xss_utils_ids_xss_utils__WEBPACK_IMPORTED_MODULE_3__.stripHTML)(value);\n    const currentValue = this.#labelSecondary;\n    if (safeValue !== currentValue) {\n      if (safeValue.length) {\n        this.#labelSecondary = safeValue;\n        this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.LABEL_SECONDARY, safeValue);\n      } else {\n        this.#labelSecondary = \"\";\n        this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.LABEL_SECONDARY);\n      }\n      this.thumbDraggableSecondary?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.htmlAttributes.ARIA_LABEL, `${this.#labelSecondary}`);\n    }\n  }\n  /**\n   * @returns {string} the primary Slider thumb's label contents\n   */\n  get labelSecondary() {\n    return this.#labelSecondary || (0,_utils_ids_xss_utils_ids_xss_utils__WEBPACK_IMPORTED_MODULE_3__.stripHTML)(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.LABEL_SECONDARY) ?? \"\");\n  }\n  /**\n   * Set the orientation of the slider\n   * @param {boolean} value Whether the orientation is vertical or horizontal\n   */\n  set vertical(value) {\n    const val = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(value);\n    if (val) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.VERTICAL, \"true\");\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.VERTICAL);\n    }\n    this.#setVertical();\n  }\n  /**\n   * @returns {boolean} true if the slider is vertical\n   */\n  get vertical() {\n    return this.hasAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.VERTICAL);\n  }\n  #setVertical() {\n    if (this.vertical) {\n      this.thumbDraggable?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.htmlAttributes.ARIA_ORIENTATION, \"vertical\");\n      if (this.type === \"range\")\n        this.thumbDraggableSecondary?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.htmlAttributes.ARIA_ORIENTATION, \"vertical\");\n      this.container?.classList.add(\"vertical\");\n      this.slider?.classList.add(\"vertical\");\n      this.progressTrack?.classList.add(\"vertical\");\n      this.track?.classList.add(\"vertical\");\n      this.trackArea?.classList.add(\"vertical\");\n      this.tickContainer?.classList.add(\"vertical\");\n      this.tooltip?.classList.add(\"vertical\");\n      if (this.type === \"range\")\n        this.tooltipSecondary?.classList.add(\"vertical\");\n      this.tooltipPin?.classList.add(\"vertical\");\n      if (this.type === \"range\")\n        this.tooltipPinSecondary?.classList.add(\"vertical\");\n    } else {\n      this.thumbDraggable?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.htmlAttributes.ARIA_ORIENTATION, \"horizontal\");\n      if (this.type === \"range\")\n        this.thumbDraggableSecondary?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.htmlAttributes.ARIA_ORIENTATION, \"horizontal\");\n    }\n  }\n  /**\n   * Keep track of RTL\n   * @param {boolean} value Whether or not RTL is in effect\n   */\n  set isRTL(value) {\n    if (value !== this.isRTL) {\n      this.#isRTL = value;\n      this.#moveThumb();\n      this.#updateProgressBar();\n      if (this.type === \"range\")\n        this.#moveThumb(\"secondary\");\n    }\n  }\n  /**\n   * @returns {boolean} true if the slider is displayed in RTL mode\n   */\n  get isRTL() {\n    if (typeof this.#isRTL === \"undefined\")\n      this.#isRTL = false;\n    return this.#isRTL;\n  }\n  /**\n   * Handle Languages Changes\n   */\n  onLanguageChange = () => {\n    const isRTL = this.localeAPI.isRTL();\n    this.isRTL = isRTL;\n  };\n  /**\n   * Helper method to update the UI of the tooltip and its text\n   * @private\n   * @param {number} value the text the tooltip should display\n   * @param {string} primaryOrSecondary which tooltip to update\n   */\n  #updateTooltip(value, primaryOrSecondary) {\n    let tooltipText = this.tooltipText;\n    let type = \"primary\";\n    if (primaryOrSecondary === \"secondary\") {\n      tooltipText = this.tooltipTextSecondary;\n      type = \"secondary\";\n    }\n    if (tooltipText)\n      tooltipText.innerHTML = String(Math.ceil(Number(value)));\n    if (this.type !== \"step\") {\n      this.#updateTooltipDisplay(false, type);\n    }\n  }\n  /**\n   * Helper method to update the UI of the progress track bar\n   * @private\n   */\n  #updateProgressBar() {\n    if (this.type !== \"range\") {\n      this.slider?.style.setProperty(\"--percentStart\", \"0\");\n      this.slider?.style.setProperty(\"--percentEnd\", String(this.percent));\n    } else {\n      const minPercent = Math.min(this.percent, this.percentSecondary);\n      const maxPercent = Math.max(this.percent, this.percentSecondary);\n      this.slider?.style.setProperty(\"--percentStart\", String(minPercent));\n      this.slider?.style.setProperty(\"--percentEnd\", String(maxPercent));\n      if (this.#trackBounds) {\n        const {\n          TOP,\n          BOTTOM,\n          LEFT,\n          RIGHT\n        } = this.#trackBounds;\n        const startPos = this.vertical ? BOTTOM : LEFT;\n        const endPos = this.vertical ? TOP : RIGHT;\n        const centered = false;\n        let trans = this.#calcTranslateFromPercent(startPos, endPos, minPercent, centered);\n        if (this.vertical || this.isRTL) {\n          trans *= -1;\n        }\n        const transString = this.vertical ? `translate(0, ${trans}px)` : `translate(${trans}px, 0)`;\n        this.progressTrack?.style.setProperty(\"transform\", transString);\n      }\n    }\n  }\n  /**\n   * Set the labels to display on each step/tick mark (only applicable to step sliders)\n   * @param {Array<string>} array the list of labels to set\n   */\n  set labels(array) {\n    this.#labels = array;\n    this.#setStepLabels();\n  }\n  get labels() {\n    return this.#labels || [];\n  }\n  /**\n   * Helper method to update the labels on the UI according to stepNumber and labels\n   * @private\n   */\n  #setStepLabels() {\n    if (this.type !== \"step\")\n      return;\n    const labels = this.labels;\n    const labelsLength = labels?.length || 0;\n    const stepNumber = this.stepNumber;\n    if (labelsLength === stepNumber) {\n      let labelElements = this.container?.querySelectorAll(\".label\") || [];\n      const labelElementsLength = labelElements.length || 0;\n      const ticks = this.container?.querySelectorAll(\".tick\") || [];\n      if (labelElements && labelElementsLength !== stepNumber) {\n        const x = Math.abs(stepNumber - labelElementsLength);\n        const labelAttr = !this.disabled ? \" label\" : \"\";\n        for (let i = 0; i < x; i++) {\n          if (ticks && labelElements && labelElementsLength < stepNumber) {\n            ticks[ticks.length - 1 - i]?.insertAdjacentHTML(\"afterbegin\", `<ids-text${labelAttr} class=\"label\"></ids-text>`);\n          }\n        }\n        labelElements = this.container?.querySelectorAll(\".label\") || [];\n      }\n      if (labels && labelsLength === labelElementsLength) {\n        labelElements?.forEach((x, i) => {\n          x.innerHTML = this.vertical ? labels[labelsLength - 1 - i] : labels[i];\n          if (this.vertical)\n            x?.classList.add(\"vertical\");\n        });\n      }\n    } else {\n      const labelElements = this.container?.querySelectorAll(\".label\");\n      labelElements?.forEach((x) => {\n        x.innerHTML = \"\";\n      });\n    }\n  }\n  /**\n   * Helper method for setLabels and initialization of labels\n   * @returns {Array} An array the size of stepNumber with numerical intervals between the min and max\n   */\n  #generateNumericalLabels() {\n    const arr = [];\n    for (let i = 0; i < this.stepNumber; i++) {\n      arr[i] = Math.round(this.max / (this.stepNumber - 1) * i * 10) / 10;\n    }\n    return arr;\n  }\n  /**\n   * Sets the interval between slider ticks (only applicable to step sliders)\n   * @param {string | number | any} value the amount of steps\n   */\n  set stepNumber(value) {\n    if (this.type === \"step\") {\n      if (parseInt(value) >= 2) {\n        this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.STEP_NUMBER, value);\n      }\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.STEP_NUMBER);\n    }\n    this.#setStepNumber();\n  }\n  /**\n   * @returns {number} the interval between slider ticks\n   */\n  get stepNumber() {\n    return parseInt(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.STEP_NUMBER) ?? \"\") || 2;\n  }\n  #setStepNumber() {\n    if (this.type === \"step\") {\n      if (this.stepNumber >= 2) {\n        const stepLength = this.container?.querySelectorAll(\".tick\").length ?? 0;\n        if (stepLength !== this.stepNumber) {\n          const x = Math.abs(stepLength - this.stepNumber);\n          for (let i = 0; i < x; i++) {\n            if (stepLength > this.stepNumber) {\n              this.container?.querySelector(\".tick\")?.remove();\n            } else {\n              this.container?.querySelector(\".tick:last-child\")?.insertAdjacentHTML(\"afterend\", `<span class=\"tick\"></span>`);\n            }\n          }\n        }\n      }\n      this.labels = this.#generateNumericalLabels();\n    }\n  }\n  /**\n   * Sets the secondary slider thumb value based on percentage (range slider only)\n   * @param {number | string} value the secondary thumb value as a percentage\n   */\n  set percentSecondary(value) {\n    this.#percentSecondary = Number(value);\n    this.#updateProgressBar();\n    this.#updateTooltip(this.#calcValueFromPercent(this.#percentSecondary), \"secondary\");\n  }\n  /**\n   * @returns {number} the secondary thumb value as a percentage (range slider only)\n   */\n  get percentSecondary() {\n    if (Number.isNaN(this.#percentSecondary) || typeof this.#percentSecondary === \"undefined\" || this.#percentSecondary === null || this.#percentSecondary === \"\") {\n      return (this.valueSecondary - this.min) / (this.max - this.min) * 100;\n    }\n    return this.#percentSecondary;\n  }\n  /**\n   * Sets the primary slider thumb value based on percentage\n   * @param {number | string} value the secondary thumb value as a percentage\n   */\n  set percent(value) {\n    this.#percent = Number(value);\n    this.#updateProgressBar();\n    this.#updateTooltip(this.#calcValueFromPercent(this.#percent));\n  }\n  /**\n   * @returns {number} the primary thumb value as a percentage\n   */\n  get percent() {\n    if (Number.isNaN(this.#percent) || typeof this.#percent === \"undefined\" || this.#percent === null || this.#percent === \"\") {\n      return (this.value - this.min) / (this.max - this.min) * 100;\n    }\n    return this.#percent;\n  }\n  /**\n   * Sanitizes a value to be applied to the slider, and doesn't allow the value\n   * to pass beyond the min/max values.\n   * @private\n   * @param {string | number | any} value incoming value to set\n   * @param {boolean} secondary true if this value represents the secondary slider thumb (range slider only)\n   * @returns {number} the corrected slider number\n   */\n  #sanitizeValue(value, secondary) {\n    const fixedValue = parseFloat(value);\n    if (fixedValue <= this.min) {\n      return this.min;\n    }\n    if (fixedValue >= this.max) {\n      return this.max;\n    }\n    if (this.type === \"range\") {\n      if (!secondary && fixedValue >= this.valueSecondary) {\n        return this.valueSecondary;\n      }\n      if (secondary && fixedValue <= this.value) {\n        return this.value;\n      }\n    }\n    return fixedValue;\n  }\n  /**\n   * Set the secondary value of the slider (range slider only)\n   * @param {string} value The secondary input value\n   */\n  set valueSecondary(value) {\n    if (this.readonly || this.disabled)\n      return;\n    const newValue = this.#sanitizeValue(value, true);\n    this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.VALUE_SECONDARY, `${newValue}`);\n    this.percentSecondary = (newValue - this.min) / (this.max - this.min) * 100;\n    this.thumbDraggableSecondary?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.htmlAttributes.ARIA_VALUENOW, `${newValue}`);\n    this.thumbDraggableSecondary?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.htmlAttributes.ARIA_VALUETEXT, `${newValue}`);\n    if (this.type === \"range\") {\n      this.thumbDraggable?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.htmlAttributes.ARIA_VALUEMIN, `${newValue}`);\n    }\n    this.#updateTooltip(newValue, \"secondary\");\n    this.#moveThumb(\"secondary\");\n    this.#triggerChangeEvent(newValue, \"secondary\");\n  }\n  /**\n   * @returns {number} the secondary slider value (range slider only)\n   */\n  get valueSecondary() {\n    const b = this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.VALUE_SECONDARY);\n    if (b === null || b === \"\" || Number.isNaN(b)) {\n      return this.max;\n    }\n    return parseFloat(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.VALUE_SECONDARY) ?? \"\");\n  }\n  /**\n   * Set the primary value of the slider\n   * @param {string} value The primary input value\n   */\n  set value(value) {\n    if (this.readonly || this.disabled)\n      return;\n    const currentValue = parseFloat(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.VALUE) ?? \"\") || this.min;\n    const newValue = this.#sanitizeValue(value);\n    if (currentValue !== newValue) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.VALUE, `${newValue}`);\n      this.percent = (newValue - this.min) / (this.max - this.min) * 100;\n      this.thumbDraggable?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.htmlAttributes.ARIA_VALUENOW, `${newValue}`);\n      this.thumbDraggable?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.htmlAttributes.ARIA_VALUETEXT, `${newValue}`);\n      if (this.type === \"range\") {\n        this.thumbDraggableSecondary?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.htmlAttributes.ARIA_VALUEMIN, `${newValue}`);\n      }\n      this.#updateTooltip(newValue, \"primary\");\n      this.#moveThumb(\"primary\");\n      this.#triggerChangeEvent(newValue, \"primary\");\n    }\n  }\n  /**\n   * @returns {number} the primary slider value\n   */\n  get value() {\n    const a = this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.VALUE);\n    if (a === null || a === \"\" || Number.isNaN(a)) {\n      return this.min;\n    }\n    return parseFloat(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.VALUE) ?? \"\");\n  }\n  /**\n   * Triggers a Change Event\n   * @param {string | number | any } value the value of the slider handle\n   * @param {string} [thumb] the slider thumb causing the change\n   */\n  #triggerChangeEvent(value, thumb) {\n    this.triggerEvent(\"change\", this, {\n      bubbles: true,\n      detail: {\n        elem: thumb === \"secondary\" ? this.thumbSecondaryDraggable : this.thumbDraggable,\n        percent: thumb === \"secondary\" ? this.percentSecondary : this.percent,\n        value\n      }\n    });\n  }\n  /**\n   * Sets the minimum-possible value of the slider\n   * @param {string} value The desired minimum\n   */\n  set min(value) {\n    const val = parseFloat(value);\n    if (val >= this.max || val === null || val === \"\" || Number.isNaN(val)) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.MIN, String(DEFAULT_MIN));\n    } else {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.MIN, val);\n    }\n  }\n  /**\n   * @returns {number} the minimum value possible that can be set on slider thumbs\n   */\n  get min() {\n    return parseFloat(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.MIN) ?? \"\") || DEFAULT_MIN;\n  }\n  /**\n   * Sets the maximum-possible value of the slider\n   * @param {string} value The desired max\n   */\n  set max(value) {\n    const val = parseFloat(value);\n    if (val <= this.min || val === null || val === \"\" || Number.isNaN(val)) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.MAX, String(this.min + DEFAULT_MAX));\n    } else {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.MAX, val);\n    }\n  }\n  /**\n   * @returns {number} the maximum value possible that can be set on slider thumbs\n   */\n  get max() {\n    const val = parseFloat(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.MAX) ?? \"\");\n    if (val <= this.min || val === null || val === \"\" || Number.isNaN(val)) {\n      return DEFAULT_MAX;\n    }\n    return val;\n  }\n  /**\n   * Sets the slider type\n   * @param {IdsSliderType} value The type of slider\n   */\n  set type(value) {\n    if (value && TYPES.includes(value)) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.TYPE, value);\n    } else {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.TYPE, DEFAULT_TYPE);\n    }\n    this.container?.classList[value === \"range\" ? \"add\" : \"remove\"](\"range\");\n  }\n  /**\n   * @returns {IdsSliderType} the slider type\n   */\n  get type() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.TYPE) || DEFAULT_TYPE;\n  }\n  /**\n   * Enables a tooltip displaying thumb values when either thumb is focused\n   * @param {boolean | string} value true if the thumb should display tooltips\n   */\n  set showTooltip(value) {\n    if ((0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_2__.stringToBool)(value)) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.TOOLTIP, `${value}`);\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.TOOLTIP);\n    }\n  }\n  /**\n   * @returns {boolean} true if the thumb will display tooltips\n   */\n  get showTooltip() {\n    return this.hasAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.TOOLTIP);\n  }\n  /**\n   * Set the color of the bar\n   * @param {string} value The color, this can be a hex code with the #, a native css color, or an ids-status color\n   */\n  set color(value) {\n    this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.COLOR, value);\n    this.#updateColor();\n  }\n  /**\n   * @returns {string} the specified color value\n   */\n  get color() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.COLOR) || \"\";\n  }\n  /**\n   * @private\n   * @returns {boolean} true if this slider should have a custom color applied\n   */\n  #shouldApplyColor() {\n    return !this.readonly && !this.disabled;\n  }\n  /**\n   * Updates the thumb and tick colors on the slider based on the `color` attribute and other settings\n   * @private\n   */\n  #updateColor() {\n    let color;\n    if (this.#shouldApplyColor()) {\n      color = this.color;\n    }\n    const ticks = this.container?.querySelectorAll(\".tick\") || [];\n    if (color) {\n      let colorString = color;\n      if (color.substring(0, 1) !== \"#\") {\n        colorString = (0,_utils_ids_color_utils_ids_color_utils__WEBPACK_IMPORTED_MODULE_4__.convertStatusToIDSColor)(color);\n      }\n      const rgbaColor = (0,_utils_ids_color_utils_ids_color_utils__WEBPACK_IMPORTED_MODULE_4__.convertColorToRgba)(colorString, 0.1);\n      ticks?.forEach((tick) => {\n        tick?.style.setProperty(\"background-color\", colorString);\n        tick?.children[0]?.setAttribute(\"label\", \"\");\n      });\n      this.thumb?.style.setProperty(\"background-color\", colorString);\n      this.thumbShadow?.style.setProperty(\"background-color\", rgbaColor);\n      this.thumbShadow?.style.setProperty(\"border\", `1px ${colorString} solid`);\n      this.progressTrack?.style.setProperty(\"background-color\", colorString);\n      if (this.type === \"range\" && this.thumbShadowSecondary && this.thumbSecondary) {\n        this.thumbShadowSecondary?.style.setProperty(\"background-color\", rgbaColor);\n        this.thumbShadowSecondary?.style.setProperty(\"border\", `1px ${colorString} solid`);\n        this.thumbSecondary?.style.setProperty(\"background-color\", colorString);\n      }\n    } else {\n      ticks?.forEach((tick) => {\n        tick?.style.removeProperty(\"background-color\");\n        if (!this.readonly) {\n          tick.children[0]?.removeAttribute(\"label\");\n        } else {\n          tick.children[0]?.setAttribute(\"label\", \"\");\n        }\n      });\n      this.thumb?.style.removeProperty(\"background-color\");\n      this.thumbShadow?.style.removeProperty(\"background-color\");\n      this.thumbShadow?.style.removeProperty(\"border\");\n      this.progressTrack?.style.removeProperty(\"background-color\");\n      if (this.type === \"range\" && this.thumbShadowSecondary && this.thumbSecondary) {\n        this.thumbShadowSecondary?.style.removeProperty(\"background-color\");\n        this.thumbShadowSecondary?.style.removeProperty(\"border\");\n        this.thumbSecondary?.style.removeProperty(\"background-color\");\n      }\n    }\n  }\n  /**\n   * Hide/show the tooltip of the value\n   * @private\n   * @param {boolean} hide whether or not to hide it\n   * @param {primaryOrSecondary} primaryOrSecondary which tooltip to hide\n   */\n  #updateTooltipDisplay(hide, primaryOrSecondary) {\n    if (!this.showTooltip) {\n      hide = true;\n    }\n    if (primaryOrSecondary === \"secondary\" && this.tooltipSecondary) {\n      this.tooltipSecondary.style.setProperty(\"opacity\", hide ? \"0\" : \"1\");\n    } else {\n      this.tooltip?.style.setProperty(\"opacity\", hide ? \"0\" : \"1\");\n    }\n  }\n  /**\n   * Hide/show the spotlight/box-shadow of the thumb\n   * @private\n   * @param {boolean} hide whether or not to hide it\n   * @param {string} primaryOrSecondary which thumb to hide\n   */\n  #updateThumbShadow(hide, primaryOrSecondary) {\n    let thumbShadow = this.thumbShadow;\n    if (primaryOrSecondary === \"secondary\" && this.thumbShadowSecondary) {\n      thumbShadow = this.thumbShadowSecondary;\n    }\n    if (hide) {\n      thumbShadow?.classList.remove(\"active\");\n    } else {\n      thumbShadow?.classList.add(\"active\");\n    }\n  }\n  /**\n   * Helper method to calculate the percentage of slider from mouse click; not a pure function\n   * @private\n   * @param {number} x coordinate of mouse click\n   * @param {number} y coordinate of mouse click\n   * @returns {number} the percent\n   */\n  #calcPercentFromClick(x, y) {\n    this.#refreshTrackBounds();\n    const {\n      TOP,\n      BOTTOM,\n      LEFT,\n      RIGHT\n    } = this.#trackBounds;\n    const mousePos = this.vertical ? y : x;\n    const horizontalStart = this.isRTL ? RIGHT : LEFT;\n    const horizontalEnd = this.isRTL ? LEFT : RIGHT;\n    const startPos = this.vertical ? BOTTOM : horizontalStart;\n    const endPos = this.vertical ? TOP : horizontalEnd;\n    const percent = this.#calcPercentFromRange(mousePos, startPos, endPos);\n    return percent;\n  }\n  /**\n   * Perform the calculations to update the UI and value(s)/percent(s) accordingly\n   * @private\n   * @param {number} x coordinate of mouse click\n   * @param {number} y coordnate of mouse click\n   * @param {number} labelValueClicked if label was clicked or not\n   * @param {string} primaryOrSecondary string representing the primary/secondary label for range sliders\n   */\n  #calculateUIFromClick(x, y, labelValueClicked, primaryOrSecondary) {\n    if (this.type !== \"step\") {\n      let value = labelValueClicked ?? this.#calcValueFromPercent(this.#calcPercentFromClick(x, y));\n      const thumbPos = this.vertical ? this.thumbDraggable?.getBoundingClientRect().y : this.thumbDraggable?.getBoundingClientRect().x;\n      let thumbDraggable = this.thumbDraggable;\n      let valueAttribute = \"value\";\n      if (this.type === \"range\") {\n        const thumbPosSecondary = this.vertical ? this.thumbDraggableSecondary?.getBoundingClientRect().y : this.thumbDraggableSecondary?.getBoundingClientRect().x;\n        const mousePos = this.vertical ? y : x;\n        if (Math.abs(mousePos - (thumbPos ?? NaN)) > Math.abs(mousePos - (thumbPosSecondary ?? NaN))) {\n          thumbDraggable = this.thumbDraggableSecondary;\n          valueAttribute = \"valueSecondary\";\n          primaryOrSecondary = \"secondary\";\n        }\n        if (primaryOrSecondary === \"primary\" && value > this.valueSecondary) {\n          value = this.valueSecondary - 1;\n        } else if (primaryOrSecondary === \"secondary\" && value < this.value) {\n          value = this.value + 1;\n        }\n      }\n      if (value !== this[valueAttribute]) {\n        this[valueAttribute] = value;\n      } else {\n        this.#moveThumb(primaryOrSecondary);\n        this.#triggerChangeEvent(value, primaryOrSecondary);\n      }\n      thumbDraggable?.focus();\n    } else {\n      const arr = [];\n      for (let i = 0; i < this.stepNumber; i++) {\n        arr[i] = this.max / (this.stepNumber - 1) * i;\n      }\n      const passedValue = labelValueClicked || this.#calcPercentFromClick(x, y);\n      const differences = arr.map((val) => Math.abs(val - passedValue / 100 * this.max));\n      let min = differences[0];\n      let minIndex = 0;\n      for (let i = 0; i < differences.length; i++) {\n        if (differences[i] < min) {\n          min = differences[i];\n          minIndex = i;\n        }\n      }\n      const targetValue = arr[minIndex];\n      this.percent = targetValue;\n      if (targetValue !== this.value) {\n        this.value = targetValue;\n      } else {\n        this.#moveThumb(\"primary\");\n        this.#triggerChangeEvent(targetValue, \"primary\");\n      }\n      this.thumbDraggable?.focus();\n    }\n  }\n  /**\n   * Translate the thumb(s) according to the percent values\n   * @private\n   * @param {string} primaryOrSecondary which thumb to move\n   */\n  #moveThumb(primaryOrSecondary) {\n    this.#refreshTrackBounds();\n    let thumbDraggable = this.thumbDraggable;\n    let percent = this.percent;\n    if (primaryOrSecondary === \"secondary\" && this.type === \"range\") {\n      thumbDraggable = this.thumbDraggableSecondary;\n      percent = this.percentSecondary;\n    }\n    const {\n      TOP,\n      BOTTOM,\n      LEFT,\n      RIGHT\n    } = this.#trackBounds;\n    const startPos = this.vertical ? BOTTOM : LEFT;\n    const endPos = this.vertical ? TOP : RIGHT;\n    const centered = true;\n    let trans = this.#calcTranslateFromPercent(startPos, endPos, percent, centered);\n    if (this.vertical || this.isRTL) {\n      trans *= -1;\n    }\n    const transString = this.vertical ? `translate(0, ${trans}px)` : `translate(${trans}px, 0)`;\n    thumbDraggable?.style.setProperty(\"transform\", transString);\n  }\n  /**\n   * Calculate the true value based on the percent value\n   * @private\n   * @param {number} percent the percent value to convert to numerical value btw min and max\n   * @returns {number} the calculated value\n   */\n  #calcValueFromPercent(percent) {\n    return percent / 100 * (this.max - this.min) + this.min;\n  }\n  /**\n   * Calculate the pixels to translate thumb(s) or progress track based on percent value\n   * @private\n   * @param {number} nStart the starting x or y coordinate of the slider\n   * @param {number} nEnd the ending x or y coordinate of the slider\n   * @param {number} percent the percent/location of the thumb relative to the slider\n   * @param {boolean} centered whether or not the thumb(s) or progress track is centered or not\n   * if notCentered is true, it will translate from 0\n   * if notCentered is false, it will translate negatively and positively with 0 being the center\n   * @returns {number} coordinates or the amount of pixels to translate by\n   */\n  #calcTranslateFromPercent(nStart, nEnd, percent, centered) {\n    const editedRange = Math.abs(nEnd - nStart) - (this.thumbDraggable?.clientWidth ?? NaN);\n    let coord = Math.ceil(percent) / 100 * editedRange;\n    coord = centered ? coord - editedRange / 2 : coord;\n    return coord;\n  }\n  /**\n   * Calculate the percent value based on mouse click location\n   * @private\n   * @param {number} n the mouse x or y coordinate\n   * @param {number} nStart the starting x or y coordinate of the slider\n   * @param {number} nEnd the ending x or y coordinate of the slider\n   * @returns {number} the percent/location of the thumb relative to the slider\n   */\n  #calcPercentFromRange(n, nStart, nEnd) {\n    const thumbWidth = this.thumbDraggable?.clientWidth ?? NaN;\n    let percent = 0;\n    const range = Math.abs(nStart - nEnd) - thumbWidth / 2;\n    const endDelta = Math.abs(n - nEnd);\n    const startDelta = Math.abs(n - nStart);\n    if (endDelta > range) {\n      percent = 0;\n    } else if (startDelta > range) {\n      percent = 100;\n    } else {\n      percent = (startDelta - thumbWidth / 2) / (range - thumbWidth / 2) * 100;\n    }\n    return percent;\n  }\n  /**\n   * Attaches all necessary event listeners\n   * @private\n   */\n  #attachEventListeners() {\n    this.#attachResizeObserver();\n    this.#attachDragEventListeners();\n    if (this.type === \"range\")\n      this.#attachDragEventListeners(\"secondary\");\n    this.#attachFocusListeners();\n    this.#attachKeyboardListeners();\n    this.#attachClickListeners();\n  }\n  /**\n   * Calculates the x,y coordinates of the bounding box of the clickable track area\n   * @private\n   * @returns {IdsSliderTrackBounds} The track area boundaries\n   */\n  #calculateTrackBounds() {\n    if (!this.trackArea)\n      return DEFAULT_TRACKER_BOUNDS;\n    const rect = this.trackArea.getBoundingClientRect();\n    const LEFT = rect.left + window.scrollX;\n    const TOP = rect.top + window.scrollY;\n    const RIGHT = LEFT + this.trackArea.clientWidth;\n    const BOTTOM = TOP + this.trackArea.clientHeight;\n    const bounds = {\n      LEFT,\n      RIGHT,\n      TOP,\n      BOTTOM\n    };\n    return bounds;\n  }\n  /**\n   * @private\n   * @param {boolean} toggleOn true if slider elements should be animated\n   */\n  #toggleAnimations(toggleOn) {\n    this.container?.classList[toggleOn ? \"add\" : \"remove\"](\"animated\");\n  }\n  /**\n   * Sets initial slider styles and element placement\n   * @private\n   */\n  #attachUIStyles() {\n    this.#updateProgressBar();\n    this.#moveThumb();\n    if (this.type === \"range\")\n      this.#moveThumb(\"secondary\");\n    this.#updateColor();\n    if (this.firstTick && this.lastTick) {\n      const maxTick = this.vertical ? this.firstTick : this.lastTick;\n      const minTick = this.vertical ? this.lastTick : this.firstTick;\n      minTick.innerHTML = `<ids-text label class=\"label${this.vertical ? \" vertical\" : \"\"}\">${this.min}</ids-text>`;\n      maxTick.innerHTML = `<ids-text label class=\"label${this.vertical ? \" vertical\" : \"\"}\">${this.max}</ids-text>`;\n    }\n  }\n  /**\n   * Attaches ARIA attributes to some slider elements\n   * @private\n   */\n  #attachARIA() {\n    this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.htmlAttributes.ROLE, \"none\");\n    this.thumbDraggable?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.htmlAttributes.ROLE, \"slider\");\n    this.thumbDraggable?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.htmlAttributes.ARIA_ORIENTATION, this.vertical ? \"vertical\" : \"horizontal\");\n    this.thumbDraggable?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.htmlAttributes.ARIA_VALUEMIN, `${this.min}`);\n    this.thumbDraggable?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.htmlAttributes.ARIA_VALUEMAX, `${this.max}`);\n    this.thumbDraggable?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.htmlAttributes.ARIA_VALUENOW, `${this.value}`);\n    this.thumbDraggable?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.htmlAttributes.ARIA_VALUETEXT, `${this.value}`);\n    this.thumbDraggable?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.htmlAttributes.ARIA_LABEL, `${this.label}`);\n    if (this.type === \"range\") {\n      this.thumbDraggableSecondary?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.htmlAttributes.ROLE, \"slider\");\n      this.thumbDraggableSecondary?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.htmlAttributes.ARIA_ORIENTATION, this.vertical ? \"vertical\" : \"horizontal\");\n      this.thumbDraggableSecondary?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.htmlAttributes.ARIA_VALUEMIN, `${this.min}`);\n      this.thumbDraggableSecondary?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.htmlAttributes.ARIA_VALUEMAX, `${this.max}`);\n      this.thumbDraggableSecondary?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.htmlAttributes.ARIA_VALUENOW, `${this.valueSecondary}`);\n      this.thumbDraggableSecondary?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.htmlAttributes.ARIA_VALUETEXT, `${this.valueSecondary}`);\n      this.thumbDraggableSecondary?.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.htmlAttributes.ARIA_LABEL, `${this.labelSecondary}`);\n    }\n  }\n  /**\n   * Recalculates and updates the track bounds\n   * @private\n   */\n  #refreshTrackBounds() {\n    this.#trackBounds = this.#calculateTrackBounds();\n  }\n  /**\n   * Checks if the window changes sizes and updates UI accordingly\n   * @private\n   */\n  #attachResizeObserver() {\n    const resizeObserver = new ResizeObserver((entries) => {\n      for (const entry of entries) {\n        if (entry.contentBoxSize) {\n          this.#refreshTrackBounds();\n          this.#updateProgressBar();\n          this.#moveThumb();\n          if (this.type === \"range\")\n            this.#moveThumb(\"secondary\");\n        }\n      }\n    });\n    if (this.trackArea)\n      resizeObserver.observe(this.trackArea);\n  }\n  /**\n   * Add event listeners for clicking the track area\n   * @private\n   */\n  #attachClickListeners() {\n    this.onEvent(\"click\", this.container, (event) => {\n      if (this.disabled || this.readonly) {\n        return;\n      }\n      const className = event.target.className;\n      const clickedIdsSlider = className.includes(\"ids-slider\");\n      const clickedLabel = className.includes(\"label\");\n      const clickedTrackArea = className.includes(\"track-area\");\n      if (clickedIdsSlider || clickedLabel || clickedTrackArea) {\n        if (clickedTrackArea || clickedIdsSlider) {\n          this.#calculateUIFromClick(event.clientX, event.clientY);\n        } else {\n          const labelValueClicked = parseFloat(event.target.innerHTML);\n          this.#calculateUIFromClick(event.clientX, event.clientY, labelValueClicked);\n        }\n      }\n    });\n    this.onEvent(\"click\", document, (event) => {\n      if (event.target !== this && !this.disabled) {\n        this.#updateTooltipDisplay(true);\n        if (this.type === \"range\")\n          this.#updateTooltipDisplay(true, \"secondary\");\n      }\n    });\n  }\n  /**\n   * Add event listeners for dragging the slider thumbs\n   * @private\n   * @param {string} primaryOrSecondary the primary or secondary thumb\n   */\n  #attachDragEventListeners(primaryOrSecondary) {\n    const d = this.type === \"range\" && primaryOrSecondary === \"secondary\";\n    const obj = {\n      thumbDraggable: d ? this.thumbDraggableSecondary : this.thumbDraggable,\n      thumbDraggableOther: d ? this.thumbDraggable : this.thumbDraggableSecondary,\n      primaryOrSecondary: d ? \"secondary\" : \"primary\",\n      valueAttribute: d ? \"valueSecondary\" : \"value\",\n      percentAttribute: d ? \"percentSecondary\" : \"percent\"\n    };\n    const swapZIndex = () => {\n      if (obj.thumbDraggableOther) {\n        obj.thumbDraggableOther?.style.setProperty(\"z-index\", \"50\");\n        obj.thumbDraggable?.style.setProperty(\"z-index\", \"51\");\n      }\n    };\n    this.onEvent(\"ids-drag\", obj.thumbDraggable, (e) => {\n      if (this.type !== \"step\")\n        this.#updateTooltipDisplay(false);\n      const [x, y] = [e.detail.mouseX, e.detail.mouseY];\n      const percent = this.#calcPercentFromClick(x, y);\n      if (this.type === \"range\")\n        swapZIndex();\n      this[obj.percentAttribute] = percent;\n      this.triggerEvent(\"ids-slider-drag\", this, {\n        bubbles: true,\n        detail: {\n          elem: obj.thumbDraggable,\n          mouseX: e.detail.mouseX,\n          mouseY: e.detail.mouseY,\n          percent,\n          value: this.#calcValueFromPercent(percent)\n        }\n      });\n    });\n    this.onEvent(\"ids-dragstart\", obj.thumbDraggable, () => {\n      this.#toggleAnimations(false);\n      this.#updateThumbShadow(true, obj.primaryOrSecondary);\n      this.#updateThumbShadow(true, obj.primaryOrSecondary === \"secondary\" ? \"primary\" : \"secondary\");\n    });\n    this.onEvent(\"ids-dragend\", obj.thumbDraggable, (e) => {\n      this.#toggleAnimations(true);\n      obj.thumbDraggable?.focus();\n      const freshPercent = obj.primaryOrSecondary === \"secondary\" ? this.percentSecondary : this.percent;\n      this.#calculateUIFromClick(e.detail.mouseX, e.detail.mouseY, freshPercent, obj.primaryOrSecondary);\n      this.#updateThumbShadow(false, obj.primaryOrSecondary);\n    });\n  }\n  /**\n   * Add event listeners for arrow keys to move thumbs\n   * @private\n   */\n  #attachKeyboardListeners() {\n    this.onEvent(\"keydown\", this, (event) => {\n      if (this.readonly || this.disabled)\n        return;\n      if ([\"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\"].indexOf(event.code) > -1) {\n        event.preventDefault();\n        if (this.type !== \"step\")\n          this.#toggleAnimations(false);\n      }\n      if (event.target.name === \"ids-slider\") {\n        let primaryOrSecondary = \"\";\n        if (this.type === \"range\") {\n          if (this.thumbShadowSecondary?.classList.contains(\"active\")) {\n            primaryOrSecondary = \"secondary\";\n          }\n        }\n        switch (event.key) {\n          case \"ArrowUp\":\n            this.#increaseValue(primaryOrSecondary);\n            break;\n          case \"ArrowDown\":\n            this.#decreaseValue(primaryOrSecondary);\n            break;\n          case \"ArrowRight\":\n            if (this.isRTL)\n              this.#decreaseValue(primaryOrSecondary);\n            else\n              this.#increaseValue(primaryOrSecondary);\n            break;\n          case \"ArrowLeft\":\n            if (this.isRTL)\n              this.#increaseValue(primaryOrSecondary);\n            else\n              this.#decreaseValue(primaryOrSecondary);\n            break;\n          default:\n            break;\n        }\n      }\n    });\n    this.onEvent(\"keyup\", this, (event) => {\n      if (this.readonly || this.disabled)\n        return;\n      if ([\"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\"].indexOf(event.code) > -1) {\n        event.preventDefault();\n        if (this.type !== \"step\")\n          this.#toggleAnimations(true);\n      }\n    });\n  }\n  /**\n   * Attaches events to the component related to focusin/focusout behavior\n   * @private\n   */\n  #attachFocusListeners() {\n    this.onEvent(\"mouseenter\", this, () => {\n      this.#mouseHover = true;\n    });\n    this.onEvent(\"mouseleave\", this, () => {\n      this.#mouseHover = false;\n    });\n    this.onEvent(\"focusin\", this.container, (e) => {\n      if (!this.disabled && this.shadowRoot?.activeElement) {\n        this.#updateTooltipDisplay(false);\n        const target = e.target instanceof HTMLElement && e.target;\n        if (target && target?.classList.contains(\"secondary\")) {\n          this.#updateThumbShadow(false, \"secondary\");\n          this.#updateThumbShadow(true, \"primary\");\n        } else {\n          this.#updateThumbShadow(false, \"primary\");\n          if (this.type === \"range\") {\n            this.#updateThumbShadow(true, \"secondary\");\n          }\n        }\n        if (this.type === \"range\") {\n          this.#updateTooltipDisplay(false, \"secondary\");\n        }\n      }\n    });\n    this.onEvent(\"focusout\", this.container, () => {\n      if (!this.shadowRoot?.activeElement && !this.#mouseHover) {\n        this.#updateTooltipDisplay(true);\n        this.#updateThumbShadow(true, \"primary\");\n        if (this.type === \"range\") {\n          this.#updateTooltipDisplay(true, \"secondary\");\n          this.#updateThumbShadow(true, \"secondary\");\n        }\n      }\n    });\n  }\n  /**\n   * Helper method for arrow key actions\n   * @private\n   * @param {string} primaryOrSecondary the primary or secondary value\n   */\n  #decreaseValue(primaryOrSecondary) {\n    switch (this.type) {\n      case \"step\":\n        this.value -= this.max / (this.stepNumber - 1);\n        break;\n      case \"range\":\n        if (primaryOrSecondary === \"secondary\") {\n          this.valueSecondary = Math.max(Math.ceil(this.valueSecondary) - 1, this.value);\n        } else {\n          this.value = Math.max(Math.ceil(this.value) - 1, this.min);\n        }\n        break;\n      default:\n        this.value = Math.ceil(this.value) - 1;\n    }\n  }\n  /**\n   * Helper method for arrow key actions\n   * @private\n   * @param {string} primaryOrSecondary the primary or secondary value\n   */\n  #increaseValue(primaryOrSecondary) {\n    switch (this.type) {\n      case \"step\":\n        this.value += this.max / (this.stepNumber - 1);\n        break;\n      case \"range\":\n        if (primaryOrSecondary === \"secondary\") {\n          this.valueSecondary = Math.min(Math.ceil(this.valueSecondary) + 1, this.max);\n        } else {\n          this.value = Math.min(Math.ceil(this.value) + 1, this.valueSecondary);\n        }\n        break;\n      default:\n        this.value = Math.ceil(this.value) + 1;\n    }\n  }\n};\nIdsSlider = __decorateClass([\n  (0,_core_ids_decorators__WEBPACK_IMPORTED_MODULE_0__.customElement)(\"ids-slider\"),\n  (0,_core_ids_decorators__WEBPACK_IMPORTED_MODULE_0__.scss)(_ids_slider_scss__WEBPACK_IMPORTED_MODULE_9__[\"default\"])\n], IdsSlider);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/ids-slider/ids-slider.ts\n");

/***/ }),

/***/ "./src/utils/ids-color-utils/ids-color-utils.ts":
/*!******************************************************!*\
  !*** ./src/utils/ids-color-utils/ids-color-utils.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"builtinToRgba\": () => (/* binding */ builtinToRgba),\n/* harmony export */   \"convertColorToRgba\": () => (/* binding */ convertColorToRgba),\n/* harmony export */   \"convertStatusToIDSColor\": () => (/* binding */ convertStatusToIDSColor),\n/* harmony export */   \"hexToRgba\": () => (/* binding */ hexToRgba)\n/* harmony export */ });\nfunction hexToRgba(hex, opacity) {\n  let c;\n  if (/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)) {\n    c = hex.substring(1).split(\"\");\n    if (c.length === 3) {\n      c = [c[0], c[0], c[1], c[1], c[2], c[2]];\n    }\n    c = `0x${c.join(\"\")}`;\n    if (opacity) {\n      return `rgba(${[c >> 16 & 255, c >> 8 & 255, c & 255].join(\" \")} / ${opacity})`;\n    }\n    return `rgb(${[c >> 16 & 255, c >> 8 & 255, c & 255].join(\" \")})`;\n  }\n  return \"\";\n}\nfunction builtinToRgba(colorName, opacity) {\n  const el = document.createElement(\"div\");\n  el.style.color = colorName;\n  document.body.appendChild(el);\n  const cs = window.getComputedStyle(el);\n  let rgb = cs.getPropertyValue(\"color\");\n  document.body.removeChild(el);\n  rgb = rgb.replace(/,/g, \"\");\n  if (opacity && rgb.indexOf(\"a\") === -1) {\n    return rgb.replace(\"rgb\", \"rgba\").replace(\")\", ` / ${opacity})`);\n  }\n  return rgb;\n}\nfunction convertColorToRgba(colorName, opacity) {\n  if (colorName.substring(0, 1) === \"#\") {\n    return hexToRgba(colorName, opacity);\n  }\n  return builtinToRgba(colorName, opacity);\n}\nfunction convertStatusToIDSColor(statusName) {\n  let cssVariable;\n  const statuses = [\n    \"base\",\n    \"error\",\n    \"warning\",\n    \"caution\",\n    \"success\"\n  ];\n  if (statuses.includes(statusName)) {\n    cssVariable = `var(--ids-color-status-${statusName === \"error\" ? \"danger\" : statusName})`;\n  }\n  return cssVariable || statusName;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvaWRzLWNvbG9yLXV0aWxzL2lkcy1jb2xvci11dGlscy50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBT08sU0FBUyxVQUFVLEtBQWEsU0FBa0I7QUFDdkQsTUFBSTtBQUNKLE1BQUksMkJBQTJCLEtBQUssR0FBRyxHQUFHO0FBQ3hDLFFBQUksSUFBSSxVQUFVLENBQUMsRUFBRSxNQUFNLEVBQUU7QUFFN0IsUUFBSSxFQUFFLFdBQVcsR0FBRztBQUNsQixVQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7QUFBQSxJQUN6QztBQUVBLFFBQUksS0FBSyxFQUFFLEtBQUssRUFBRTtBQUVsQixRQUFJLFNBQVM7QUFFWCxhQUFPLFFBQVEsQ0FBRSxLQUFLLEtBQU0sS0FBTSxLQUFLLElBQUssS0FBSyxJQUFJLEdBQUcsRUFBRSxLQUFLLEdBQUcsT0FBTztBQUFBLElBQzNFO0FBRUEsV0FBTyxPQUFPLENBQUUsS0FBSyxLQUFNLEtBQU0sS0FBSyxJQUFLLEtBQUssSUFBSSxHQUFHLEVBQUUsS0FBSyxHQUFHO0FBQUEsRUFDbkU7QUFDQSxTQUFPO0FBQ1Q7QUFVTyxTQUFTLGNBQWMsV0FBbUIsU0FBa0I7QUFDakUsUUFBTSxLQUFLLFNBQVMsY0FBYyxLQUFLO0FBQ3ZDLEtBQUcsTUFBTSxRQUFRO0FBQ2pCLFdBQVMsS0FBSyxZQUFZLEVBQUU7QUFFNUIsUUFBTSxLQUFLLE9BQU8saUJBQWlCLEVBQUU7QUFDckMsTUFBSSxNQUFNLEdBQUcsaUJBQWlCLE9BQU87QUFFckMsV0FBUyxLQUFLLFlBQVksRUFBRTtBQUc1QixRQUFNLElBQUksUUFBUSxNQUFNLEVBQUU7QUFFMUIsTUFBSSxXQUFXLElBQUksUUFBUSxHQUFHLE1BQU0sSUFBSTtBQUN0QyxXQUFPLElBQUksUUFBUSxPQUFPLE1BQU0sRUFBRSxRQUFRLEtBQUssTUFBTSxVQUFVO0FBQUEsRUFDakU7QUFDQSxTQUFPO0FBQ1Q7QUFTTyxTQUFTLG1CQUFtQixXQUFtQixTQUFrQjtBQUN0RSxNQUFJLFVBQVUsVUFBVSxHQUFHLENBQUMsTUFBTSxLQUFLO0FBQ3JDLFdBQU8sVUFBVSxXQUFXLE9BQU87QUFBQSxFQUNyQztBQUdBLFNBQU8sY0FBYyxXQUFXLE9BQU87QUFDekM7QUFRTyxTQUFTLHdCQUF3QixZQUFvQjtBQUMxRCxNQUFJO0FBQ0osUUFBTSxXQUFXO0FBQUEsSUFDZjtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxFQUNGO0FBQ0EsTUFBSSxTQUFTLFNBQVMsVUFBVSxHQUFHO0FBQ2pDLGtCQUFjLDBCQUEwQixlQUFlLFVBQVUsV0FBVztBQUFBLEVBQzlFO0FBQ0EsU0FBTyxlQUFlO0FBQ3hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaWRzLWVudGVycHJpc2Utd2MvLi9zcmMvdXRpbHMvaWRzLWNvbG9yLXV0aWxzL2lkcy1jb2xvci11dGlscy50cz80YTU5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29udmVydHMgdGhlIHByb3ZpZGVkIGhleCB0byBhbiBSR0IoQT8pIHZhbHVlXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IGhleCB0byBzZXQuXG4gKiBAcGFyYW0ge251bWJlcn0gb3BhY2l0eSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IGNvbnZlcnRlZCByZ2JhXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoZXhUb1JnYmEoaGV4OiBzdHJpbmcsIG9wYWNpdHk/OiBudW1iZXIpIHtcbiAgbGV0IGM6IGFueTtcbiAgaWYgKC9eIyhbQS1GYS1mMC05XXszfSl7MSwyfSQvLnRlc3QoaGV4KSkge1xuICAgIGMgPSBoZXguc3Vic3RyaW5nKDEpLnNwbGl0KCcnKTtcblxuICAgIGlmIChjLmxlbmd0aCA9PT0gMykge1xuICAgICAgYyA9IFtjWzBdLCBjWzBdLCBjWzFdLCBjWzFdLCBjWzJdLCBjWzJdXTtcbiAgICB9XG5cbiAgICBjID0gYDB4JHtjLmpvaW4oJycpfWA7XG5cbiAgICBpZiAob3BhY2l0eSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICByZXR1cm4gYHJnYmEoJHtbKGMgPj4gMTYpICYgMjU1LCAoYyA+PiA4KSAmIDI1NSwgYyAmIDI1NV0uam9pbignICcpfSAvICR7b3BhY2l0eX0pYDtcbiAgICB9XG5cbiAgICByZXR1cm4gYHJnYigke1soYyA+PiAxNikgJiAyNTUsIChjID4+IDgpICYgMjU1LCBjICYgMjU1XS5qb2luKCcgJyl9KWA7XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIHRoZSBwcm92aWRlZCBcImJ1aWx0IGluXCIgaHVtYW4tcmVhZGFibGUgY29sb3IgdG8gYW4gUkdCKEE/KSB2YWx1ZVxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvck5hbWUgYW55IHZhbGlkIENTUyBjb2xvciB2YWx1ZSwgaW5jbHVkaW5nIFwiYnVpbHQtaW5cIi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3BhY2l0eT0xXSBvcHRpb25hbCBvcGFjaXR5IHZhbHVlLiBJZiBpbmNsdWRlZCwgY2F1c2VzIHRoZSByZXR1cm4gdmFsdWUgdG8gYmUgUkdCQS5cbiAqICBJZiBvbWl0dGVkLCBjYXVzZXMgdGhlIHJldHVybiB2YWx1ZSB0byBiZSBSR0IuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBjb252ZXJ0ZWQgcmdiKGEpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBidWlsdGluVG9SZ2JhKGNvbG9yTmFtZTogc3RyaW5nLCBvcGFjaXR5PzogbnVtYmVyKSB7XG4gIGNvbnN0IGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGVsLnN0eWxlLmNvbG9yID0gY29sb3JOYW1lO1xuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGVsKTtcblxuICBjb25zdCBjcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKTtcbiAgbGV0IHJnYiA9IGNzLmdldFByb3BlcnR5VmFsdWUoJ2NvbG9yJyk7XG5cbiAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChlbCk7XG5cbiAgLy8gbm9ybWFsaXplIFJHQiB2YWx1ZXMgZnJvbSB0aGUgRE9NIHRvIHRoZSBtb2Rlcm4gZm9ybWF0XG4gIHJnYiA9IHJnYi5yZXBsYWNlKC8sL2csICcnKTtcblxuICBpZiAob3BhY2l0eSAmJiByZ2IuaW5kZXhPZignYScpID09PSAtMSkge1xuICAgIHJldHVybiByZ2IucmVwbGFjZSgncmdiJywgJ3JnYmEnKS5yZXBsYWNlKCcpJywgYCAvICR7b3BhY2l0eX0pYCk7XG4gIH1cbiAgcmV0dXJuIHJnYjtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhbnkgdmFsaWQgQ1NTIGNvbG9yIGludG8gYW4gUkdCKEE/KSB2YWx1ZVxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yTmFtZSBhbnkgdmFsaWQgQ1NTIGNvbG9yXG4gKiBAcGFyYW0ge251bWJlcn0gb3BhY2l0eSBvcHRpb25hbCBvcGFjaXR5IHZhbHVlLiBJZiBpbmNsdWRlZCwgY2F1c2VzIHRoZSByZXR1cm4gdmFsdWUgdG8gYmUgUkdCQS5cbiAqICBJZiBvbWl0dGVkLCBjYXVzZXMgdGhlIHJldHVybiB2YWx1ZSB0byBiZSBSR0IuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSR0IoQT8pIHZhbHVlIG9mIHRoZSBvcmlnaW5hbCBjb2xvclxuICovXG5leHBvcnQgZnVuY3Rpb24gY29udmVydENvbG9yVG9SZ2JhKGNvbG9yTmFtZTogc3RyaW5nLCBvcGFjaXR5PzogbnVtYmVyKSB7XG4gIGlmIChjb2xvck5hbWUuc3Vic3RyaW5nKDAsIDEpID09PSAnIycpIHtcbiAgICByZXR1cm4gaGV4VG9SZ2JhKGNvbG9yTmFtZSwgb3BhY2l0eSk7XG4gIH1cbiAgLy8gQFRPRE8gYWRkIEhleEEgKGZvdXItZGlnaXQgaGV4KSBjaGVja1xuICAvLyBAVE9ETyBhZGQgSFNMKEEpIGNoZWNrXG4gIHJldHVybiBidWlsdGluVG9SZ2JhKGNvbG9yTmFtZSwgb3BhY2l0eSk7XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBcInN0YXR1c1wiIGtleXdvcmQgcHJvdmlkZWQgdG8gYSBjb2xvciBhdHRyaWJ1dGUgaW50byBpdHMgY29ycmVzcG9uZGluZ1xuICogSURTIHRoZW1lIGNvbG9yIENTUyB2YXJpYWJsZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdGF0dXNOYW1lIHRoZSBzdGF0dXMga2V5d29yZCBwcm92aWRlZFxuICogQHJldHVybnMge3N0cmluZ30gY29udGFpbmluZyB0aGUgQ1NTIHZhcmlhYmxlIG5hbWUsIG9yIHRoZSBvcmlnaW5hbCBzdGF0dXMgaWYgaXQgY2Fubm90IGJlIGNvcnJlY3RlZFxuICovXG5leHBvcnQgZnVuY3Rpb24gY29udmVydFN0YXR1c1RvSURTQ29sb3Ioc3RhdHVzTmFtZTogc3RyaW5nKSB7XG4gIGxldCBjc3NWYXJpYWJsZTtcbiAgY29uc3Qgc3RhdHVzZXMgPSBbXG4gICAgJ2Jhc2UnLFxuICAgICdlcnJvcicsXG4gICAgJ3dhcm5pbmcnLFxuICAgICdjYXV0aW9uJyxcbiAgICAnc3VjY2VzcydcbiAgXTtcbiAgaWYgKHN0YXR1c2VzLmluY2x1ZGVzKHN0YXR1c05hbWUpKSB7XG4gICAgY3NzVmFyaWFibGUgPSBgdmFyKC0taWRzLWNvbG9yLXN0YXR1cy0ke3N0YXR1c05hbWUgPT09ICdlcnJvcicgPyAnZGFuZ2VyJyA6IHN0YXR1c05hbWV9KWA7XG4gIH1cbiAgcmV0dXJuIGNzc1ZhcmlhYmxlIHx8IHN0YXR1c05hbWU7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/utils/ids-color-utils/ids-color-utils.ts\n");

/***/ }),

/***/ "./src/components/ids-slider/ids-slider.scss":
/*!***************************************************!*\
  !*** ./src/components/ids-slider/ids-slider.scss ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n\n        const styles = `/* Sass scss styles. Keep Base very small */\n/* Global variables (might want these to become tokens) */\n:host {\n  position: relative;\n  width: 100%;\n}\n\n.ids-slider {\n  display: flex;\n  justify-content: center;\n}\n.ids-slider:not(.vertical) {\n  width: 100%;\n}\n.ids-slider:not(.vertical) .thumb {\n  cursor: ew-resize;\n}\n.ids-slider.vertical {\n  height: 300px;\n}\n.ids-slider.vertical .thumb {\n  cursor: ns-resize;\n}\n.ids-slider.animated .thumb-draggable {\n  transition: transform 200ms cubic-bezier(0.4, 0, 0.6, 1);\n}\n.ids-slider.animated:not(.vertical) .track-progress {\n  transition: transform 200ms cubic-bezier(0.4, 0, 0.6, 1), width 200ms cubic-bezier(0.4, 0, 0.6, 1);\n}\n.ids-slider.animated.vertical .track-progress {\n  transition: transform 200ms cubic-bezier(0.4, 0, 0.6, 1), height 200ms cubic-bezier(0.4, 0, 0.6, 1);\n}\n.ids-slider.disabled .label {\n  cursor: default;\n}\n.ids-slider.disabled .thumb {\n  cursor: default;\n}\n.ids-slider.disabled .track-area {\n  cursor: default;\n}\n.ids-slider.readonly .label {\n  cursor: default;\n}\n.ids-slider.readonly .thumb {\n  cursor: pointer;\n}\n.ids-slider.readonly .thumb-shadow {\n  cursor: pointer;\n}\n.ids-slider.readonly .track-area {\n  cursor: default;\n}\n\n.slider {\n  --tick-size: 8px;\n  --thumb-size: 16px;\n  display: inline-flex;\n  position: relative;\n  width: 92%;\n  margin: 25px 4% 50px;\n  justify-content: center;\n  align-items: center;\n}\n.slider.vertical {\n  height: 92%;\n}\n.slider .tick-container {\n  display: flex;\n  position: absolute;\n  width: 100%;\n  justify-content: space-between;\n}\n.slider .tick-container.vertical {\n  height: 100%;\n  flex-direction: column;\n  align-items: center;\n}\n.slider .tick {\n  display: flex;\n  width: var(--tick-size);\n  height: var(--tick-size);\n  border-radius: 50%;\n  z-index: 40;\n  justify-content: center;\n}\n.slider .label {\n  cursor: pointer;\n  position: absolute;\n  transform: translate(0, 100%);\n}\n.slider .label::part(text) {\n  white-space: nowrap;\n}\n.slider .label.vertical {\n  transform: translate(-50px, -25%);\n  min-width: 50px;\n  text-align: right;\n}\n.slider .tooltip {\n  display: flex;\n  justify-content: center;\n  position: absolute;\n  width: auto;\n  padding: 1px;\n  height: auto;\n  text-align: center;\n  margin: auto;\n  border-radius: 2px;\n  vertical-align: middle;\n  line-height: 30px;\n  max-width: 300px;\n  min-width: 40px;\n  transition: opacity 0.2s ease;\n  opacity: 0;\n  bottom: 175%;\n  left: -12px;\n  user-select: none;\n}\n.slider .tooltip.vertical {\n  bottom: unset;\n  left: 200%;\n  transform: translate(0, -25%);\n}\n.slider .tooltip .pin {\n  position: absolute;\n  width: 0;\n  height: 0;\n  bottom: -6px;\n  margin-top: 1px;\n  left: 14px;\n  border-left: 6px solid transparent;\n  border-top: 6px solid transparent;\n  border-right: 6px solid transparent;\n}\n.slider .tooltip .pin.vertical {\n  left: unset;\n  bottom: unset;\n  margin-top: unset;\n  border-top: 6px solid transparent;\n  border-right: 6px solid transparent;\n  border-bottom: 6px solid transparent;\n  right: 100%;\n  transform: translate(0, 10px);\n}\n.slider .thumb-draggable {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 50%;\n  outline: none;\n  position: absolute;\n}\n.slider .thumb {\n  width: var(--thumb-size);\n  height: var(--thumb-size);\n  border-radius: 50%;\n  z-index: 50 !important;\n}\n.slider .thumb-shadow {\n  position: absolute;\n  border-radius: 50%;\n  width: 30px;\n  height: 30px;\n  border-width: 1px;\n  border-style: solid;\n  transition: transform 200ms cubic-bezier(0.4, 0, 0.6, 1);\n  transform: scale(0);\n}\n.slider .thumb-shadow.active {\n  transform: scale(1);\n}\n.slider .track-area {\n  width: 100%;\n  height: 24px;\n  background-color: transparent;\n  align-items: center;\n  justify-content: center;\n  display: flex;\n  position: absolute;\n  z-index: 50;\n  cursor: pointer;\n}\n.slider .track-area.vertical {\n  height: 100%;\n  width: 24px;\n}\n.slider .track {\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n  height: 4px;\n  width: calc(100% - var(--thumb-size) / 2);\n  position: absolute;\n  z-index: 30;\n  border-radius: 2px;\n}\n.slider .track.vertical {\n  justify-content: center;\n  width: 4px;\n  height: calc(100% - var(--thumb-size) / 2);\n}\n.slider .track .track-progress {\n  height: inherit;\n  position: absolute;\n  /* stylelint-disable-next-line custom-property-pattern */\n  width: calc((var(--percentEnd) - var(--percentStart)) * 1%);\n}\n.slider .track .track-progress.vertical {\n  /* stylelint-disable-next-line custom-property-pattern */\n  height: calc((var(--percentEnd) - var(--percentStart)) * 1%);\n  width: 100%;\n  bottom: 0%;\n}\n\n.ids-slider[mode=light] .tick,\n.ids-slider:not([mode]) .tick {\n  background-color: var(--ids-color-brand-primary-base);\n}\n.ids-slider[mode=light] .thumb-shadow,\n.ids-slider:not([mode]) .thumb-shadow {\n  background-color: rgba(0, 114, 237, 0.1);\n  border-color: var(--ids-color-brand-primary-base);\n}\n.ids-slider[mode=light] .thumb,\n.ids-slider:not([mode]) .thumb {\n  background-color: var(--ids-color-brand-primary-base);\n}\n.ids-slider[mode=light] .track,\n.ids-slider:not([mode]) .track {\n  background-color: var(--ids-color-palette-slate-40);\n}\n.ids-slider[mode=light] .track-progress,\n.ids-slider:not([mode]) .track-progress {\n  background-color: var(--ids-color-brand-primary-base);\n}\n.ids-slider[mode=light] .tooltip,\n.ids-slider:not([mode]) .tooltip {\n  background-color: var(--ids-color-palette-slate-80);\n  color: var(--ids-color-palette-white);\n}\n.ids-slider[mode=light] .tooltip .pin,\n.ids-slider:not([mode]) .tooltip .pin {\n  border-top-color: var(--ids-color-palette-slate-80);\n}\n.ids-slider[mode=light] .tooltip .pin.vertical,\n.ids-slider:not([mode]) .tooltip .pin.vertical {\n  border-top-color: transparent;\n  border-right-color: var(--ids-color-palette-slate-80);\n}\n.ids-slider[mode=light]:not(.disabled) .thumb:hover,\n.ids-slider:not([mode]):not(.disabled) .thumb:hover {\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.4);\n}\n.ids-slider[mode=light].disabled,\n.ids-slider:not([mode]).disabled {\n  color: var(--ids-color-palette-slate-30);\n}\n.ids-slider[mode=light].disabled .tick,\n.ids-slider:not([mode]).disabled .tick {\n  background-color: var(--ids-color-palette-slate-30);\n}\n.ids-slider[mode=light].disabled .thumb-shadow,\n.ids-slider:not([mode]).disabled .thumb-shadow {\n  display: none;\n}\n.ids-slider[mode=light].disabled .thumb,\n.ids-slider:not([mode]).disabled .thumb {\n  background-color: var(--ids-color-palette-slate-30);\n}\n.ids-slider[mode=light].disabled .track,\n.ids-slider:not([mode]).disabled .track {\n  background-color: var(--ids-color-palette-slate-20);\n}\n.ids-slider[mode=light].disabled .track-progress,\n.ids-slider:not([mode]).disabled .track-progress {\n  background-color: var(--ids-color-palette-slate-30);\n}\n.ids-slider[mode=light].readonly,\n.ids-slider:not([mode]).readonly {\n  color: var(--ids-color-palette-slate-30);\n}\n.ids-slider[mode=light].readonly .tick,\n.ids-slider:not([mode]).readonly .tick {\n  background-color: var(--ids-color-palette-slate-50);\n}\n.ids-slider[mode=light].readonly .thumb-shadow,\n.ids-slider:not([mode]).readonly .thumb-shadow {\n  border-color: var(--ids-color-palette-slate-50);\n  background-color: rgba(119, 119, 124, 0.1);\n}\n.ids-slider[mode=light].readonly .thumb,\n.ids-slider:not([mode]).readonly .thumb {\n  background-color: var(--ids-color-palette-slate-50);\n}\n.ids-slider[mode=light].readonly .track,\n.ids-slider:not([mode]).readonly .track {\n  background-color: var(--ids-color-palette-slate-40);\n}\n.ids-slider[mode=light].readonly .track-progress,\n.ids-slider:not([mode]).readonly .track-progress {\n  background-color: var(--ids-color-palette-slate-50);\n}\n\n.ids-slider[mode=dark] .tick {\n  background-color: var(--ids-color-brand-primary-base);\n}\n.ids-slider[mode=dark] .thumb-shadow {\n  background-color: rgba(0, 114, 237, 0.1);\n  border-color: var(--ids-color-brand-primary-base);\n}\n.ids-slider[mode=dark] .thumb {\n  background-color: var(--ids-color-brand-primary-base);\n}\n.ids-slider[mode=dark] .track {\n  background-color: var(--ids-color-palette-slate-70);\n}\n.ids-slider[mode=dark] .track-progress {\n  background-color: var(--ids-color-brand-primary-base);\n}\n.ids-slider[mode=dark] .tooltip {\n  background-color: var(--ids-color-palette-white);\n  color: var(--ids-color-palette-slate-100);\n}\n.ids-slider[mode=dark] .tooltip .pin {\n  border-top-color: var(--ids-color-palette-white);\n}\n.ids-slider[mode=dark] .tooltip .pin.vertical {\n  border-top-color: transparent;\n  border-right-color: var(--ids-color-palette-white);\n}\n.ids-slider[mode=dark]:not(.disabled) .thumb:hover {\n  box-shadow: 0 2px 5px rgba(255, 255, 255, 0.4);\n}\n.ids-slider[mode=dark].disabled {\n  color: var(--ids-color-palette-slate-20);\n}\n.ids-slider[mode=dark].disabled .tick {\n  background-color: var(--ids-color-palette-slate-40);\n}\n.ids-slider[mode=dark].disabled .thumb {\n  background-color: var(--ids-color-palette-slate-40);\n}\n.ids-slider[mode=dark].disabled .track {\n  background-color: var(--ids-color-palette-slate-50);\n}\n.ids-slider[mode=dark].disabled .track-progress {\n  background-color: var(--ids-color-palette-slate-40);\n}\n.ids-slider[mode=dark].readonly {\n  color: var(--ids-color-palette-slate-20);\n}\n.ids-slider[mode=dark].readonly .tick {\n  background-color: var(--ids-color-palette-slate-40);\n}\n.ids-slider[mode=dark].readonly .thumb-shadow {\n  border-color: var(--ids-color-palette-slate-40);\n  background-color: rgba(151, 151, 155, 0.1);\n}\n.ids-slider[mode=dark].readonly .thumb {\n  background-color: var(--ids-color-palette-slate-40);\n}\n.ids-slider[mode=dark].readonly .track {\n  background-color: var(--ids-color-palette-slate-70);\n}\n.ids-slider[mode=dark].readonly .track-progress {\n  background-color: var(--ids-color-palette-slate-40);\n}\n\n.ids-slider[mode=contrast] .tick {\n  background-color: var(--ids-color-palette-azure-90);\n}\n.ids-slider[mode=contrast] .thumb-shadow {\n  background-color: rgba(0, 74, 153, 0.1);\n  border-color: var(--ids-color-palette-azure-90);\n}\n.ids-slider[mode=contrast] .thumb {\n  background-color: var(--ids-color-palette-azure-90);\n}\n.ids-slider[mode=contrast] .track {\n  background-color: var(--ids-color-palette-slate-60);\n}\n.ids-slider[mode=contrast] .track-progress {\n  background-color: var(--ids-color-palette-azure-90);\n}\n.ids-slider[mode=contrast] .tooltip {\n  background-color: var(--ids-color-palette-slate-80);\n  color: var(--ids-color-palette-white);\n}\n.ids-slider[mode=contrast] .tooltip .pin {\n  border-top-color: var(--ids-color-palette-slate-80);\n}\n.ids-slider[mode=contrast] .tooltip .pin.vertical {\n  border-top-color: transparent;\n  border-right-color: var(--ids-color-palette-slate-80);\n}\n.ids-slider[mode=contrast]:not(.disabled) .thumb:hover {\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.4);\n}\n.ids-slider[mode=contrast].disabled {\n  color: var(--ids-color-palette-slate-40);\n}\n.ids-slider[mode=contrast].disabled .tick {\n  background-color: var(--ids-color-palette-slate-60);\n}\n.ids-slider[mode=contrast].disabled .thumb {\n  background-color: var(--ids-color-palette-slate-60);\n}\n.ids-slider[mode=contrast].disabled .track {\n  background-color: var(--ids-color-palette-slate-50);\n}\n.ids-slider[mode=contrast].disabled .track-progress {\n  background-color: var(--ids-color-palette-slate-60);\n}\n.ids-slider[mode=contrast].readonly {\n  color: var(--ids-color-palette-slate-40);\n}\n.ids-slider[mode=contrast].readonly .tick {\n  background-color: var(--ids-color-palette-slate-80);\n}\n.ids-slider[mode=contrast].readonly .thumb-shadow {\n  border-color: var(--ids-color-palette-slate-80);\n  background-color: rgba(71, 71, 76, 0.1);\n}\n.ids-slider[mode=contrast].readonly .thumb {\n  background-color: var(--ids-color-palette-slate-80);\n}\n.ids-slider[mode=contrast].readonly .track {\n  background-color: var(--ids-color-palette-slate-60);\n}\n.ids-slider[mode=contrast].readonly .track-progress {\n  background-color: var(--ids-color-palette-slate-80);\n}`;\n        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (styles);\n    //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/ids-slider/ids-slider.scss\n");

/***/ })

}]);