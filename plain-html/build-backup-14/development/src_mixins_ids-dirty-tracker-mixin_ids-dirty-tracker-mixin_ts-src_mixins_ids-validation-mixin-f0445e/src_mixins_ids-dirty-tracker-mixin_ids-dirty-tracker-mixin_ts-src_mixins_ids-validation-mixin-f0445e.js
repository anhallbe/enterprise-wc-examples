"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkids_enterprise_wc"] = self["webpackChunkids_enterprise_wc"] || []).push([["src_mixins_ids-dirty-tracker-mixin_ids-dirty-tracker-mixin_ts-src_mixins_ids-validation-mixin-f0445e"],{

/***/ "./src/mixins/ids-dirty-tracker-mixin/ids-dirty-tracker-mixin.ts":
/*!***********************************************************************!*\
  !*** ./src/mixins/ids-dirty-tracker-mixin/ids-dirty-tracker-mixin.ts ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ids_dirty_tracker_mixin_default)\n/* harmony export */ });\n/* harmony import */ var _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/ids-attributes */ \"./src/core/ids-attributes.ts\");\n/* harmony import */ var _utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/ids-string-utils/ids-string-utils */ \"./src/utils/ids-string-utils/ids-string-utils.ts\");\n\n\nconst IdsDirtyTrackerMixin = (superclass) => class extends superclass {\n  constructor(...args) {\n    super(...args);\n  }\n  connectedCallback() {\n    super.connectedCallback?.();\n    this.handleDirtyTracker();\n    window.requestAnimationFrame(() => {\n      this.resetDirtyTracker();\n    });\n  }\n  static get attributes() {\n    return [\n      ...superclass.attributes,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.DIRTY_TRACKER\n    ];\n  }\n  dirty = {\n    original: \"\"\n  };\n  isDirty = false;\n  isCheckbox = false;\n  isEditor = false;\n  isRadioGroup = false;\n  dirtyContainer;\n  /**\n   * Handle dirty tracker values\n   * @returns {void}\n   */\n  handleDirtyTracker() {\n    const thisAsInput = this;\n    this.isCheckbox = thisAsInput.input?.getAttribute(\"type\") === \"checkbox\";\n    this.isEditor = !!thisAsInput.input?.classList.contains(\"source-textarea\");\n    this.isRadioGroup = !!thisAsInput.input?.classList.contains(\"ids-radio-group\");\n    if (`${this.dirtyTracker}`.toLowerCase() === \"true\") {\n      if (thisAsInput.input) {\n        const val = this.valMethod(thisAsInput.input);\n        this.dirty = { original: val };\n        this.dirtyTrackerEvents();\n      }\n    } else {\n      this.destroyDirtyTracker();\n    }\n  }\n  /**\n   * Check if dirty tracker icon exists if not add it\n   * @private\n   * @returns {void}\n   */\n  appendDirtyTrackerIcon() {\n    const thisAsInput = this;\n    let icon = this.shadowRoot?.querySelector(\".icon-dirty\");\n    if (!icon) {\n      icon = document.createElement(\"ids-icon\");\n      icon.setAttribute(\"icon\", \"dirty-filled\");\n      icon.setAttribute(\"size\", \"small\");\n      icon.setAttribute(\"part\", \"dirty-tracker-icon\");\n      icon.className = \"icon-dirty\";\n      if (this.localeAPI?.isRTL())\n        icon?.setAttribute(\"dir\", \"rtl\");\n      if (this.isCheckbox) {\n        thisAsInput.labelEl?.appendChild(icon);\n        this.dirtyContainer = thisAsInput.labelEl;\n      } else if (this.isRadioGroup) {\n        const refEl = this.shadowRoot?.querySelector(\"slot\");\n        thisAsInput.input?.insertBefore(icon, refEl);\n        this.dirtyContainer = thisAsInput.input;\n      } else if (this.isEditor) {\n        this.dirtyContainer = this.shadowRoot?.querySelector(\".editor-content\");\n        this.dirtyContainer?.appendChild(icon);\n      } else if (this.tagName === \"IDS-DROPDOWN\" || this.tagName === \"IDS-MULTISELECT\") {\n        this.dirtyContainer = thisAsInput.input?.fieldContainer;\n        this.dirtyContainer?.prepend(icon);\n      } else {\n        thisAsInput.fieldContainer?.prepend(icon);\n        this.dirtyContainer = thisAsInput.fieldContainer;\n      }\n    }\n  }\n  /**\n   * Remove if dirty tracker icon exists\n   * @private\n   * @returns {void}\n   */\n  removeDirtyTrackerIcon() {\n    const icon = this.dirtyContainer?.querySelector(\".icon-dirty\");\n    if (icon) {\n      icon.remove();\n    }\n  }\n  /**\n   * Check if dirty tracker msg exists if not add it\n   * @private\n   * @returns {void}\n   */\n  appendDirtyTrackerMsg() {\n    let msg = this.labelEl?.querySelector(\".msg-dirty\");\n    if (!msg) {\n      msg = document.createElement(\"ids-text\");\n      msg.setAttribute(\"audible\", \"true\");\n      msg.className = \"msg-dirty\";\n      msg.innerHTML = \", Modified\";\n      this.labelEl?.appendChild(msg);\n    }\n  }\n  /**\n   * Remove if dirty tracker msg exists\n   * @private\n   * @returns {void}\n   */\n  removeDirtyTrackerMsg() {\n    let msg = this.labelEl?.querySelector(\".msg-dirty\");\n    if (msg) {\n      msg.remove();\n    }\n    msg = this.input?.shadowRoot?.querySelector(\".icon-dirty\");\n    if (msg) {\n      msg.remove();\n    }\n  }\n  /**\n   * Get the value or checked attribute if checkbox or radio\n   * @private\n   * @param {object} el .\n   * @returns {any} element value\n   */\n  valMethod(el) {\n    const thisAsInput = this;\n    let r;\n    if (this.isRadioGroup) {\n      r = thisAsInput.checked;\n    } else if (this.isCheckbox) {\n      r = `${thisAsInput.checked}`.toLowerCase() === \"true\";\n    } else if (this.isEditor) {\n      r = thisAsInput.value;\n    } else {\n      r = el?.value;\n    }\n    return r;\n  }\n  /**\n   * Set dirtyTracker\n   * @private\n   * @param {string} val The current element value\n   * @returns {void}\n   */\n  setDirtyTracker(val) {\n    if (typeof val === \"undefined\") {\n      this.handleDirtyTracker();\n      return;\n    }\n    this.isDirty = this.dirty?.original !== val;\n    if (this.isDirty) {\n      this.appendDirtyTrackerMsg();\n      this.appendDirtyTrackerIcon();\n    } else {\n      this.removeDirtyTrackerMsg();\n      this.removeDirtyTrackerIcon();\n    }\n  }\n  /**\n   * Handle dirty tracker events\n   * @private\n   * @param {string} option If 'remove', will remove attached events\n   * @returns {void}\n   */\n  dirtyTrackerEvents(option = \"\") {\n    const thisAsInput = this;\n    if (this.input) {\n      const eventName = \"change.dirtytrackermixin\";\n      if (option === \"remove\") {\n        const handler = this?.handledEvents?.get(eventName);\n        if (handler && handler.target === thisAsInput.input) {\n          this.offEvent(eventName, thisAsInput.input);\n        }\n      } else {\n        this.offEvent(eventName);\n        this.onEvent(eventName, thisAsInput.input, () => {\n          const val = this.valMethod(thisAsInput.input);\n          this.setDirtyTracker(val);\n        });\n      }\n    }\n  }\n  /** Handle Languages Changes */\n  onLanguageChange = () => {\n    const icon = this.dirtyContainer?.querySelector(\".icon-dirty\");\n    if (this.localeAPI?.isRTL())\n      icon?.setAttribute(\"dir\", \"rtl\");\n    else\n      icon?.removeAttribute(\"dir\");\n  };\n  /**\n   * Reset dirty tracker\n   * @returns {void}\n   */\n  resetDirtyTracker() {\n    if (this.dirty) {\n      this.removeDirtyTrackerIcon();\n      this.removeDirtyTrackerMsg();\n      this.dirty = { original: this.valMethod(this.input) };\n    } else {\n      this.handleDirtyTracker();\n    }\n    this.isDirty = false;\n  }\n  /**\n   * Destroy dirty tracker\n   * @returns {void}\n   */\n  destroyDirtyTracker() {\n    this.dirtyTrackerEvents(\"remove\");\n    this.removeDirtyTrackerIcon();\n    this.removeDirtyTrackerMsg();\n    this.dirty = null;\n  }\n  /**\n   * Runs optional callback, if possible\n   * @private\n   * @returns {void}\n   */\n  #onDirtyTrackerChange() {\n    if (typeof this.onDirtyTrackerChange === \"function\") {\n      this.onDirtyTrackerChange(this.dirtyTracker);\n    }\n  }\n  /**\n   * Set the dirty tracking feature on to indicate a changed field\n   * @param {boolean|string} value If true will set `dirty-tracker` attribute\n   */\n  set dirtyTracker(value) {\n    const val = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_1__.stringToBool)(value);\n    if (val) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.DIRTY_TRACKER, val.toString());\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.DIRTY_TRACKER);\n    }\n    this.#onDirtyTrackerChange();\n    this.handleDirtyTracker();\n  }\n  get dirtyTracker() {\n    return (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_1__.stringToBool)(this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.DIRTY_TRACKER));\n  }\n};\nvar ids_dirty_tracker_mixin_default = IdsDirtyTrackerMixin;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/mixins/ids-dirty-tracker-mixin/ids-dirty-tracker-mixin.ts\n");

/***/ }),

/***/ "./src/mixins/ids-validation-mixin/ids-validation-mixin.ts":
/*!*****************************************************************!*\
  !*** ./src/mixins/ids-validation-mixin/ids-validation-mixin.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ids_validation_mixin_default)\n/* harmony export */ });\n/* harmony import */ var _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/ids-attributes */ \"./src/core/ids-attributes.ts\");\n/* harmony import */ var _utils_ids_object_utils_ids_object_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/ids-object-utils/ids-object-utils */ \"./src/utils/ids-object-utils/ids-object-utils.ts\");\n/* harmony import */ var _utils_ids_date_utils_ids_date_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/ids-date-utils/ids-date-utils */ \"./src/utils/ids-date-utils/ids-date-utils.ts\");\n\n\n\nconst IdsValidationMixin = (superclass) => class extends superclass {\n  isTypeNotValid;\n  constructor(...args) {\n    super(...args);\n  }\n  connectedCallback() {\n    super.connectedCallback?.();\n    this.handleValidation();\n  }\n  static get attributes() {\n    return [\n      ...superclass.attributes,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.VALIDATE,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.VALIDATION_EVENTS,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.VALIDATION_ICON,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.VALIDATION_ID,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.VALIDATION_MESSAGE,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.VALIDATION_TYPE\n    ];\n  }\n  // Map of rules to use\n  useRules = /* @__PURE__ */ new Map();\n  // List of events to validate on\n  validationEventsList = [];\n  // Default icon\n  VALIDATION_DEFAULT_ICON = \"user-profile\";\n  // Icons\n  VALIDATION_ICONS = {\n    alert: \"alert\",\n    error: \"error\",\n    info: \"info\",\n    success: \"success\"\n  };\n  /**\n   * Handle the validation rules\n   * @returns {void}\n   */\n  handleValidation() {\n    const thisAsInput = this;\n    const isRadioGroup = thisAsInput.input?.classList.contains(\"ids-radio-group\");\n    const canRadio = !isRadioGroup || !!(isRadioGroup && this.querySelector(\"ids-radio\"));\n    if (thisAsInput.labelEl && typeof this.validate === \"string\" && canRadio) {\n      const events = this.validationEvents && typeof this.validationEvents === \"string\" ? this.validationEvents : \"change.validationmixin blur.validationmixin\";\n      this.validationEventsList = [...new Set(events.split(\" \"))];\n      const getRule = (id) => ({ id, rule: this.rules[id] });\n      let isRulesAdded = false;\n      this.validate.split(\" \").forEach((strRule) => {\n        if (!getRule(strRule).rule)\n          return;\n        if (strRule === \"required\") {\n          thisAsInput.labelEl?.classList.add(\"required\");\n          thisAsInput.input?.setAttribute(\"aria-required\", true);\n          if (isRadioGroup) {\n            const radioArr = [].slice.call(this.querySelectorAll(\"ids-radio\"));\n            radioArr.forEach((r) => r.input.setAttribute(\"required\", \"required\"));\n          }\n          this.validationElems?.editor?.setAttribute(\"aria-required\", true);\n        }\n        const setRules = (input) => {\n          const useRules = this.useRules.get(input);\n          if (useRules) {\n            const found = useRules.some((r) => r.id === strRule);\n            if (!found) {\n              const mergeRule = [...useRules, getRule(strRule)];\n              this.useRules.set(input, mergeRule);\n              isRulesAdded = true;\n            }\n          } else {\n            this.useRules.set(input, [getRule(strRule)]);\n            isRulesAdded = true;\n          }\n        };\n        setRules(thisAsInput.input);\n      });\n      if (isRulesAdded) {\n        this.handleValidationEvents();\n      }\n      const arrayValidate = this.validate?.split(\" \");\n      let rules = this.useRules.get(thisAsInput.input);\n      if (thisAsInput.input && rules?.length > arrayValidate?.length) {\n        const removed = [];\n        arrayValidate.forEach((id) => {\n          rules = rules.filter((r) => {\n            if (r.id === id)\n              return true;\n            removed.push(r.id);\n            return false;\n          });\n        });\n        removed.forEach((id) => this.removeValidationMessage({ id }));\n        this.useRules.set(thisAsInput.input, rules);\n      }\n    } else {\n      this.destroyValidation();\n    }\n  }\n  /**\n   * Check the validation and add/remove errors as needed\n   * @private\n   * @returns {void}\n   */\n  checkValidation() {\n    const checkRules = (input) => {\n      this.isTypeNotValid = {};\n      let isValid = true;\n      const useRules = this.useRules.get(input);\n      useRules?.forEach((thisRule) => {\n        if (thisRule.rule !== void 0 && !thisRule.rule?.check(input) && this.isTypeNotValid) {\n          this.addMessage(thisRule.rule);\n          isValid = false;\n          this.isTypeNotValid[thisRule.rule.type] = true;\n        } else if (thisRule.rule !== void 0) {\n          this.removeMessage(thisRule.rule);\n        }\n      });\n      this.isTypeNotValid = null;\n      this.triggerEvent(\"validate\", this, { detail: { elem: this, value: this.value, isValid } });\n    };\n    if (this.input) {\n      checkRules(this.input);\n    }\n  }\n  /**\n   * Add validation rule/s\n   * @param {IdsValidationRule} [rule] incoming rule/s settings\n   * @returns {void}\n   */\n  addValidationRule(rule) {\n    const isValid = (val) => typeof val === \"string\" && val !== \"\";\n    const addToValidate = [];\n    let isRulesAdded = false;\n    const addRule = (newRule) => {\n      const { id, type, message } = newRule;\n      if (isValid(id) && isValid(type) && isValid(message) && typeof newRule.check === \"function\") {\n        if (!this.rules[id]) {\n          isRulesAdded = true;\n          this.rules[id] = newRule;\n          if (!this.validate || !new RegExp(id).test(this.validate))\n            addToValidate.push(id);\n        }\n      }\n    };\n    if (rule?.constructor === Array) {\n      rule.forEach((r) => addRule(r));\n    } else {\n      addRule(rule);\n    }\n    if (isRulesAdded) {\n      if (addToValidate.length) {\n        const val = this.validate ? `${this.validate} ` : \"\";\n        this.validate = `${val}${[...new Set(addToValidate)].join(\" \")}`;\n      }\n      this.handleValidation();\n    }\n  }\n  /**\n   * Remove validation rule/s\n   * @param {string} [ruleId] incoming rule/s id\n   * @returns {void}\n   */\n  removeValidationRule(ruleId) {\n    const isValid = (val) => typeof val === \"string\" && val !== \"\";\n    let validate = this.validate;\n    let isRulesRemoved = false;\n    const removeRule = (id) => {\n      if (isValid(id) && this.rules[id] && new RegExp(id).test(validate)) {\n        isRulesRemoved = true;\n        delete this.rules[id];\n        validate = validate?.replace(id, \"\") || null;\n      }\n    };\n    if (ruleId?.constructor === Array) {\n      ruleId.forEach((id) => removeRule(id));\n    } else {\n      removeRule(ruleId);\n    }\n    if (isRulesRemoved) {\n      this.validate = validate?.replace(/\\s\\s+/g, \" \").trim() || null;\n    }\n  }\n  /**\n   * Add validation message/s\n   * @param {Array|object} [message] incoming message/s settings\n   * @returns {void}\n   */\n  addValidationMessage(message) {\n    const addMessage = (obj) => {\n      if ((0,_utils_ids_object_utils_ids_object_utils__WEBPACK_IMPORTED_MODULE_1__.isObjectAndNotEmpty)(obj))\n        this.addMessage(obj);\n    };\n    if (message?.constructor === Array) {\n      message.forEach((m) => addMessage(m));\n    } else {\n      addMessage(message);\n    }\n  }\n  /**\n   * Remove validation message/s\n   * @param {Array|object} [message] incoming message/s settings\n   * @returns {void}\n   */\n  removeValidationMessage(message) {\n    const removeMessage = (obj) => {\n      if ((0,_utils_ids_object_utils_ids_object_utils__WEBPACK_IMPORTED_MODULE_1__.isObjectAndNotEmpty)(obj))\n        this.removeMessage(obj);\n    };\n    if (message?.constructor === Array) {\n      message.forEach((m) => removeMessage(m));\n    } else {\n      removeMessage(message);\n    }\n  }\n  /**\n   * Add a message to an input\n   * @param {object} [settings] incoming settings\n   * @returns {void}\n   */\n  addMessage(settings) {\n    const {\n      id,\n      type,\n      message,\n      icon\n    } = settings;\n    const thisAsInput = this;\n    if (!id)\n      return;\n    let elem = this.shadowRoot?.querySelector(`[validation-id=\"${id}\"]`);\n    if (elem)\n      return;\n    const regex = new RegExp(`^\\\\b(${Object.keys(this.VALIDATION_ICONS).join(\"|\")})\\\\b$`, \"g\");\n    const isValidationIcon = type && regex.test(type);\n    let audible = isValidationIcon ? type.replace(/^./, type[0].toUpperCase()) : null;\n    audible = audible ? `<ids-text audible=\"true\">${audible} </ids-text>` : \"\";\n    let cssClass = \"validation-message\";\n    let iconName = type ? this.VALIDATION_ICONS[type] : \"\";\n    const messageId = `${thisAsInput.input?.getAttribute(\"id\")}-${settings.type}`;\n    if (!iconName && type === \"icon\") {\n      iconName = icon || this.VALIDATION_DEFAULT_ICON;\n      cssClass += iconName ? \" has-custom-icon\" : \"\";\n    }\n    cssClass += isValidationIcon ? ` ${type}` : \"\";\n    cssClass += this.disabled ? \" disabled\" : \"\";\n    const iconHtml = iconName ? `<ids-icon icon=\"${iconName}\" class=\"ids-icon\"></ids-icon>` : \"\";\n    elem = document.createElement(\"div\");\n    elem.setAttribute(\"id\", messageId);\n    elem.setAttribute(\"validation-id\", id);\n    elem.setAttribute(\"type\", type);\n    elem.className = cssClass;\n    elem.innerHTML = `${iconHtml}<ids-text error=\"true\" class=\"message-text\">${audible}${message}</ids-text>`;\n    this.validationElems?.main?.classList.add(type);\n    thisAsInput.fieldContainer?.classList.add(type ?? \"\");\n    thisAsInput.input?.setAttribute(\"aria-describedby\", messageId);\n    thisAsInput.input?.setAttribute(\"aria-invalid\", \"true\");\n    const rootEl = this.shadowRoot?.querySelector(\".ids-input, .ids-textarea, .ids-checkbox\");\n    const parent = rootEl || this.shadowRoot;\n    parent?.appendChild(elem);\n    const isRadioGroup = thisAsInput.input?.classList.contains(\"ids-radio-group\");\n    if (isRadioGroup) {\n      const radioArr = [].slice.call(this.querySelectorAll(\"ids-radio\"));\n      radioArr.forEach((r) => r.setAttribute(\"validation-has-error\", \"true\"));\n    }\n  }\n  /**\n   * Remove the message(s) from an input\n   * @param {object} [settings] incoming settings\n   * @returns {void}\n   */\n  removeMessage(settings) {\n    const thisAsInput = this;\n    const id = settings.id;\n    let type = settings.type;\n    const removeMsg = (elem) => {\n      if (elem) {\n        const thisId = id === null || typeof id === \"undefined\" ? elem.getAttribute(\"id\") : id;\n        if (!type) {\n          type = elem.getAttribute(\"type\");\n        }\n        if (!this.isTypeNotValid) {\n          this.isTypeNotValid = {};\n        }\n        elem.remove?.();\n        if (this.validationId === thisId) {\n          this.validationId = null;\n          this.validationType = null;\n          this.validationMessage = null;\n          this.validationIcon = null;\n        }\n      }\n    };\n    const el = this.shadowRoot?.querySelector(`[validation-id=\"${id}\"]`);\n    if (el) {\n      removeMsg(el);\n    } else if (type && (id === null || typeof id === \"undefined\")) {\n      const typeElms = this.shadowRoot?.querySelectorAll(`.validation-message[type=\"${type}\"]`);\n      typeElms.forEach((typeEl) => removeMsg(typeEl));\n    }\n    if (type) {\n      if (this.isTypeNotValid && !this.isTypeNotValid[type]) {\n        thisAsInput.fieldContainer?.classList.remove(type);\n        thisAsInput.input?.removeAttribute(\"aria-describedby\");\n        thisAsInput.input?.removeAttribute(\"aria-invalid\");\n      }\n    }\n    const isRadioGroup = thisAsInput.input?.classList.contains(\"ids-radio-group\");\n    if (isRadioGroup) {\n      const radioArr = [].slice.call(this.querySelectorAll(\"ids-radio\"));\n      radioArr.forEach((r) => r.removeAttribute(\"validation-has-error\"));\n    }\n    if (type)\n      this.validationElems?.main?.classList.remove(type);\n  }\n  /**\n   * Remove all the validation messages\n   * @returns {void}\n   */\n  removeAllValidationMessages() {\n    const nodes = [].slice.call(this.shadowRoot?.querySelectorAll(\".validation-message\"));\n    nodes.forEach((node) => {\n      const messageSettings = {\n        id: node.getAttribute(\"validation-id\")\n      };\n      const type = node.getAttribute(\"type\");\n      if (type) {\n        messageSettings.type = type;\n      }\n      this.removeMessage(messageSettings);\n    });\n  }\n  /**\n   * Set validation message manually\n   * @returns {void}\n   */\n  setMessageManually() {\n    const getVal = (val) => typeof val === \"string\" && val.trim() !== \"\" ? val.trim() : \"\";\n    const id = getVal(this.validationId);\n    const type = getVal(this.validationType);\n    const message = getVal(this.validationMessage);\n    const icon = getVal(this.validationIcon);\n    if (id && type && message) {\n      const args = { id, type, message, icon };\n      this.removeMessage(args);\n      this.addMessage(args);\n    }\n  }\n  /**\n   * Handle validation events\n   * @private\n   * @param {string} option If 'remove', will remove attached events\n   * @returns {void}\n   */\n  handleValidationEvents(option = \"\") {\n    const validationEvents = (input) => {\n      this.validationEventsList.forEach((eventName) => {\n        if (option === \"remove\") {\n          const handler = this.handledEvents.get(eventName);\n          if (handler && handler.target === input) {\n            this.offEvent(eventName, input);\n          }\n        } else {\n          this.onEvent(eventName, input, () => {\n            this.checkValidation();\n          });\n        }\n      });\n    };\n    if (this.input) {\n      validationEvents(this.input);\n    }\n  }\n  /**\n   * Destroy the validation mixin\n   * @returns {void}\n   */\n  destroyValidation() {\n    const destroy = (input) => {\n      const useRules = this.useRules.get(input);\n      if (useRules) {\n        this.handleValidationEvents(\"remove\");\n        this.useRules.delete(input);\n      }\n      if (!/\\brequired\\b/gi.test(this.validate)) {\n        this.labelEl?.classList.remove(\"required\");\n        input.removeAttribute(\"aria-required\");\n        this.validationElems?.editor?.removeAttribute(\"aria-required\");\n      }\n      this.removeAllValidationMessages();\n    };\n    if (this.input) {\n      destroy(this.input);\n    }\n  }\n  /**\n   * Set all validation rules\n   * @private\n   */\n  rules = {\n    /**\n     * Required validation rule\n     * @private\n     */\n    required: {\n      check: (input) => {\n        if (input.getAttribute(\"type\") === \"checkbox\") {\n          return input.checked;\n        }\n        if (input.classList.contains(\"ids-radio-group\")) {\n          return input.getRootNode()?.host?.checked;\n        }\n        const val = input.value;\n        return !(val === null || typeof val === \"string\" && val === \"\" || typeof val === \"number\" && Number.isNaN(val));\n      },\n      message: \"Required\",\n      type: \"error\",\n      id: \"required\"\n    },\n    /**\n     * Email validation rule\n     * @private\n     */\n    email: {\n      check: (input) => {\n        const val = input.value;\n        const regex = /^([\\w-]+(?:\\.[\\w-]+)*)@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,16}(?:\\.[a-z]{2})?)$/i;\n        return val.length ? regex.test(val) : true;\n      },\n      message: \"Email address not valid\",\n      type: \"error\",\n      id: \"email\"\n    },\n    date: {\n      check(input) {\n        const hostCompoment = input.getRootNode().host;\n        const val = input.value;\n        if (input instanceof Date) {\n          return input && input.getTime && !Number.isNaN(input.getTime());\n        }\n        const dateFormat = hostCompoment.format;\n        const options = {};\n        if (dateFormat) {\n          options.dateFormat = dateFormat;\n        }\n        this.message = hostCompoment.localeAPI.translate(\"InvalidDate\", { showBrackets: false });\n        const parsedDate = hostCompoment.localeAPI.parseDate(val, options);\n        return !(parsedDate === void 0 && val !== \"\");\n      },\n      message: \"Invalid Date\",\n      type: \"error\",\n      id: \"date\"\n    },\n    time: {\n      check(input) {\n        const hostCompoment = input.getRootNode().host;\n        const val = input.value;\n        if (!val)\n          return true;\n        const defaultFormat = hostCompoment.localeAPI.calendar(hostCompoment.localeAPI.locale.name).timeFormat;\n        const attrFormat = hostCompoment.format;\n        const format = attrFormat || defaultFormat;\n        this.message = hostCompoment.localeAPI.translate(\"InvalidTime\", { showBrackets: false });\n        const parsedTime = hostCompoment.localeAPI.parseDate(val, { dateFormat: format, strictTime: true });\n        return (0,_utils_ids_date_utils_ids_date_utils__WEBPACK_IMPORTED_MODULE_2__.isValidDate)(parsedTime);\n      },\n      message: \"Invalid Time\",\n      type: \"error\",\n      id: \"time\"\n    }\n  };\n  /**\n   * Sets the validation check to use\n   * @param {string} value The `validate` attribute\n   */\n  set validate(value) {\n    if (value) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.VALIDATE, value);\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.VALIDATE);\n    }\n    this.handleValidation();\n  }\n  get validate() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.VALIDATE);\n  }\n  /**\n   * Sets which events to fire validation on\n   * @param {string} value The `validation-events` attribute\n   */\n  set validationEvents(value) {\n    if (value) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.VALIDATION_EVENTS, value);\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.VALIDATION_EVENTS);\n    }\n    this.handleValidation();\n  }\n  get validationEvents() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.VALIDATION_EVENTS);\n  }\n  /**\n   * Sets  message icon, use with manually messages thru markup\n   * @param {string} value The value\n   */\n  set validationIcon(value) {\n    if (value) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.VALIDATION_ICON, value);\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.VALIDATION_ICON);\n    }\n    this.setMessageManually();\n  }\n  get validationIcon() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.VALIDATION_ICON);\n  }\n  /**\n   * Sets  message id, use with manually messages thru markup\n   * @param {string} value The value\n   */\n  set validationId(value) {\n    if (value) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.VALIDATION_ID, value);\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.VALIDATION_ID);\n    }\n    this.setMessageManually();\n  }\n  get validationId() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.VALIDATION_ID);\n  }\n  /**\n   * Sets message string, use with manually messages thru markup\n   * @param {string} value The value\n   */\n  set validationMessage(value) {\n    if (value) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.VALIDATION_MESSAGE, value);\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.VALIDATION_MESSAGE);\n    }\n    this.setMessageManually();\n  }\n  get validationMessage() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.VALIDATION_MESSAGE);\n  }\n  /**\n   * Sets message type, use with manually messages thru markup\n   * @param {string} value The value\n   */\n  set validationType(value) {\n    if (value) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.VALIDATION_TYPE, value);\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.VALIDATION_TYPE);\n    }\n    this.setMessageManually();\n  }\n  get validationType() {\n    return this.getAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.VALIDATION_TYPE);\n  }\n  /**\n   * Return if the field is valid or not\n   * @returns {boolean} true if invalid\n   */\n  get isValid() {\n    return this.shadowRoot?.querySelectorAll(\".validation-message\").length === 0;\n  }\n  /**\n   * Return if the current validation errors\n   * @returns {Array<IdsValidationErrorMessage>} The current errors\n   */\n  get validationMessages() {\n    const msgs = [];\n    this.shadowRoot?.querySelectorAll(\".validation-message\").forEach((message) => {\n      msgs.push({\n        message: message.querySelector(\"ids-text\")?.childNodes[1].textContent || \"\",\n        type: message.getAttribute(\"type\") || \"\",\n        id: message.getAttribute(\"validation-id\") || \"\"\n      });\n    });\n    return msgs;\n  }\n};\nvar ids_validation_mixin_default = IdsValidationMixin;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/mixins/ids-validation-mixin/ids-validation-mixin.ts\n");

/***/ }),

/***/ "./src/utils/ids-object-utils/ids-object-utils.ts":
/*!********************************************************!*\
  !*** ./src/utils/ids-object-utils/ids-object-utils.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"calculateTextRenderWidth\": () => (/* binding */ calculateTextRenderWidth),\n/* harmony export */   \"isObject\": () => (/* binding */ isObject),\n/* harmony export */   \"isObjectAndNotEmpty\": () => (/* binding */ isObjectAndNotEmpty)\n/* harmony export */ });\nfunction isObject(obj) {\n  return obj instanceof Object && !(obj instanceof Number) && !(obj instanceof Array);\n}\nfunction isObjectAndNotEmpty(obj) {\n  return isObject(obj) && Object.keys(obj).length > 0;\n}\nfunction calculateTextRenderWidth(obj, text, font = \"400 16px arial\") {\n  obj.canvas = obj.canvas || document.createElement(\"canvas\");\n  const context = obj.canvas.getContext(\"2d\");\n  context.font = font;\n  return context.measureText(text).width;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvaWRzLW9iamVjdC11dGlscy9pZHMtb2JqZWN0LXV0aWxzLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUtPLFNBQVMsU0FBUyxLQUFtQjtBQUMxQyxTQUFPLGVBQWUsVUFBVSxFQUFFLGVBQWUsV0FBVyxFQUFFLGVBQWU7QUFDL0U7QUFPTyxTQUFTLG9CQUFvQixLQUFtQjtBQUNyRCxTQUFPLFNBQVMsR0FBRyxLQUFLLE9BQU8sS0FBSyxHQUFHLEVBQUUsU0FBUztBQUNwRDtBQVVPLFNBQVMseUJBQXlCLEtBQVUsTUFBYyxPQUFPLGtCQUEwQjtBQUNoRyxNQUFJLFNBQVMsSUFBSSxVQUFVLFNBQVMsY0FBYyxRQUFRO0FBQzFELFFBQU0sVUFBVSxJQUFJLE9BQU8sV0FBVyxJQUFJO0FBQzFDLFVBQVEsT0FBTztBQUNmLFNBQU8sUUFBUSxZQUFZLElBQUksRUFBRTtBQUNuQyIsInNvdXJjZXMiOlsid2VicGFjazovL2lkcy1lbnRlcnByaXNlLXdjLy4vc3JjL3V0aWxzL2lkcy1vYmplY3QtdXRpbHMvaWRzLW9iamVjdC11dGlscy50cz8zZTBiIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ2hlY2sgd2hldGhlciB0aGUgZ2l2ZW4gb2JqZWN0IGlzIGFuIG9iamVjdCBvciBub3QuXG4gKiBAcGFyYW0ge2FueX0gb2JqIFRoZSBvYmplY3QgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiBnaXZlbiBvYmplY3QgaXMgYW4gb2JqZWN0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNPYmplY3Qob2JqOiBhbnkpOiBib29sZWFuIHtcbiAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIE9iamVjdCAmJiAhKG9iaiBpbnN0YW5jZW9mIE51bWJlcikgJiYgIShvYmogaW5zdGFuY2VvZiBBcnJheSk7XG59XG5cbi8qKlxuICogQ2hlY2sgdGhlIGdpdmVuIG9iamVjdCBpcyBhbiBvYmplY3QgYW5kIE5PVCBlbXB0eS5cbiAqIEBwYXJhbSB7YW55fSBvYmogVGhlIG9iamVjdCB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIGdpdmVuIG9iamVjdCBpcyBhbiBvYmplY3QgYW5kIE5PVCBlbXB0eS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzT2JqZWN0QW5kTm90RW1wdHkob2JqOiBhbnkpOiBib29sZWFuIHtcbiAgcmV0dXJuIGlzT2JqZWN0KG9iaikgJiYgT2JqZWN0LmtleXMob2JqKS5sZW5ndGggPiAwO1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIHdpZHRoIHRvIHJlbmRlciBnaXZlbiB0ZXh0IHN0cmluZy5cbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0gIHtvYmplY3R9IG9iaiBUaGUgdXNlZCBvYmplY3QuXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHRleHQgVGhlIHRleHQgdG8gcmVuZGVyLlxuICogQHBhcmFtICB7c3RyaW5nfSBmb250IFRoZSBmb250IHZhbHVlLlxuICogQHJldHVybnMge251bWJlcn0gQ2FsY3VsYXRlZCB0ZXh0IHdpZHRoIGluIHBpeGVscy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZVRleHRSZW5kZXJXaWR0aChvYmo6IGFueSwgdGV4dDogc3RyaW5nLCBmb250ID0gJzQwMCAxNnB4IGFyaWFsJyk6IG51bWJlciB7XG4gIG9iai5jYW52YXMgPSBvYmouY2FudmFzIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICBjb25zdCBjb250ZXh0ID0gb2JqLmNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICBjb250ZXh0LmZvbnQgPSBmb250O1xuICByZXR1cm4gY29udGV4dC5tZWFzdXJlVGV4dCh0ZXh0KS53aWR0aDtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/utils/ids-object-utils/ids-object-utils.ts\n");

/***/ })

}]);