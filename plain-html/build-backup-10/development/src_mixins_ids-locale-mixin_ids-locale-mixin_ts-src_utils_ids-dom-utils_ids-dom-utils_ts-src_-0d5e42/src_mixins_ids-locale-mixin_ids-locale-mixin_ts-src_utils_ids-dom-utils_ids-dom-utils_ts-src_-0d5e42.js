"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkids_enterprise_wc"] = self["webpackChunkids_enterprise_wc"] || []).push([["src_mixins_ids-locale-mixin_ids-locale-mixin_ts-src_utils_ids-dom-utils_ids-dom-utils_ts-src_-0d5e42"],{

/***/ "./src/mixins/ids-locale-mixin/ids-locale-mixin.ts":
/*!*********************************************************!*\
  !*** ./src/mixins/ids-locale-mixin/ids-locale-mixin.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ids_locale_mixin_default)\n/* harmony export */ });\n/* harmony import */ var _components_ids_locale_ids_locale__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../components/ids-locale/ids-locale */ \"./src/components/ids-locale/ids-locale.ts\");\n/* harmony import */ var _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/ids-attributes */ \"./src/core/ids-attributes.ts\");\n\n\nconst IdsLocaleMixin = (superclass) => class extends superclass {\n  localeAPI = new _components_ids_locale_ids_locale__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n  constructor(...args) {\n    super(...args);\n  }\n  connectedCallback() {\n    super.connectedCallback?.();\n    if (this.localeAPI.state.language !== \"en\")\n      this.setAttribute(\"language\", this.localeAPI.state.language);\n    if (this.localeAPI.state.localeName !== \"en-US\")\n      this.setAttribute(\"locale\", this.localeAPI.state.localeName);\n  }\n  static get attributes() {\n    return [\n      ...superclass.attributes,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.LANGUAGE,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_1__.attributes.LOCALE\n    ];\n  }\n  /**\n   * Set the language for a component and wait for it to finish (async)\n   * @param {string} value The language string value\n   */\n  async setLanguage(value) {\n    await this.localeAPI.setLanguage(value);\n    if (this.nodeName === \"IDS-CONTAINER\")\n      this.localeAPI.setDocumentLangAttribute(this, value);\n    this.setAttribute(\"language\", value);\n    if (typeof this.onLanguageChange === \"function\" && this.previousLanguage !== value) {\n      this.onLanguageChange(this.localeAPI);\n    }\n    if (this.previousLanguage !== value) {\n      this.triggerEvent(\"languagechange\", this, { detail: { elem: this, language: this.language, locale: this.state?.locale } });\n    }\n    const previous = this.previousLanguage;\n    if (this.children.length > 0) {\n      this.#notifyChildrenLanguage(this.querySelectorAll(\"*\"), value, previous);\n    }\n    if (this.shadowRoot && this.shadowRoot?.children?.length > 0) {\n      this.#notifyChildrenLanguage(this.shadowRoot.querySelectorAll(\"*\"), value, previous);\n    }\n    this.localeAPI.updateDirectionAttribute(this, value);\n    this.setDirection();\n    this.previousLanguage = value;\n  }\n  /** Holds the last set language */\n  previousLanguage = \"en\";\n  /**\n   * Set the language for a component\n   * @param {string} value The language string value\n   */\n  set language(value) {\n    if (value && value !== this.language.name) {\n      this.setLanguage(value);\n    }\n  }\n  /**\n   * Get the language data keys and message for the current language\n   * @returns {object} The language data object\n   */\n  get language() {\n    return {\n      name: this.getAttribute(\"language\") || \"en\",\n      messages: this?.localeAPI?.language.messages\n    };\n  }\n  /**\n   * Set the setter on all children\n   * @param {NodeListOf<HTMLElement>} children the children to set\n   * @param {string} language The language string value\n   * @param {string} previousLanguage The previous language string value\n   */\n  #notifyChildrenLanguage(children, language, previousLanguage) {\n    children.forEach((element) => {\n      if (element.language && element.language.name === previousLanguage) {\n        element.language = language;\n      }\n    });\n  }\n  /** Holds the last set locale */\n  previousLocale = \"en-US\";\n  /**\n   * Set the locale for a component and wait for it to finish (async)\n   * @param {string} value The locale string value\n   */\n  async setLocale(value) {\n    if (value) {\n      await this.localeAPI.setLocale(value);\n      const lang = this.localeAPI.correctLanguage(value);\n      this.setAttribute(\"locale\", value);\n      if (this.nodeName === \"IDS-CONTAINER\")\n        this.localeAPI.setDocumentLangAttribute(this, lang);\n      await this.setLanguage(lang);\n      if (typeof this.onLocaleChange === \"function\" && this.previousLocale !== value) {\n        this.onLocaleChange(this.localeAPI);\n      }\n      if (this.previousLocale !== value) {\n        this.triggerEvent(\"localechange\", this, { detail: { elem: this, language: this.language, locale: this.state?.locale } });\n      }\n      if (this.children.length > 0) {\n        const previous = this.previousLocale;\n        requestAnimationFrame(() => {\n          this.#notifyChildrenLocale(this.querySelectorAll(\"*\"), value, previous);\n        });\n      }\n    }\n    this.previousLocale = value;\n  }\n  /**\n   * Set the locale for a component\n   * @param {string} value The locale string value\n   */\n  set locale(value) {\n    if (value && value !== this.locale && typeof value === \"string\") {\n      this.setLocale(value);\n    }\n  }\n  get locale() {\n    return this.localeAPI.state.localeName;\n  }\n  /**\n   * Set the setter on all children\n   * @param {NodeListOf<HTMLElement>} children the children to set\n   * @param {string} locale The locale string value\n   * @param {string} previousLocale The previous locale string value\n   */\n  #notifyChildrenLocale(children, locale, previousLocale) {\n    children.forEach((element) => {\n      if (element.locale && element.locale === previousLocale) {\n        element.locale = locale;\n      }\n    });\n  }\n  /**\n   * Set the direction attribute\n   */\n  setDirection() {\n    if (this.localeAPI?.isRTL()) {\n      this.setAttribute(\"dir\", \"rtl\");\n      this.container?.classList.add(\"rtl\");\n    } else {\n      this.removeAttribute(\"dir\");\n      this.container?.classList.remove(\"rtl\");\n    }\n  }\n};\nvar ids_locale_mixin_default = IdsLocaleMixin;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/mixins/ids-locale-mixin/ids-locale-mixin.ts\n");

/***/ }),

/***/ "./src/utils/ids-dom-utils/ids-dom-utils.ts":
/*!**************************************************!*\
  !*** ./src/utils/ids-dom-utils/ids-dom-utils.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"checkOverflow\": () => (/* binding */ checkOverflow),\n/* harmony export */   \"getClosest\": () => (/* binding */ getClosest),\n/* harmony export */   \"getClosestContainerNode\": () => (/* binding */ getClosestContainerNode),\n/* harmony export */   \"getClosestRootNode\": () => (/* binding */ getClosestRootNode),\n/* harmony export */   \"getClosestShadow\": () => (/* binding */ getClosestShadow),\n/* harmony export */   \"getEditableRect\": () => (/* binding */ getEditableRect),\n/* harmony export */   \"getElementAtMouseLocation\": () => (/* binding */ getElementAtMouseLocation),\n/* harmony export */   \"hasClass\": () => (/* binding */ hasClass),\n/* harmony export */   \"next\": () => (/* binding */ next),\n/* harmony export */   \"nextUntil\": () => (/* binding */ nextUntil),\n/* harmony export */   \"parents\": () => (/* binding */ parents),\n/* harmony export */   \"previous\": () => (/* binding */ previous),\n/* harmony export */   \"querySelectorAllShadowRoot\": () => (/* binding */ querySelectorAllShadowRoot),\n/* harmony export */   \"transitionToPromise\": () => (/* binding */ transitionToPromise),\n/* harmony export */   \"validMaxHeight\": () => (/* binding */ validMaxHeight),\n/* harmony export */   \"waitForAnimationEnd\": () => (/* binding */ waitForAnimationEnd),\n/* harmony export */   \"waitForTransitionEnd\": () => (/* binding */ waitForTransitionEnd)\n/* harmony export */ });\nfunction getClosestShadow(node) {\n  let parent = node && node.parentNode;\n  while (parent) {\n    if (parent.toString() === \"[object ShadowRoot]\") {\n      return parent;\n    }\n    parent = parent.parentNode;\n  }\n  return void 0;\n}\nfunction getClosestContainerNode(node) {\n  return getClosestShadow(node) || document;\n}\nfunction getClosestRootNode(node) {\n  return getClosestShadow(node)?.host?.parentNode || document;\n}\nfunction getClosest(node, selector) {\n  let parent = node && node.parentNode;\n  while (parent) {\n    if (parent.toString() === \"[object ShadowRoot]\") {\n      parent = parent.host;\n    }\n    if (parent.toString() === \"[object HTMLDocument]\") {\n      return void 0;\n    }\n    if (typeof parent.matches === \"function\" && parent.matches(selector)) {\n      return parent;\n    }\n    parent = parent.parentNode;\n  }\n  return void 0;\n}\nfunction parents(node, selector = \"body\") {\n  const parentsList = [];\n  for (let parent = node?.parentNode; parent; parent = parent.toString() === \"[object ShadowRoot]\" ? parent.host : parent?.parentNode) {\n    parentsList.push(parent);\n    if (parent.matches?.(selector))\n      break;\n  }\n  return parentsList;\n}\nfunction nextUntil(node, selector) {\n  const siblings = [];\n  node = node.nextElementSibling;\n  while (node) {\n    if (node.matches(selector))\n      break;\n    siblings.push(node);\n    node = node.nextElementSibling;\n  }\n  return siblings;\n}\nfunction next(node, selector) {\n  node = node.nextElementSibling;\n  while (node) {\n    if (node.matches(selector))\n      return node;\n    node = node.nextElementSibling;\n  }\n  return node;\n}\nfunction previous(node, selector) {\n  node = node.previousElementSibling;\n  while (node) {\n    if (node.matches(selector))\n      return node;\n    node = node.previousElementSibling;\n  }\n  return node;\n}\nfunction transitionToPromise(el, property, value) {\n  if (!el)\n    return Promise.resolve();\n  return new Promise((resolve) => {\n    el.style[property] = value;\n    const transitionEnded = (e) => {\n      if (e.propertyName !== property)\n        resolve(true);\n      el.removeEventListener(\"transitionend\", transitionEnded);\n      resolve(true);\n    };\n    el.addEventListener(\"transitionend\", transitionEnded);\n  });\n}\nfunction waitForTransitionEnd(el, property) {\n  return new Promise((resolve) => {\n    const transitionEnded = (e) => {\n      if (e.propertyName !== property)\n        resolve(true);\n      el.removeEventListener(\"transitionend\", transitionEnded);\n      resolve(true);\n    };\n    el.addEventListener(\"transitionend\", transitionEnded);\n  });\n}\nfunction waitForAnimationEnd(el, animationName) {\n  return new Promise((resolve) => {\n    if (typeof AnimationEvent !== \"function\")\n      resolve(true);\n    const animationEnded = (e) => {\n      if (e.animationName !== animationName)\n        return;\n      el.removeEventListener(\"animationend\", animationEnded);\n      resolve(true);\n    };\n    el.addEventListener(\"animationend\", animationEnded);\n  });\n}\nfunction getEditableRect(rect) {\n  const {\n    bottom,\n    left,\n    right,\n    top,\n    height,\n    width,\n    x,\n    y\n  } = rect;\n  return {\n    bottom,\n    left,\n    right,\n    top,\n    height,\n    width,\n    x,\n    y\n  };\n}\nfunction checkOverflow(el) {\n  if (!el)\n    return false;\n  const curOverflow = el.style.overflow;\n  let changedOverflow = false;\n  if (!curOverflow || curOverflow === \"visible\") {\n    el.style.overflow = \"hidden\";\n    changedOverflow = true;\n  }\n  const isOverflowing = el.clientWidth < el.scrollWidth || el.clientHeight < el.scrollHeight;\n  if (changedOverflow) {\n    el.style.overflow = curOverflow;\n  }\n  return isOverflowing;\n}\nfunction hasClass(el, className) {\n  return el?.classList.contains(className);\n}\nfunction getElementAtMouseLocation() {\n  let mousePos = [0, 0];\n  const getCurrentCoords = (e) => {\n    mousePos = [e.clientX, e.clientY];\n    document.removeEventListener(\"mousemove\", getCurrentCoords);\n  };\n  document.addEventListener(\"mousemove\", getCurrentCoords);\n  return document.elementFromPoint(...mousePos);\n}\nfunction querySelectorAllShadowRoot(selector, rootNode = document.body) {\n  const arr = [];\n  const traverser = (node) => {\n    if (node.nodeType !== Node.ELEMENT_NODE) {\n      return;\n    }\n    if (node.matches(selector)) {\n      arr.push(node);\n    }\n    const children = node.children;\n    if (children.length) {\n      for (const child of children) {\n        traverser(child);\n      }\n    }\n    const shadowRoot = node.shadowRoot;\n    if (shadowRoot) {\n      const shadowChildren = shadowRoot.children;\n      for (const shadowChild of shadowChildren) {\n        traverser(shadowChild);\n      }\n    }\n  };\n  traverser(rootNode);\n  return arr;\n}\nfunction validMaxHeight(value) {\n  let val = parseInt(value, 10);\n  val = !Number.isNaN(val) && val > -1 ? `${val}px` : null;\n  return val;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/ids-dom-utils/ids-dom-utils.ts\n");

/***/ }),

/***/ "./src/utils/ids-xss-utils/ids-xss-utils.ts":
/*!**************************************************!*\
  !*** ./src/utils/ids-xss-utils/ids-xss-utils.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"escapeHTML\": () => (/* binding */ escapeHTML),\n/* harmony export */   \"sanitizeConsoleMethods\": () => (/* binding */ sanitizeConsoleMethods),\n/* harmony export */   \"sanitizeHTML\": () => (/* binding */ sanitizeHTML),\n/* harmony export */   \"stripHTML\": () => (/* binding */ stripHTML),\n/* harmony export */   \"stripTags\": () => (/* binding */ stripTags),\n/* harmony export */   \"unescapeHTML\": () => (/* binding */ unescapeHTML)\n/* harmony export */ });\nfunction sanitizeConsoleMethods(html) {\n  const methods = [\"assert\", \"clear\", \"count\", \"debug\", \"dirxml\", \"dir\", \"error\", \"exception\", \"groupCollapsed\", \"groupEnd\", \"group\", \"info\", \"log\", \"markTimeline\", \"profileEnd\", \"profile\", \"table\", \"timeEnd\", \"timeStamp\", \"time\", \"trace\", \"warn\"];\n  const expr = new RegExp(`console\\\\.(${methods.join(\"|\")})((\\\\s+)?\\\\(([^)]+)\\\\);?)?`, \"igm\");\n  return typeof html !== \"string\" ? html : html.replace(expr, \"\");\n}\nfunction sanitizeHTML(html) {\n  let santizedHtml = html.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/g, \"\");\n  santizedHtml = santizedHtml.replace(/<[^>]+/g, (match) => {\n    const expr = /(\\/|\\s)on\\w+=('|\")?/g;\n    let str = match;\n    if ((str.match(expr) || []).length > 0) {\n      str = str.replace(/(\\/|\\s)title=('|\")(.*)('|\")/g, (m) => {\n        if ((m.match(expr) || []).length > 0) {\n          return m.replace(expr, (m2) => m2.replace(\"on\", \"\"));\n        }\n        return m;\n      });\n    }\n    return str.replace(/(\\/|\\s)on\\w+=('|\")?[^\"]*('|\")?/g, \"\");\n  });\n  santizedHtml = sanitizeConsoleMethods(santizedHtml);\n  santizedHtml = santizedHtml.replace(/<\\/script>/g, \"\");\n  return santizedHtml;\n}\nfunction stripHTML(str) {\n  let newStr = str;\n  if (!newStr) {\n    return \"\";\n  }\n  newStr = newStr.replace(/<\\/?[^>]+(>|$)/g, \"\");\n  return newStr;\n}\nfunction stripTags(html, allowed) {\n  if (!html) {\n    return \"\";\n  }\n  if (typeof html === \"number\") {\n    return html;\n  }\n  const allowList = (`${allowed || \"\"}`.toLowerCase().match(/<[a-z][a-z0-9|ids\\-a-z]*>/g) || []).join(\"\");\n  const tags = /<\\/?([a-z][a-z0-9|ids\\-a-z]*)\\b[^>]*>/gi;\n  const commentsAndPhpTags = /<!--[\\s\\S]*?-->|<\\?(?:php)?[\\s\\S]*?\\?>/gi;\n  let returnHTML = \"\";\n  returnHTML = html.replace(commentsAndPhpTags, \"\").replace(tags, ($0, $1) => allowList.indexOf(\"<\" + $1.toLowerCase() + \">\") > -1 ? $0 : \"\");\n  returnHTML = returnHTML.replace(tags, ($0, $1) => allowList.indexOf(\"<\" + $1.toLowerCase() + \">\") > -1 ? $0 : \"\");\n  return returnHTML;\n}\nfunction unescapeHTML(value) {\n  if (value === \"\") {\n    return \"\";\n  }\n  if (typeof value === \"string\") {\n    const match = (regx) => value.match(regx)[0];\n    const doc = new DOMParser().parseFromString(value, \"text/html\");\n    return `${match(/^\\s*/)}${doc.documentElement.textContent.trim()}${match(/\\s*$/)}`;\n  }\n  return value;\n}\nfunction escapeHTML(unsafe) {\n  if (!unsafe)\n    return \"\";\n  return unsafe.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#039;\").replace(/\\\\/g, \"&bsol;\");\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/ids-xss-utils/ids-xss-utils.ts\n");

/***/ })

}]);