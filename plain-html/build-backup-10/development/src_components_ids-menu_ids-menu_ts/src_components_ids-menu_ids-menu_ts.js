"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkids_enterprise_wc"] = self["webpackChunkids_enterprise_wc"] || []).push([["src_components_ids-menu_ids-menu_ts"],{

/***/ "./src/components/ids-menu/ids-menu.ts":
/*!*********************************************!*\
  !*** ./src/components/ids-menu/ids-menu.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ IdsMenu)\n/* harmony export */ });\n/* harmony import */ var _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/ids-attributes */ \"./src/core/ids-attributes.ts\");\n/* harmony import */ var _core_ids_decorators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/ids-decorators */ \"./src/core/ids-decorators.ts\");\n/* harmony import */ var _utils_ids_dom_utils_ids_dom_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/ids-dom-utils/ids-dom-utils */ \"./src/utils/ids-dom-utils/ids-dom-utils.ts\");\n/* harmony import */ var _ids_menu_attributes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ids-menu-attributes */ \"./src/components/ids-menu/ids-menu-attributes.ts\");\n/* harmony import */ var _core_ids_data_source__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/ids-data-source */ \"./src/core/ids-data-source.ts\");\n/* harmony import */ var _mixins_ids_keyboard_mixin_ids_keyboard_mixin__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../mixins/ids-keyboard-mixin/ids-keyboard-mixin */ \"./src/mixins/ids-keyboard-mixin/ids-keyboard-mixin.ts\");\n/* harmony import */ var _mixins_ids_theme_mixin_ids_theme_mixin__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../mixins/ids-theme-mixin/ids-theme-mixin */ \"./src/mixins/ids-theme-mixin/ids-theme-mixin.ts\");\n/* harmony import */ var _core_ids_element__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../core/ids-element */ \"./src/core/ids-element.ts\");\n/* harmony import */ var _mixins_ids_events_mixin_ids_events_mixin__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../mixins/ids-events-mixin/ids-events-mixin */ \"./src/mixins/ids-events-mixin/ids-events-mixin.ts\");\n/* harmony import */ var _ids_menu_group__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./ids-menu-group */ \"./src/components/ids-menu/ids-menu-group.ts\");\n/* harmony import */ var _ids_menu_header__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./ids-menu-header */ \"./src/components/ids-menu/ids-menu-header.ts\");\n/* harmony import */ var _ids_menu_item__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./ids-menu-item */ \"./src/components/ids-menu/ids-menu-item.ts\");\n/* harmony import */ var _ids_separator_ids_separator__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../ids-separator/ids-separator */ \"./src/components/ids-separator/ids-separator.ts\");\n/* harmony import */ var _ids_menu_scss__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./ids-menu.scss */ \"./src/components/ids-menu/ids-menu.scss\");\n/* harmony import */ var _utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../utils/ids-string-utils/ids-string-utils */ \"./src/utils/ids-string-utils/ids-string-utils.ts\");\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result)\n    __defProp(target, key, result);\n  return result;\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst Base = (0,_mixins_ids_keyboard_mixin_ids_keyboard_mixin__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(\n  (0,_mixins_ids_theme_mixin_ids_theme_mixin__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(\n    (0,_mixins_ids_events_mixin_ids_events_mixin__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(\n      _core_ids_element__WEBPACK_IMPORTED_MODULE_7__[\"default\"]\n    )\n  )\n);\nlet IdsMenu = class extends Base {\n  datasource = new _core_ids_data_source__WEBPACK_IMPORTED_MODULE_4__[\"default\"]();\n  lastHovered;\n  lastNavigated;\n  constructor() {\n    super();\n    this.state = {};\n    this.lastHovered = void 0;\n    this.lastNavigated = void 0;\n    this.hasIcons = false;\n  }\n  static get attributes() {\n    return [\n      ...super.attributes,\n      _core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.DISABLED\n    ];\n  }\n  /**\n   * Safely retrieves child elements of the menu without regard\n   * for whether or not they are direct descendants, or slotted\n   * @returns {Array<HTMLElement>} child element list\n   */\n  get childElements() {\n    let target = [...this.children];\n    if (this.children[0]?.tagName === \"SLOT\") {\n      target = this.children[0].assignedElements();\n    }\n    return target;\n  }\n  /**\n   * Sets up event handlers used in this menu.\n   * @private\n   * @returns {void}\n   */\n  attachEventHandlers() {\n    this.offEvent(\"click\");\n    this.onEvent(\"click\", this, (e) => {\n      const thisItem = e.target.closest(\"ids-menu-item\");\n      this.highlightItem(thisItem);\n      this.selectItem(thisItem);\n      this.lastNavigated = thisItem;\n      e.stopPropagation();\n    });\n    this.offEvent(\"mouseover\");\n    this.onEvent(\"mouseover\", this, (e) => {\n      const target = e.target;\n      if (target && target.tagName === \"IDS-MENU-ITEM\") {\n        e.stopPropagation();\n        const menuItem = target;\n        this.highlightItem(menuItem);\n        if (!menuItem.hasAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.DISABLED)) {\n          this.lastHovered = menuItem;\n        }\n      }\n    });\n    this.offEvent(\"mouseout\");\n    this.onEvent(\"mouseout\", this, (e) => {\n      const target = e.target;\n      if (target && target.tagName === \"IDS-MENU-ITEM\") {\n        e.stopPropagation();\n        const menuItem = target;\n        if (!menuItem.hasSubmenu || menuItem.submenu?.hidden) {\n          menuItem.unhighlight();\n        }\n      }\n    });\n  }\n  /**\n   * Sets up the connection to the global keyboard handler\n   * @returns {void}\n   */\n  attachKeyboardListeners() {\n    this.unlisten(\"ArrowUp\");\n    this.listen([\"ArrowUp\"], this, (e) => {\n      e.preventDefault();\n      e.stopPropagation();\n      this.navigate(-1, true);\n    });\n    this.unlisten(\"ArrowDown\");\n    this.listen([\"ArrowDown\"], this, (e) => {\n      e.preventDefault();\n      e.stopPropagation();\n      this.navigate(1, true);\n    });\n    this.unlisten(\"Enter\");\n    this.unlisten(\"Spacebar\");\n    this.unlisten(\" \");\n    this.listen([\"Enter\", \"Spacebar\", \" \"], this, (e) => {\n      const thisItem = e.target.closest(\"ids-menu-item\");\n      this.selectItem(thisItem);\n      this.lastNavigated = thisItem;\n      e.preventDefault();\n      e.stopPropagation();\n    });\n  }\n  /**\n   * Runs when the menu element is connected to the DOM.\n   * @returns {void}\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    this.attachEventHandlers();\n    this.attachKeyboardListeners();\n    this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.htmlAttributes.ROLE, \"none\");\n    if (this.data) {\n      this.renderFromData();\n    }\n    this.refreshIconAlignment();\n    requestAnimationFrame(() => {\n      this.makeTabbable(this.detectTabbable());\n    });\n  }\n  /**\n   * Inner template contents\n   * @returns {string} The template\n   */\n  template() {\n    let id;\n    if (this.id)\n      id = ` id=\"${this.id}\"`;\n    let disabledClass = \"\";\n    if (this.disabled)\n      disabledClass = \" disabled\";\n    let slot = \"\";\n    if (this.tagName.toLowerCase() === \"ids-popup-menu\")\n      slot = ` slot=\"content\"`;\n    return `<nav class=\"ids-menu${disabledClass}\"${id}${slot} part=\"menu\" role=\"none\"><slot></slot></nav>`;\n  }\n  /**\n   * @param {any} contentsObj a plain object structure with Popupmenu Contents\n   * @returns {string} list of HTML\n   */\n  menuContentTemplate(contentsObj) {\n    const renderSeparator = () => `<ids-separator></ids-separator>`;\n    const renderHeader = (elem) => {\n      if (typeof elem.text !== \"string\") {\n        return \"\";\n      }\n      return `<ids-menu-header>${elem.text}</ids-menu-header>`;\n    };\n    const renderContents = (submenuContents) => {\n      let html = \"\";\n      submenuContents.forEach((elem) => {\n        switch (elem.type) {\n          case \"header\":\n            html += renderHeader(elem);\n            break;\n          case \"separator\":\n            html += renderSeparator();\n            break;\n          case \"group\":\n          default:\n            html += renderGroup(elem);\n            break;\n        }\n      });\n      return html;\n    };\n    const renderSubmenu = (submenuData) => {\n      if (!Array.isArray(submenuData?.contents) || !submenuData.contents.length) {\n        return \"\";\n      }\n      let id = \"\";\n      if (submenuData.id) {\n        id = ` id=\"${submenuData.id}\"`;\n      }\n      const contents = renderContents(submenuData.contents);\n      return `<ids-popup-menu slot=\"submenu\"${id}>${contents}</ids-popup-menu>`;\n    };\n    const renderItem = (item) => {\n      if (typeof item.text !== \"string\") {\n        return \"\";\n      }\n      const text = `${item.text}`;\n      let id = \"\";\n      if (typeof item.id === \"string\") {\n        id = ` id=\"${item.id}\"`;\n      }\n      let disabled = \"\";\n      if (item.disabled) {\n        disabled = ' disabled=\"true\"';\n      }\n      let icon = \"\";\n      if (typeof item.icon === \"string\") {\n        icon = ` icon=\"${item.icon}\"`;\n      }\n      let selected = \"\";\n      if (item.selected) {\n        selected = ' selected=\"true\"';\n      }\n      let shortcutKeys = \"\";\n      if (typeof item.shortcutKeys === \"string\") {\n        shortcutKeys = ` shortcut-keys=\"${item.shortcutKeys}\"`;\n      }\n      let value = \"\";\n      if (typeof item.value !== \"undefined\" && item.value !== null && item.value !== \"\") {\n        value = ` value=\"${item.value}\"`;\n      }\n      let submenu = \"\";\n      if (item.submenu) {\n        submenu = renderSubmenu(item.submenu);\n      }\n      return `<ids-menu-item${id}${disabled}${icon}${selected}${shortcutKeys}${value}>\n        ${text}\n        ${submenu}\n      </ids-menu-item>`;\n    };\n    const renderGroup = (groupData) => {\n      if (!Array.isArray(groupData?.items) || !groupData.items.length) {\n        return \"\";\n      }\n      let id = \"\";\n      if (groupData.id) {\n        id = ` id=\"${groupData.id}\"`;\n      }\n      let itemsHTML = \"\";\n      groupData.items?.forEach((newItem) => {\n        if (newItem?.type === \"separator\") {\n          itemsHTML += renderSeparator();\n        } else {\n          itemsHTML += renderItem(newItem);\n        }\n      });\n      return `<ids-menu-group${id}>${itemsHTML}</ids-menu-group>`;\n    };\n    return renderContents(contentsObj);\n  }\n  /**\n   * Rerender the list by re applying the template\n   * @private\n   */\n  renderFromData() {\n    if (this.data?.length === 0 || !this.shadowRoot) {\n      return;\n    }\n    const template = document.createElement(\"template\");\n    const html = this.template();\n    this.shadowRoot.innerHTML = \"\";\n    template.innerHTML = html;\n    this.shadowRoot.appendChild(template.content.cloneNode(true));\n    this.innerHTML = \"\";\n    this.insertAdjacentHTML(\"beforeend\", this.menuContentTemplate(this.data));\n  }\n  /**\n   * Set the data array of the menu\n   * @param {IdsMenuData} value The array to use\n   * @returns {void}\n   */\n  set data(value) {\n    if (Array.isArray(value)) {\n      this.datasource.data = value;\n      this.renderFromData();\n      return;\n    }\n    if (value && typeof value === \"object\") {\n      const objData = value;\n      if (Array.isArray(objData.contents)) {\n        this.datasource.data = objData.contents;\n        if (objData.id)\n          this.id = objData.id;\n        this.renderFromData();\n      }\n      return;\n    }\n    this.datasource.data = [];\n  }\n  /**\n   * @returns {IdsMenuData} containing the dataset\n   */\n  get data() {\n    return this?.datasource?.data || [];\n  }\n  /**\n   * @readonly\n   * @returns {Array<any>} [`IdsMenuGroup`] all available menu groups\n   */\n  get groups() {\n    return this.childElements?.filter((e) => e.matches(\"ids-menu-group\"));\n  }\n  /**\n   * @readonly\n   * @returns {Array<any>} [`IdsMenuHeader`] all available menu groups\n   */\n  get headers() {\n    return this.childElements?.filter((e) => e.matches(\"ids-menu-header\"));\n  }\n  /**\n   * @readonly\n   * @returns {Array<HTMLElement>} all available menu items\n   */\n  get items() {\n    let i = [];\n    this.groups.forEach((group) => {\n      i = i.concat([...group.children].filter((e) => e.matches(\"ids-menu-item\")));\n    });\n    return i;\n  }\n  /**\n   * @readonly\n   * @returns {HTMLElement|undefined} the currently focused menu item, if one exists\n   */\n  get focused() {\n    return this.items.find((item) => {\n      const containerNode = (0,_utils_ids_dom_utils_ids_dom_utils__WEBPACK_IMPORTED_MODULE_2__.getClosestContainerNode)(this);\n      return containerNode?.activeElement?.isEqualNode(item);\n    });\n  }\n  /**\n   * @readonly\n   * @returns {HTMLElement} the next focusable item that is/was:\n   * - last hovered by the mouse (if applicable)\n   * - currently/previously selected (if applicable)\n   * - the first available menu item closest to the top of the menu that is not disabled or hidden.\n   */\n  get focusTarget() {\n    if (this.lastHovered)\n      return this.lastHovered;\n    if (this.lastNavigated)\n      return this.lastNavigated;\n    const highlighted = this.items.filter((item) => item.highlighted);\n    if (highlighted.length)\n      return highlighted[highlighted.length - 1];\n    const selected = this.getSelectedItems();\n    if (selected.length)\n      return selected[0];\n    return this.getFirstAvailableItem();\n  }\n  /**\n   * @readonly\n   * @returns {Array<HTMLElement>} all menu items that are currently highlighted\n   */\n  get highlighted() {\n    return this.items.filter((item) => item.highlighted);\n  }\n  /**\n   * @readonly\n   * @returns {IdsMenu} parent menu component, if this menu is a submenu\n   */\n  get parentMenu() {\n    return this.parentElement?.closest(\"ids-menu\");\n  }\n  /**\n   * @readonly\n   * @returns {HTMLElement} parent menu item, if this menu is a submenu\n   */\n  get parentMenuItem() {\n    return this.parentElement?.closest(\"ids-menu-item\");\n  }\n  /**\n   * @readonly\n   * @returns {Array<IdsMenu>} all available submenus on this menu's direct children\n   */\n  get submenus() {\n    const submenus = [];\n    this.items.forEach((item) => {\n      const submenu = item.submenu;\n      if (submenu) {\n        submenus.push(submenu);\n      }\n    });\n    return submenus;\n  }\n  /**\n   * @param {boolean | string} val true if the component should be disabled\n   */\n  set disabled(val) {\n    const safeVal = (0,_utils_ids_string_utils_ids_string_utils__WEBPACK_IMPORTED_MODULE_14__.stringToBool)(val);\n    if (safeVal) {\n      this.setAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.DISABLED, \"\");\n      this.#disableItems();\n    } else {\n      this.removeAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.DISABLED);\n      this.#enableItems();\n    }\n  }\n  /**\n   * @returns {boolean} true if the component is disabled\n   */\n  get disabled() {\n    return this.hasAttribute(_core_ids_attributes__WEBPACK_IMPORTED_MODULE_0__.attributes.DISABLED);\n  }\n  #disableItems() {\n    this.container?.classList.add(\"disabled\");\n    this.items.forEach((item) => {\n      item.disabled = true;\n    });\n  }\n  #enableItems() {\n    this.container?.classList.remove(\"disabled\");\n    this.items.forEach((item) => {\n      item.disabled = false;\n    });\n  }\n  /**\n   * Unhighlights all menu items, then highlights a specified item.\n   * @param {HTMLElement} menuItem reference to the menu item that will be highlighted\n   * @returns {void}\n   */\n  highlightItem(menuItem) {\n    if (!(0,_ids_menu_attributes__WEBPACK_IMPORTED_MODULE_3__.isUsableItem)(menuItem, this)) {\n      return;\n    }\n    this.items.forEach((item) => {\n      if (!menuItem.isEqualNode(item)) {\n        item.unhighlight();\n      }\n    });\n    menuItem.highlight();\n  }\n  /**\n   * Uses a currently-highlighted menu item to \"navigate\" a specified number\n   * of steps to another menu item, highlighting it.\n   * @param {number} [amt] the amount of items to navigate\n   * @param {boolean} [doFocus] if true, causes the new item to become focused.\n   * @returns {HTMLElement} the item that will be highlighted\n   */\n  navigate(amt = 0, doFocus = false) {\n    const items = this.items;\n    let currentItem = this.focusTarget;\n    if (typeof amt !== \"number\") {\n      return currentItem;\n    }\n    const negative = amt < 0;\n    let steps = Math.abs(amt);\n    let currentIndex = items.indexOf(currentItem);\n    while (steps > 0) {\n      currentItem = items[currentIndex + (negative ? -1 : 1)];\n      currentIndex = items.indexOf(currentItem);\n      if (currentIndex < 0) {\n        currentIndex = negative ? items.length - 1 : 0;\n        currentItem = items[currentIndex];\n      }\n      if (!currentItem.disabled && !currentItem.hidden) {\n        this.makeTabbable(currentItem);\n        steps -= 1;\n      }\n    }\n    this.lastNavigated = currentItem;\n    if (this.lastHovered)\n      this.lastHovered = null;\n    if (!currentItem.disabled && !currentItem.hidden && doFocus) {\n      currentItem.focus();\n      this.highlightItem(currentItem);\n    }\n    return currentItem;\n  }\n  /**\n   * Gets the current item that should be used as the \"tabbable\" item\n   * (item that receives focus when the menu is \"focused\").\n   * @returns {HTMLElement | undefined} an element that currently has a usable tabIndex attribute\n   */\n  detectTabbable() {\n    let tabbableItem;\n    for (let i = 0; !tabbableItem && i < this.items.length; i++) {\n      if (this.items[i].tabIndex > -1) {\n        tabbableItem = this.items[i];\n      }\n    }\n    return tabbableItem;\n  }\n  /**\n   * @private\n   * @param {HTMLElement} elem an element residing within the menu that can accept\n   */\n  makeTabbable(elem = this.items[0]) {\n    this.items.forEach((item) => {\n      const nonTabbableTargetIndex = elem.isEqualNode(item) ? 0 : -1;\n      item.tabIndex = nonTabbableTargetIndex;\n    });\n  }\n  /**\n   * @returns {HTMLElement | undefined} the first available item, closest to the top of the menu.\n   */\n  getFirstAvailableItem() {\n    const items = this.items;\n    const itemLength = items.length;\n    let item;\n    let i = 0;\n    while (!item && i < itemLength) {\n      if (!items[i].disabled && !items[i].hidden) {\n        item = items[i];\n      }\n      i += 1;\n    }\n    return item;\n  }\n  /**\n   * Retrieves a list of selected items in this menu.\n   * @param {string|HTMLElement} [menuGroup] a string representing an ID, or an IdsMenuGroup\n   * directly, that optionally limits results to within a specified menu group.\n   * @returns {Array<HTMLElement>} list of selected menu items\n   */\n  getSelectedItems(menuGroup) {\n    const group = (0,_ids_menu_attributes__WEBPACK_IMPORTED_MODULE_3__.isValidGroup)(menuGroup, this);\n    return this.items.filter((item) => {\n      if (group) {\n        return item.selected && item.group.isEqualNode(group);\n      }\n      return item.selected;\n    });\n  }\n  /**\n   * @param {string|HTMLElement} [menuGroup] a string representing an ID, or an IdsMenuGroup\n   * directly, that optionally limits results to within a specified menu group.\n   * @returns {Array<any>} list of the values contained by selected menu items\n   */\n  getSelectedValues(menuGroup) {\n    return this.getSelectedItems(menuGroup).map((item) => item.value);\n  }\n  /**\n   * Selects menu items containing the value(s) provided\n   * @param {Array<any>|string} values array|string of menu item value(s)\n   * @param {string|HTMLElement} [menuGroup] a string representing an ID, or an IdsMenuGroup\n   * @returns {void}\n   */\n  setSelectedValues(values, menuGroup) {\n    if (!values?.length)\n      return;\n    const group = (0,_ids_menu_attributes__WEBPACK_IMPORTED_MODULE_3__.isValidGroup)(menuGroup, this);\n    if (!group && menuGroup !== void 0)\n      return;\n    const items = group ? group.items : this.items;\n    const valueArr = Array.isArray(values) ? values : [values];\n    items.forEach((item) => {\n      if (valueArr.indexOf(item.value) === -1) {\n        item.deselect();\n        return;\n      }\n      if (!item.selected) {\n        this.selectItem(item);\n      }\n    });\n  }\n  /**\n   * Selects a menu item contained by this menu.\n   * @param {HTMLElement} menuItem the item to be selected\n   * @returns {void}\n   */\n  selectItem(menuItem) {\n    if (!(0,_ids_menu_attributes__WEBPACK_IMPORTED_MODULE_3__.isUsableItem)(menuItem, this)) {\n      return;\n    }\n    if (menuItem.hasSubmenu) {\n      menuItem.showSubmenu();\n      return;\n    }\n    const group = menuItem.group;\n    if (group.select === \"multiple\" || menuItem.toggleable) {\n      menuItem[menuItem.selected ? \"deselect\" : \"select\"]();\n    } else {\n      menuItem.select();\n    }\n  }\n  /**\n   * Clears any selected items in the menu, or specified group\n   * @param {string|HTMLElement} [menuGroup] a string representing an ID, or an IdsMenuGroup\n   * directly, that optionally limits results to within a specified menu group.\n   * @returns {void}\n   */\n  clearSelectedItems(menuGroup) {\n    const group = (0,_ids_menu_attributes__WEBPACK_IMPORTED_MODULE_3__.isValidGroup)(menuGroup, this);\n    this.items.forEach((item) => {\n      let doDeselect;\n      if (group) {\n        doDeselect = item.selected && item.group.isEqualNode(group);\n      } else {\n        doDeselect = item.selected;\n      }\n      if (doDeselect) {\n        item.deselect();\n      }\n    });\n  }\n  /**\n   * @param {boolean} hasIcons true if the menu contains items displaying icons\n   */\n  hasIcons;\n  /**\n   * Determines if this menu (not including its submenus) contains icons inside its visible menu items\n   * @returns {boolean} true if the menu items contain icons\n   */\n  detectIcons() {\n    this.hasIcons = false;\n    for (let i = 0, item; i < this.items.length; i++) {\n      if (this.hasIcons)\n        break;\n      item = this.items[i];\n      if (!item.hidden && item.icon && item.icon.length)\n        this.hasIcons = true;\n    }\n    return this.hasIcons;\n  }\n  /**\n   * Refreshes the state of alignment of icons inside this menu\n   * @returns {void}\n   */\n  refreshIconAlignment() {\n    this.detectIcons();\n    [...this.items, ...this.headers].forEach((item) => {\n      if (typeof item.decorateForIcon === \"function\")\n        item.decorateForIcon(this.hasIcons);\n    });\n  }\n};\nIdsMenu = __decorateClass([\n  (0,_core_ids_decorators__WEBPACK_IMPORTED_MODULE_1__.customElement)(\"ids-menu\"),\n  (0,_core_ids_decorators__WEBPACK_IMPORTED_MODULE_1__.scss)(_ids_menu_scss__WEBPACK_IMPORTED_MODULE_13__[\"default\"])\n], IdsMenu);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/ids-menu/ids-menu.ts\n");

/***/ }),

/***/ "./src/components/ids-menu/ids-menu.scss":
/*!***********************************************!*\
  !*** ./src/components/ids-menu/ids-menu.scss ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n\n        const styles = `/* Ids Menu Component */ /**\n * Base Styles/Mixins for Ids Menu Component and all subcomponents.\n */\n/* Sass scss styles. Keep Base very small */\n/* Global variables (might want these to become tokens) */\n:host {\n  display: block;\n  contain: content;\n}\n\n.ids-menu {\n  display: block;\n}`;\n        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (styles);\n    //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/ids-menu/ids-menu.scss\n");

/***/ })

}]);